name: HumanEval_95_check_dict_case
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.isEmpty() && !value.isEmpty()) {\n     \
    \           result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc29ni47d.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty() || key.isUpperCase()) {\n      \
    \          result = false;\n                break;\n            }\n          \
    \  if (value.isEmpty() || value.isUpperCase()) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmplxn06s14.java:26: error: cannot find symbol\n            if (key.isEmpty()\
    \ || key.isUpperCase()) {\n                                    ^\n  symbol:  \
    \ method isUpperCase()\n  location: variable key of type String\n/tmp/tmplxn06s14.java:30:\
    \ error: cannot find symbol\n            if (value.isEmpty() || value.isUpperCase())\
    \ {\n                                        ^\n  symbol:   method isUpperCase()\n\
    \  location: variable value of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ohrho78.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv35kx7gx.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpv35kx7gx.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpo4myr0e0.java:21: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpo4myr0e0.java:21: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp008iox3s.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp008iox3s.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key: keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.isEmpty() || key.isEmpty() && !key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1uacu2he.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar >= 'a' && firstChar\
    \ <= 'z') {\n                if (secondChar >= 'a' && secondChar <= 'z') {\n \
    \                   result = true;\n                    break;\n             \
    \   }\n            } else {\n                if (secondChar >= 'A' && secondChar\
    \ <= 'Z') {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp06pwacnx.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        Set<String> keys = dict.keySet();\n    \
    \    for (String key : keys) {\n            if (key.isEmpty()) {\n           \
    \     return false;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (!lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyz4tnw_r.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isUpper = false;\n\
    \        boolean isLower = false;\n        for (String key : keys) {\n       \
    \     if (Character.isUpperCase(key.charAt(0))) {\n                isUpper = true;\n\
    \            } else if (Character.isLowerCase(key.charAt(0))) {\n            \
    \    isLower = true;\n            }\n        }\n        return isUpper && isLower;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsc5jc6_x.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isAllUpperCase = true;\n\
    \        boolean isAllLowerCase = true;\n        for (String key : keys) {\n \
    \           String value = dict.get(key);\n            if (value.length() > 0\
    \ && Character.isUpperCase(value.charAt(0))) {\n                isAllUpperCase\
    \ = false;\n            }\n            if (value.length() > 0 && Character.isLowerCase(value.charAt(0)))\
    \ {\n                isAllLowerCase = false;\n            }\n        }\n     \
    \   return isAllUpperCase && isAllLowerCase;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl3nhpxuv.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllString = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                isAllString = false;\n            }\n        }\n        return\
    \ isAllString;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpynze48dk.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar != secondChar) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsszcud7g.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (dict.get(key).equals(key.toLowerCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if (dict.get(key).equals(key.toUpperCase())) {\n                result\
    \ = true;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp279rvedz.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(key.toLowerCase().equals(value.toLowerCase())) {\n   \
    \                 result = true;\n                } else if(key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeuejwp8p.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgla4ykm5.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.equalsIgnoreCase(value)) {\n                continue;\n \
    \           }\n            result = false;\n            break;\n        }\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvcpsq2d5.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (dict.containsKey(lowerCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (dict.containsKey(upperCase)) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0ahsa2f.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                if (dict.get(key).equals(dict.get(key).toLowerCase())) {\n  \
    \                  result = true;\n                } else {\n                \
    \    result = false;\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprowu2ibx.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                if (key.isEmpty()\
    \ || key.isUpperCase()) {\n                    result = true;\n              \
    \  } else {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpmr3r4y82.java:24: error: cannot find symbol\n                if\
    \ (key.isEmpty() || key.isUpperCase()) {\n                                   \
    \     ^\n  symbol:   method isUpperCase()\n  location: variable key of type String\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7jovtfkk.java:22: error: cannot find symbol\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                   ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp7jovtfkk.java:22: error: cannot\
    \ find symbol\n            if(!key.isUpperCase() && !key.isLowerCase()) {\n  \
    \                                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        } else {\n            Set<String> keys = dict.keySet();\n\
    \            Set<String> keySet = keys.stream().map(String::toLowerCase).collect(Collectors.toSet());\n\
    \            Set<String> keySet2 = keys.stream().map(String::toUpperCase).collect(Collectors.toSet());\n\
    \            result = keySet.equals(keySet2);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3nip24aj.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (lowerCase.equals(upperCase)) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpafuyqbcz.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpeihku46c.java:21: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpeihku46c.java:21: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (lowerCase.equals(upperCase)) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuw49v4oi.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(key.toLowerCase().equals(value.toLowerCase())) {\n           \
    \     continue;\n            }\n            if(key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9gsodwud.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        for (String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return result;\n            }\n            char first = key.charAt(0);\n\
    \            char last = value.charAt(value.length() - 1);\n            if (first\
    \ >= 'a' && first <= 'z') {\n                if (last >= 'a' && last <= 'z') {\n\
    \                    result = true;\n                }\n            } else if\
    \ (first >= 'A' && first <= 'Z') {\n                if (last >= 'A' && last <=\
    \ 'Z') {\n                    result = true;\n                }\n            }\
    \ else {\n                result = false;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyzrftiyv.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return false;\n        }\n        Set<String> keys = dict.keySet();\n  \
    \      for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return false;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                return false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1xvseflf.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (dict.get(key) != null && !dict.get(key).equals(key))\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox8l1unn.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                String lowerCaseKey = key.toLowerCase();\n           \
    \     String upperCaseKey = key.toUpperCase();\n                if (lowerCaseKey.equals(upperCaseKey))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2nzl2et0.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4e3scq0l.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp93q2vftk.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty()) {\n                result = true;\n\
    \                break;\n            }\n            if (value.isEmpty()) {\n \
    \               result = true;\n                break;\n            }\n      \
    \      if (key.equals(value)) {\n                result = true;\n            \
    \    break;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj6_ajtg6.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return false;\n            }\n            char firstChar\
    \ = key.charAt(0);\n            char secondChar = value.charAt(0);\n         \
    \   if (firstChar != secondChar) {\n                return false;\n          \
    \  }\n        }\n        return true;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfs5sevtv.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcabvi8s4.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzszltpt9.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && !value.isEmpty()) {\n                if(!key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                if(!key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnumo3re8.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                result = false;\n                break;\n          \
    \  }\n            else if (value.length() == 1) {\n                char firstChar\
    \ = value.charAt(0);\n                if (Character.isLowerCase(firstChar)) {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                else if (Character.isUpperCase(firstChar)) {\n       \
    \             result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyp5wc71o.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjf481cbs.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllKeysString = true;\n        boolean isAllKeysUpperCase\
    \ = true;\n        for (String key : dict.keySet()) {\n            isAllKeysString\
    \ = isAllKeysString && key.equals(key.toLowerCase());\n            isAllKeysUpperCase\
    \ = isAllKeysUpperCase && key.equals(key.toUpperCase());\n        }\n        return\
    \ isAllKeysString && isAllKeysUpperCase;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpstbjwzze.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkza7jko6.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            if (dict.get(key) != null && !dict.get(key).equals(key))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp12q5i9e1.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            if (key.equalsIgnoreCase(key)) {\n                return true;\n\
    \            }\n        }\n        return false;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3gcp_qe.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                if (dict.get(key).equalsIgnoreCase(key)) {\n                \
    \    result = true;\n                } else {\n                    result = false;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73vn0cxt.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty()) {\n                result = false;\n         \
    \       break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpbyiy2a87.java:131: error: ')' expected\n            if (key\n \
    \                  ^\n/tmp/tmpbyiy2a87.java:132: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpbyiy2a87.java:133: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        } else {\n            Set<String> keys = dict.keySet();\n\
    \            Set<String> keysLower = keys.stream().map(String::toLowerCase).collect(Collectors.toSet());\n\
    \            Set<String> keysUpper = keys.stream().map(String::toUpperCase).collect(Collectors.toSet());\n\
    \            result = keysLower.containsAll(keys) && keysUpper.containsAll(keys);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4jp105p.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (lowerCase.equals(upperCase)) {\n     \
    \           continue;\n            }\n            return false;\n        }\n \
    \       return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99fq3vrs.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllUpperCase\
    \ = true;\n        boolean isAllLowerCase = true;\n        for (String key : keys)\
    \ {\n            if (dict.get(key).equals(dict.get(key).toLowerCase())) {\n  \
    \              isAllLowerCase = false;\n            }\n            if (dict.get(key).equals(dict.get(key).toUpperCase()))\
    \ {\n                isAllUpperCase = false;\n            }\n        }\n     \
    \   return isAllUpperCase && isAllLowerCase;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes4egxv1.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllUpperCase\
    \ = true;\n        boolean isAllLowerCase = true;\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                isAllUpperCase = false;\n            }\n           \
    \ if (value.length() < 1) {\n                isAllLowerCase = false;\n       \
    \     }\n        }\n        return isAllUpperCase && isAllLowerCase;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7p3spgrw.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz9hcna24.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpz9hcna24.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() == 0) {\n                return result;\n    \
    \        }\n            if (value.length() == 1) {\n                if (value.charAt(0)\
    \ == value.charAt(0)) {\n                    result = false;\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd36xuafo.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && !key.isEmpty() && !key.isEmpty() && value != null\
    \ && !value.isEmpty()) {\n                if (key.isEmpty() || key.isEmpty())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                else {\n                    result = true;\n    \
    \            }\n            }\n        }\n        return result;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6_24s2ry.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isUpperCase = true;\n\
    \        for (String key : keys) {\n            if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                isUpperCase = true;\n            } else {\n             \
    \   isUpperCase = false;\n            }\n        }\n        if (isUpperCase) {\n\
    \            return true;\n        } else {\n            isUpperCase = true;\n\
    \            for (String key : keys) {\n                if (Character.isLowerCase(key.charAt(0)))\
    \ {\n                    isUpperCase = false;\n                } else {\n    \
    \                isUpperCase = true;\n                }\n            }\n     \
    \       return isUpperCase;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_emsmvlv.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            String lowerCase = key.toLowerCase();\n          \
    \  String upperCase = key.toUpperCase();\n            if (!value.equals(lowerCase)\
    \ && !value.equals(upperCase)) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6zttjt68.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() > 0) {\n        \
    \    for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyfebkb3t.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                result = false;\n                break;\n          \
    \  }\n            else if (value.length() == 1) {\n                char first\
    \ = value.charAt(0);\n                if (Character.isLowerCase(first)) {\n  \
    \                  result = true;\n                    break;\n              \
    \  }\n                else if (Character.isUpperCase(first)) {\n             \
    \       result = false;\n                    break;\n                }\n     \
    \       }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpamhofp1x.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar >= 'A' && firstChar\
    \ <= 'Z') {\n                if (secondChar >= 'a' && secondChar <= 'z') {\n \
    \                   result = true;\n                    break;\n             \
    \   }\n            } else {\n                if (secondChar >= 'a' && secondChar\
    \ <= 'z') {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyhas_c3t.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(key.toLowerCase().equals(value.toLowerCase())) {\n   \
    \                 result = true;\n                } else {\n                 \
    \   result = false;\n                    break;\n                }\n         \
    \   } else {\n                result = false;\n                break;\n      \
    \      }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb4h19k8q.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = value.toLowerCase();\n\
    \            if (lowerCase.equals(upperCase)) {\n                continue;\n \
    \           }\n            result = false;\n            break;\n        }\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdlo0mz97.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean upperCase = true;\n        boolean lowerCase\
    \ = true;\n        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                upperCase = false;\n \
    \           }\n            if (value.length() > 1) {\n                lowerCase\
    \ = false;\n            }\n        }\n        return upperCase && lowerCase;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0dmf22pi.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n            else if (value.length() == 1)\
    \ {\n                char first = value.charAt(0);\n                char upper\
    \ = Character.toUpperCase(first);\n                if (first != upper) {\n   \
    \                 result = false;\n                    break;\n              \
    \  }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb66hembu.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() > 0) {\n        \
    \    for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                String value = dict.get(key);\n                if (value.isEmpty())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                String lowerCase = key.toLowerCase();\n         \
    \       String upperCase = key.toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpig8t_eoc.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        } else {\n            Set<String> keys = dict.keySet();\n\
    \            for (String key : keys) {\n                String value = dict.get(key);\n\
    \                if (key.isEmpty() || value.isEmpty()) {\n                   \
    \ result = false;\n                    break;\n                }\n           \
    \     char firstChar = key.charAt(0);\n                char lastChar = key.charAt(key.length()\
    \ - 1);\n                if (firstChar >= 'A' && firstChar <= 'Z') {\n       \
    \             if (lastChar >= 'A' && lastChar <= 'Z') {\n                    \
    \    result = true;\n                    }\n                } else {\n       \
    \             if (lastChar >= 'a' && lastChar <= 'z') {\n                    \
    \    result = true;\n                    }\n                }\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgupwvt8w.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                if(!value.toLowerCase().equals(value.toUpperCase())) {\n    \
    \                result = false;\n                    break;\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwimfqdpm.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            if (key.isEmpty()) {\n                return false;\n           \
    \ }\n        }\n        Set<String> keysUp = dict.keySet();\n        for (String\
    \ key : keysUp) {\n            if (!key.toUpperCase().equals(key)) {\n       \
    \         return false;\n            }\n        }\n        return true;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9sxhtv4b.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isDictCase = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && key.isEmpty() && !value.isEmpty())\
    \ {\n                isDictCase = false;\n                break;\n           \
    \ }\n        }\n        return isDictCase;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7p2rbrdc.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (!value.equals(lowerCase) && !value.equals(upperCase)) {\n     \
    \           result = false;\n                break;\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprexyc7pd.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isUpperCase = true;\n\
    \        for (String key : keys) {\n            if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                isUpperCase = false;\n                break;\n          \
    \  }\n        }\n        if (isUpperCase) {\n            return true;\n      \
    \  }\n        boolean isLowerCase = true;\n        for (String key : keys) {\n\
    \            if (Character.isLowerCase(key.charAt(0))) {\n                isLowerCase\
    \ = false;\n                break;\n            }\n        }\n        return isLowerCase;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9furz5ug.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk3c7c5mh.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.isEmpty()) {\n\
    \            return false;\n        }\n        boolean isUpperCase = true;\n \
    \       boolean isLowerCase = true;\n        for (String key : keys) {\n     \
    \       if (dict.get(key).length() > 1) {\n                isUpperCase = false;\n\
    \            }\n            if (dict.get(key).length() < 1) {\n              \
    \  isLowerCase = false;\n            }\n        }\n        return isUpperCase\
    \ && isLowerCase;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsbaf_0xv.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                if (dict.get(key).equals(dict.get(key).toLowerCase())) {\n  \
    \                  result = true;\n                } else {\n                \
    \    result = false;\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpubz4esya.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpteqnejro.java:21: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpteqnejro.java:21: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.equalsIgnoreCase(value))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwuhpj01k.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjndl1m3x.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                result = false;\n                break;\n          \
    \  }\n            if (value.length() == 1) {\n                char c = value.charAt(0);\n\
    \                if (c >= 'A' && c <= 'Z') {\n                    result = true;\n\
    \                    break;\n                }\n                if (c >= 'a' &&\
    \ c <= 'z') {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpueeg5p58.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            char firstChar = key.charAt(0);\n\
    \            char secondChar = value.charAt(0);\n            if (firstChar !=\
    \ secondChar) {\n                result = false;\n                break;\n   \
    \         }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s0qyi6q.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                String lowerCase = key.toLowerCase();\n                String\
    \ upperCase = key.toUpperCase();\n                if (dict.get(key).equals(lowerCase)\
    \ || dict.get(key).equals(upperCase)) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpazpjtq8t.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(key.toLowerCase().equals(value.toLowerCase())) {\n   \
    \                 result = true;\n                } else {\n                 \
    \   result = false;\n                    break;\n                }\n         \
    \   } else {\n                result = false;\n                break;\n      \
    \      }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyc3liqnw.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerKey = key.toLowerCase();\n\
    \            String upperKey = key.toUpperCase();\n            if (dict.get(key).equals(lowerKey))\
    \ {\n                result = true;\n            } else if (dict.get(key).equals(upperKey))\
    \ {\n                result = true;\n            } else {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjnzb8r5f.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isUpper = true;\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                isUpper = false;\n   \
    \             break;\n            }\n        }\n        if (isUpper) {\n     \
    \       return true;\n        }\n        for (String key : keys) {\n         \
    \   String value = dict.get(key);\n            if (value.length() > 1) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdq6dg_sq.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                result = true;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyy0s4t87.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isUpper = false;\n\
    \        boolean isLower = false;\n        for (String key : keys) {\n       \
    \     if (Character.isUpperCase(key.charAt(0))) {\n                isUpper = true;\n\
    \            } else if (Character.isLowerCase(key.charAt(0))) {\n            \
    \    isLower = true;\n            }\n        }\n        return isUpper && isLower;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh6okbg2.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar >= 'A' && firstChar <= 'Z') {\n                if (secondChar\
    \ >= 'a' && secondChar <= 'z') {\n                    result = true;\n       \
    \             break;\n                }\n            } else if (firstChar >= 'a'\
    \ && firstChar <= 'z') {\n                if (secondChar >= 'A' && secondChar\
    \ <= 'Z') {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3k7ffh3x.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean upperCase = false;\n\
    \        boolean lowerCase = false;\n        for (String key : keys) {\n     \
    \       String value = dict.get(key);\n            if (value.length() > 0) {\n\
    \                upperCase = upperCase || value.toUpperCase().equals(value);\n\
    \                lowerCase = lowerCase || value.toLowerCase().equals(value);\n\
    \            }\n        }\n        return upperCase && lowerCase;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmig10cs.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.equalsIgnoreCase(value))\
    \ {\n                continue;\n            } else {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz2vdz5ke.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllUpperCase = true;\n        boolean isAllLowerCase =\
    \ true;\n        for (String key : dict.keySet()) {\n            isAllUpperCase\
    \ = isAllUpperCase && Character.isUpperCase(key.charAt(0));\n            isAllLowerCase\
    \ = isAllLowerCase && Character.isLowerCase(key.charAt(0));\n        }\n     \
    \   return isAllUpperCase && isAllLowerCase;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvtkiwef4.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbp2l9px5.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                String value = dict.get(key);\n\
    \                if (key.isEmpty() || value.isEmpty()) {\n                   \
    \ return false;\n                }\n                if (key.isEmpty() || value.isEmpty())\
    \ {\n                    return false;\n                }\n                if\
    \ (key.isEmpty()) {\n                    return true;\n                }\n   \
    \             if (value.isEmpty()) {\n                    return true;\n     \
    \           }\n                if (key.isEmpty().equals(value)) {\n          \
    \          return true;\n                }\n                if (key.isEmpty().compareTo(value)\
    \ == 0) {\n                    return true;\n                }\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjhbmythl.java:35: error: boolean cannot be dereferenced\n     \
    \           if (key.isEmpty().equals(value)) {\n                             \
    \    ^\n/tmp/tmpjhbmythl.java:38: error: boolean cannot be dereferenced\n    \
    \            if (key.isEmpty().compareTo(value) == 0) {\n                    \
    \             ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (lowerCase.equals(upperCase)) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw6ft9day.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (!lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3qshhbw.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isString = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                isString = false;\n            }\n        }\n        return isString;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpws55pupt.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                if (value.toLowerCase().equals(key))\
    \ {\n                    result = true;\n                } else if (value.toUpperCase().equals(key))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyp8oljja.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict != null && !dict.isEmpty())\
    \ {\n            Set<String> keys = dict.keySet();\n            if (keys != null\
    \ && !keys.isEmpty()) {\n                for (String key : keys) {\n         \
    \           if (key.isEmpty() || key.isUpperCase()) {\n                      \
    \  result = true;\n                        break;\n                    } else\
    \ if (key.isLowerCase()) {\n                        result = false;\n        \
    \                break;\n                    }\n                }\n          \
    \  }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ludioek.java:24: error: cannot find symbol\n                 \
    \   if (key.isEmpty() || key.isUpperCase()) {\n                              \
    \              ^\n  symbol:   method isUpperCase()\n  location: variable key of\
    \ type String\n/tmp/tmp8ludioek.java:27: error: cannot find symbol\n         \
    \           } else if (key.isLowerCase()) {\n                                \
    \  ^\n  symbol:   method isLowerCase()\n  location: variable key of type String\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            if (key.isEmpty()) {\n          \
    \      result = false;\n                break;\n            }\n            if\
    \ (key.isEmpty() || key.isEmpty()) {\n                result = false;\n      \
    \          break;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh2vnsqi.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (lowerCase.equals(upperCase)) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11vmd6bw.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return false;\n        }\n        for (String key : dict.keySet()) {\n \
    \           String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return false;\n            }\n            String lowerCaseKey\
    \ = key.toLowerCase();\n            String upperCaseKey = key.toUpperCase();\n\
    \            if (lowerCaseKey.equals(upperCaseKey)) {\n                continue;\n\
    \            }\n            result = false;\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0j8pxhbw.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            boolean isUpperCase = Character.isUpperCase(key.charAt(0));\n\
    \            boolean isLowerCase = Character.isLowerCase(key.charAt(0));\n   \
    \         if (isUpperCase) {\n                if (!isLowerCase) {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                if (!isUpperCase) {\n                   \
    \ result = false;\n                    break;\n                }\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkqvgmowp.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isLowerCase())\
    \ {\n                    result = true;\n                    break;\n        \
    \        } else if (key.isUpperCase()) {\n                    result = true;\n\
    \                    break;\n                } else {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxnegsty1.java:22: error: cannot find symbol\n                if\
    \ (key.isLowerCase()) {\n                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpxnegsty1.java:25: error: cannot\
    \ find symbol\n                } else if (key.isUpperCase()) {\n             \
    \                 ^\n  symbol:   method isUpperCase()\n  location: variable key\
    \ of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyoaq38jt.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq13ng8yy.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \                 break;\n                }\n            } else {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_w9ac_f9.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                result = false;\n                break;\n          \
    \  }\n            else if (value.length() == 1) {\n                char first\
    \ = value.charAt(0);\n                if (Character.isUpperCase(first)) {\n  \
    \                  result = true;\n                    break;\n              \
    \  }\n                else {\n                    result = false;\n          \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2lf8t7_2.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar != secondChar) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvtn2z3n_.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar != secondChar) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8q4tohvj.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n            if (value.length() == 1) {\n \
    \               char firstChar = value.charAt(0);\n                if (firstChar\
    \ >= 'A' && firstChar <= 'Z') {\n                    result = false;\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8mhdpvvk.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n       \
    \ boolean isAllStringsUpper = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n\
    \        return isAllStrings && isAllStringsUpper;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptkh3tjeq.java:20: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isUpperCase()\n  location: variable key of type String\n/tmp/tmptkh3tjeq.java:21:\
    \ error: cannot find symbol\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isLowerCase());\n                                  \
    \                                                    ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict == null || dict.size() == 0) {\n            return false;\n\
    \        }\n        for (String key : dict.keySet()) {\n            if (key.isEmpty()\
    \ || key.isUpperCase()) {\n                return true;\n            }\n     \
    \   }\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwt3bvcr0.java:23: error: cannot find symbol\n            if (key.isEmpty()\
    \ || key.isUpperCase()) {\n                                    ^\n  symbol:  \
    \ method isUpperCase()\n  location: variable key of type String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty()) {\n                return result;\n          \
    \  }\n            if (key.isEmpty()) {\n                return result;\n     \
    \       }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp2vhzskhv.java:156: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ldyp6hd.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        for (String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr0pmyrf5.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 0 && value.length() < 4) {\n               \
    \ result = false;\n                break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpibi4l5nw.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char secondChar = value.charAt(0);\n           \
    \ if (firstChar != secondChar) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pdbrlii.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isUpper = true;\n\
    \        boolean isLower = true;\n        for (String key : keys) {\n        \
    \    if (isUpper) {\n                isUpper = key.toUpperCase().equals(key);\n\
    \            } else {\n                isLower = key.toLowerCase().equals(key);\n\
    \            }\n        }\n        return isUpper && isLower;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ijn73h7.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isTrue = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                isTrue = false;\n            }\n        }\n        return isTrue;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn_gbmbm3.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx2twsysg.java:22: error: cannot find symbol\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                   ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpx2twsysg.java:22: error: cannot\
    \ find symbol\n            if(!key.isUpperCase() && !key.isLowerCase()) {\n  \
    \                                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 0 && value.equalsIgnoreCase(key)) {\n                result = true;\n    \
    \            break;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeql_ndlz.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keySet = dict.keySet();\n\
    \        for (String key : keySet) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                key = value.toLowerCase();\n\
    \            } else if (value.isEmpty()) {\n                value = key.toLowerCase();\n\
    \            }\n            if (!key.equals(value)) {\n                result\
    \ = false;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00bse48u.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict == null || dict.size() == 0) {\n            return false;\n\
    \        }\n        for (String key : dict.keySet()) {\n            String value\
    \ = dict.get(key);\n            if (key != null && value != null && key.length()\
    \ > 0 && value.length() > 0) {\n                if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    return true;\n                }\n                if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfnosqsei.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzatmzqgr.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpzatmzqgr.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n            }\n            else if (key.isEmpty() && value.isEmpty())\
    \ {\n                result = true;\n            }\n            else if (key.isEmpty())\
    \ {\n                result = false;\n            }\n            else if (value.isEmpty())\
    \ {\n                result = true;\n            }\n            else if (key.isEmpty()\
    \ && !value.isEmpty()) {\n                result = true;\n            }\n    \
    \        else if (value.isEmpty() && !key.isEmpty()) {\n                result\
    \ = true;\n            }\n            else {\n                result = true;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpipwkjqsx.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                if(!value.toLowerCase().equals(value.toUpperCase())) {\n    \
    \                result = false;\n                    break;\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo131bh78.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerKey = key.toLowerCase();\n\
    \            String upperKey = key.toUpperCase();\n            if (dict.get(key).equals(lowerKey))\
    \ {\n                result = true;\n                break;\n            } else\
    \ if (dict.get(key).equals(upperKey)) {\n                result = true;\n    \
    \            break;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl986cwfq.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if(!key.isEmpty()\
    \ && key.toLowerCase().equals(value.toLowerCase())) {\n                result\
    \ = true;\n                break;\n            }\n            if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                result\
    \ = true;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxzdus9m.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0)\n            return false;\n        Set<String>\
    \ keys = dict.keySet();\n        for (String key : keys) {\n            if (key.isEmpty())\n\
    \                return false;\n        }\n        Set<String> keysUpper = dict.keySet();\n\
    \        for (String key : keysUpper) {\n            if (!key.toUpperCase().equals(key))\n\
    \                return false;\n        }\n        return true;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptczlhbk4.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1nr9w8by.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                String value = dict.get(key);\n\
    \                if (key.isEmpty() || value.isEmpty()) {\n                   \
    \ result = true;\n                    break;\n                }\n            \
    \    if (key.isEmpty() && !value.isEmpty()) {\n                    result = true;\n\
    \                    break;\n                }\n                if (!key.isEmpty()\
    \ && value.isEmpty()) {\n                    result = true;\n                \
    \    break;\n                }\n                if (!key.isEmpty() && !value.isEmpty())\
    \ {\n                    result = key.toLowerCase().equals(value.toLowerCase());\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmiwbjba.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7vlmuzu5.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                String lowerCaseKey = key.toLowerCase();\n           \
    \     String upperCaseKey = key.toUpperCase();\n                if (dict.get(lowerCaseKey).equals(dict.get(upperCaseKey)))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9t60may.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value != null\
    \ && !value.isEmpty()) {\n                if (key.isEmpty() || key.isUpperCase())\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                }\n            }\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdqo1xa6h.java:23: error: cannot find symbol\n                if\
    \ (key.isEmpty() || key.isUpperCase()) {\n                                   \
    \     ^\n  symbol:   method isUpperCase()\n  location: variable key of type String\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty() || value.isEmpty()) {\n        \
    \        result = false;\n                break;\n            }\n            if\
    \ (key.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoyy0jyhh.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            boolean isUpper = Character.isUpperCase(value.charAt(0));\n     \
    \       boolean isLower = Character.isLowerCase(value.charAt(0));\n          \
    \  if (isUpper != isLower) {\n                result = false;\n              \
    \  break;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4u_ysz1m.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).isEmpty()) {\n  \
    \              if (dict.get(key).equals(key.toLowerCase())) {\n              \
    \      result = true;\n                } else {\n                    result =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_2lh4kmo.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key.isEmpty()) {\n                return result;\n           \
    \ }\n            if (key.isEmpty()) {\n                return result;\n      \
    \      }\n            if (key.isEmpty()) {\n                return result;\n \
    \           }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return result;\n\
    \            }\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmph7ox6l6e.java:156: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.isEmpty())\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if (value.isEmpty()) {\n                result = true;\n         \
    \       break;\n            }\n            char firstChar = key.charAt(0);\n \
    \           char secondChar = value.charAt(0);\n            if (firstChar != secondChar)\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_pvy8g5g.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4j2x1ocf.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.equalsIgnoreCase(value))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmg2_v4ag.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.equalsIgnoreCase(value)) {\n                continue;\n \
    \           }\n            if (value.equalsIgnoreCase(key)) {\n              \
    \  continue;\n            }\n            result = false;\n            break;\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxmg3ahe.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (dict.containsKey(lowerCaseKey))\
    \ {\n                if (dict.get(lowerCaseKey).equals(upperCaseKey)) {\n    \
    \                result = true;\n                    break;\n                }\n\
    \            }\n            if (dict.containsKey(upperCaseKey)) {\n          \
    \      if (dict.get(upperCaseKey).equals(lowerCaseKey)) {\n                  \
    \  result = true;\n                    break;\n                }\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpau43tedm.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       boolean upperCase = true;\n        boolean lowerCase = true;\n       \
    \ for (String key : keys) {\n            String value = dict.get(key);\n     \
    \       if (value.length() == 0) {\n                return result;\n         \
    \   }\n            if (value.length() > 1) {\n                return result;\n\
    \            }\n            if (value.length() == 1) {\n                char firstChar\
    \ = value.charAt(0);\n                if (firstChar >= 'a' && firstChar <= 'z')\
    \ {\n                    upperCase = false;\n                } else if (firstChar\
    \ >= 'A' && firstChar <= 'Z') {\n                    upperCase = false;\n    \
    \            } else {\n                    lowerCase = false;\n              \
    \  }\n            }\n        }\n        result = upperCase && lowerCase;\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph2nfjl5n.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n       \
    \ boolean isAllUpperCase = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n\
    \        return isAllStrings && isAllUpperCase;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2cgo8d31.java:20: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isLowerCase()\n  location: variable key of type String\n/tmp/tmp2cgo8d31.java:21:\
    \ error: cannot find symbol\n        boolean isAllUpperCase = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n                                  \
    \                                                 ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmoy_uo41.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            if (dict.get(key).equals(dict.get(key).toLowerCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if (dict.get(key).equals(dict.get(key).toUpperCase())) {\n       \
    \         result = true;\n                break;\n            }\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvmcdhs5f.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isUpperCase =\
    \ Character.isUpperCase(value.charAt(0));\n            boolean isLowerCase = Character.isLowerCase(value.charAt(0));\n\
    \            boolean isStringInLowerCase = value.equalsIgnoreCase(\"apple\");\n\
    \            boolean isStringInUpperCase = value.equalsIgnoreCase(\"banana\");\n\
    \            boolean isStringInBothCases = isStringInLowerCase && isStringInUpperCase;\n\
    \            boolean isStringInBothCasesButNotEqual = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual2 = value.equalsIgnoreCase(\"\
    banana\");\n            boolean isStringInBothCasesButNotEqual3 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual4 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual5 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual6 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual7 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual8 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual9 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual10 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual11 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual12 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual13 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual14 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual15 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual16 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual17 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual18 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean isStringInBothCasesButNotEqual19 = value.equalsIgnoreCase(\"\
    apple\");\n            boolean \n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprlb7qzmt.java:46: error: not a statement\n            boolean \n\
    \            ^\n/tmp/tmprlb7qzmt.java:46: error: ';' expected\n            boolean\
    \ \n                   ^\n/tmp/tmprlb7qzmt.java:48: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllString =\
    \ true;\n        for (String key : keys) {\n            isAllString = isAllString\
    \ && (key.equalsIgnoreCase(dict.get(key)));\n        }\n        return isAllString;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3hxe7bt7.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isLowerCase())\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n                else if (key.isUpperCase()) {\n                  \
    \  result = true;\n                    break;\n                }\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprdf4g8b2.java:22: error: cannot find symbol\n                if\
    \ (key.isLowerCase()) {\n                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmprdf4g8b2.java:26: error: cannot\
    \ find symbol\n                else if (key.isUpperCase()) {\n               \
    \             ^\n  symbol:   method isUpperCase()\n  location: variable key of\
    \ type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                result = false;\n\
    \            }\n            if (value.isEmpty()) {\n                result = false;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpirfh0xp_.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                String lowerCase = dict.get(key).toLowerCase();\n           \
    \     String upperCase = dict.get(key).toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                }\n            }\n        }\n    \
    \    return result;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfh2q2qyw.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           if (key.isEmpty()) {\n                return false;\n            }\n\
    \        }\n        Set<String> keySet = dict.keySet();\n        for (String key\
    \ : keySet) {\n            String lowerCase = key.toLowerCase();\n           \
    \ String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            return false;\n   \
    \     }\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkiv21edw.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            if (key.isEmpty()) {\n        \
    \        return result;\n            }\n        }\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isUpperCase())\
    \ {\n                if (!value.isEmpty()) {\n                    result = false;\n\
    \                }\n            } else {\n                if (!value.isEmpty())\
    \ {\n                    result = false;\n                }\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnt6sblac.java:34: error: cannot find symbol\n            if (key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean upperCase = false;\n        boolean lowerCase\
    \ = false;\n        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() == 0) return false;\n            if (value.length()\
    \ > 1 && value.charAt(0) == value.charAt(value.length() - 1)) {\n            \
    \    upperCase = true;\n            } else {\n                lowerCase = true;\n\
    \            }\n        }\n        return upperCase && lowerCase;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplk08ogsz.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphg7o3hat.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmphg7o3hat.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            if (key.isEmpty()) {\n                return false;\n           \
    \ }\n            String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (lowerCase.equals(upperCase)) {\n     \
    \           continue;\n            }\n            return false;\n        }\n \
    \       return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptqvcdvbt.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                char firstChar = value.charAt(0);\n                char lastChar\
    \ = value.charAt(value.length()-1);\n                if(firstChar >= 'A' && firstChar\
    \ <= 'Z') {\n                    if(lastChar >= 'A' && lastChar <= 'Z') {\n  \
    \                      result = true;\n                    } else {\n        \
    \                result = false;\n                    }\n                } else\
    \ {\n                    result = false;\n                }\n            } else\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpty93chw6.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return false;\n\
    \            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9q2yf04s.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            if (!(key instanceof String)) {\n                return false;\n\
    \            }\n            String lowerCase = key.toLowerCase();\n          \
    \  String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            return false;\n   \
    \     }\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6dch88bi.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key: keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpdu49lrrl.java:23: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpdu49lrrl.java:23: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpod8by4yd.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).isEmpty()) {\n  \
    \              String lowerCase = dict.get(key).toLowerCase();\n             \
    \   String upperCase = dict.get(key).toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp46x5llw5.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (dict.get(key).equals(lowerCase)\
    \ || dict.get(key).equals(upperCase)) {\n                continue;\n         \
    \   }\n            result = false;\n            break;\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_3v960_.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n       \
    \ return isAllStrings;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw4wf03f5.java:20: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isUpperCase()\n  location: variable key of type String\n1\
    \ error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        if (dict.size() == 0) {\n            return false;\n        }\n \
    \       Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return false;\n            }\n            if (key.toLowerCase().equals(key))\
    \ {\n                return true;\n            }\n            if (key.toUpperCase().equals(key))\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_negzzv.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     for (String key : dict.keySet()) {\n                if (key.isEmpty()) {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                String lowerCaseKey = key.toLowerCase();\n           \
    \     String upperCaseKey = key.toUpperCase();\n                if (lowerCaseKey.equals(upperCaseKey))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprcr58_sf.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keySet = dict.keySet();\n        boolean isAllStrings\
    \ = keySet.isEmpty() || keySet.size() == dict.size();\n        boolean isAllStringsUpper\
    \ = keySet.isEmpty() || keySet.size() == dict.size() && dict.keySet().stream().map(String::toUpperCase).allMatch(s\
    \ -> dict.containsKey(s));\n        return isAllStrings && isAllStringsUpper;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kvd_6em.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (value.toLowerCase().equals(value)) {\n                result\
    \ = true;\n                break;\n            }\n            if (value.toUpperCase().equals(value))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_k8zrtpc.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n       \
    \ boolean isAllStringsUpper = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n\
    \        return isAllStrings && isAllStringsUpper;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7syw9tl.java:20: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isLowerCase()\n  location: variable key of type String\n/tmp/tmpw7syw9tl.java:21:\
    \ error: cannot find symbol\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n                                  \
    \                                                    ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isStringInLowerCase\
    \ = true;\n        boolean isStringInUpperCase = true;\n        for (String key\
    \ : keys) {\n            String value = dict.get(key);\n            if (value.toLowerCase().equals(value))\
    \ {\n                isStringInLowerCase = false;\n            }\n           \
    \ if (value.toUpperCase().equals(value)) {\n                isStringInUpperCase\
    \ = false;\n            }\n        }\n        return isStringInLowerCase && isStringInUpperCase;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4w2njvn.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.equalsIgnoreCase(value))\
    \ {\n                continue;\n            }\n            if (value.length()\
    \ > value.length()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoc895afk.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty()) {\n                result = true;\n          \
    \  } else if (key.isEmpty()) {\n                result = false;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bk_h3sc.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCaseKey\
    \ = key.toLowerCase();\n            String upperCaseKey = key.toUpperCase();\n\
    \            if (lowerCaseKey.equals(upperCaseKey)) {\n                result\
    \ = true;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ibvizxp.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        for (String key : dict.keySet()) {\n   \
    \         String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                return false;\n            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplxnpnlmz.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllUpperCase\
    \ = true;\n        boolean isAllLowerCase = true;\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                isAllUpperCase = false;\n            }\n           \
    \ if (value.length() < 1) {\n                isAllLowerCase = false;\n       \
    \     }\n        }\n        return isAllUpperCase && isAllLowerCase;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf2o_1kan.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       boolean upperCase = false;\n        boolean lowerCase = false;\n     \
    \   for (String key : keys) {\n            String value = dict.get(key);\n   \
    \         if (value.length() > 0) {\n                upperCase = value.equalsIgnoreCase(key.toUpperCase());\n\
    \                lowerCase = value.equalsIgnoreCase(key.toLowerCase());\n    \
    \        }\n        }\n        if (upperCase == lowerCase) {\n            return\
    \ result;\n        }\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpre_lazqe.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \            }\n            else if (key.toLowerCase().equals(key)) {\n      \
    \          result = true;\n            }\n            else if (key.toUpperCase().equals(key))\
    \ {\n                result = true;\n            }\n            else {\n     \
    \           result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzfsppi4m.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (!dict.containsKey(lowerCaseKey))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (!dict.containsKey(upperCaseKey)) {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8dbltou8.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                if(!value.toLowerCase().equals(value.toUpperCase())) {\n    \
    \                result = false;\n                    break;\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpogltsw7t.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isUpper = false;\n        boolean isLower = false;\n    \
    \    for (String key : dict.keySet()) {\n            if (key.isUpperCase()) {\n\
    \                isUpper = true;\n            } else if (key.isLowerCase()) {\n\
    \                isLower = true;\n            }\n        }\n        return isUpper\
    \ && isLower;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpa6x5up9g.java:22: error: cannot find symbol\n            if (key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n/tmp/tmpa6x5up9g.java:24: error: cannot find symbol\n  \
    \          } else if (key.isLowerCase()) {\n                          ^\n  symbol:\
    \   method isLowerCase()\n  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 0) {\n                boolean isUpper = Character.isUpperCase(value.charAt(0));\n\
    \                boolean isLower = Character.isLowerCase(value.charAt(0));\n \
    \               if (isUpper != isLower) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5vpswp36.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3m1yk5d.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            else if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            else {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpubdxjkqk.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        for (String key : keys) {\n\
    \            if (Character.isLowerCase(key.charAt(0))) {\n                if (!dict.containsKey(key.toLowerCase()))\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                if (!dict.containsKey(key.toUpperCase())) {\n           \
    \         return false;\n                }\n            }\n        }\n       \
    \ return true;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8kwl92xu.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       boolean upperCase = false;\n        boolean lowerCase = false;\n     \
    \   for (String key : keys) {\n            String value = dict.get(key);\n   \
    \         if (value.length() > 0) {\n                upperCase = value.equalsIgnoreCase(String.valueOf(key).toUpperCase());\n\
    \                lowerCase = value.equalsIgnoreCase(String.valueOf(key).toLowerCase());\n\
    \            }\n        }\n        result = upperCase || lowerCase;\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6alc_3em.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        Set<String> keySet = keys.stream().map(String::toLowerCase).collect(Collectors.toSet());\n\
    \        Set<String> keySet2 = keys.stream().map(String::toUpperCase).collect(Collectors.toSet());\n\
    \        return keySet.equals(keySet2);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7egfwp0k.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpllze93ce.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).isEmpty()) {\n  \
    \              String lowerCase = dict.get(key).toLowerCase();\n             \
    \   String upperCase = dict.get(key).toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt5wfa0sf.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe_n36jmn.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpe_n36jmn.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        for (String key : keys) {\n\
    \            String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (dict.containsKey(lowerCase)) {\n     \
    \           if (dict.get(lowerCase).equals(upperCase)) {\n                   \
    \ return true;\n                }\n            }\n            if (dict.containsKey(upperCase))\
    \ {\n                if (dict.get(upperCase).equals(lowerCase)) {\n          \
    \          return true;\n                }\n            }\n        }\n       \
    \ return false;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmaplxuoc.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> dict.get(key).matches(\"[a-z]+\"));\n        boolean\
    \ isAllUpperCase = keys.stream().allMatch(key -> dict.get(key).matches(\"[A-Z]+\"\
    ));\n        return isAllStrings && isAllUpperCase;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1ez0cim.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllStrings = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                isAllStrings = false;\n            }\n        }\n        return\
    \ isAllStrings;\n\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt42ydik_.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb854hw88.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpb854hw88.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(key)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8nuc0jpu.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp10akqgtx.java:22: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp10akqgtx.java:22: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).isEmpty()) {\n  \
    \              String lower = dict.get(key).toLowerCase();\n                String\
    \ upper = dict.get(key).toUpperCase();\n                if (lower != null && upper\
    \ != null && !lower.equals(upper)) {\n                    result = false;\n  \
    \              }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3asqmdtw.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = false;\n        if (dict.size() > 0) {\n       \
    \     Set<String> keys = dict.keySet();\n            boolean isStringInLowerCase\
    \ = false;\n            boolean isStringInUpperCase = false;\n            for\
    \ (String key : keys) {\n                String value = dict.get(key);\n     \
    \           if (value.toLowerCase().equals(key)) {\n                    isStringInLowerCase\
    \ = true;\n                }\n                if (value.toUpperCase().equals(key))\
    \ {\n                    isStringInUpperCase = true;\n                }\n    \
    \        }\n            result = isStringInLowerCase && isStringInUpperCase;\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdja2hpmi.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllUpperCase\
    \ = true;\n        boolean isAllLowerCase = true;\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                isAllUpperCase = false;\n            }\n           \
    \ if (value.length() < 1) {\n                isAllLowerCase = false;\n       \
    \     }\n        }\n        return isAllUpperCase && isAllLowerCase;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0q_jfsss.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if(!key.isEmpty() && key.isEmpty())\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if(!key.isEmpty() && !key.isEmpty()) {\n                result = true;\n\
    \                break;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv5jr4pt0.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpc4yrjrat.java:21: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpc4yrjrat.java:21: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if(!key.isEmpty() &&\
    \ key.toUpperCase().equals(value.toUpperCase())) {\n                continue;\n\
    \            }\n            result = false;\n            break;\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3u74r2e.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                result = false;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiy0n7ldg.java:22: error: cannot find symbol\n            if(!key.isUpperCase()\
    \ && !key.isLowerCase()) {\n                   ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpiy0n7ldg.java:22: error: cannot\
    \ find symbol\n            if(!key.isUpperCase() && !key.isLowerCase()) {\n  \
    \                                       ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        boolean isAllUpperCase = true;\n        boolean isAllLowerCase =\
    \ true;\n        for (String key : dict.keySet()) {\n            if (isAllUpperCase\
    \ && isAllLowerCase) {\n                return false;\n            }\n       \
    \     if (isAllLowerCase) {\n                isAllLowerCase = key.toLowerCase().equals(key);\n\
    \            }\n            if (isAllUpperCase) {\n                isAllUpperCase\
    \ = key.toUpperCase().equals(key);\n            }\n        }\n        return isAllUpperCase\
    \ && isAllLowerCase;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))))\
    \ == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String, String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"fruit\"\
    , \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String, String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpol0r1g6s.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String, String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean isUpperCase = true;\n\
    \        for (String key : keys) {\n            if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                isUpperCase = false;\n                break;\n          \
    \  }\n        }\n        if (isUpperCase) {\n            return true;\n      \
    \  }\n        for (String key : keys) {\n            if (!Character.isUpperCase(key.charAt(0)))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String, String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String, String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String, String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,\
    \ String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String, String>())) == (false));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiy6hw38j.java:44)\n"
  exit_code: 1
  status: Exception
