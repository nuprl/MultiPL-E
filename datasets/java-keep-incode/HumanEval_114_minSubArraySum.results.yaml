name: HumanEval_114_minSubArraySum
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2odgxtbe.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesci1g0u.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5j37omgy.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzkpwzdg.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplp_na0xw.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        long sumOfSubArray = 0;\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            sum += nums.get(i);\n            sumOfSubArray\
    \ += nums.get(i);\n            if(sumOfSubArray < min) {\n                min\
    \ = sumOfSubArray;\n            }\n        }\n        return min;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpylf43wl6.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuqfko32e.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn6hi8pjh.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8knz2pd.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(Long num : nums) {\n            sum += num;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqdz5hu__.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzq573z07.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhrpohy1.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1jhd6dnv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ugoqy9s.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn5mjdd0.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphz084tsm.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5v8zfl4e.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kuh2ymt.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnuop441p.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyv585toc.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5ajsi4t.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4256d268.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long minSum = Long.MAX_VALUE;\n        for (long num : nums) {\n    \
    \        sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpurcep2d6.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3i7n6bey.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp812a4nzb.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph4dcpf_m.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01uz598k.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        long sumOfSubArray = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            sumOfSubArray += num;\n    \
    \        if (sumOfSubArray < minSum) {\n                minSum = sumOfSubArray;\n\
    \            }\n        }\n        return minSum;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwfhcge7l.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnru7qsxh.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78adpbnp.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy43o_j6o.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nj53ss5.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < min) {\n                min = sum;\n            }\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7rl2yb9.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_4hwr4gv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm5ldg6d_.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long minSumIndex = 0;\n        long sum = 0;\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum\
    \ < minSum) {\n                minSum = sum;\n                minSumIndex = i;\n\
    \            }\n        }\n        return minSum;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeqvced5s.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1687cqp.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4w31j0y6.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0a885vo.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0dytrfvq.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79usm7vn.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpormqq524.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7ztc65z.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_zxon6_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2mp_mu1.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp0v9ozag.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpawx5x8ki.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbzy2jyyo.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbz1v5vi.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0kb2blu4.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmspmqs10.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe26p0v5s.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbev69oa3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for(long num : nums) {\n        \
    \    sum += num;\n            if(sum < min) {\n                min = sum;\n  \
    \          }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw6x8a9wa.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1u1ca4tn.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp749ge_31.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwkssdewb.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22zp11_p.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfpsqyu_7.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long minSumIndex = 0;\n        long sum = 0;\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minSumIndex = i;\n\
    \            }\n        }\n        return minSum;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5opq8wmx.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp997gik0e.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxm97_i__.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long minSumIndex = 0;\n        long sum = 0;\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum\
    \ < minSum) {\n                minSum = sum;\n                minSumIndex = i;\n\
    \            }\n        }\n        return minSum;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplr79cs61.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6sxo5_i.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp159xhyr7.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnywd508j.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp15p28rtm.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrrq_ze7.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < min) {\n                min\
    \ = sum;\n            }\n        }\n        return min;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3y11t8ul.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long minSumIndex = 0;\n        long minSumIndex2 = 0;\n        long minSumIndex3\
    \ = 0;\n        long minSumIndex4 = 0;\n        long minSumIndex5 = 0;\n     \
    \   long minSumIndex6 = 0;\n        long minSumIndex7 = 0;\n        long minSumIndex8\
    \ = 0;\n        long minSumIndex9 = 0;\n        long minSumIndex10 = 0;\n    \
    \    long minSumIndex11 = 0;\n        long minSumIndex12 = 0;\n        long minSumIndex13\
    \ = 0;\n        long minSumIndex14 = 0;\n        long minSumIndex15 = 0;\n   \
    \     long minSumIndex16 = 0;\n        long minSumIndex17 = 0;\n        long minSumIndex18\
    \ = 0;\n        long minSumIndex19 = 0;\n        long minSumIndex20 = 0;\n   \
    \     long minSumIndex21 = 0;\n        long minSumIndex22 = 0;\n        long minSumIndex23\
    \ = 0;\n        long minSumIndex24 = 0;\n        long minSumIndex25 = 0;\n   \
    \     long minSumIndex26 = 0;\n        long minSumIndex27 = 0;\n        long minSumIndex28\
    \ = 0;\n        long minSumIndex29 = 0;\n        long minSumIndex30 = 0;\n   \
    \     long minSumIndex31 = 0;\n        long minSumIndex32 = 0;\n        long minSumIndex33\
    \ = 0;\n        long minSumIndex34 = 0;\n        long minSumIndex35 = 0;\n   \
    \     long minSumIndex36 = 0;\n        long minSumIndex37 = 0;\n        long minSumIndex38\
    \ = 0;\n        long minSumIndex39 = 0;\n        long minSumIndex40 = 0;\n   \
    \     long minSumIndex41 = 0;\n        long minSumIndex42 = 0;\n        long minSumIndex43\
    \ = 0;\n        long minSumIndex44 = 0;\n        long minSumIndex45 = 0;\n   \
    \     long minSumIndex46 = 0;\n        long minSumIndex47 = 0;\n        long minSumIndex48\
    \ = 0;\n        long minSumIndex49 = 0;\n        long minSumIndex50 = 0;\n   \
    \     long minSumIndex51 = 0;\n        long minSumIndex52 = 0;\n        long minSumIndex53\
    \ = 0;\n        long minSumIndex54 = 0;\n        long minSumIndex55 = 0;\n   \
    \     long minSumIndex56 = 0;\n        long minSumIndex57 = 0;\n        long minSumIndex58\
    \ = 0;\n        long minSumIndex59 = 0;\n        long minSumIndex60 = 0;\n   \
    \     long minSumIndex61 = 0;\n        long minSumIndex62 = 0;\n        long minSumIndex63\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzcdnr8ro.java:79: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpzcdnr8ro.java:79: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8jw0b8ec.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for(long num : nums) {\n        \
    \    sum += num;\n            if(sum < min) {\n                min = sum;\n  \
    \          }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph262xq4y.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp410djs57.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa4t9twrb.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdw1wl2ck.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnkvn1o2z.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgreuaxt5.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzj19ubq1.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbgmvkw3e.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbv5yrr4g.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdwui70de.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < min) {\n                min = sum;\n            }\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fc7xebs.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidizdcih.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc_873aho.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long i : nums) {\n            sum += i;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu184pn25.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5gcoumt6.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc2rn0wha.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnr9c2_u.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7f9duy5l.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpom7q8cvj.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn7j63at7.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3nely527.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9os2zgt_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < min) {\n                min = sum;\n            }\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptqo152bi.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpscxwn31y.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpype1anpl.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6tvawmvh.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw_3ab80e.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy_3y7ocj.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd8dni63y.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1sq0erf.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for(long num : nums) {\n        \
    \    sum += num;\n            if(sum < min) {\n                min = sum;\n  \
    \          }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj9cr6zeu.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpby_ag6wa.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp21ysmcep.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7tx03r63.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5d8pq569.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8lgjyyyl.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0dtuk6hn.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjn4n4q5w.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeippvrcc.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppch_fyhw.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpji_jt737.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi35_0fo0.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8idb50kz.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2t_4hf92.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ly8tmgu.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp97v6feir.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < min) {\n                min\
    \ = sum;\n            }\n        }\n        return min;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfpfwx7v2.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtzyckic.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyt29gh1a.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1avtkjt2.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxokz8cx.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesm5hdlw.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long minSum = Long.MAX_VALUE;\n        for (long num : nums) {\n    \
    \        sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_u1a5p9.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphq4d8zr2.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyphvlksl.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0n4peqpf.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < min) {\n                min = sum;\n            }\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph2mb4qhk.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_70k1c_k.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9epz39xv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp73o_s1k.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp93sezxyr.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkii9zks9.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp16o5hnp6.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ju_4ftm.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54milurr.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s0kvb06.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long minSumIndex = 0;\n        long sum = 0;\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum\
    \ < minSum) {\n                minSum = sum;\n                minSumIndex = i;\n\
    \            }\n        }\n        return minSum;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbk85wze7.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp83vclq1t.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0yr2yxem.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpybf18qx9.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk3xq8rd2.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyik9ljjc.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7nx9imv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzlmx7xip.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptcdh2g74.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1tb97w4.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n    \
    \    for (long num : nums) {\n            sum += num;\n            min = Math.min(min,\
    \ sum);\n            max = Math.max(max, sum);\n        }\n        return sum\
    \ - min;\n\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__zd2d24.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        long sumOfSubArray = 0;\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            sum += nums.get(i);\n            sumOfSubArray\
    \ += nums.get(i);\n            if(sumOfSubArray < minSum) {\n                minSum\
    \ = sumOfSubArray;\n            }\n        }\n        return minSum;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvhzdyba.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        long sumOfSubArray = 0;\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            sum += nums.get(i);\n            sumOfSubArray\
    \ += nums.get(i);\n            if(sumOfSubArray < min) {\n                min\
    \ = sumOfSubArray;\n            }\n        }\n        return min;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg46pcwcd.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long minSumIndex = 0;\n        long minSumIndex2 = 0;\n        long minSumIndex3\
    \ = 0;\n        long minSumIndex4 = 0;\n        long minSumIndex5 = 0;\n     \
    \   long minSumIndex6 = 0;\n        long minSumIndex7 = 0;\n        long minSumIndex8\
    \ = 0;\n        long minSumIndex9 = 0;\n        long minSumIndex10 = 0;\n    \
    \    long minSumIndex11 = 0;\n        long minSumIndex12 = 0;\n        long minSumIndex13\
    \ = 0;\n        long minSumIndex14 = 0;\n        long minSumIndex15 = 0;\n   \
    \     long minSumIndex16 = 0;\n        long minSumIndex17 = 0;\n        long minSumIndex18\
    \ = 0;\n        long minSumIndex19 = 0;\n        long minSumIndex20 = 0;\n   \
    \     long minSumIndex21 = 0;\n        long minSumIndex22 = 0;\n        long minSumIndex23\
    \ = 0;\n        long minSumIndex24 = 0;\n        long minSumIndex25 = 0;\n   \
    \     long minSumIndex26 = 0;\n        long minSumIndex27 = 0;\n        long minSumIndex28\
    \ = 0;\n        long minSumIndex29 = 0;\n        long minSumIndex30 = 0;\n   \
    \     long minSumIndex31 = 0;\n        long minSumIndex32 = 0;\n        long minSumIndex33\
    \ = 0;\n        long minSumIndex34 = 0;\n        long minSumIndex35 = 0;\n   \
    \     long minSumIndex36 = 0;\n        long minSumIndex37 = 0;\n        long minSumIndex38\
    \ = 0;\n        long minSumIndex39 = 0;\n        long minSumIndex40 = 0;\n   \
    \     long minSumIndex41 = 0;\n        long minSumIndex42 = 0;\n        long minSumIndex43\
    \ = 0;\n        long minSumIndex44 = 0;\n        long minSumIndex45 = 0;\n   \
    \     long minSumIndex46 = 0;\n        long minSumIndex47 = 0;\n        long minSumIndex48\
    \ = 0;\n        long minSumIndex49 = 0;\n        long minSumIndex50 = 0;\n   \
    \     long minSumIndex51 = 0;\n        long minSumIndex52 = 0;\n        long minSumIndex53\
    \ = 0;\n        long minSumIndex54 = 0;\n        long minSumIndex55 = 0;\n   \
    \     long minSumIndex56 = 0;\n        long minSumIndex57 = 0;\n        long minSumIndex58\
    \ = 0;\n        long minSumIndex59 = 0;\n        long minSumIndex60 = 0;\n   \
    \     long minSumIndex61 = 0;\n        long minSumIndex62 = 0;\n        long minSumIndex63\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp49hfhnwz.java:79: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp49hfhnwz.java:79: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp56lxvj_t.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9h2jy10p.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprgu85z6l.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu3ch4a_l.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp88ruicjr.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkd3cj65i.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo848e8lg.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq_kx36k6.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa79oq5ez.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwtaaibp8.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long i : nums) {\n            sum += i;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoi5bv4p4.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvahy2pwj.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp10m4997y.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp626t9qaa.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6h5t6au.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uex0ikt.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5qntska9.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for(long num : nums) {\n        \
    \    sum += num;\n            if(sum < min) {\n                min = sum;\n  \
    \          }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9jgl9kx3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6t894_x.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0bif9_x6.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxfqth4p4.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnq02miy_.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long i : nums) {\n            sum += i;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvp75l3o.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzf2nms2s.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_at5okwj.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for(long num : nums) {\n        \
    \    sum += num;\n            if(sum < min) {\n                min = sum;\n  \
    \          }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm48oaz_7.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn7ajfryj.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdd5sq_mn.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqc42fes.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbdj9rhdp.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpad5wv8y5.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            minSum = Math.min(minSum, num);\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpshymtu7s.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdvsiqo9s.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n       \
    \     sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhvix2qa.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztg37yg3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp91bl4ire.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo9z857s4.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6i6axqe1.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for(long num : nums) {\n        \
    \    sum += num;\n            if(sum < min) {\n                min = sum;\n  \
    \          }\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lvhzxmj.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9z9t_zmk.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjufsl54x.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp199688vw.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmchkil7a.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : nums) {\n            min = Math.min(min, num);\n    \
    \    }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc7n5fg3a.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptpnajx9q.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc7mkh7bu.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjq335k16.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long sum = 0;\n\
    \        long minSum = Long.MAX_VALUE;\n        for (long num : nums) {\n    \
    \        sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt1czn8qs.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of integers nums, find the minimum sum\
    \ of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public\
    \ static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum = Long.MAX_VALUE;\n\
    \        long minSumIndex = 0;\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            long sum = 0;\n            for(int j = i; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                if(sum < minSum) {\n   \
    \                 minSum = sum;\n                    minSumIndex = j;\n      \
    \          }\n            }\n        }\n        return minSum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
