name: HumanEval_61_correct_bracketing
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else if(c == '[' || c\
    \ == ']') {\n                if(!stack.isEmpty() && stack.peek() == c) {\n   \
    \                 stack.pop();\n                } else {\n                   \
    \ return false;\n                }\n            } else if(c == '{' || c == '}')\
    \ {\n                if(!stack.isEmpty() && stack.peek() == c) {\n           \
    \         stack.pop();\n                } else {\n                    return false;\n\
    \                }\n            } else if(c == '<') {\n                if(!stack.isEmpty()\
    \ && stack.peek() == '>') {\n                    stack.pop();\n              \
    \  } else {\n                    return false;\n                }\n          \
    \  } else if(c == '>') {\n                if(!stack.isEmpty() && stack.peek()\
    \ == '<') {\n                    stack.pop();\n                } else {\n    \
    \                return false;\n                }\n            } else if(c ==\
    \ '!') {\n                if(!stack.isEmpty() && stack.peek() == '=') {\n    \
    \                stack.pop();\n                } else {\n                    return\
    \ false;\n                }\n            } else if(c == '=') {\n             \
    \   if(!stack.isEmpty() && stack.peek() == '!') {\n                    stack.pop();\n\
    \                } else {\n                    return false;\n               \
    \ }\n            } else {\n                return false;\n            }\n    \
    \    }\n        return stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty()) {\n          \
    \          return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != c) {\n                    return false;\n         \
    \       }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < brackets.length(); i++)\
    \ {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n \
    \               openingBrackets.add(c+\"\");\n            } else if (c == ')')\
    \ {\n                closingBrackets.add(c+\"\");\n            } else {\n    \
    \            sb.append(c);\n            }\n        }\n        if (openingBrackets.size()\
    \ != closingBrackets.size()) {\n            return false;\n        }\n       \
    \ Set<String> openingBracketsSet = new HashSet<>(openingBrackets);\n        Set<String>\
    \ closingBracketsSet = new HashSet<>(closingBrackets);\n        boolean allOpeningBracketsAreClosed\
    \ = openingBracketsSet.containsAll(closingBracketsSet);\n        return allOpeningBracketsAreClosed;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1130rqj.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        for (char c :\
    \ brackets.toCharArray()) {\n            if (c == '(') {\n                openingBrackets.add(c);\n\
    \            } else if (c == ')') {\n                closingBrackets.add(c);\n\
    \            }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            return false;\n        }\n        Set<String> openingBracketsSet\
    \ = new HashSet<>(openingBrackets);\n        Set<String> closingBracketsSet =\
    \ new HashSet<>(closingBrackets);\n        return openingBracketsSet.equals(closingBracketsSet);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptf8ic04x.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmptf8ic04x.java:26: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n        closingBracketsStack.add(brackets);\n\
    \        while (openingBracketsStack.size() > 0) {\n            String openingBracket\
    \ = openingBracketsStack.get(openingBracketsStack.size() - 1);\n            String\
    \ closingBracket = closingBracketsStack.get(closingBracketsStack.size() - 1);\n\
    \            if (openingBracket.equals(\"(\")) {\n                openingBracketsStack.remove(openingBracketsStack.size()\
    \ - 1);\n                closingBracketsStack.remove(closingBracketsStack.size()\
    \ - 1);\n                openingBracketsStack.add(closingBracket);\n         \
    \       closingBracketsStack.add(openingBracket);\n            } else if (closingBracket.equals(\"\
    )\")) {\n                openingBracketsStack.remove(openingBracketsStack.size()\
    \ - 1);\n                closingBracketsStack.remove(closingBracketsStack.size()\
    \ - 1);\n                openingBracketsStack.add(openingBracket);\n         \
    \       closingBracketsStack.add(closingBracket);\n            } else {\n    \
    \            return false;\n            }\n        }\n        return true;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvob4xzem.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                if (brackets.charAt(i + 1) != '(') {\n                  \
    \  result = false;\n                    break;\n                }\n          \
    \      i++;\n            } else if (c == ')') {\n                if (brackets.charAt(i\
    \ - 1) != '(') {\n                    result = false;\n                    break;\n\
    \                }\n                i--;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7tep9av_.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        boolean result\
    \ = true;\n        for(int i = 0; i < brackets.length(); i++) {\n            char\
    \ c = brackets.charAt(i);\n            if (c == '(') {\n                openingBrackets.add(c);\n\
    \            } else if (c == ')') {\n                closingBrackets.add(c);\n\
    \            } else {\n                result = false;\n            }\n      \
    \  }\n        if (openingBrackets.size() != closingBrackets.size()) {\n      \
    \      result = false;\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3amw4scl.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmp3amw4scl.java:28: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmp0ow_j0kn.java:26)\n\
    \tat Problem.main(tmp0ow_j0kn.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                if(brackets.charAt(i+1) == '(') {\n                    result\
    \ = result && true;\n                }\n                else {\n             \
    \       result = result && false;\n                }\n            }\n        \
    \    if(c == ')') {\n                if(brackets.charAt(i-1) == '(') {\n     \
    \               result = result && true;\n                }\n                else\
    \ {\n                    result = result && false;\n                }\n      \
    \      }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4rdmoo2i.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = false;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) == '(') {\n                if(brackets.charAt(i+1)\
    \ == ')') {\n                    result = true;\n                }\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmrfv96cf.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                if(brackets.charAt(i + 1) != '(') {\n                    result\
    \ = false;\n                    break;\n                }\n                i++;\n\
    \            } else if(c == ')') {\n                if(brackets.charAt(i - 1)\
    \ != '(') {\n                    result = false;\n                    break;\n\
    \                }\n                i--;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj2ko9ox0.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty()) {\n          \
    \          return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != c) {\n                    return false;\n         \
    \       }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty()) {\n          \
    \          return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(' && top != ')') {\n                    return false;\n\
    \                }\n                stack.push(c);\n            }\n        }\n\
    \        return stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty()) {\n          \
    \          return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != c) {\n                    return false;\n         \
    \       }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            } else {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(' && c != ')') {\n        \
    \            return false;\n                }\n            }\n        }\n    \
    \    return stack.isEmpty();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                result = result && isOpeningBracket(brackets, i);\n     \
    \       } else if (c == ')') {\n                result = result && isClosingBracket(brackets,\
    \ i);\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1nclfjxi.java:24: error: cannot find symbol\n                result\
    \ = result && isOpeningBracket(brackets, i);\n                               \
    \    ^\n  symbol:   method isOpeningBracket(String,int)\n  location: class Problem\n\
    /tmp/tmp1nclfjxi.java:26: error: cannot find symbol\n                result =\
    \ result && isClosingBracket(brackets, i);\n                                 \
    \  ^\n  symbol:   method isClosingBracket(String,int)\n  location: class Problem\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                char last = stack.pop();\n  \
    \              if(!stack.empty() && last != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return !stack.empty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsrbvhub.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (!stack.isEmpty()) {\n                 \
    \   char top = stack.pop();\n                    if (top != '(') {\n         \
    \               return false;\n                    }\n                }\n    \
    \        } else {\n                return false;\n            }\n        }\n \
    \       return !stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_4p_ggv.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                return false;\n            }\n        }\n    \
    \    return stack.isEmpty();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvn7wv_f0.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\*\", \"\");\n        brackets.replaceAll(\"\\\\+\", \"\");\n        brackets.replaceAll(\"\
    \\\\?\", \"\");\n        brackets.replaceAll(\"\\\\^\", \"\");\n        brackets.replaceAll(\"\
    \\\\|\", \"\");\n        brackets.replaceAll(\"\\\\!\", \"\");\n        brackets.replaceAll(\"\
    \\\\~\", \"\");\n        brackets.replaceAll(\"\\\\!\", \"\");\n        brackets.replaceAll(\"\
    \\\\<\", \"\");\n        brackets.replaceAll(\"\\\\>\", \"\");\n        brackets.replaceAll(\"\
    \\\\%\", \"\");\n        brackets.replaceAll(\"\\\\*\", \"\");\n        brackets.replaceAll(\"\
    \\\\+\", \"\");\n        brackets.replaceAll(\"\\\\?\", \"\");\n        brackets.replaceAll(\"\
    \\\\^\", \"\");\n        brackets.replaceAll(\"\\\\|\", \"\");\n        brackets.replaceAll(\"\
    \\\\!\", \"\");\n        brackets.replaceAll(\"\\\\~\", \"\");\n        brackets.replaceAll(\"\
    \\\\!\", \"\");\n        brackets.replaceAll(\"\\\\<\", \"\");\n        brackets.replaceAll(\"\
    \\\\>\", \"\");\n        brackets.replaceAll(\"\\\\%\", \"\");\n        brackets.replaceAll(\"\
    \\\\*\", \"\");\n        brackets.replaceAll(\"\\\\+\", \"\");\n        brackets.replaceAll(\"\
    \\\\?\", \"\");\n        brackets.replaceAll(\"\\\\^\", \"\");\n        brackets.replaceAll(\"\
    \\\\|\", \"\");\n        brackets.replaceAll(\"\\\\!\", \"\");\n        brackets.replaceAll(\"\
    \\\\~\", \"\");\n        brackets.replaceAll(\"\\\\!\", \"\");\n        brackets.replaceAll(\"\
    \\\\<\", \"\");\n        brackets.replaceAll(\"\\\\>\", \"\");\n        brackets.replaceAll(\"\
    \\\\%\", \"\");\n        brackets.replaceAll(\"\\\\*\", \"\");\n        brackets.replaceAll(\"\
    \\\\+\", \"\");\n        brackets.replaceAll(\"\\\\?\", \"\");\n        brackets.replaceAll(\"\
    \\\\^\", \"\");\n        brackets.replaceAll(\"\\\\|\", \"\");\n        brackets.replaceAll(\"\
    \\\\!\", \"\");\n        brackets.replaceAll(\"\\\\~\", \"\");\n        brackets.replaceAll(\"\
    \\\\!\", \"\");\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf882txd8.java:67: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                char last = stack.pop();\n  \
    \              if(last != '(') {\n                    return false;\n        \
    \        }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpqtralcog.java:27)\n\
    \tat Problem.main(tmpqtralcog.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9mnmwfm.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char bracket = brackets.charAt(i);\n            if (bracket\
    \ == '(') {\n                for (int j = i + 1; j < brackets.length(); j++) {\n\
    \                    char nextBracket = brackets.charAt(j);\n                \
    \    if (nextBracket == ')') {\n                        result = result && (i\
    \ + 1 == j);\n                        break;\n                    }\n        \
    \        }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsf1gcayz.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        for(int i = 0;\
    \ i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '(') {\n\
    \                openingBrackets.add(brackets.substring(i));\n            }\n\
    \            if(brackets.charAt(i) == ')') {\n                closingBrackets.add(brackets.substring(i));\n\
    \            }\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            if(!closingBrackets.contains(openingBrackets.get(i))) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrkf8a3d.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty() || c != ')') {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n        return stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                if(brackets.charAt(i+1) != '(') {\n                    result\
    \ = false;\n                    break;\n                }\n                i++;\n\
    \            } else if(c == ')') {\n                if(brackets.charAt(i) != ')')\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                i++;\n            } else {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6x4hnun.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            } else {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(' && top != ')') {\n      \
    \              return false;\n                }\n                stack.push(c);\n\
    \            }\n        }\n        return stack.isEmpty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < brackets.length(); i++)\
    \ {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n \
    \               openingBrackets.add(c+\"\");\n            } else if (c == ')')\
    \ {\n                closingBrackets.add(c+\"\");\n            }\n        }\n\
    \        if (openingBrackets.size() != closingBrackets.size()) {\n           \
    \ return false;\n        }\n        boolean result = true;\n        for (String\
    \ openingBracket : openingBrackets) {\n            String closingBracket = closingBrackets.get(closingBrackets.size()\
    \ - 1);\n            if (!openingBracket.equals(closingBracket)) {\n         \
    \       result = false;\n            }\n            closingBrackets.remove(closingBrackets.size()\
    \ - 1);\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplphxkcmq.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else if(stack.size() > 0 && c == ')') {\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n            }\n        }\n        return stack.isEmpty();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6tvpfel.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        boolean result\
    \ = true;\n        for (char c : brackets.toCharArray()) {\n            if (c\
    \ == '(') {\n                openingBrackets.add(c);\n            } else if (c\
    \ == ')') {\n                closingBrackets.add(c);\n            } else {\n \
    \               result = false;\n            }\n        }\n        if (openingBrackets.size()\
    \ != closingBrackets.size()) {\n            result = false;\n        }\n     \
    \   return result;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3w6reriu.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmp3w6reriu.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        boolean result\
    \ = true;\n        for (char c : brackets.toCharArray()) {\n            if (c\
    \ == '(') {\n                openingBrackets.add(c);\n            } else if (c\
    \ == ')') {\n                closingBrackets.add(c);\n            } else {\n \
    \               result = false;\n            }\n        }\n        if (openingBrackets.size()\
    \ != closingBrackets.size()) {\n            result = false;\n        }\n     \
    \   return result;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyy4dqthb.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpyy4dqthb.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n        closingBracketsStack.add(brackets);\n\
    \        while (openingBracketsStack.size() > 0) {\n            String openingBracket\
    \ = openingBracketsStack.remove(0);\n            String closingBracket = closingBracketsStack.remove(0);\n\
    \            if (closingBracket.equals(openingBracket)) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n            } else {\n\
    \                openingBracketsStack.add(openingBracket);\n                closingBracketsStack.add(closingBracket);\n\
    \            }\n        }\n        return openingBrackets.isEmpty() && closingBrackets.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5gkim6s7.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') return false;\n\
    \                }\n            } else {\n                if(!stack.isEmpty())\
    \ {\n                    char top = stack.pop();\n                    if(top !=\
    \ '(') return false;\n                }\n                stack.push(c);\n    \
    \        }\n        }\n        return stack.isEmpty();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1zhb4m7d.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) != brackets.charAt(i + 1)) {\n   \
    \             result = false;\n                break;\n            }\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp9mkxk70.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else if(c == '[' || c\
    \ == ']') {\n                if(!stack.isEmpty() && stack.peek() == '[') {\n \
    \                   stack.pop();\n                } else {\n                 \
    \   return false;\n                }\n            } else if(c == '{' || c == '}')\
    \ {\n                if(!stack.isEmpty() && stack.peek() == '{') {\n         \
    \           stack.pop();\n                } else {\n                    return\
    \ false;\n                }\n            } else if(c == '<') {\n             \
    \   if(!stack.isEmpty() && stack.peek() == '<') {\n                    stack.pop();\n\
    \                } else {\n                    return false;\n               \
    \ }\n            } else if(c == '>') {\n                if(!stack.isEmpty() &&\
    \ stack.peek() == '>') {\n                    stack.pop();\n                }\
    \ else {\n                    return false;\n                }\n            }\
    \ else if(c == '(' || c == '[' || c == '{' || c == '<' || c == '>') {\n      \
    \          return false;\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                return false;\n            }\n        }\n    \
    \    return !stack.isEmpty();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbe0sppxm.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6s1rt1my.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = false;\n        List<String> openingBrackets\
    \ = new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                openingBrackets.add(c);\n            } else if (c == ')') {\n\
    \                closingBrackets.add(c);\n            }\n        }\n        if\
    \ (openingBrackets.size() != closingBrackets.size()) {\n            result = false;\n\
    \        } else {\n            Set<String> openingBracketsSet = new HashSet<>(openingBrackets);\n\
    \            Set<String> closingBracketsSet = new HashSet<>(closingBrackets);\n\
    \            result = openingBracketsSet.containsAll(closingBracketsSet);\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpulb7dxnu.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpulb7dxnu.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else if(c == '[' || c\
    \ == ']') {\n                if(!stack.isEmpty() && stack.peek() == c) {\n   \
    \                 stack.pop();\n                } else {\n                   \
    \ return false;\n                }\n            } else if(c == '{' || c == '}')\
    \ {\n                if(!stack.isEmpty() && stack.peek() == c) {\n           \
    \         stack.pop();\n                } else {\n                    return false;\n\
    \                }\n            } else {\n                return false;\n    \
    \        }\n        }\n        return stack.isEmpty();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp1ax7vz9.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[' || c == ']') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == ']') {\n                    if(c\
    \ == '[') {\n                        stack.push(c);\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    if(c != '[') {\n                        return\
    \ false;\n                    }\n                    stack.push(c);\n        \
    \        }\n            } else if(c == '{') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '}') {\n                    if(c\
    \ == '{') {\n                        stack.push(c);\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    if(c != '{') {\n                        return\
    \ false;\n                    }\n                    stack.push(c);\n        \
    \        }\n            } else if(c == '<') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '>') {\n                    if(c\
    \ == '<') {\n                        stack.push(c);\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    if(c != '<') {\n                        return\
    \ false;\n                    }\n                    stack.push(c);\n        \
    \        }\n            } else if(c == '>') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '>') {\n                    if(c\
    \ == '>') {\n                        stack.push(c);\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    if(c != '>') {\n                        return\
    \ false;\n                    }\n                    stack.push(c);\n        \
    \        }\n            } else if(c == '!') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '!') {\n                    if(c\
    \ == '!') {\n                        stack.push(c);\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    if(c != '!') {\n                        return\
    \ false;\n                    }\n                    stack.push(c);\n        \
    \        }\n            } else if(c == '=') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '=') {\n                    if(c\
    \ == '=') {\n                        stack.push(c);\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    if(c != '=') {\n                        return\
    \ false;\n                    }\n                    stack.\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_1cha76t.java:133: error: <identifier> expected\n             \
    \       stack.\n                          ^\n/tmp/tmp_1cha76t.java:133: error:\
    \ not a statement\n                    stack.\n                         ^\n/tmp/tmp_1cha76t.java:135:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n                stack.push(c);\n            }\n \
    \       }\n        return stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<String>();\n\
    \        List<String> closingBrackets = new ArrayList<String>();\n        List<String>\
    \ bracketsList = Arrays.asList(brackets.split(\"\"));\n        for(String bracket\
    \ : bracketsList) {\n            if(bracket.equals(\"(\")) {\n               \
    \ openingBrackets.add(bracket);\n            } else if(bracket.equals(\")\"))\
    \ {\n                closingBrackets.add(bracket);\n            }\n        }\n\
    \        for(String bracket : openingBrackets) {\n            if(!closingBrackets.contains(bracket))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4oejj56u.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (!stack.isEmpty()) {\n                 \
    \   char top = stack.pop();\n                    if (top != '(') {\n         \
    \               return false;\n                    }\n                }\n    \
    \        } else {\n                return false;\n            }\n        }\n \
    \       return !stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ju8m6pp.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        for(int i = 0;\
    \ i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n  \
    \          if(c == '(') {\n                openingBrackets.add(c);\n         \
    \   } else if(c == ')') {\n                closingBrackets.add(c);\n         \
    \   }\n        }\n        for(int i = 0; i < openingBrackets.size(); i++) {\n\
    \            if(!closingBrackets.contains(openingBrackets.get(i))) {\n       \
    \         return false;\n            }\n        }\n        return true;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc5oucaap.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpc5oucaap.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        for (char c :\
    \ brackets.toCharArray()) {\n            if (c == '(') {\n                openingBrackets.add(c);\n\
    \            } else if (c == ')') {\n                closingBrackets.add(c);\n\
    \            }\n        }\n        return openingBrackets.size() == closingBrackets.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplmh5s625.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmplmh5s625.java:26: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppz5eouh0.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            } else if(c == '<') {\n             \
    \   stack.push(c);\n            } else if(c == '>') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != '<') {\n                    return\
    \ false;\n                }\n            } else if(c == '(') {\n             \
    \   stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != '(') {\n                    return\
    \ false;\n                }\n            } else if(c == '[') {\n             \
    \   stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != '[') {\n                    return\
    \ false;\n                }\n            } else if(c == '{') {\n             \
    \   stack.push(c);\n            } else if(c == '}') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            } else if(c == '<') {\n             \
    \   stack.push(c);\n            } else if(c == '>') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != '<') {\n                    return\
    \ false;\n                }\n            } else if(c == '(') {\n             \
    \   stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != '(') {\n                    return\
    \ false;\n                }\n            } else if(c == '[') {\n             \
    \   stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfoof5y9m.java:119: error: ';' expected\n                char top\
    \ = stack\n                                ^\n/tmp/tmpfoof5y9m.java:121: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                if(brackets.charAt(i+1) == '(') {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \                 break;\n                }\n            } else if(c == ')') {\n\
    \                if(brackets.charAt(i-1) == ')') {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \                 break;\n                }\n            }\n        }\n      \
    \  return result;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvyedesl.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                if(!stack.isEmpty() && stack.peek()\
    \ == '(') {\n                    stack.pop();\n                }\n           \
    \ }\n        }\n        return !stack.isEmpty();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp50yb2ga3.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        for(int i = 0;\
    \ i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n  \
    \          if(c == '(') {\n                openingBrackets.add(c+\"\");\n    \
    \        }\n            if(c == ')') {\n                closingBrackets.add(c+\"\
    \");\n            }\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            if(!closingBrackets.contains(openingBrackets.get(i))) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpspuzsfba.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) != '(') {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxolk0rg3.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty()) {\n          \
    \          return false;\n                }\n                char top = stack.pop();\n\
    \                if(c == top) {\n                    return false;\n         \
    \       }\n                stack.push(c);\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            } else {\n            \
    \    return false;\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n \
    \       brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\[|\\\\]\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3_88vjxy.java:59: error: unclosed string literal\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_f_nav3.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpymuibr16.java:26)\n\
    \tat Problem.main(tmpymuibr16.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmp006mpool.java:26)\n\
    \tat Problem.main(tmp006mpool.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<String>();\n\
    \        List<String> closingBrackets = new ArrayList<String>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<String>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<String>();\n        boolean result = true;\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                openingBrackets.add(c+\"\");\n  \
    \              openingBracketsStack.add(c+\"\");\n            } else if(c == ')')\
    \ {\n                closingBrackets.add(c+\"\");\n                closingBracketsStack.add(c+\"\
    \");\n            } else if(c == '(' || c == ')') {\n                if(!openingBracketsStack.isEmpty()\
    \ && !closingBracketsStack.isEmpty()) {\n                    if(openingBracketsStack.get(openingBracketsStack.size()-1)\
    \ == c) {\n                        openingBracketsStack.remove(openingBracketsStack.size()-1);\n\
    \                    } else {\n                        result = false;\n     \
    \               }\n                    if(!closingBracketsStack.isEmpty() && !openingBracketsStack.isEmpty())\
    \ {\n                        if(closingBracketsStack.get(closingBracketsStack.size()-1)\
    \ == c) {\n                            closingBracketsStack.remove(closingBracketsStack.size()-1);\n\
    \                        } else {\n                            result = false;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi7cdlmp0.java:35: error: bad operand types for binary operator\
    \ '=='\n                    if(openingBracketsStack.get(openingBracketsStack.size()-1)\
    \ == c) {\n                                                                  \
    \             ^\n  first type:  String\n  second type: char\n/tmp/tmpi7cdlmp0.java:41:\
    \ error: bad operand types for binary operator '=='\n                        if(closingBracketsStack.get(closingBracketsStack.size()-1)\
    \ == c) {\n                                                                  \
    \                 ^\n  first type:  String\n  second type: char\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else if(c == '[') {\n\
    \                stack.push(c);\n            } else if(c == ']') {\n         \
    \       if(!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n\
    \                } else {\n                    return false;\n               \
    \ }\n            } else if(c == '{') {\n                stack.push(c);\n     \
    \       } else if(c == '}') {\n                if(!stack.isEmpty() && stack.peek()\
    \ == '{') {\n                    stack.pop();\n                } else {\n    \
    \                return false;\n                }\n            }\n        }\n\
    \        return stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            } else if(c == '<') {\n             \
    \   stack.push(c);\n            } else if(c == '>') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != '<') {\n                    return\
    \ false;\n                }\n            } else if(c == '!') {\n             \
    \   stack.push(c);\n            } else if(c == '=') {\n                stack.push(c);\n\
    \            } else if(c == '+') {\n                stack.push(c);\n         \
    \   } else if(c == '-') {\n                stack.push(c);\n            } else\
    \ if(c == '*') {\n                stack.push(c);\n            } else if(c == '/')\
    \ {\n                stack.push(c);\n            } else if(c == '%') {\n     \
    \           stack.push(c);\n            } else if(c == '&') {\n              \
    \  stack.push(c);\n            } else if(c == '|') {\n                stack.push(c);\n\
    \            } else if(c == '^') {\n                stack.push(c);\n         \
    \   } else if(c == '!') {\n                stack.push(c);\n            } else\
    \ if(c == '=') {\n                stack.push(c);\n            } else if(c == '+')\
    \ {\n                stack.push(c);\n            } else if(c == '-') {\n     \
    \           stack.push(c);\n            } else if(c == '*') {\n              \
    \  stack.push(c);\n            } else if(c == '/') {\n                stack.push(c);\n\
    \            } else if(c == '%') {\n                stack.push(c);\n         \
    \   } else if(c == '&') {\n                stack.push(c);\n            } else\
    \ if(c == '|') {\n                stack.push(c);\n            } else if(c == '^')\
    \ {\n                stack.push(c);\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(!top.equals(c))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7da4kfg7.java:27: error: char cannot be dereferenced\n        \
    \        if(!top.equals(c)) {\n                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else {\n            \
    \    return false;\n            }\n        }\n        return !stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1494nb7v.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        boolean result = false;\n        for (int i =\
    \ 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(c+\"\");\n \
    \               openingBracketsStack.add(c+\"\");\n            } else if (c ==\
    \ ')') {\n                closingBrackets.add(c+\"\");\n                closingBracketsStack.add(c+\"\
    \");\n            } else if (c == '[') {\n                openingBrackets.add(c+\"\
    \");\n                openingBracketsStack.add(c+\"\");\n            } else if\
    \ (c == ']') {\n                closingBrackets.add(c+\"\");\n               \
    \ closingBracketsStack.add(c+\"\");\n            } else if (c == '{') {\n    \
    \            openingBrackets.add(c+\"\");\n                openingBracketsStack.add(c+\"\
    \");\n            } else if (c == '}') {\n                closingBrackets.add(c+\"\
    \");\n                closingBracketsStack.add(c+\"\");\n            }\n     \
    \   }\n        if (openingBrackets.size() != closingBrackets.size()) {\n     \
    \       return result;\n        }\n        openingBracketsStack.removeAll(openingBrackets);\n\
    \        closingBracketsStack.removeAll(closingBrackets);\n        if (openingBracketsStack.size()\
    \ != 0) {\n            result = false;\n        }\n        if (closingBracketsStack.size()\
    \ != 0) {\n            result = false;\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphbqwl3cc.java:62)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                if(brackets.charAt(i+1) == '(') {\n                    result\
    \ = result && true;\n                } else {\n                    result = result\
    \ && false;\n                }\n            } else if(c == ')') {\n          \
    \      if(brackets.charAt(i-1) == ')') {\n                    result = result\
    \ && true;\n                } else {\n                    result = result && false;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbj_wu5qw.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty() || c !=\
    \ stack.peek()) {\n                    return false;\n                }\n    \
    \        }\n        }\n        return stack.isEmpty();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3sszcso0.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        boolean result = true;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(c+\"\");\n \
    \           } else if (c == ')') {\n                closingBrackets.add(c+\"\"\
    );\n            } else {\n                sb.append(c);\n            }\n     \
    \   }\n        openingBrackets.stream().forEach(s -> {\n            if (!closingBrackets.contains(s))\
    \ {\n                result = false;\n            }\n        });\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk346x7s_.java:36: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n                result = false;\n\
    \                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty() || c != stack.peek())\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                if(stack.isEmpty()) {\n     \
    \               return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n            }\n        }\n        return stack.isEmpty();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        openingBrackets.add(\"\
    (\");\n        closingBrackets.add(\")\");\n        openingBrackets.add(\"[\"\
    );\n        closingBrackets.add(\"]\");\n        openingBrackets.add(\"{\");\n\
    \        closingBrackets.add(\"}\");\n        openingBrackets.add(\"(\");\n  \
    \      closingBrackets.add(\")\");\n        openingBrackets.add(\"[\");\n    \
    \    closingBrackets.add(\"]\");\n        openingBrackets.add(\"{\");\n      \
    \  closingBrackets.add(\"}\");\n        openingBrackets.add(\"(\");\n        closingBrackets.add(\"\
    )\");\n        openingBrackets.add(\"[\");\n        closingBrackets.add(\"]\"\
    );\n        openingBrackets.add(\"{\");\n        closingBrackets.add(\"}\");\n\
    \        openingBrackets.add(\"(\");\n        closingBrackets.add(\")\");\n  \
    \      openingBrackets.add(\"[\");\n        closingBrackets.add(\"]\");\n    \
    \    openingBrackets.add(\"{\");\n        closingBrackets.add(\"}\");\n      \
    \  openingBrackets.add(\"(\");\n        closingBrackets.add(\")\");\n        openingBrackets.add(\"\
    [\");\n        closingBrackets.add(\"]\");\n        openingBrackets.add(\"{\"\
    );\n        closingBrackets.add(\"}\");\n        openingBrackets.add(\"(\");\n\
    \        closingBrackets.add(\")\");\n        openingBrackets.add(\"[\");\n  \
    \      closingBrackets.add(\"]\");\n        openingBrackets.add(\"{\");\n    \
    \    closingBrackets.add(\"}\");\n        openingBrackets.add(\"(\");\n      \
    \  closingBrackets.add(\")\");\n        openingBrackets.add(\"[\");\n        closingBrackets.add(\"\
    ]\");\n        openingBrackets.add(\"{\");\n        closingBrackets.add(\"}\"\
    );\n        openingBrackets.add(\"(\");\n        closingBrackets.add(\")\");\n\
    \        openingBrackets.add(\"[\");\n        closingBrackets.add(\"]\");\n  \
    \      openingBrackets.add(\"{\");\n        closingBrackets.add(\"}\");\n    \
    \    openingBrackets.add(\"(\");\n        closingBrackets.add(\")\");\n      \
    \  openingBrackets.add(\"[\");\n        closingBrackets.add(\"\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3wyhruj9.java:73: error: unclosed string literal\n        closingBrackets.add(\"\
    \n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                return false;\n            }\n        }\n    \
    \    return stack.isEmpty();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2vyioktn.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                return false;\n            }\n        }\n    \
    \    return !stack.isEmpty();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwxopublq.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        List<String> openingBrackets\
    \ = new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> openingBracketsStack = new ArrayList<>();\n        List<String>\
    \ closingBracketsStack = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n\
    \        closingBracketsStack.add(brackets);\n        while (!openingBracketsStack.isEmpty())\
    \ {\n            String openingBracket = openingBracketsStack.remove(0);\n   \
    \         String closingBracket = closingBracketsStack.remove(0);\n          \
    \  if (openingBracket.equals(\"(\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(closingBracket);\n\
    \                closingBracketsStack.add(openingBracket);\n            } else\
    \ if (openingBracket.equals(\")\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz1edd5gw.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty() || c !=\
    \ stack.peek()) {\n                    return false;\n                }\n    \
    \        }\n        }\n        return stack.isEmpty();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        boolean result = false;\n        for (int i =\
    \ 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(i);\n      \
    \          openingBracketsStack.add(i);\n            } else if (c == ')') {\n\
    \                closingBrackets.add(i);\n                closingBracketsStack.add(i);\n\
    \            } else if (c == '(' || c == ')') {\n                openingBracketsStack.remove(i);\n\
    \                closingBracketsStack.remove(i);\n            }\n        }\n \
    \       if (openingBrackets.size() != closingBrackets.size()) {\n            result\
    \ = false;\n        } else {\n            while (openingBrackets.size() > 0) {\n\
    \                for (int i = 0; i < openingBrackets.size(); i++) {\n        \
    \            int openingBracket = openingBrackets.get(i);\n                  \
    \  int closingBracket = closingBrackets.get(i);\n                    if (openingBracket\
    \ < closingBracket) {\n                        result = false;\n             \
    \           break;\n                    }\n                    openingBracketsStack.remove(i);\n\
    \                    closingBracketsStack.remove(i);\n                }\n    \
    \        }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2xmtnz83.java:28: error: incompatible types: int cannot be converted\
    \ to String\n                openingBrackets.add(i);\n                       \
    \             ^\n/tmp/tmp2xmtnz83.java:29: error: incompatible types: int cannot\
    \ be converted to String\n                openingBracketsStack.add(i);\n     \
    \                                    ^\n/tmp/tmp2xmtnz83.java:31: error: incompatible\
    \ types: int cannot be converted to String\n                closingBrackets.add(i);\n\
    \                                    ^\n/tmp/tmp2xmtnz83.java:32: error: incompatible\
    \ types: int cannot be converted to String\n                closingBracketsStack.add(i);\n\
    \                                         ^\n/tmp/tmp2xmtnz83.java:43: error:\
    \ incompatible types: String cannot be converted to int\n                    int\
    \ openingBracket = openingBrackets.get(i);\n                                 \
    \                           ^\n/tmp/tmp2xmtnz83.java:44: error: incompatible types:\
    \ String cannot be converted to int\n                    int closingBracket =\
    \ closingBrackets.get(i);\n                                                  \
    \          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<String>();\n\
    \        List<String> closingBrackets = new ArrayList<String>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<String>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<String>();\n        openingBracketsStack.add(brackets);\n  \
    \      closingBracketsStack.add(brackets);\n        boolean result = true;\n \
    \       while (openingBracketsStack.size() > 0) {\n            String openingBracket\
    \ = openingBracketsStack.get(0);\n            String closingBracket = closingBracketsStack.get(0);\n\
    \            openingBracketsStack.remove(0);\n            closingBracketsStack.remove(0);\n\
    \            if (openingBracket.equals(\"(\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(closingBracket);\n\
    \            } else if (openingBracket.equals(\")\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (openingBracket.equals(\"[\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(closingBracket);\n\
    \            } else if (openingBracket.equals(\"]\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (openingBracket.equals(\"{\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(closingBracket);\n\
    \            } else if (openingBracket.equals(\"}\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (openingBracket.equals(\"<\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(closingBracket);\n\
    \            } else if (openingBracket.equals(\">\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (openingBracket\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpudxntkut.java:64: error: ')' expected\n            } else if (openingBracket\n\
    \                                     ^\n/tmp/tmpudxntkut.java:65: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpudxntkut.java:66: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        for(int i = 0;\
    \ i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '(') {\n\
    \                openingBrackets.add(brackets.substring(i, i + 1));\n        \
    \    }\n            if(brackets.charAt(i) == ')') {\n                closingBrackets.add(brackets.substring(i,\
    \ i + 1));\n            }\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            for(int j = 0; j < closingBrackets.size(); j++) {\n    \
    \            if(openingBrackets.get(i).equals(closingBrackets.get(j))) {\n   \
    \                 return false;\n                }\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpme4rfzk2.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        boolean result = true;\n        for (int i = 0;\
    \ i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n  \
    \          if (c == '(') {\n                openingBrackets.add(c+\"\");\n   \
    \             openingBracketsStack.add(c+\"\");\n            } else if (c == ')')\
    \ {\n                closingBrackets.add(c+\"\");\n                closingBracketsStack.add(c+\"\
    \");\n            } else if (c == '(' || c == ')') {\n                if (openingBracketsStack.isEmpty()\
    \ || closingBracketsStack.isEmpty()) {\n                    result = false;\n\
    \                    break;\n                }\n                String openingBracket\
    \ = openingBracketsStack.remove(0);\n                String closingBracket = closingBracketsStack.remove(0);\n\
    \                if (openingBracket.equals(closingBracket)) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \          openingBracketsStack.add(openingBracket);\n                closingBracketsStack.add(closingBracket);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp092w4zl8.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                if(brackets.charAt(i+1) == '(') {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if(c == ')') {\n                if(brackets.charAt(i-1) == ')') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4nna7w_s.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else {\n            \
    \    return false;\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            } else {\n                if (stack.isEmpty()\
    \ || c != stack.peek()) {\n                    return false;\n               \
    \ }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char bracket = brackets.charAt(i);\n            if (bracket\
    \ == '(') {\n                openingBrackets.add(bracket);\n            } else\
    \ if (bracket == ')') {\n                closingBrackets.add(bracket);\n     \
    \       } else {\n                builder.append(bracket);\n            }\n  \
    \      }\n        if (openingBrackets.size() != closingBrackets.size()) {\n  \
    \          return false;\n        }\n        openingBrackets.forEach(s -> {\n\
    \            if (!closingBrackets.contains(s)) {\n                return false;\n\
    \            }\n        });\n        return true;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6pt80y80.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(bracket);\n                 \
    \                   ^\n/tmp/tmp6pt80y80.java:28: error: incompatible types: char\
    \ cannot be converted to String\n                closingBrackets.add(bracket);\n\
    \                                    ^\n/tmp/tmp6pt80y80.java:36: error: incompatible\
    \ types: unexpected return value\n        openingBrackets.forEach(s -> {\n   \
    \                             ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmp_eyucav3.java:26)\n\
    \tat Problem.main(tmp_eyucav3.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        openingBrackets.add(\"\
    (\");\n        openingBrackets.add(\"[\");\n        openingBrackets.add(\"{\"\
    );\n        openingBrackets.add(\"(\");\n        openingBrackets.add(\")\");\n\
    \        openingBrackets.add(\"]\");\n        openingBrackets.add(\"}\");\n  \
    \      openingBrackets.add(\")\");\n        openingBrackets.add(\"]\");\n    \
    \    openingBrackets.add(\"}\");\n        openingBrackets.add(\"}\");\n      \
    \  openingBrackets.add(\")\");\n        openingBrackets.add(\"]\");\n        openingBrackets.add(\"\
    }\");\n        openingBrackets.add(\"}\");\n        openingBrackets.add(\")\"\
    );\n        openingBrackets.add(\"]\");\n        openingBrackets.add(\"}\");\n\
    \        openingBrackets.add(\"}\");\n        openingBrackets.add(\")\");\n  \
    \      openingBrackets.add(\"]\");\n        openingBrackets.add(\"}\");\n    \
    \    openingBrackets.add(\"}\");\n        openingBrackets.add(\")\");\n      \
    \  openingBrackets.add(\"]\");\n        openingBrackets.add(\"}\");\n        openingBrackets.add(\"\
    }\");\n        openingBrackets.add(\")\");\n        openingBrackets.add(\"]\"\
    );\n        openingBrackets.add(\"}\");\n        openingBrackets.add(\"}\");\n\
    \        openingBrackets.add(\")\");\n        openingBrackets.add(\"]\");\n  \
    \      openingBrackets.add(\"}\");\n        openingBrackets.add(\"}\");\n    \
    \    openingBrackets.add(\")\");\n        openingBrackets.add(\"]\");\n      \
    \  openingBrackets.add(\"}\");\n        openingBrackets.add(\"}\");\n        openingBrackets.add(\"\
    )\");\n        openingBrackets.add(\"]\");\n        openingBrackets.add(\"}\"\
    );\n        openingBrackets.add(\"}\");\n        openingBrackets.add(\")\");\n\
    \        openingBrackets.add(\"]\");\n        openingBrackets.add(\"}\");\n  \
    \      openingBrackets.add(\"}\");\n        openingBrackets.add(\")\");\n    \
    \    openingBrackets.add(\"]\");\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgfqc5m9z.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ bracketList = new ArrayList<>();\n        bracketList.add(brackets);\n     \
    \   bracketList.stream().forEach(s -> {\n            if (s.equals(\"(\")) {\n\
    \                openingBrackets.add(s);\n            } else if (s.equals(\")\"\
    )) {\n                closingBrackets.add(s);\n            }\n        });\n  \
    \      openingBrackets.stream().forEach(s -> {\n            if (!closingBrackets.contains(s))\
    \ {\n                return false;\n            }\n        });\n        return\
    \ true;\n\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3y4parf4.java:31: error: incompatible types: unexpected return\
    \ value\n        openingBrackets.stream().forEach(s -> {\n                   \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < brackets.length(); i++)\
    \ {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n \
    \               openingBrackets.add(c+\"\");\n            } else if (c == ')')\
    \ {\n                closingBrackets.add(c+\"\");\n            } else {\n    \
    \            sb.append(c);\n            }\n        }\n        openingBrackets.removeAll(closingBrackets);\n\
    \        return openingBrackets.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_f1gl3vv.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> closingBrackets = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        Set<String> openingBracketSet = new HashSet<>(openingBrackets);\n\
    \        Set<String> closingBracketSet = new HashSet<>(closingBrackets);\n   \
    \     return openingBracketSet.containsAll(closingBracketSet);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvke6p2a.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> closingBrackets = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> openingBracketsCopy = new ArrayList<>(openingBrackets);\n\
    \        List<String> closingBracketsCopy = new ArrayList<>(closingBrackets);\n\
    \        openingBracketsCopy.removeAll(closingBracketsCopy);\n        return openingBracketsCopy.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfr0gg87b.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                if(stack.isEmpty()) {\n     \
    \               return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n            }\n        }\n        return stack.isEmpty();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n        closingBracketsStack.add(brackets);\n\
    \        while (openingBracketsStack.size() > 0) {\n            String openingBracket\
    \ = openingBracketsStack.get(openingBracketsStack.size() - 1);\n            String\
    \ closingBracket = closingBracketsStack.get(closingBracketsStack.size() - 1);\n\
    \            if (openingBracket.equals(\"(\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ if (closingBracket.equals(\")\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ if (closingBracket.equals(\"(\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (closingBracket.equals(\")\")) {\n                closingBracketsStack.add(closingBracket);\n\
    \            } else if (closingBracket.equals(\"[\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (closingBracket.equals(\"]\")) {\n                closingBracketsStack.add(closingBracket);\n\
    \            } else if (closingBracket.equals(\"{\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (closingBracket.equals(\"}\")) {\n                closingBracketsStack.add(closingBracket);\n\
    \            } else if (closingBracket.equals(\"<\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (closingBracket.equals(\">\")) {\n                closingBracketsStack.add(closingBracket);\n\
    \            } else if (closingBracket.equals(\"+\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (closingBracket.equals(\"-\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (closingBracket.equals(\"*\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (closingBracket.equals(\"/\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (closingBracket.equals(\"%\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            } else if (closingBracket.equals(\"^\")) {\n                opening\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt0bxn5qn.java:62: error: not a statement\n                opening\n\
    \                ^\n/tmp/tmpt0bxn5qn.java:62: error: ';' expected\n          \
    \      opening\n                       ^\n/tmp/tmpt0bxn5qn.java:64: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStrings = new ArrayList<>();\n        List<String> closingBracketsStrings\
    \ = new ArrayList<>();\n        List<String> openingBracketsStringsCopy = new\
    \ ArrayList<>();\n        List<String> closingBracketsStringsCopy = new ArrayList<>();\n\
    \        List<String> openingBracketsStringsCopy2 = new ArrayList<>();\n     \
    \   List<String> closingBracketsStringsCopy2 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStringsCopy3 = new ArrayList<>();\n        List<String> closingBracketsStringsCopy3\
    \ = new ArrayList<>();\n        List<String> openingBracketsStringsCopy4 = new\
    \ ArrayList<>();\n        List<String> closingBracketsStringsCopy4 = new ArrayList<>();\n\
    \        List<String> openingBracketsStringsCopy5 = new ArrayList<>();\n     \
    \   List<String> closingBracketsStringsCopy5 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStringsCopy6 = new ArrayList<>();\n        List<String> closingBracketsStringsCopy6\
    \ = new ArrayList<>();\n        List<String> openingBracketsStringsCopy7 = new\
    \ ArrayList<>();\n        List<String> closingBracketsStringsCopy7 = new ArrayList<>();\n\
    \        List<String> openingBracketsStringsCopy8 = new ArrayList<>();\n     \
    \   List<String> closingBracketsStringsCopy8 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStringsCopy9 = new ArrayList<>();\n        List<String> closingBracketsStringsCopy9\
    \ = new ArrayList<>();\n        List<String> openingBracketsStringsCopy10 = new\
    \ ArrayList<>();\n        List<String> closingBracketsStringsCopy10 = new ArrayList<>();\n\
    \        List<String> openingBracketsStringsCopy11 = new ArrayList<>();\n    \
    \    List<String> closingBracketsStringsCopy11 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStringsCopy12 = new ArrayList<>();\n        List<String> closingBracketsStringsCopy12\
    \ = new ArrayList<>();\n        List<String> openingBracketsStringsCopy13 = new\
    \ ArrayList<>();\n        List<String> closingBracketsStringsCopy13 = new ArrayList<>();\n\
    \        List<String> openingBracketsStringsCopy14 = new ArrayList<>();\n    \
    \    List<String> closingBracketsStringsCopy14 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStringsCopy15 = new ArrayList<>();\n        List<String> closingBracketsStringsCopy15\
    \ = new ArrayList<>();\n        List<String> \n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1fdhku_3.java:54: error: not a statement\n        List<String>\
    \ \n            ^\n/tmp/tmp1fdhku_3.java:54: error: ';' expected\n        List<String>\
    \ \n                    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[' || c == ']') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == ']') {\n                    if(c\
    \ == '[') {\n                        stack.push(c);\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    if(c != ']') {\n                        return\
    \ false;\n                    }\n                }\n            } else if(c ==\
    \ '{') {\n                if(stack.isEmpty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if(top\
    \ == '}') {\n                    if(c == '{') {\n                        stack.push(c);\n\
    \                    } else {\n                        return false;\n       \
    \             }\n                } else {\n                    if(c != '}') {\n\
    \                        return false;\n                    }\n              \
    \  }\n            } else if(c == '<') {\n                if(stack.isEmpty()) {\n\
    \                    return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top == '>') {\n                    if(c ==\
    \ '<') {\n                        stack.push(c);\n                    } else {\n\
    \                        return false;\n                    }\n              \
    \  } else {\n                    if(c != '>') {\n                        return\
    \ false;\n                    }\n                }\n            } else if(c ==\
    \ '!') {\n                if(stack.isEmpty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if(top\
    \ == '=') {\n                    if(c == '!') {\n                        stack.push(c);\n\
    \                    } else {\n                        return false;\n       \
    \             }\n                } else {\n                    if(c != '=') {\n\
    \                        return false;\n                    }\n              \
    \  }\n            } else if(c == '|') {\n                if(stack.isEmpty()) {\n\
    \                    return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top == '|') {\n                    if(c ==\
    \ '|') {\n                        stack.push(c);\n                    } else {\n\
    \                        return false;\n                    }\n              \
    \  } else {\n                    if(c != '|') {\n                        return\
    \ false;\n                    }\n                }\n            } else if(c ==\
    \ '&') {\n                if(stack.isEmpty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if(top\
    \ == '&') {\n                    if(c == '&') {\n                        stack.push(c);\n\
    \                    } else {\n                        return false;\n       \
    \             }\n                } else {\n                    if(c != '&') {\n\
    \                        return false;\n                    }\n              \
    \  }\n            } else if(c == '=') {\n                if(stack.isEmpty()) {\n\
    \                    return false;\n                }\n                char top\
    \ = stack.pop();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpos9pou12.java:135: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n        closingBracketsStack.add(brackets);\n\
    \        boolean result = true;\n        while (openingBracketsStack.size() >\
    \ 0) {\n            String openingBracket = openingBracketsStack.get(openingBracketsStack.size()\
    \ - 1);\n            String closingBracket = closingBracketsStack.get(closingBracketsStack.size()\
    \ - 1);\n            if (openingBracket.equals(\"(\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ if (closingBracket.equals(\")\")) {\n                openingBracketsStack.remove(openingBracketsStack.size()\
    \ - 1);\n                closingBracketsStack.remove(closingBracketsStack.size()\
    \ - 1);\n            } else {\n                result = false;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ == ')') {\n                    return true;\n                }\n           \
    \ }\n        }\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p0qcbg2.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) != brackets.charAt(i + 1)) {\n   \
    \             result = false;\n                break;\n            }\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiowhgtum.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (!stack.isEmpty()) {\n                 \
    \   char top = stack.pop();\n                    if (top != '(') {\n         \
    \               return false;\n                    }\n                }\n    \
    \        } else {\n                return false;\n            }\n        }\n \
    \       return !stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp288l7h8m.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[' || c == ']') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != c && top != '[' && top != ']')\
    \ {\n                    return false;\n                }\n            } else\
    \ if(c == '{' || c == '}') {\n                if(stack.isEmpty()) {\n        \
    \            return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != c && top != '{' && top != '}') {\n                \
    \    return false;\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        brackets.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\
    \\\\+|\\\\-\", \"\");\n        brackets.replaceAll(\"\\\\*|\\\\/\", \"\");\n \
    \       brackets.replaceAll(\"\\\\^\", \"\");\n        brackets.replaceAll(\"\\\
    \\%\", \"\");\n        brackets.replaceAll(\"\\\\*\", \"\");\n        brackets.replaceAll(\"\
    \\\\+\", \"\");\n        brackets.replaceAll(\"\\\\-\", \"\");\n        brackets.replaceAll(\"\
    \\\\/\", \"\");\n        brackets.replaceAll(\"\\\\^\", \"\");\n        brackets.replaceAll(\"\
    \\\\%\", \"\");\n        brackets.replaceAll(\"\\\\*\", \"\");\n        brackets.replaceAll(\"\
    \\\\+\", \"\");\n        brackets.replaceAll(\"\\\\-\", \"\");\n        brackets.replaceAll(\"\
    \\\\/\", \"\");\n        brackets.replaceAll(\"\\\\^\", \"\");\n        brackets.replaceAll(\"\
    \\\\%\", \"\");\n        brackets.replaceAll(\"\\\\*\", \"\");\n        brackets.replaceAll(\"\
    \\\\+\", \"\");\n        brackets.replaceAll(\"\\\\-\", \"\");\n        brackets.replaceAll(\"\
    \\\\/\", \"\");\n        brackets.replaceAll(\"\\\\^\", \"\");\n        brackets.replaceAll(\"\
    \\\\%\", \"\");\n        brackets.replaceAll(\"\\\\*\", \"\");\n        brackets.replaceAll(\"\
    \\\\+\", \"\");\n        brackets.replaceAll(\"\\\\-\", \"\");\n        brackets.replaceAll(\"\
    \\\\/\", \"\");\n        brackets.replaceAll(\"\\\\^\", \"\");\n        brackets.replaceAll(\"\
    \\\\%\", \"\");\n        brackets.replaceAll(\"\\\\*\", \"\");\n        brackets.replaceAll(\"\
    \\\\+\", \"\");\n        brackets.replaceAll(\"\\\\-\", \"\");\n        brackets.replaceAll(\"\
    \\\\/\", \"\");\n        brackets.replaceAll(\"\\\\^\", \"\");\n        brackets.replaceAll(\"\
    \\\\%\", \"\");\n        brackets.replaceAll(\"\\\\*\", \"\");\n        brackets.replaceAll(\"\
    \\\\+\", \"\");\n        brackets.replaceAll(\"\\\\-\", \"\");\n        brackets.replaceAll(\"\
    \\\\/\", \"\");\n        brackets.replaceAll(\"\\\\^\", \"\");\n        brackets.replaceAll(\"\
    \\\\%\", \"\");\n        brackets.replaceAll(\"\\\\*\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp105vq_af.java:65: error: unclosed string literal\n        brackets.replaceAll(\"\
    \\\\*\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) != '(') {\n                result\
    \ = false;\n            }\n            if(brackets.charAt(i) != ')') {\n     \
    \           result = false;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwl81rvra.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            } else {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        boolean result = true;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(c+\"\");\n \
    \           } else if (c == ')') {\n                closingBrackets.add(c+\"\"\
    );\n            } else {\n                sb.append(c);\n            }\n     \
    \   }\n        if (openingBrackets.size() != closingBrackets.size()) {\n     \
    \       result = false;\n        } else {\n            Set<String> openingBracketSet\
    \ = new HashSet<>(openingBrackets);\n            Set<String> closingBracketSet\
    \ = new HashSet<>(closingBrackets);\n            Set<String> openingBracketsSet\
    \ = new HashSet<>(openingBrackets);\n            Set<String> closingBracketsSet\
    \ = new HashSet<>(closingBrackets);\n            openingBracketsSet.remove(\"\
    (\");\n            closingBracketsSet.remove(\")\");\n            openingBracketsSet.remove(\"\
    [\");\n            closingBracketsSet.remove(\"]\");\n            openingBracketsSet.remove(\"\
    {\");\n            closingBracketsSet.remove(\"}\");\n            openingBracketsSet.remove(\"\
    (\");\n            closingBracketsSet.remove(\")\");\n            openingBracketsSet.remove(\"\
    [\");\n            closingBracketsSet.remove(\"]\");\n            openingBracketsSet.remove(\"\
    {\");\n            closingBracketsSet.remove(\"}\");\n            openingBracketsSet.remove(\"\
    (\");\n            closingBracketsSet.remove(\")\");\n            openingBracketsSet.remove(\"\
    [\");\n            closingBracketsSet.remove(\"]\");\n            openingBracketsSet.remove(\"\
    {\");\n            closingBracketsSet.remove(\"}\");\n            openingBracketsSet.remove(\"\
    (\");\n            closingBracketsSet.remove(\")\");\n            openingBracketsSet.remove(\"\
    [\");\n            closingBracketsSet.remove(\"]\");\n            openingBracketsSet.remove(\"\
    {\");\n            closingBracketsSet.remove(\"}\");\n            openingBracketsSet.remove(\"\
    (\");\n            closingBracketsSet.remove(\")\");\n            openingBracketsSet.remove(\"\
    [\");\n            closingBracketsSet.remove(\"]\");\n            \n    }\n  \
    \  public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp05vtj_uf.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<String>();\n\
    \        List<String> closingBrackets = new ArrayList<String>();\n        boolean\
    \ result = true;\n        for (int i = 0; i < brackets.length(); i++) {\n    \
    \        char c = brackets.charAt(i);\n            if (c == '(') {\n         \
    \       openingBrackets.add(c);\n            } else if (c == ')') {\n        \
    \        closingBrackets.add(c);\n            } else {\n                result\
    \ = false;\n            }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            result = false;\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx3laobx5.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpx3laobx5.java:28: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) != '(') {\n                result\
    \ = false;\n                break;\n            }\n        }\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) != ')')\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2tufrnln.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else {\n            \
    \    return false;\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        for (char c :\
    \ brackets.toCharArray()) {\n            if (c == '(') {\n                openingBrackets.add(c);\n\
    \            } else if (c == ')') {\n                closingBrackets.add(c);\n\
    \            }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            return false;\n        }\n        Iterator<String> openingBracketsIterator\
    \ = openingBrackets.iterator();\n        Iterator<String> closingBracketsIterator\
    \ = closingBrackets.iterator();\n        while (openingBracketsIterator.hasNext()\
    \ && closingBracketsIterator.hasNext()) {\n            String openingBracket =\
    \ openingBracketsIterator.next();\n            String closingBracket = closingBracketsIterator.next();\n\
    \            if (!openingBracket.equals(closingBracket)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgmh3jm0v.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpgmh3jm0v.java:26: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else if(!stack.isEmpty()\
    \ && stack.peek() == '(') {\n                stack.pop();\n            }\n   \
    \     }\n        return !stack.isEmpty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm6syknoa.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else {\n            \
    \    return false;\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) == '(') {\n                if(brackets.charAt(i+1)\
    \ == '(') {\n                    if(brackets.charAt(i+2) == '(') {\n         \
    \               if(brackets.charAt(i+3) == '(') {\n                          \
    \  if(brackets.charAt(i+4) == '(') {\n                                if(brackets.charAt(i+5)\
    \ == '(') {\n                                    if(brackets.charAt(i+6) == '(')\
    \ {\n                                        if(brackets.charAt(i+7) == '(') {\n\
    \                                            if(brackets.charAt(i+8) == '(') {\n\
    \                                                if(brackets.charAt(i+9) == '(')\
    \ {\n                                                    if(brackets.charAt(i+10)\
    \ == '(') {\n                                                        if(brackets.charAt(i+11)\
    \ == '(') {\n                                                            if(brackets.charAt(i+12)\
    \ == '(') {\n                                                                if(brackets.charAt(i+13)\
    \ == '(') {\n                                                                \
    \    if(brackets.charAt(i+14) == '(') {\n                                    \
    \                                    if(brackets.charAt(i+15) == '(') {\n    \
    \                                                                        if(brackets.charAt(i+16)\
    \ == '(') {\n                                                                \
    \                if(brackets.charAt(i+17) == '(') {\n                        \
    \                                                            if(brackets.charAt(i+18)\
    \ == '(') {\n                                                                \
    \                        if(brackets.charAt(i+19) == '(') {\n                \
    \                                                                            if(brackets.charAt(i+20)\
    \ == '(') {\n                                                                \
    \                                if(brackets.charAt(i+21) == '(') {\n        \
    \                                                                            \
    \                if(brackets.charAt(i+22) == '(') {\n                        \
    \                                                                            \
    \    if(brackets.charAt(i+23) == '(') {\n                                    \
    \                                                                        if(brackets.charAt(i+24)\
    \ == '(') {\n                                                                \
    \                                                if(brackets.charAt(i+25) == '(')\
    \ {\n                                                                        \
    \                                            if(brackets.charAt(i+26) == '(')\
    \ {\n                                                                        \
    \                                                if(brackets.charAt(i+27) == '(')\
    \ {\n                                                                        \
    \                                                    if(brackets.charAt(i+28)\
    \ == '(') {\n                                                                \
    \                                                                if(brackets.charAt(i+29)\
    \ == '(') {\n                                                                \
    \                                                                    if(brackets.charAt(i+30)\
    \ == '(') {\n                                                                \
    \                                                                        if(brackets.charAt(i+31)\
    \ == '(') {\n                                                                \
    \                                                                            if(brackets.charAt(i+32)\
    \ == '(') {\n                                                                \
    \                                                                            \
    \    if(brackets.charAt(i+33) == '(') {\n                                    \
    \                                                                            \
    \                                    if(brackets.charAt(i+34) == '(') {\n    \
    \                                                                            \
    \                                                                        if(brackets.charAt(i+35)\
    \ == '(') {\n                                                                \
    \                                                                            \
    \                if\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmmeytglf.java:58: error: '(' expected\n                       \
    \                                                                            \
    \                                                         if\n               \
    \                                                                            \
    \                                                                   ^\n/tmp/tmpmmeytglf.java:59:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmpmmeytglf.java:60:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\nprinting javac parameters to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_150648.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> closingBrackets = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> openingBracketsCopy = new ArrayList<>(openingBrackets);\n\
    \        List<String> closingBracketsCopy = new ArrayList<>(closingBrackets);\n\
    \        openingBracketsCopy.removeAll(closingBracketsCopy);\n        return openingBracketsCopy.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph5zuyf4n.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            } else {\n                if (stack.isEmpty()\
    \ || c != stack.peek()) {\n                    return false;\n               \
    \ }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != '(' && top != ')') {\n          \
    \          return false;\n                }\n            }\n        }\n      \
    \  return stack.isEmpty();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        boolean result = true;\n        for(int i = 0;\
    \ i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n  \
    \          if(c == '(') {\n                openingBrackets.add(c);\n         \
    \       openingBracketsStack.add(c);\n            } else if(c == ')') {\n    \
    \            closingBrackets.add(c);\n                closingBracketsStack.add(c);\n\
    \            } else if(c == '(' || c == ')') {\n                if(!openingBracketsStack.isEmpty()\
    \ && !closingBracketsStack.isEmpty()) {\n                    if(openingBracketsStack.get(openingBracketsStack.size()\
    \ - 1) != '(') {\n                        result = false;\n                  \
    \  }\n                    if(closingBracketsStack.get(closingBracketsStack.size()\
    \ - 1) != ')') {\n                        result = false;\n                  \
    \  }\n                    openingBracketsStack.remove(openingBracketsStack.size()\
    \ - 1);\n                    closingBracketsStack.remove(closingBracketsStack.size()\
    \ - 1);\n                }\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp19emrrtp.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmp19emrrtp.java:29: error: incompatible types: char cannot\
    \ be converted to String\n                openingBracketsStack.add(c);\n     \
    \                                    ^\n/tmp/tmp19emrrtp.java:31: error: incompatible\
    \ types: char cannot be converted to String\n                closingBrackets.add(c);\n\
    \                                    ^\n/tmp/tmp19emrrtp.java:32: error: incompatible\
    \ types: char cannot be converted to String\n                closingBracketsStack.add(c);\n\
    \                                         ^\n/tmp/tmp19emrrtp.java:35: error:\
    \ bad operand types for binary operator '!='\n                    if(openingBracketsStack.get(openingBracketsStack.size()\
    \ - 1) != '(') {\n                                                           \
    \                      ^\n  first type:  String\n  second type: char\n/tmp/tmp19emrrtp.java:38:\
    \ error: bad operand types for binary operator '!='\n                    if(closingBracketsStack.get(closingBracketsStack.size()\
    \ - 1) != ')') {\n                                                           \
    \                      ^\n  first type:  String\n  second type: char\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty() || c !=\
    \ stack.peek()) {\n                    return false;\n                }\n    \
    \        }\n        }\n        return stack.isEmpty();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                return false;\n            }\n        }\n    \
    \    return stack.isEmpty();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd0k4jtzo.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty()) {\n          \
    \          return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != c) {\n                    return false;\n         \
    \       }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) != brackets.charAt(i + 1)) {\n   \
    \             result = false;\n                break;\n            }\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_xr6rha_.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[' || c == ']') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == ']') {\n                    if(c\
    \ != '[') {\n                        return false;\n                    }\n  \
    \              } else {\n                    if(c != '[') {\n                \
    \        return false;\n                    }\n                }\n           \
    \ } else if(c == '{') {\n                if(stack.isEmpty()) {\n             \
    \       return false;\n                }\n                char top = stack.pop();\n\
    \                if(top == '}') {\n                    if(c != '{') {\n      \
    \                  return false;\n                    }\n                } else\
    \ {\n                    if(c != '{') {\n                        return false;\n\
    \                    }\n                }\n            } else if(c == '<') {\n\
    \                if(stack.isEmpty()) {\n                    return false;\n  \
    \              }\n                char top = stack.pop();\n                if(top\
    \ == '>') {\n                    if(c != '<') {\n                        return\
    \ false;\n                    }\n                } else {\n                  \
    \  if(c != '<') {\n                        return false;\n                   \
    \ }\n                }\n            } else if(c == '!') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '=') {\n                    if(c\
    \ != '!') {\n                        return false;\n                    }\n  \
    \              } else {\n                    if(c != '!') {\n                \
    \        return false;\n                    }\n                }\n           \
    \ } else if(c == '.') {\n                if(stack.isEmpty()) {\n             \
    \       return false;\n                }\n                char top = stack.pop();\n\
    \                if(top == '.') {\n                    if(c != '.') {\n      \
    \                  return false;\n                    }\n                } else\
    \ {\n                    if(c != '.') {\n                        return false;\n\
    \                    }\n                }\n            } else if(c == '\\n') {\n\
    \                if(stack.isEmpty()) {\n                    return false;\n  \
    \              }\n                char top = stack.pop();\n                if(top\
    \ == '\\n') {\n                    if(c != '\\n') {\n                        return\
    \ false;\n                    }\n                } else {\n                  \
    \  if(c != '\\n') {\n                        return false;\n                 \
    \   }\n                }\n            } else if(c == '\\'') {\n              \
    \  if(stack.isEmpty()) {\n                    return false;\n                }\n\
    \                char top = stack.pop();\n                if(top == '\\'') {\n\
    \                    if(c != '\\'') {\n                        return false;\n\
    \                    }\n                } else {\n                    if(c !=\
    \ '\\'') {\n                        return false;\n                    }\n   \
    \             }\n            } else if(c == '\\\\') {\n                if(\n \
    \   }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp37zdrv8f.java:133: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmp37zdrv8f.java:134: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : brackets.toCharArray()) {\n\
    \            if (c == '(') {\n                openingBrackets.add(c+\"\");\n \
    \           } else if (c == ')') {\n                closingBrackets.add(c+\"\"\
    );\n            } else {\n                sb.append(c);\n            }\n     \
    \   }\n        openingBrackets.sort();\n        closingBrackets.sort();\n    \
    \    boolean result = true;\n        for (String openingBracket : openingBrackets)\
    \ {\n            boolean found = false;\n            for (String closingBracket\
    \ : closingBrackets) {\n                if (openingBracket.equals(closingBracket))\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo_4mkqhf.java:32: error: method sort in interface List<E> cannot\
    \ be applied to given types;\n        openingBrackets.sort();\n              \
    \         ^\n  required: Comparator<? super String>\n  found:    no arguments\n\
    \  reason: actual and formal argument lists differ in length\n  where E is a type-variable:\n\
    \    E extends Object declared in interface List\n/tmp/tmpo_4mkqhf.java:33: error:\
    \ method sort in interface List<E> cannot be applied to given types;\n       \
    \ closingBrackets.sort();\n                       ^\n  required: Comparator<?\
    \ super String>\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n  where E is a type-variable:\n    E extends Object\
    \ declared in interface List\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n        closingBracketsStack.add(brackets);\n\
    \        boolean result = true;\n        while (openingBracketsStack.size() >\
    \ 0) {\n            String openingBracket = openingBracketsStack.remove(0);\n\
    \            String closingBracket = closingBracketsStack.remove(0);\n       \
    \     if (openingBracket.equals(\"(\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(closingBracket);\n\
    \                closingBracketsStack.add(openingBracket);\n            } else\
    \ if (closingBracket.equals(\")\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp15x_eod9.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) != brackets.charAt(i + 1)) {\n   \
    \             result = false;\n                break;\n            }\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaxhh7j2o.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                return false;\n            }\n        }\n    \
    \    return !stack.isEmpty();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6v0qz7_k.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        boolean allOpeningBracketsAreClosed\
    \ = true;\n        boolean allClosingBracketsAreOpen = true;\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ openingBrackets.add(c);\n            } else if (c == ')') {\n              \
    \  closingBrackets.add(c);\n            } else {\n                allOpeningBracketsAreClosed\
    \ = false;\n                allClosingBracketsAreOpen = false;\n            }\n\
    \        }\n        if (allOpeningBracketsAreClosed && allClosingBracketsAreOpen)\
    \ {\n            return true;\n        }\n        return false;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvixl8s53.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpvixl8s53.java:28: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<String>();\n\
    \        List<String> closingBrackets = new ArrayList<String>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<String>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<String>();\n        boolean result = false;\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                openingBrackets.add(c+\"\");\n  \
    \              openingBracketsStack.add(c+\"\");\n            } else if(c == ')')\
    \ {\n                closingBrackets.add(c+\"\");\n                closingBracketsStack.add(c+\"\
    \");\n            } else if(c == '(' || c == ')') {\n                openingBracketsStack.remove(c+\"\
    \");\n                closingBracketsStack.remove(c+\"\");\n            }\n  \
    \      }\n        if(openingBrackets.size() != closingBrackets.size()) {\n   \
    \         result = false;\n        } else {\n            for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n                if(!closingBrackets.contains(openingBrackets.get(i)))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe4k_z3tn.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            } else {\n                if (stack.isEmpty()\
    \ || c != stack.peek()) {\n                    return false;\n               \
    \ }\n            }\n        }\n        return stack.isEmpty();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        boolean result\
    \ = true;\n        for(int i = 0; i < brackets.length(); i++) {\n            char\
    \ c = brackets.charAt(i);\n            if(c == '(') {\n                openingBrackets.add(c+\"\
    \");\n            } else if(c == ')') {\n                closingBrackets.add(c+\"\
    \");\n            } else {\n                result = false;\n            }\n \
    \       }\n        for(int i = 0; i < openingBrackets.size(); i++) {\n       \
    \     if(!closingBrackets.contains(openingBrackets.get(i))) {\n              \
    \  result = false;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpou2uvk87.java:42)\n"
  exit_code: 1
  status: Exception
