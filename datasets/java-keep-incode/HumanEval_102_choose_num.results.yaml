name: HumanEval_102_choose_num
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = LongStream.rangeClosed(1, x).filter(i -> i % 2 == 0).max().getAsLong();\n\
    \        long odd = LongStream.rangeClosed(1, y).filter(i -> i % 2 == 1).max().getAsLong();\n\
    \        if (even > odd) return even;\n        return -1;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4iwh7j0k.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if (mid % 2\
    \ == 0) {\n                even = mid;\n            } else {\n               \
    \ odd = mid;\n            }\n            if (even > biggest) {\n             \
    \   biggest = even;\n            }\n        }\n        return biggest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long even = -1;\n        long odd\
    \ = 0;\n        long evenMax = -1;\n        long evenMin = -1;\n        long oddMax\
    \ = -1;\n        long oddMin = -1;\n        long evenMax2 = -1;\n        long\
    \ evenMin2 = -1;\n        long oddMax2 = -1;\n        long oddMin2 = -1;\n   \
    \     long evenMax3 = -1;\n        long evenMin3 = -1;\n        long oddMax3 =\
    \ -1;\n        long oddMin3 = -1;\n        long evenMax4 = -1;\n        long evenMin4\
    \ = -1;\n        long oddMax4 = -1;\n        long oddMin4 = -1;\n        long\
    \ evenMax5 = -1;\n        long evenMin5 = -1;\n        long oddMax5 = -1;\n  \
    \      long oddMin5 = -1;\n        long evenMax6 = -1;\n        long evenMin6\
    \ = -1;\n        long oddMax6 = -1;\n        long oddMin6 = -1;\n        long\
    \ evenMax7 = -1;\n        long evenMin7 = -1;\n        long oddMax7 = -1;\n  \
    \      long oddMin7 = -1;\n        long evenMax8 = -1;\n        long evenMin8\
    \ = -1;\n        long oddMax8 = -1;\n        long oddMin8 = -1;\n        long\
    \ evenMax9 = -1;\n        long evenMin9 = -1;\n        long oddMax9 = -1;\n  \
    \      long oddMin9 = -1;\n        long evenMax10 = -1;\n        long evenMin10\
    \ = -1;\n        long oddMax10 = -1;\n        long oddMin10 = -1;\n        long\
    \ evenMax11 = -1;\n        long evenMin11 = -1;\n        long oddMax11 = -1;\n\
    \        long oddMin11 = -1;\n        long evenMax12 = -1;\n        long evenMin12\
    \ = -1;\n        long oddMax12 = -1;\n        long oddMin12 = -1;\n        long\
    \ evenMax13 = -1;\n        long evenMin13 = -1;\n        long oddMax13 = -1;\n\
    \        long oddMin13 = -1;\n        long evenMax14 = -1;\n        long evenMin14\
    \ = -1;\n        long oddMax14 = -1;\n        long oddMin14 = -1;\n        long\
    \ evenMax15 = -1;\n        long evenMin15 = -1;\n        long oddMax15 = -1;\n\
    \        long oddMin15 = -1;\n        long evenMax16 = -1;\n        long evenMin16\
    \ = -1;\n        long oddMax16 = -1;\n        long oddMin16 = -1;\n        long\
    \ evenMax17 = -1;\n        long evenMin17 = -1;\n        long oddMax17 = -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcdrrke8j.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long minNum = x;\n        long maxNum\
    \ = y;\n        long evenNum = 0;\n        long oddNum = 0;\n        long evenMin\
    \ = minNum;\n        long evenMax = maxNum;\n        long oddMin = minNum;\n \
    \       long oddMax = maxNum;\n        long evenMinNum = minNum;\n        long\
    \ evenMaxNum = maxNum;\n        long oddMinNum = minNum;\n        long oddMaxNum\
    \ = maxNum;\n        long evenMinEven = minEven;\n        long evenMaxEven = maxEven;\n\
    \        long oddMinEven = minEven;\n        long oddMaxEven = maxEven;\n    \
    \    long evenMinOdd = minEven;\n        long evenMaxOdd = maxEven;\n        long\
    \ oddMinOdd = minEven;\n        long oddMaxOdd = maxEven;\n        long evenMinEvenNum\
    \ = minEven;\n        long evenMaxEvenNum = maxEven;\n        long oddMinEvenNum\
    \ = minEven;\n        long oddMaxEvenNum = maxEven;\n        long evenMinOddNum\
    \ = minEven;\n        long evenMaxOddNum = maxEven;\n        long oddMinOddNum\
    \ = minEven;\n        long oddMaxOddNum = maxEven;\n        long evenMinEvenEven\
    \ = minEven;\n        long evenMaxEvenEven = maxEven;\n        long oddMinEvenEven\
    \ = minEven;\n        long oddMaxEvenEven = maxEven;\n        long evenMinOddEven\
    \ = minEven;\n        long evenMaxOddEven = maxEven;\n        long oddMinOddEven\
    \ = minEven;\n        long oddMaxOddEven = maxEven;\n        long evenMinEvenEvenNum\
    \ = minEven;\n        long evenMaxEvenEvenNum = maxEven;\n        long oddMinEvenEvenNum\
    \ = minEven;\n        long oddMaxEvenEvenNum = maxEven;\n        long evenMinOddEvenNum\
    \ = minEven;\n        long evenMaxOddEvenNum = maxEven;\n        long oddMinOddEvenNum\
    \ = minEven;\n        long oddMaxOddEvenNum = maxEven;\n        long evenMinEvenOdd\
    \ = minEven;\n        long evenMaxEvenOdd = maxEven;\n        long oddMin\n  \
    \  }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwnpsmm15.java:64: error: ';' expected\n        long oddMin\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            if(even % 2 == 0) {\n                even = even + 1;\n\
    \            } else {\n                odd = odd - 1;\n            }\n       \
    \     if(even > biggest) {\n                biggest = even;\n            }\n \
    \       }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwyti_vtg.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = LongStream.rangeClosed(1, x).filter(i -> i % 2 == 0).max().getAsLong();\n\
    \        long odd = LongStream.rangeClosed(1, y).filter(i -> i % 2 == 1).max().getAsLong();\n\
    \        if (even > odd) {\n            return even;\n        } else {\n     \
    \       return odd;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidduqdva.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long maxOdd = -1;\n        long minOdd\
    \ = -1;\n        long even = -1;\n        long odd = -1;\n        long evenMax\
    \ = -1;\n        long oddMax = -1;\n        long evenMin = -1;\n        long oddMin\
    \ = -1;\n        long evenMinMax = -1;\n        long oddMinMax = -1;\n       \
    \ long evenMaxMin = -1;\n        long oddMaxMin = -1;\n        long evenMinMaxMin\
    \ = -1;\n        long oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n \
    \       long oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n        long\
    \ oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n        long oddMinMaxMin\
    \ = -1;\n        long evenMaxMinMin = -1;\n        long oddMinMaxMin = -1;\n \
    \       long evenMaxMinMin = -1;\n        long oddMinMaxMin = -1;\n        long\
    \ evenMaxMinMin = -1;\n        long oddMinMaxMin = -1;\n        long evenMaxMinMin\
    \ = -1;\n        long oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n \
    \       long oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n        long\
    \ oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n        long oddMinMaxMin\
    \ = -1;\n        long evenMaxMinMin = -1;\n        long oddMinMaxMin = -1;\n \
    \       long evenMaxMinMin = -1;\n        long oddMinMaxMin = -1;\n        long\
    \ evenMaxMinMin = -1;\n        long oddMinMaxMin = -1;\n        long evenMaxMinMin\
    \ = -1;\n        long oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n \
    \       long oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n        long\
    \ oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n        long oddMinMaxMin\
    \ = -1;\n        long evenMaxMinMin = -1;\n        long oddMinMaxMin = -1;\n \
    \       long evenMaxMinMin = -1;\n        long oddMinMaxMin = -1;\n        long\
    \ evenMaxMinMin = -1;\n        long oddMinMaxMin = -1;\n        long evenMaxMinMin\
    \ = -1;\n        long oddMinMaxMin = -1;\n        long evenMaxMinMin = -1;\n \
    \       long oddMinMax\n    }\n    public static void main(String[] args) {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5i3b_s3x.java:75: error: ';' expected\n        long oddMinMax\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = LongStream.rangeClosed(x, y + 1).filter(i -> i % 2 == 0).max().getAsLong();\n\
    \        if (even > y) {\n            return -1;\n        }\n        return even;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppla54rp_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ 0;\n        long min = x;\n        long mid = min + (max - min) / 2;\n     \
    \   while (min <= max) {\n            mid = min + (max - min) / 2;\n         \
    \   if (mid % 2 == 0) {\n                max = mid;\n            } else {\n  \
    \              min = mid;\n            }\n        }\n        return max;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcxylm_e.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        long temp;\n\
    \        while (even < odd) {\n            temp = even;\n            even = odd\
    \ % even;\n            odd = temp % odd;\n            biggest = even;\n      \
    \  }\n        if (biggest == -1) {\n            return -1;\n        }\n      \
    \  return biggest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.chooseNum(tmpxkrl1a3x.java:22)\n\tat Problem.main(tmpxkrl1a3x.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            long mid = x + (y - x) / 2;\n    \
    \        if (mid % 2 == 0) {\n                result = mid;\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphdlv6akx.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            if (even % 2 == 0) {\n                even = even + 1;\n\
    \            } else {\n                odd = odd + 1;\n            }\n       \
    \     if (even > odd) {\n                biggest = even;\n            }\n    \
    \    }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long even = -1;\n        long odd\
    \ = 0;\n        long evenMax = -1;\n        long evenMin = -1;\n        long oddMax\
    \ = -1;\n        long oddMin = -1;\n        long evenMax2 = -1;\n        long\
    \ evenMin2 = -1;\n        long oddMax2 = -1;\n        long oddMin2 = -1;\n   \
    \     long evenMax3 = -1;\n        long evenMin3 = -1;\n        long oddMax3 =\
    \ -1;\n        long oddMin3 = -1;\n        long evenMax4 = -1;\n        long evenMin4\
    \ = -1;\n        long oddMax4 = -1;\n        long oddMin4 = -1;\n        long\
    \ evenMax5 = -1;\n        long evenMin5 = -1;\n        long oddMax5 = -1;\n  \
    \      long oddMin5 = -1;\n        long evenMax6 = -1;\n        long evenMin6\
    \ = -1;\n        long oddMax6 = -1;\n        long oddMin6 = -1;\n        long\
    \ evenMax7 = -1;\n        long evenMin7 = -1;\n        long oddMax7 = -1;\n  \
    \      long oddMin7 = -1;\n        long evenMax8 = -1;\n        long evenMin8\
    \ = -1;\n        long oddMax8 = -1;\n        long oddMin8 = -1;\n        long\
    \ evenMax9 = -1;\n        long evenMin9 = -1;\n        long oddMax9 = -1;\n  \
    \      long oddMin9 = -1;\n        long evenMax10 = -1;\n        long evenMin10\
    \ = -1;\n        long oddMax10 = -1;\n        long oddMin10 = -1;\n        long\
    \ evenMax11 = -1;\n        long evenMin11 = -1;\n        long oddMax11 = -1;\n\
    \        long oddMin11 = -1;\n        long evenMax12 = -1;\n        long evenMin12\
    \ = -1;\n        long oddMax12 = -1;\n        long oddMin12 = -1;\n        long\
    \ evenMax13 = -1;\n        long evenMin13 = -1;\n        long oddMax13 = -1;\n\
    \        long oddMin13 = -1;\n        long evenMax14 = -1;\n        long evenMin14\
    \ = -1;\n        long oddMax14 = -1;\n        long oddMin14 = -1;\n        long\
    \ evenMax15 = -1;\n        long evenMin15 = -1;\n        long oddMax15 = -1;\n\
    \        long oddMin15 = -1;\n        long evenMax16 = -1;\n        long evenMin16\
    \ = -1;\n        long oddMax16 = -1;\n        long oddMin16 = -1;\n        long\
    \ evenMax17 = -1;\n        long evenMin17 = -1;\n        long oddMax17 = -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpocpuv7ra.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        long temp;\n\
    \        while (even > 0 && odd > 0) {\n            temp = even % odd;\n     \
    \       if (temp == 0) {\n                biggest = even;\n                break;\n\
    \            }\n            even = even;\n            odd = odd;\n        }\n\
    \        return biggest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = 1, odd = 0;\n        long minEven = 1, minOdd = -1;\n\
    \        long maxOdd = -1;\n        long minEvenOdd = -1;\n        long maxEvenOdd\
    \ = -1;\n        long minEvenOddEven = -1;\n        long maxEvenOddEven = -1;\n\
    \        long minEvenOddOdd = -1;\n        long maxEvenOddOdd = -1;\n        long\
    \ minEvenOddEvenOdd = -1;\n        long maxEvenOddEvenOdd = -1;\n        long\
    \ minEvenOddOddEven = -1;\n        long maxEvenOddOddEven = -1;\n        long\
    \ minEvenOddOddOdd = -1;\n        long maxEvenOddOddOdd = -1;\n        long minEvenOddEvenOddOdd\
    \ = -1;\n        long maxEvenOddEvenOddOdd = -1;\n        long minEvenOddOddEvenOdd\
    \ = -1;\n        long maxEvenOddOddEvenOdd = -1;\n        long minEvenOddOddOddEven\
    \ = -1;\n        long maxEvenOddOddOddEven = -1;\n        long minEvenOddOddOddOdd\
    \ = -1;\n        long maxEvenOddOddOddOdd = -1;\n        long minEvenOddEvenOddOddOdd\
    \ = -1;\n        long maxEvenOddEvenOddOddOdd = -1;\n        long minEvenOddOddEvenOddOdd\
    \ = -1;\n        long maxEvenOddEvenOddEvenOdd = -1;\n        long minEvenOddOddOddEvenOdd\
    \ = -1;\n        long maxEvenOddOddOddEvenOdd = -1;\n        long minEvenOddOddOddOddEven\
    \ = -1;\n        long maxEvenOddOddOddOddEven = -1;\n        long minEvenOddOddOddOddOdd\
    \ = -1;\n        long maxEvenOddOddOddOddOdd = -1;\n        long minEvenOddEvenOddOddOdd\
    \ = -1;\n        long maxEvenOddEvenOddEvenOdd = -1;\n        long minEvenOddOddOddEvenOdd\
    \ = -1;\n        long maxEvenOddEvenOddOddOdd = -1;\n        long minEvenO\n \
    \   }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8m89evzk.java:54: error: ';' expected\n        long minEvenO\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = x;\n        long odd = y;\n        while(even < odd)\
    \ {\n            long mid = (even + odd) / 2;\n            if(mid % 2 == 0) {\n\
    \                even = mid;\n            } else {\n                odd = mid;\n\
    \            }\n        }\n        biggest = even;\n        return biggest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long minNum = -1;\n        long maxNum\
    \ = -1;\n        long evenNum = -1;\n        long oddNum = -1;\n        long evenMax\
    \ = -1;\n        long oddMax = -1;\n        long evenMin = -1;\n        long oddMin\
    \ = -1;\n        long evenRange = -1;\n        long oddRange = -1;\n        long\
    \ evenSum = -1;\n        long oddSum = -1;\n        long evenDiff = -1;\n    \
    \    long oddDiff = -1;\n        long evenProduct = -1;\n        long oddProduct\
    \ = -1;\n        long evenSumProduct = -1;\n        long oddSumProduct = -1;\n\
    \        long evenProductProduct = -1;\n        long oddProductProduct = -1;\n\
    \        long evenSumProductProduct = -1;\n        long oddSumProductProduct =\
    \ -1;\n        long evenProductProductProduct = -1;\n        long oddProductProductProduct\
    \ = -1;\n        long evenSumProductProductProduct = -1;\n        long oddSumProductProductProduct\
    \ = -1;\n        long evenProductProductProductProduct = -1;\n        long oddProductProductProductProduct\
    \ = -1;\n        long evenSumProductProductProductProduct = -1;\n        long\
    \ oddSumProductProductProductProduct = -1;\n        long evenProductProductProductProductProduct\
    \ = -1;\n        long oddProductProductProductProductProduct = -1;\n        long\
    \ evenSumProductProductProductProductProduct = -1;\n        long oddSumProductProductProductProductProduct\
    \ = -1;\n        long evenProductProductProductProductProduct = -1;\n        long\
    \ oddProductProductProductProductProduct = -1;\n        long evenSumProductProductProductProductProduct\
    \ = -1;\n        long oddSumProductProductProductProductProduct = -1;\n      \
    \  long evenProductProductProductProductProduct = -1;\n        long oddProductProductProductProductProduct\
    \ = -1;\n        long evenSumProductProductProductProductProduct = -1;\n     \
    \   long oddSumProductProductProductProductProduct = -1;\n        long evenProductProductProductProductProduct\
    \ = -1;\n        long oddProductProductProductProductProduct = -1;\n        long\
    \ evenSumProductProductProductProductProduct = -1;\n        long oddSumProductProductProductProductProduct\
    \ = -1;\n        long evenProductProductProductProductProduct = -1;\n        long\
    \ oddProductProductProductProductProduct = -1;\n        long evenSumProductProductProductProductProduct\
    \ = -1;\n        long oddSumProductProductProductProductProduct = -1;\n      \
    \  long evenProductProductProductProductProduct = -1;\n        long oddProductProductProductProductProduct\
    \ = -1;\n        long evenSum\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpfr6chubo.java:70: error: ';' expected\n        long evenSum\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        long eveneven = even;\n        long evenodd = odd;\n       \
    \ long oddodd = odd;\n        long eveneveneven = eveneven;\n        long evenevenodd\
    \ = evenodd;\n        long oddoddodd = oddodd;\n        long eveneveneveneven\
    \ = eveneveneven;\n        long evenevenevenodd = evenevenodd;\n        long oddoddoddodd\
    \ = oddoddodd;\n        long eveneveneveneveneven = eveneveneveneven;\n      \
    \  long evenevenevenevenodd = evenevenevenodd;\n        long oddoddoddoddodd =\
    \ oddoddoddodd;\n        long eveneveneveneveneveneven = eveneveneveneveneven;\n\
    \        long evenevenevenevenevenodd = evenevenevenevenodd;\n        long oddoddoddoddoddodd\
    \ = oddoddoddoddodd;\n        long eveneveneveneveneveneveneven = eveneveneveneveneveneven;\n\
    \        long evenevenevenevenevenevenodd = evenevenevenevenodd;\n        long\
    \ oddoddoddoddoddodd = oddoddoddoddodd;\n        long eveneveneveneveneveneveneveneven\
    \ = eveneveneveneveneveneveneven;\n        long evenevenevenevenevenevenevenodd\
    \ = evenevenevenevenevenodd;\n        long oddoddoddoddoddoddodd = oddoddoddoddodd;\n\
    \        long eveneveneveneveneveneveneveneveneven = eveneveneveneveneveneveneveneven;\n\
    \        long evenevenevenevenevenevenevenevenodd = evenevenevenevenevenevenodd;\n\
    \        long oddoddoddoddoddoddodd = oddoddoddoddoddodd;\n        long eveneveneveneveneveneveneveneveneveneven\
    \ = eveneveneveneveneveneveneveneven;\n        long evenevenevenevenevenevenevenevenevenodd\
    \ = evenevenevenevenevenevenodd;\n        long oddoddoddoddoddoddoddodd = oddoddoddoddoddodd;\n\
    \        long eveneveneveneveneveneveneveneveneveneven = eveneveneveneveneveneveneveneven;\n\
    \        long evenevenevenevenevenevenevenevenevenodd = evenevenevenevenevenevenodd;\n\
    \        long oddoddoddoddoddoddoddodd = oddoddoddoddoddoddodd;\n        long\
    \ eveneveneveneveneveneven\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzwe4oqw9.java:50: error: ';' expected\n        long eveneveneveneveneveneven\n\
    \                                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            return -1;\n        }\n        if\
    \ (x <= y) {\n            while (x <= y) {\n                if (x % 2 == 0) {\n\
    \                    result = x;\n                    break;\n               \
    \ }\n                x ++;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0ji5wwu.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long temp;\n\
    \        long temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n\
    \        long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp82;\n        long\
    \ temp83;\n        long temp84;\n        long temp85;\n        long temp86;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2emeq04h.java:106: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        long temp;\n\
    \        while (even < odd) {\n            temp = even;\n            even = odd\
    \ % even;\n            odd = temp % odd;\n            if (even > biggest) {\n\
    \                biggest = even;\n            }\n        }\n        return biggest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.chooseNum(tmpc87xfi8p.java:22)\n\tat Problem.main(tmpc87xfi8p.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ -1;\n        long min = 0;\n        long mid = 0;\n        long even = 0;\n\
    \        long odd = 0;\n        long sum = 0;\n        long diff = 0;\n      \
    \  long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n       \
    \ long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long\
    \ diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long\
    \ diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long\
    \ diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long\
    \ diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long\
    \ diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long\
    \ diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long\
    \ diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long\
    \ diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long\
    \ diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long\
    \ diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long\
    \ diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long\
    \ diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long\
    \ diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long\
    \ diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long\
    \ diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long\
    \ diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long\
    \ diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long\
    \ diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long\
    \ diff62 = 0;\n        long diff63 = 0;\n        long diff64 = 0;\n        long\
    \ diff65 = 0;\n        long diff66 = 0;\n        long diff67 = 0;\n        long\
    \ diff68 = 0;\n        long diff69 = 0;\n        long diff70 = 0;\n        long\
    \ diff71 = 0;\n        long diff72 = 0;\n        long diff73 = 0;\n        long\
    \ diff74 = 0;\n        long diff75 = 0;\n        long diff76 = 0;\n        long\
    \ diff77 = 0;\n        long diff78 = 0;\n        long diff79 = 0;\n        long\
    \ diff80 = 0;\n        long diff81 = 0;\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpuav5vg26.java:104: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd - 1;\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxvqb0fhv.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = 0;\n        long odd = 0;\n        long xEven = x;\n\
    \        long xOdd = x;\n        long yEven = y;\n        long yOdd = y;\n   \
    \     long xEvenMinus1 = xEven;\n        long xOddMinus1 = xOdd;\n        long\
    \ yEvenMinus1 = yEven;\n        long yOddMinus1 = yOdd;\n        long xEvenMinus2\
    \ = xEven;\n        long xOddMinus2 = xOdd;\n        long yEvenMinus2 = yEven;\n\
    \        long yOddMinus2 = yOdd;\n        long xEvenMinus3 = xEven;\n        long\
    \ xOddMinus3 = xOdd;\n        long yEvenMinus3 = yEven;\n        long yOddMinus3\
    \ = yOdd;\n        long xEvenMinus4 = xEven;\n        long xOddMinus4 = xOdd;\n\
    \        long yEvenMinus4 = yEven;\n        long yOddMinus4 = yOdd;\n        long\
    \ xEvenMinus5 = xEven;\n        long xOddMinus5 = xOdd;\n        long yEvenMinus5\
    \ = yEven;\n        long yOddMinus5 = yOdd;\n        long xEvenMinus6 = xEven;\n\
    \        long xOddMinus6 = xOdd;\n        long yEvenMinus6 = yEven;\n        long\
    \ yOddMinus6 = yOdd;\n        long xEvenMinus7 = xEven;\n        long xOddMinus7\
    \ = xOdd;\n        long yEvenMinus7 = yEven;\n        long yOddMinus7 = yOdd;\n\
    \        long xEvenMinus8 = xEven;\n        long xOddMinus8 = xOdd;\n        long\
    \ yEvenMinus8 = yEven;\n        long yOddMinus8 = yOdd;\n        long xEvenMinus9\
    \ = xEven;\n        long xOddMinus9 = xOdd;\n        long yEvenMinus9 = yEven;\n\
    \        long yOddMinus9 = yOdd;\n        long xEvenMinus10 = xEven;\n       \
    \ long xOddMinus10 = xOdd;\n        long yEvenMinus10 = yEven\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7waok9u5.java:61: error: ';' expected\n        long yEvenMinus10\
    \ = yEven\n                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if (mid % 2\
    \ == 0) {\n                even = mid;\n            } else {\n               \
    \ odd = mid;\n            }\n            if (even > biggest) {\n             \
    \   biggest = even;\n            } else if (odd > biggest) {\n               \
    \ biggest = odd;\n            }\n        }\n        return biggest;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x > y) {\n            long temp = x;\n            x = y;\n\
    \            y = temp;\n        }\n        long even = x % 2 == 0 ? x : x + 1;\n\
    \        long odd = y % 2 == 0 ? y : y + 1;\n        long evenodd = even % 2 ==\
    \ 0 ? even : even + 1;\n        if (evenodd > y) {\n            even = evenodd\
    \ - y;\n            evenodd = even;\n        }\n        if (evenodd > x) {\n \
    \           even = evenodd - x;\n            evenodd = even;\n        }\n    \
    \    if (evenodd > even) {\n            even = evenodd - even;\n            evenodd\
    \ = even;\n        }\n        if (evenodd > odd) {\n            even = evenodd\
    \ - odd;\n            evenodd = even;\n        }\n        if (evenodd > evenodd)\
    \ {\n            even = evenodd - evenodd;\n            evenodd = even;\n    \
    \    }\n        if (evenodd > odd) {\n            even = evenodd - odd;\n    \
    \        evenodd = even;\n        }\n        if (evenodd > even) {\n         \
    \   even = evenodd - even;\n            evenodd = even;\n        }\n        if\
    \ (evenodd > evenodd) {\n            even = evenodd - evenodd;\n            evenodd\
    \ = even;\n        }\n        if (evenodd > odd) {\n            even = evenodd\
    \ - odd;\n            evenodd = even;\n        }\n        if (evenodd > even)\
    \ {\n            even = evenodd - even;\n            evenodd = even;\n       \
    \ }\n        if (evenodd > evenodd) {\n            even = evenodd - evenodd;\n\
    \            evenodd = even;\n        }\n        if (evenodd > odd) {\n      \
    \      even = evenodd - odd;\n            evenodd = even;\n        }\n       \
    \ if (evenodd > even) {\n            even = evenodd - even;\n            evenodd\
    \ = even;\n        }\n        if (evenodd > evenodd) {\n            even = evenodd\
    \ - evenodd;\n            evenodd = even;\n        }\n        if (evenodd > odd)\
    \ {\n            even = evenodd - odd;\n            evenodd = even;\n        }\n\
    \        if (evenodd > even) {\n            even = evenodd - even;\n         \
    \   evenodd = even;\n        }\n        if (evenodd > evenodd) {\n           \
    \ even = evenodd - evenodd;\n            evenodd = even;\n        }\n        if\
    \ (evenodd > odd) {\n            even = evenodd - odd;\n            evenod\n \
    \   }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp276z4b15.java:95: error: not a statement\n            evenod\n\
    \            ^\n/tmp/tmp276z4b15.java:95: error: ';' expected\n            evenod\n\
    \                  ^\n/tmp/tmp276z4b15.java:97: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long minNum = -1;\n        long maxNum\
    \ = -1;\n        long evenNum = -1;\n        long oddNum = -1;\n        long num\
    \ = 0;\n        long even = 0;\n        long odd = 0;\n        long evenNum2 =\
    \ 0;\n        long oddNum2 = 0;\n        long num2 = 0;\n        long even2 =\
    \ 0;\n        long odd2 = 0;\n        long evenNum3 = 0;\n        long oddNum3\
    \ = 0;\n        long num3 = 0;\n        long even3 = 0;\n        long odd3 = 0;\n\
    \        long evenNum4 = 0;\n        long oddNum4 = 0;\n        long num4 = 0;\n\
    \        long even4 = 0;\n        long odd4 = 0;\n        long evenNum5 = 0;\n\
    \        long oddNum5 = 0;\n        long num5 = 0;\n        long even5 = 0;\n\
    \        long odd5 = 0;\n        long evenNum6 = 0;\n        long oddNum6 = 0;\n\
    \        long num6 = 0;\n        long even6 = 0;\n        long odd6 = 0;\n   \
    \     long evenNum7 = 0;\n        long oddNum7 = 0;\n        long num7 = 0;\n\
    \        long even7 = 0;\n        long odd7 = 0;\n        long evenNum8 = 0;\n\
    \        long oddNum8 = 0;\n        long num8 = 0;\n        long even8 = 0;\n\
    \        long odd8 = 0;\n        long evenNum9 = 0;\n        long oddNum9 = 0;\n\
    \        long num9 = 0;\n        long even9 = 0;\n        long odd9 = 0;\n   \
    \     long evenNum10 = 0;\n        long oddNum10 = 0;\n        long num10 = 0;\n\
    \        long even10 = 0;\n        long odd10 = 0;\n        long evenNum11 = 0;\n\
    \        long oddNum11 = 0;\n        long num11 = 0;\n        long even11 = 0;\n\
    \        long odd11 = 0;\n        long evenNum12 = 0;\n        long oddNum12 =\
    \ 0;\n        long num12 = 0;\n        long even12 = 0;\n        long odd12 =\
    \ 0;\n        long evenNum13 = 0;\n        long oddNum13 = 0;\n        long num13\
    \ = 0;\n        long even13 = 0;\n        long odd13 = 0;\n        long evenNum14\
    \ = 0;\n        long oddNum14 = 0;\n        long num14 = 0;\n        long even14\
    \ = 0;\n        long odd14 = 0;\n        long evenNum15 = 0;\n        long oddNum15\
    \ = 0;\n        long num15 = 0;\n        long even15 = 0;\n        long odd15\
    \ = 0;\n        long evenNum16 = 0;\n        long oddNum16 = 0;\n        long\
    \ num16 = 0;\n        long even16 = 0;\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpr3s53jc_.java:100: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long ans =\
    \ -1;\n        if (x >= y) {\n            ans = x;\n        } else {\n       \
    \     ans = y;\n        }\n        long evens = 0;\n        long odds = 0;\n \
    \       while (ans >= 0) {\n            if (ans % 2 == 0) {\n                evens++;\n\
    \            } else {\n                odds++;\n            }\n            ans\
    \ /= 2;\n        }\n        if (evens > odds) {\n            return evens;\n \
    \       } else {\n            return odds;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            long mid = (even+odd)/2;\n            if(mid % 2 == 0)\
    \ {\n                even = mid;\n            } else {\n                odd =\
    \ mid;\n            }\n            if(even > biggest) {\n                biggest\
    \ = even;\n            }\n            if(odd > biggest) {\n                biggest\
    \ = odd;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while (even < odd) {\n            if (even % 2 == 0) {\n   \
    \             even++;\n                if (even > biggest) {\n               \
    \     biggest = even;\n                }\n            } else {\n             \
    \   odd++;\n                if (odd > smallest) {\n                    smallest\
    \ = odd;\n                }\n            }\n        }\n        return biggest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x > y) {\n            long temp = x;\n            x = y;\n\
    \            y = temp;\n        }\n        long even = x;\n        long odd =\
    \ y;\n        while (even > 0 && odd > 0) {\n            if (even % 2 == 0 &&\
    \ odd % 2 == 0) {\n                result = even;\n                break;\n  \
    \          }\n            even = even / 2;\n            odd = odd / 2;\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6hmwga73.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        while (even < odd) {\n            long\
    \ mid = (even + odd) / 2;\n            if (mid % 2 == 0) {\n                even\
    \ = mid;\n            } else {\n                odd = mid;\n            }\n  \
    \      }\n        return even;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long ans =\
    \ -1;\n        if (x >= y) {\n            ans = x;\n        }\n        else {\n\
    \            ans = y;\n        }\n        long evens = 0;\n        long odds =\
    \ 0;\n        long biggest = 0;\n        long smallest = x;\n        while (ans\
    \ >= y) {\n            evens += 1;\n            ans -= y;\n        }\n       \
    \ while (ans >= x) {\n            odds += 1;\n            ans -= x;\n        }\n\
    \        if (evens > odds) {\n            biggest = evens;\n            smallest\
    \ = odds;\n        }\n        else {\n            biggest = odds;\n          \
    \  smallest = evens;\n        }\n        if (biggest > smallest) {\n         \
    \   ans = biggest;\n        }\n        return ans;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp38icdddm.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = x;\n        long odd = y;\n        while(even > 0\
    \ && odd > 0) {\n            if(even % 2 == 0 && odd % 2 == 0) {\n           \
    \     biggest = even;\n                break;\n            }\n            if(even\
    \ % 2 != 0 && odd % 2 != 0) {\n                biggest = odd;\n              \
    \  break;\n            }\n            even = even / 2;\n            odd = odd\
    \ / 2;\n        }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaisy73a8.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        long mid = biggest;\n        while (even < odd) {\n        \
    \    mid = (even + odd) / 2;\n            if (mid % 2 == 0) {\n              \
    \  even = mid;\n            } else {\n                odd = mid;\n           \
    \ }\n            if (even > biggest) {\n                biggest = even;\n    \
    \        }\n            if (odd < smallest) {\n                smallest = odd;\n\
    \            }\n        }\n        if (biggest == even) {\n            return\
    \ even;\n        } else if (biggest == odd) {\n            return odd;\n     \
    \   } else {\n            return -1;\n        }\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long range =\
    \ (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n        long\
    \ range1 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range2 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range3 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range4 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range5 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range6 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range7 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range8 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range9 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range10 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range11 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range12 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range13 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range14 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range15 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range16 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range17 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range18 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range19 = (long) Math.pow(2, (long) Math.ceil(Math.log(y) / Math.log(2)));\n\
    \        long range20 = (long) Math.pow(2, (long) Math.ceil(Math.log(x) / Math.log(2)));\n\
    \        long range21 = (long) Math.pow(2, (long) Math.ceil(Math.log(\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphqb6hno0.java:41: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ -1;\n        long min = x;\n        long mid = min + (max - min) / 2;\n    \
    \    long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4 =\
    \ mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n  \
    \      long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long mid50 = mid49 / 2;\n        long mid51 = mid50 /\
    \ 2;\n        long \n    }\n    public static void main(String[] args) {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm476fgaw.java:69: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpm476fgaw.java:69: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x & 1;\n        long odd = x >> 1;\n        long evenodd = even + odd;\n \
    \       long eveneven = even + even;\n        long evenodd_eveneven = evenodd\
    \ + eveneven;\n        long evenodd_evenodd = evenodd + odd;\n        long evenodd_evenodd_eveneven\
    \ = evenodd_evenodd + eveneven;\n        long evenodd_evenodd_evenodd = evenodd_evenodd\
    \ + odd;\n        long evenodd_evenodd_evenodd_eveneven = evenodd_evenodd_evenodd\
    \ + eveneven;\n        long evenodd_evenodd_evenodd_evenodd = evenodd_evenodd_evenodd\
    \ + odd;\n        long evenodd_evenodd_evenodd_evenodd_eveneven = evenodd_evenodd_evenodd_evenodd\
    \ + eveneven;\n        long evenodd_evenodd_evenodd_evenodd_evenodd = evenodd_evenodd_evenodd_evenodd\
    \ + odd;\n        long evenodd_evenodd_evenodd_evenodd_evenodd_eveneven = evenodd_evenodd_evenodd_evenodd_evenodd\
    \ + eveneven;\n        long evenodd_evenodd_evenodd_evenodd_evenodd_evenodd =\
    \ evenodd_evenodd_evenodd_evenodd_evenodd + odd;\n        long evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_eveneven\
    \ = evenodd_evenodd_evenodd_evenodd_evenodd_evenodd + eveneven;\n        long\
    \ evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_evenodd = evenodd_evenodd_evenodd_evenodd_evenodd_evenodd\
    \ + odd;\n        long evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_eveneven\
    \ = evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_evenodd + eveneven;\n    \
    \    long evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_evenodd = evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_evenodd\
    \ + odd;\n        long evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_even\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ijz5229.java:34: error: ';' expected\n        long evenodd_evenodd_evenodd_evenodd_evenodd_evenodd_even\n\
    \                                                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long even = -1;\n        long odd\
    \ = -1;\n        long biggest = -1;\n        long smallest = -1;\n        long\
    \ range = (long) Math.max(Math.abs(x), Math.abs(y));\n        long rangeEven =\
    \ (long) Math.max(Math.abs(x), Math.abs(y));\n        long rangeOdd = (long) Math.max(Math.abs(x),\
    \ Math.abs(y));\n        long rangeBiggest = (long) Math.max(Math.abs(x), Math.abs(y));\n\
    \        long rangeSmallest = (long) Math.max(Math.abs(x), Math.abs(y));\n   \
    \     long rangeMin = (long) Math.max(Math.abs(x), Math.abs(y));\n        long\
    \ rangeMax = (long) Math.max(Math.abs(x), Math.abs(y));\n        long rangeEvenMin\
    \ = (long) Math.max(Math.abs(x), Math.abs(y));\n        long rangeEvenMax = (long)\
    \ Math.max(Math.abs(x), Math.abs(y));\n        long rangeOddMin = (long) Math.max(Math.abs(x),\
    \ Math.abs(y));\n        long rangeOddMax = (long) Math.max(Math.abs(x), Math.abs(y));\n\
    \        long rangeBiggestMin = (long) Math.max(Math.abs(x), Math.abs(y));\n \
    \       long rangeBiggestMax = (long) Math.max(Math.abs(x), Math.abs(y));\n  \
    \      long rangeSmallestMin = (long) Math.max(Math.abs(x), Math.abs(y));\n  \
    \      long rangeSmallestMax = (long) Math.max(Math.abs(x), Math.abs(y));\n  \
    \      long rangeMinMin = (long) Math.max(Math.abs(x), Math.abs(y));\n       \
    \ long rangeMinMax = (long) Math.max(Math.abs(x), Math.abs(y));\n        long\
    \ rangeMaxMin = (long) Math.max(Math.abs(x), Math.abs(y));\n        long rangeMaxMax\
    \ = (long) Math.max(Math.abs(x), Math.abs(y));\n        long rangeEvenMinMin =\
    \ (long) Math.max(Math.abs(x), Math.abs(y));\n        long rangeEvenMaxMin = (long)\
    \ Math.max(Math.abs(x), Math.abs(y));\n        long rangeEvenMaxMax = (long) Math.max(Math.abs(x),\
    \ Math.abs(y));\n        long rangeOddMinMin = (long) Math.max(Math.abs(x), Math.abs(y));\n\
    \        long rangeOddMinMax = (long) Math.max(Math.abs(x), Math.abs(y));\n  \
    \      long rangeOddMaxMin = (long) Math.max(Math.abs(x), Math.abs(y));\n    \
    \    long rangeOddMaxMax = (long) Math.max(Math.abs(x), Math.abs(y));\n      \
    \  long rangeBiggestMinMin = (long) Math.max(Math.abs(x), Math.abs(y));\n    \
    \    long rangeBiggestMaxMin = (long) Math.max(Math.abs(x), Math.abs(y));\n  \
    \      long rangeBiggestMax\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9fd8hhfh.java:50: error: ';' expected\n        long rangeBiggestMax\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long maxOdd = -1;\n        long minOdd\
    \ = -1;\n        long even = -1;\n        long odd = -1;\n        long evenMin\
    \ = -1;\n        long evenMax = -1;\n        long oddMin = -1;\n        long oddMax\
    \ = -1;\n        long evenMinOdd = -1;\n        long evenMaxOdd = -1;\n      \
    \  long oddMinOdd = -1;\n        long oddMaxOdd = -1;\n        long evenMinEven\
    \ = -1;\n        long evenMaxEven = -1;\n        long oddMinEven = -1;\n     \
    \   long oddMaxEven = -1;\n        long evenMinOdd = -1;\n        long evenMaxOdd\
    \ = -1;\n        long oddMinOdd = -1;\n        long oddMaxOdd = -1;\n        long\
    \ evenMinEven = -1;\n        long evenMaxEven = -1;\n        long oddMinEven =\
    \ -1;\n        long oddMaxEven = -1;\n        long evenMinOdd = -1;\n        long\
    \ evenMaxOdd = -1;\n        long oddMinOdd = -1;\n        long oddMaxOdd = -1;\n\
    \        long evenMinEven = -1;\n        long evenMaxEven = -1;\n        long\
    \ oddMinEven = -1;\n        long oddMaxEven = -1;\n        long evenMinOdd = -1;\n\
    \        long evenMaxOdd = -1;\n        long oddMinOdd = -1;\n        long oddMaxOdd\
    \ = -1;\n        long evenMinEven = -1;\n        long evenMaxEven = -1;\n    \
    \    long oddMinEven = -1;\n        long oddMaxEven = -1;\n        long evenMinOdd\
    \ = -1;\n        long evenMaxOdd = -1;\n        long oddMinOdd = -1;\n       \
    \ long oddMaxOdd = -1;\n        long evenMinEven = -1;\n        long evenMaxEven\
    \ = -1;\n        long oddMinEven = -1;\n        long oddMaxEven = -1;\n      \
    \  long evenMinOdd = -1;\n        long evenMaxOdd = -1;\n        long oddMinOdd\
    \ = -1;\n        long oddMaxOdd = -1;\n        long evenMinEven = -1;\n      \
    \  long evenMaxEven = -1;\n        long oddMinEven = -1;\n        long oddMaxEven\
    \ = -1;\n        long evenMinOdd = -1;\n        long evenMaxOdd = -1;\n      \
    \  long oddMinOdd = -1;\n        long oddMaxOdd = \n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpludubftj.java:78: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd - 1;\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_1et4j9h.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            if (even % 2 == 0) {\n                even = even + 1;\n\
    \            } else {\n                odd = odd - 1;\n            }\n       \
    \     if (even > odd) {\n                biggest = even;\n            }\n    \
    \    }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmryufq_z.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long smallest\
    \ = 0;\n        long range = (x - y);\n        long range2 = range / 2;\n    \
    \    long range3 = range / 3;\n        long range4 = range / 4;\n        long\
    \ range5 = range / 5;\n        long range6 = range / 6;\n        long range7 =\
    \ range / 7;\n        long range8 = range / 8;\n        long range9 = range /\
    \ 9;\n        long range10 = range / 10;\n        long range11 = range / 11;\n\
    \        long range12 = range / 12;\n        long range13 = range / 13;\n    \
    \    long range14 = range / 14;\n        long range15 = range / 15;\n        long\
    \ range16 = range / 16;\n        long range17 = range / 17;\n        long range18\
    \ = range / 18;\n        long range19 = range / 19;\n        long range20 = range\
    \ / 20;\n        long range21 = range / 21;\n        long range22 = range / 22;\n\
    \        long range23 = range / 23;\n        long range24 = range / 24;\n    \
    \    long range25 = range / 25;\n        long range26 = range / 26;\n        long\
    \ range27 = range / 27;\n        long range28 = range / 28;\n        long range29\
    \ = range / 29;\n        long range30 = range / 30;\n        long range31 = range\
    \ / 31;\n        long range32 = range / 32;\n        long range33 = range / 33;\n\
    \        long range34 = range / 34;\n        long range35 = range / 35;\n    \
    \    long range36 = range / 36;\n        long range37 = range / 37;\n        long\
    \ range38 = range / 38;\n        long range39 = range / 39;\n        long range40\
    \ = range / 40;\n        long range41 = range / 41;\n        long range42 = range\
    \ / 42;\n        long range43 = range / 43;\n        long range44 = range / 44;\n\
    \        long range45 = range / 45;\n        long range46 = range / 46;\n    \
    \    long range47 = range / 47;\n        long range48 = range / 48;\n        long\
    \ range49 = range / 49;\n        long range50 = range / 50;\n        long range51\
    \ = range / 51;\n        long range52 = range / 52;\n        long \n    }\n  \
    \  public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoy42m9ux.java:72: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpoy42m9ux.java:72: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        long eveneven = even;\n        long evenodd = odd;\n       \
    \ long oddeven = even;\n        long oddodd = odd;\n        long eveneveneven\
    \ = eveneven;\n        long evenevenodd = evenodd;\n        long evenoddeven =\
    \ oddeven;\n        long evenoddodd = oddodd;\n        long oddeveneveneven =\
    \ eveneveneven;\n        long oddevenevenodd = evenoddeven;\n        long oddevenoddeven\
    \ = oddeveneveneven;\n        long oddevenoddodd = evenoddoddeven;\n        long\
    \ eveneveneveneven = eveneveneveneven;\n        long evenevenevenodd = evenevenevenodd;\n\
    \        long evenevenoddeven = evenevenoddeven;\n        long evenevenoddodd\
    \ = evenevenoddeven;\n        long evenoddeveneven = evenoddeveneven;\n      \
    \  long evenoddevenodd = evenoddevenodd;\n        long oddeveneveneveneven = eveneveneveneven;\n\
    \        long oddevenevenevenodd = evenoddeveneven;\n        long oddevenevenoddeven\
    \ = evenoddeveneven;\n        long oddevenoddeven = evenoddeveneven;\n       \
    \ long eveneveneveneveneven = eveneveneveneveneven;\n        long evenevenevenevenodd\
    \ = evenevenevenevenodd;\n        long evenevenevenoddeven = evenevenevenoddeven;\n\
    \        long evenevenoddeven = evenevenoddeven;\n        long evenoddeveneven\
    \ = evenoddeveneven;\n        long evenoddeveneven = evenoddeveneven;\n      \
    \  long oddeveneveneveneven = eveneveneveneven;\n        long oddevenevenevenodd\
    \ = evenevenevenevenodd;\n        long oddeveneveneven = eveneveneven;\n     \
    \   long eveneveneveneven = eveneveneveneven;\n        long evenevenevenodd =\
    \ evenevenevenevenodd;\n        long eveneveneveneven = eveneveneveneven;\n  \
    \      long evenevenevenodd = evenevenevenevenodd;\n        long eveneveneveneven\
    \ = eveneveneveneven;\n        long evenevenevenodd = evenevenevenevenodd;\n \
    \       long eveneveneveneven = eveneveneveneven;\n        long evenevenevenodd\
    \ = eveneveneveneven\n    }\n    public static void main(String[] args) {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmr9qq9nr.java:58: error: ';' expected\n        long evenevenevenodd\
    \ = eveneveneveneven\n                                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long biggestOdd\
    \ = odd;\n        long biggestEven = even;\n        long biggestOddEven = even;\n\
    \        long biggestOddEvenOdd = odd;\n        long biggestOddEvenOddEven = even;\n\
    \        long biggestOddEvenOddEvenOdd = odd;\n        long biggestOddEvenOddEvenOddEven\
    \ = even;\n        long biggestOddEvenOddEvenOddEvenOdd = odd;\n        long biggestOddEvenOddEvenOddEvenOddEven\
    \ = even;\n        long biggestOddEvenOddEvenOddEvenOddEvenOdd = odd;\n      \
    \  long biggestOddEvenOddEvenOddEvenOddEvenOddEven = even;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = odd;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = even;\n\
    \        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = odd;\n  \
    \      long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = even;\n\
    \        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = odd;\n\
    \        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = even;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = odd;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = even;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = odd;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = even;\n        long big\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp2hcby394.java:40: error: ';' expected\n        long big\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x % 2 == 0 ? x : -1;\n        long odd = y % 2 == 0 ? y : -1;\n        long\
    \ biggest = even;\n        if (even > odd) {\n            biggest = odd;\n   \
    \     }\n        long min = even;\n        if (even < odd) {\n            min\
    \ = odd;\n        }\n        long max = even;\n        if (even > odd) {\n   \
    \         max = odd;\n        }\n        if (biggest > min) {\n            biggest\
    \ = min;\n        }\n        if (biggest < max) {\n            biggest = max;\n\
    \        }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp176m70vn.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        long even = 1;\n        long odd = 1;\n        long biggest =\
    \ x;\n        long smallest = y;\n        while (even <= biggest) {\n        \
    \    while (odd <= smallest) {\n                if (even % 2 == 0 && odd % 2 ==\
    \ 0) {\n                    result = even;\n                    biggest = even;\n\
    \                    smallest = odd;\n                    break;\n           \
    \     }\n                odd += 1;\n            }\n            even += 1;\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3v_yv6c.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long range =\
    \ (long)Math.pow(2, 32);\n        long range2 = (long) Math.pow(2, 64);\n    \
    \    long range3 = (long) Math.pow(2, 128);\n        long range4 = (long) Math.pow(2,\
    \ 256);\n        long range5 = (long) Math.pow(2, 512);\n        long range6 =\
    \ (long) Math.pow(2, 1024);\n        long range7 = (long) Math.pow(2, 2048);\n\
    \        long range8 = (long) Math.pow(2, 4096);\n        long range9 = (long)\
    \ Math.pow(2, 8192);\n        long range10 = (long) Math.pow(2, 16384);\n    \
    \    long range11 = (long) Math.pow(2, 32768);\n        long range12 = (long)\
    \ Math.pow(2, 65536);\n        long range13 = (long) Math.pow(2, 131072);\n  \
    \      long range14 = (long) Math.pow(2, 262144);\n        long range15 = (long)\
    \ Math.pow(2, 524288);\n        long range16 = (long) Math.pow(2, 1048576);\n\
    \        long range17 = (long) Math.pow(2, 2097152);\n        long range18 = (long)\
    \ Math.pow(2, 4194304);\n        long range19 = (long) Math.pow(2, 8388608);\n\
    \        long range20 = (long) Math.pow(2, 16777216);\n        long range21 =\
    \ (long) Math.pow(2, 33554432);\n        long range22 = (long) Math.pow(2, 67108864);\n\
    \        long range23 = (long) Math.pow(2, 134217728);\n        long range24 =\
    \ (long) Math.pow(2, 268435456);\n        long range25 = (long) Math.pow(2, 536870912);\n\
    \        long range26 = (long) Math.pow(2, 1073741824);\n        long range27\
    \ = (long) Math.pow(2, 2147483648l);\n        long range28 = (long) Math.pow(2,\
    \ 4294967296l);\n        long range29 = (long) Math.pow(2, 8589934592l);\n   \
    \     long range30 = (long) Math.pow(2, 17179869184l);\n        long range31 =\
    \ (long) Math.pow(2, 34359738368l);\n        long range32 = (long) Math.pow(2,\
    \ 68719476736l);\n        long range33 = (long) Math.pow(2, 137438953472l);\n\
    \        long range34 = (long) Math.pow(2, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpi26rbz5_.java:53: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if (mid % 2\
    \ == 0) {\n                even = mid;\n            } else {\n               \
    \ odd = mid;\n            }\n            if (even > biggest) {\n             \
    \   biggest = even;\n            } else if (odd > biggest) {\n               \
    \ biggest = odd;\n            }\n        }\n        return biggest;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if(mid % 2 ==\
    \ 0) {\n                even = mid;\n            } else {\n                odd\
    \ = mid;\n            }\n            if(even > biggest) {\n                biggest\
    \ = even;\n            }\n            if(odd > biggest) {\n                biggest\
    \ = odd;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while (even < odd) {\n            even = even * 2;\n       \
    \     odd = odd * 2;\n            if (even > biggest) {\n                biggest\
    \ = even;\n            }\n            if (odd < smallest) {\n                smallest\
    \ = odd;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzenz6j_v.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long even = -1;\n        long odd\
    \ = 0;\n        long evenMax = -1;\n        long evenMin = -1;\n        long oddMax\
    \ = -1;\n        long oddMin = -1;\n        long evenMax2 = -1;\n        long\
    \ evenMin2 = -1;\n        long oddMax2 = -1;\n        long oddMin2 = -1;\n   \
    \     long evenMax3 = -1;\n        long evenMin3 = -1;\n        long oddMax3 =\
    \ -1;\n        long oddMin3 = -1;\n        long evenMax4 = -1;\n        long evenMin4\
    \ = -1;\n        long oddMax4 = -1;\n        long oddMin4 = -1;\n        long\
    \ evenMax5 = -1;\n        long evenMin5 = -1;\n        long oddMax5 = -1;\n  \
    \      long oddMin5 = -1;\n        long evenMax6 = -1;\n        long evenMin6\
    \ = -1;\n        long oddMax6 = -1;\n        long oddMin6 = -1;\n        long\
    \ evenMax7 = -1;\n        long evenMin7 = -1;\n        long oddMax7 = -1;\n  \
    \      long oddMin7 = -1;\n        long evenMax8 = -1;\n        long evenMin8\
    \ = -1;\n        long oddMax8 = -1;\n        long oddMin8 = -1;\n        long\
    \ evenMax9 = -1;\n        long evenMin9 = -1;\n        long oddMax9 = -1;\n  \
    \      long oddMin9 = -1;\n        long evenMax10 = -1;\n        long evenMin10\
    \ = -1;\n        long oddMax10 = -1;\n        long oddMin10 = -1;\n        long\
    \ evenMax11 = -1;\n        long evenMin11 = -1;\n        long oddMax11 = -1;\n\
    \        long oddMin11 = -1;\n        long evenMax12 = -1;\n        long evenMin12\
    \ = -1;\n        long oddMax12 = -1;\n        long oddMin12 = -1;\n        long\
    \ evenMax13 = -1;\n        long evenMin13 = -1;\n        long oddMax13 = -1;\n\
    \        long oddMin13 = -1;\n        long evenMax14 = -1;\n        long evenMin14\
    \ = -1;\n        long oddMax14 = -1;\n        long oddMin14 = -1;\n        long\
    \ evenMax15 = -1;\n        long evenMin15 = -1;\n        long oddMax15 = -1;\n\
    \        long oddMin15 = -1;\n        long evenMax16 = -1;\n        long evenMin16\
    \ = -1;\n        long oddMax16 = -1;\n        long oddMin16 = -1;\n        long\
    \ evenMax17 = -1;\n        long evenMin17 = -1;\n        long oddMax17 = -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp94v57ouu.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            long mid = (even+odd)/2;\n            if(mid % 2 == 0)\
    \ {\n                even = mid;\n            } else {\n                odd =\
    \ mid;\n            }\n            if(biggest < even) {\n                biggest\
    \ = even;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            long mid = x + (y - x) / 2;\n    \
    \        if (mid % 2 == 0) {\n                result = mid;\n            }\n \
    \           else {\n                result = chooseNum(y, mid);\n            }\n\
    \        }\n        else {\n            long mid = y + (x - y) / 2;\n        \
    \    if (mid % 2 == 0) {\n                result = mid;\n            }\n     \
    \       else {\n                result = chooseNum(x, mid);\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n\tat Problem.chooseNum(tmp089_5t2d.java:32)\n\
    \tat Problem.chooseNum(tmp089_5t2d.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        while(even < odd)\
    \ {\n            long temp = even;\n            even = odd % even;\n         \
    \   odd = temp % odd;\n            if(even > maxEven) {\n                maxEven\
    \ = even;\n            }\n        }\n        return maxEven;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.chooseNum(tmp9cor5sq0.java:21)\n\tat Problem.main(tmp9cor5sq0.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x < y) {\n                if\
    \ (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x += 2;\n            }\n        } else {\n\
    \            while (y < x) {\n                if (y % 2 == 0) {\n            \
    \        result = y;\n                    break;\n                }\n        \
    \        y += 2;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqm46ojti.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ 0;\n        long min = x;\n        long mid = x;\n        long mid2 = y;\n \
    \       long mid3 = y;\n        long mid4 = y;\n        long mid5 = y;\n     \
    \   long mid6 = y;\n        long mid7 = y;\n        long mid8 = y;\n        long\
    \ mid9 = y;\n        long mid10 = y;\n        long mid11 = y;\n        long mid12\
    \ = y;\n        long mid13 = y;\n        long mid14 = y;\n        long mid15 =\
    \ y;\n        long mid16 = y;\n        long mid17 = y;\n        long mid18 = y;\n\
    \        long mid19 = y;\n        long mid20 = y;\n        long mid21 = y;\n \
    \       long mid22 = y;\n        long mid23 = y;\n        long mid24 = y;\n  \
    \      long mid25 = y;\n        long mid26 = y;\n        long mid27 = y;\n   \
    \     long mid28 = y;\n        long mid29 = y;\n        long mid30 = y;\n    \
    \    long mid31 = y;\n        long mid32 = y;\n        long mid33 = y;\n     \
    \   long mid34 = y;\n        long mid35 = y;\n        long mid36 = y;\n      \
    \  long mid37 = y;\n        long mid38 = y;\n        long mid39 = y;\n       \
    \ long mid40 = y;\n        long mid41 = y;\n        long mid42 = y;\n        long\
    \ mid43 = y;\n        long mid44 = y;\n        long mid45 = y;\n        long mid46\
    \ = y;\n        long mid47 = y;\n        long mid48 = y;\n        long mid49 =\
    \ y;\n        long mid50 = y;\n        long mid51 = y;\n        long mid52 = y;\n\
    \        long mid53 = y;\n        long mid54 = y;\n        long mid55 = y;\n \
    \       long mid56 = y;\n        long mid57 = y;\n        long mid58 = y;\n  \
    \      long mid59 = y;\n        long mid60 = y;\n        long mid61 = y;\n   \
    \     long mid62 = y;\n        long mid63 = y;\n        long mid64 = y;\n    \
    \    long mid65 = y;\n        long mid66 = y;\n        long mid67 = y;\n     \
    \   long mid68 = y;\n        long mid69 = y;\n        long mid70 = y;\n      \
    \  long mid71 = y;\n        long mid72 = y;\n        long mid73 = y;\n       \
    \ long mid\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8vvfcpqq.java:91: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        long temp;\n \
    \       while (even < odd) {\n            temp = even;\n            even = odd\
    \ + (even % 2);\n            odd = temp;\n        }\n        if (even > maxEven)\
    \ {\n            maxEven = even;\n        }\n        return maxEven;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbp0ronpr.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x < y) {\n                if\
    \ (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x++;\n            }\n        } else {\n  \
    \          while (y < x) {\n                if (y % 2 == 0) {\n              \
    \      result = y;\n                    break;\n                }\n          \
    \      y++;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2j_dda7l.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even += 2;\n            odd\
    \ -= 2;\n        }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox3hzvre.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd + 1;\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        long evenMax =\
    \ even;\n        long oddMax = odd;\n        while (even < odd) {\n          \
    \  even = even * 2;\n            evenMax = even;\n            odd = odd * 2;\n\
    \            oddMax = odd;\n            if (even > odd) {\n                even\
    \ = even - odd;\n                evenMax = even;\n                odd = odd +\
    \ even;\n                oddMax = odd;\n            }\n        }\n        if (evenMax\
    \ < oddMax) {\n            maxEven = evenMax;\n        } else {\n            maxEven\
    \ = oddMax;\n        }\n        return maxEven;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpljjzru88.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long temp =\
    \ 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n\
    \        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n \
    \       long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n \
    \       long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n\
    \        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        long temp74 = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n\
    \        long temp77 = 0;\n        long temp78 = 0;\n        long temp79 = 0;\n\
    \        long temp80 = 0;\n        long temp81 = 0;\n        long temp82 = 0;\n\
    \        long temp83 = 0;\n        long temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpu0d0q_lm.java:102: error: ';' expected\n        long temp\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            long mid = (even+odd)/2;\n            if(mid % 2 == 0)\
    \ {\n                even = mid;\n            } else {\n                odd =\
    \ mid;\n            }\n            if(biggest < even) {\n                biggest\
    \ = even;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smaller\
    \ = odd;\n        long eveneven = even;\n        long evenodd = odd;\n       \
    \ long oddeven = even;\n        long oddodd = odd;\n        long eveneveneven\
    \ = eveneven;\n        long evenevenodd = evenodd;\n        long evenoddeven =\
    \ eveneven;\n        long evenoddodd = evenodd;\n        long oddeveneven = eveneven;\n\
    \        long oddevenodd = evenodd;\n        long oddoddeven = eveneven;\n   \
    \     long oddoddodd = evenodd;\n        long eveneveneveneven = eveneveneven;\n\
    \        long evenevenevenodd = evenevenodd;\n        long evenevenoddeven = evenoddeven;\n\
    \        long evenevenoddodd = evenoddodd;\n        long evenoddeveneven = eveneveneven;\n\
    \        long evenoddevenodd = evenoddeven;\n        long evenoddoddeven = eveneveneven;\n\
    \        long evenoddoddodd = evenoddodd;\n        long oddeveneveneven = eveneveneven;\n\
    \        long oddevenevenodd = evenevenodd;\n        long oddevenoddeven = evenoddeven;\n\
    \        long oddevenoddodd = evenoddodd;\n        long eveneveneveneveneven =\
    \ eveneveneveneven;\n        long evenevenevenevenodd = evenevenevenodd;\n   \
    \     long evenevenevenoddeven = evenevenoddeven;\n        long evenevenoddeven\
    \ = evenoddeveneven;\n        long evenevenoddodd = evenoddoddeven;\n        long\
    \ evenoddeveneven = eveneveneveneven;\n        long evenoddevenodd = evenoddeveneven;\n\
    \        long evenoddoddeven = eveneveneven;\n        long evenoddoddodd = evenoddoddeven;\n\
    \        long oddeveneveneveneven = eveneveneveneven;\n        long oddevenevenevenodd\
    \ = evenevenevenodd;\n        long oddeveneveneven = eveneveneven;\n        long\
    \ oddevenevenodd = evenevenodd;\n        long oddevenoddeven = evenoddeveneven;\n\
    \        long oddevenoddeven = evenoddeveneven;\n        long oddoddeveneven =\
    \ eveneveneveneven;\n        long oddoddevenodd = evenoddeveneven;\n        long\
    \ eveneveneveneven\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkboaz76a.java:61: error: ';' expected\n        long eveneveneveneven\n\
    \                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if (mid % 2\
    \ == 0) {\n                even = mid;\n            } else {\n               \
    \ odd = mid;\n            }\n            if (even > biggest) {\n             \
    \   biggest = even;\n            }\n            if (odd > biggest) {\n       \
    \         biggest = odd;\n            }\n        }\n        return biggest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long ans =\
    \ -1;\n        if (x >= y) {\n            long mid = x + (y - x) / 2;\n      \
    \      if (mid % 2 == 0) {\n                ans = mid;\n            }\n      \
    \      else {\n                ans = chooseNum(mid, y);\n            }\n     \
    \   }\n        else if (x <= y) {\n            long mid = x + (y - x) / 2;\n \
    \           if (mid % 2 == 0) {\n                ans = mid;\n            }\n \
    \           else {\n                ans = chooseNum(x, mid);\n            }\n\
    \        }\n        return ans;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwp7ttrd6.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x % 2 == 0 ? x : -1;\n        long odd = y % 2 == 0 ? y : -1;\n        long\
    \ biggest = even;\n        if (even > odd) {\n            biggest = odd;\n   \
    \     }\n        long even2 = even % 2 == 0 ? even : -1;\n        long odd2 =\
    \ odd % 2 == 0 ? odd : -1;\n        if (even2 > odd2) {\n            biggest =\
    \ even2;\n        }\n        return biggest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp955o9isr.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long temp =\
    \ 0;\n        long evenInRange = 0;\n        long oddInRange = 0;\n        long\
    \ biggestEven = 0;\n        long biggestOdd = 0;\n        long tempEven = 0;\n\
    \        long tempOdd = 0;\n        long biggestEvenInRange = 0;\n        long\
    \ biggestOddInRange = 0;\n        long tempEvenInRange = 0;\n        long tempOddInRange\
    \ = 0;\n        long evenInRangeEven = 0;\n        long evenInRangeOdd = 0;\n\
    \        long oddInRangeEven = 0;\n        long oddInRangeOdd = 0;\n        long\
    \ biggestEvenEven = 0;\n        long biggestOddEven = 0;\n        long tempEvenEven\
    \ = 0;\n        long tempOddEven = 0;\n        long biggestEvenEvenInRange = 0;\n\
    \        long biggestOddEvenInRange = 0;\n        long tempEvenEvenInRange = 0;\n\
    \        long tempOddEvenInRange = 0;\n        long evenInRangeEvenEven = 0;\n\
    \        long evenInRangeOddEven = 0;\n        long oddInRangeEvenEven = 0;\n\
    \        long oddInRangeOddEven = 0;\n        long biggestEvenEvenEven = 0;\n\
    \        long biggestOddEvenEven = 0;\n        long tempEvenEvenEven = 0;\n  \
    \      long tempOddEvenEven = 0;\n        long biggestEvenEvenEvenInRange = 0;\n\
    \        long biggestOddEvenInRange = 0;\n        long tempEvenEvenInRange = 0;\n\
    \        long tempOddEvenInRange = 0;\n        long evenInRangeEvenEvenInRange\
    \ = 0;\n        long evenInRangeOddEvenInRange = 0;\n        long oddInRangeEvenEvenInRange\
    \ = 0;\n        long oddInRangeOddEvenInRange = 0;\n        long biggestEvenEvenEvenInRange\
    \ = 0;\n        long biggestOddEvenInRange = 0;\n        long tempEvenEvenInRange\
    \ = 0;\n        long tempOddEvenInRange = 0;\n        long evenInRangeEvenEvenInRange\
    \ = 0;\n        long evenInRangeOddEvenInRange = 0;\n        long oddInRangeEvenEvenInRange\
    \ = 0;\n        long oddInRangeOddEvenInRange = 0;\n        long biggestEvenEvenEvenInRange\
    \ = 0;\n        long biggestOddEvenInRange = 0;\n        long tempEvenEvenInRange\
    \ = 0;\n        long tempOddEvenInRange = 0;\n        long evenInRangeEvenEvenInRange\
    \ = 0;\n        long evenInRangeOdd\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpcjzd8q5l.java:71: error: ';' expected\n        long evenInRangeOdd\n\
    \                           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while(even < odd) {\n            even = even * 2;\n        \
    \    odd = odd * 2;\n            if(even > odd) {\n                biggest = even;\n\
    \                smallest = odd;\n            }\n        }\n        return biggest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgd7l0_pw.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ -1;\n        long min = x;\n        long mid = min + (max - min) / 2;\n    \
    \    long even = 0;\n        long odd = 0;\n        long evenMax = -1;\n     \
    \   long oddMax = -1;\n        long evenMin = -1;\n        long oddMin = -1;\n\
    \        long evenMid = 0;\n        long oddMid = 0;\n        long evenMinMax\
    \ = -1;\n        long oddMinMax = -1;\n        long evenMidMax = -1;\n       \
    \ long oddMidMax = -1;\n        while (min <= max) {\n            mid = (min +\
    \ max) / 2;\n            even = mid;\n            odd = mid * 2;\n           \
    \ if (even > max) {\n                even = max;\n                evenMax = mid;\n\
    \            }\n            if (odd > max) {\n                odd = max;\n   \
    \             oddMax = mid;\n            }\n            if (even < min) {\n  \
    \              even = min;\n                evenMin = mid;\n            }\n  \
    \          if (odd < min) {\n                odd = min;\n                oddMin\
    \ = mid;\n            }\n            if (even > mid) {\n                even =\
    \ mid;\n                evenMid = mid;\n            }\n            if (odd > mid)\
    \ {\n                odd = mid;\n                oddMid = mid;\n            }\n\
    \            if (even < mid) {\n                even = mid;\n                evenMinMax\
    \ = mid;\n            }\n            if (odd < mid) {\n                odd = mid;\n\
    \                oddMinMax = mid;\n            }\n            if (even > max)\
    \ {\n                even = max;\n                evenMax = mid;\n           \
    \ }\n            if (odd > max) {\n                odd = max;\n              \
    \  oddMax = mid;\n            }\n            if (even < min) {\n             \
    \   even = min;\n                evenMin = mid;\n            }\n            if\
    \ (odd < min) {\n                odd = min;\n                oddMin = mid;\n \
    \           }\n            if (even > mid) {\n                even = mid;\n  \
    \              evenMid = mid;\n            }\n            if (odd > mid) {\n \
    \               odd = mid;\n                oddMid = mid;\n            }\n   \
    \         if (even < mid) {\n                even = mid;\n                evenMinMax\
    \ = mid;\n            }\n            if (odd < mid) {\n                odd = mid;\n\
    \                oddMinMax = mid;\n            }\n            if (even > max)\
    \ {\n                even = max;\n                evenMax = mid;\n           \
    \ }\n            if (odd > max) {\n                odd = max;\n              \
    \  oddMax = mid;\n\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1g5y4yfh.java:108: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = 1, odd = 0;\n        while (even <= y && odd <= y)\
    \ {\n            if (even % 2 == 0 && odd % 2 == 0) {\n                maxEven\
    \ = even;\n            }\n            if (even % 2 != 0 && odd % 2 != 0) {\n \
    \               maxEven = odd;\n            }\n            even++;\n         \
    \   odd++;\n        }\n        return maxEven;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjpsptm1u.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x > y) {\n            long temp = x;\n            x = y;\n\
    \            y = temp;\n        }\n        if (x % 2 == 0) {\n            long\
    \ temp2 = x;\n            x = y;\n            y = temp2;\n        }\n        long\
    \ even = x;\n        long odd = y;\n        while (even > 0 && odd > 0) {\n  \
    \          if (even % 2 == 0 && odd % 2 == 0) {\n                result = even;\n\
    \                break;\n            }\n            if (even % 2 != 0 && odd %\
    \ 2 != 0) {\n                result = odd;\n                break;\n         \
    \   }\n            even = even / 2;\n            odd = odd / 2;\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9c9dkkip.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while(even < odd) {\n            even = even * 2;\n        \
    \    odd = odd * 2;\n            if(even > biggest) {\n                biggest\
    \ = even;\n            }\n            if(odd < smallest) {\n                smallest\
    \ = odd;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9enn0472.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = LongStream.range(x, y).filter(x -> x % 2 == 0).max().getAsLong();\n      \
    \  if (even != -1) {\n            return even;\n        }\n        return -1;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprtkkr4oy.java:16: error: variable x is already defined in method\
    \ chooseNum(long,long)\n        long even = LongStream.range(x, y).filter(x ->\
    \ x % 2 == 0).max().getAsLong();\n                                           \
    \       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ 0;\n        long min = x;\n        long mid = min + (max - min) / 2;\n     \
    \   long mid2 = mid + (max - min) / 2;\n        long mid3 = mid2 + (max - min)\
    \ / 2;\n        long mid4 = mid3 + (max - min) / 2;\n        long mid5 = mid4\
    \ + (max - min) / 2;\n        long mid6 = mid5 + (max - min) / 2;\n        long\
    \ mid7 = mid6 + (max - min) / 2;\n        long mid8 = mid7 + (max - min) / 2;\n\
    \        long mid9 = mid8 + (max - min) / 2;\n        long mid10 = mid9 + (max\
    \ - min) / 2;\n        long mid11 = mid10 + (max - min) / 2;\n        long mid12\
    \ = mid11 + (max - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n\
    \        long mid14 = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max\
    \ - min) / 2;\n        long mid16 = mid15 + (max - min) / 2;\n        long mid17\
    \ = mid16 + (max - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n\
    \        long mid19 = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max\
    \ - min) / 2;\n        long mid21 = mid20 + (max - min) / 2;\n        long mid22\
    \ = mid21 + (max - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n\
    \        long mid24 = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max\
    \ - min) / 2;\n        long mid26 = mid25 + (max - min) / 2;\n        long mid27\
    \ = mid26 + (max - min) / 2;\n        long mid28 = mid27 + (max - min) / 2;\n\
    \        long mid29 = mid28 + (max - min) / 2;\n        long mid30 = mid29 + (max\
    \ - min) / 2;\n        long mid31 = mid30 + (max - min) / 2;\n        long mid32\
    \ = mid31 + (max - min) / 2;\n        long mid33 = mid32 + (max - min) / 2;\n\
    \        long mid34 = mid33 + (max - min) / 2;\n        long mid35 = mid34 + (max\
    \ - min) / 2;\n        long mid36 = mid35 + (max - min) / 2;\n        long mid37\
    \ = mid36 + (max - min) / 2;\n        long mid38 = mid37 + (max - min) / 2;\n\
    \        long mid39 = mid38 + (max - min) / 2;\n        long mid40 = mid39 + (max\
    \ - \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfb36jvkq.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd + 1;\n        }\n        while(even > odd) {\n            biggest\
    \ = odd;\n            even = even - 1;\n            odd = odd - 1;\n        }\n\
    \        return biggest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = -1;\n        long temp;\n\
    \        long i;\n        long j;\n        long k;\n        long l;\n        long\
    \ m;\n        long n;\n        long o;\n        long p;\n        long q;\n   \
    \     long r;\n        long s;\n        long t;\n        long u;\n        long\
    \ v;\n        long w;\n        long x;\n        long y;\n        long z;\n   \
    \     long A;\n        long B;\n        long C;\n        long D;\n        long\
    \ E;\n        long F;\n        long G;\n        long H;\n        long I;\n   \
    \     long J;\n        long K;\n        long L;\n        long M;\n        long\
    \ N;\n        long O;\n        long P;\n        long Q;\n        long R;\n   \
    \     long S;\n        long T;\n        long U;\n        long V;\n        long\
    \ W;\n        long X;\n        long Y;\n        long Z;\n        long A;\n   \
    \     long B;\n        long C;\n        long D;\n        long E;\n        long\
    \ F;\n        long G;\n        long H;\n        long I;\n        long J;\n   \
    \     long K;\n        long L;\n        long M;\n        long N;\n        long\
    \ O;\n        long P;\n        long Q;\n        long R;\n        long S;\n   \
    \     long T;\n        long U;\n        long V;\n        long W;\n        long\
    \ X;\n        long Y;\n        long Z;\n        long A;\n        long B;\n   \
    \     long C;\n        long D;\n        long E;\n        long F;\n        long\
    \ G;\n        long H;\n        long I;\n        long J;\n        long K;\n   \
    \     long L;\n        long M;\n        long N;\n        long O;\n        long\
    \ P;\n        long Q;\n        long R;\n        long S;\n        long T;\n   \
    \     long U;\n        long V;\n        long W;\n        long X;\n        long\
    \ Y;\n        long Z;\n        long A;\n        long B;\n        long C;\n   \
    \     long D;\n        long E;\n        long F;\n        long \n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprdfmnn54.java:122: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmprdfmnn54.java:122: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = x;\n        long odd = y;\n        long eveneven\
    \ = even;\n        long evenodd = odd;\n        long oddeven = even;\n       \
    \ long oddodd = odd;\n        long eveneveneven = eveneven;\n        long evenevenodd\
    \ = evenodd;\n        long evenoddeven = oddeven;\n        long evenoddodd = oddodd;\n\
    \        long oddeveneveneven = eveneveneven;\n        long oddevenevenodd = evenoddeven;\n\
    \        long oddevenoddeven = oddeveneveneven;\n        long oddevenoddodd =\
    \ evenoddoddeven;\n        long eveneveneveneven = eveneveneveneven;\n       \
    \ long evenevenevenodd = evenevenevenodd;\n        long evenevenoddeven = evenevenoddeven;\n\
    \        long evenevenoddodd = evenevenoddodd;\n        long evenoddeveneven =\
    \ evenoddeveneven;\n        long evenoddevenodd = evenoddevenodd;\n        long\
    \ oddeveneveneveneven = eveneveneveneveneven;\n        long oddevenevenevenodd\
    \ = evenoddeveneven;\n        long oddevenoddeven = evenoddeveneven;\n       \
    \ long oddevenoddeven = evenoddeveneven;\n        long eveneveneveneveneven =\
    \ eveneveneveneveneven;\n        long evenevenevenevenodd = evenevenevenevenodd;\n\
    \        long evenevenevenodd = evenevenevenodd;\n        long evenevenoddeven\
    \ = evenevenoddeven;\n        long evenevenoddeven = evenevenoddeven;\n      \
    \  long evenoddeveneven = evenoddeveneven;\n        long evenoddeveneven = evenoddeveneven;\n\
    \        long oddeveneveneveneven = eveneveneveneven;\n        long oddevenevenevenodd\
    \ = evenevenevenevenodd;\n        long oddevenevenodd = evenevenevenodd;\n   \
    \     long oddevenoddeven = evenevenoddeven;\n        long eveneveneveneveneven\
    \ = eveneveneveneveneven;\n        long evenevenevenevenodd = evenevenevenevenodd;\n\
    \        long evenevenevenodd = evenevenevenodd;\n        long evenevenoddeven\
    \ = evenevenoddeven;\n        long evenevenoddeven = evenevenoddeven;\n      \
    \  long evenoddeveneven = evenoddeveneven;\n        long evenoddeveneven\n   \
    \ }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfizo7wwe.java:58: error: ';' expected\n        long evenoddeveneven\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if (mid % 2\
    \ == 0) {\n                even = mid;\n            } else {\n               \
    \ odd = mid;\n            }\n            if (even > biggest) {\n             \
    \   biggest = even;\n            }\n            if (odd > biggest) {\n       \
    \         biggest = odd;\n            }\n        }\n        return biggest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        while(even < odd)\
    \ {\n            long mid = (even+odd)/2;\n            if(mid % 2 == 0) {\n  \
    \              even = mid;\n            } else {\n                odd = mid;\n\
    \            }\n        }\n        if(even > maxEven) {\n            maxEven =\
    \ even;\n        }\n        return maxEven;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if (mid % 2\
    \ == 0) {\n                even = mid;\n            } else {\n               \
    \ odd = mid;\n            }\n            if (even > biggest) {\n             \
    \   biggest = even;\n            }\n            if (odd > biggest) {\n       \
    \         biggest = odd;\n            }\n        }\n        return biggest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        long mid = biggest;\n        long eveneven = even;\n       \
    \ long evenodd = even;\n        long oddodd = odd;\n        long evenevenodd =\
    \ even;\n        long oddevenodd = odd;\n        long evenevenevenodd = even;\n\
    \        long oddevenevenodd = odd;\n        long evenevenevenevenodd = even;\n\
    \        long oddevenevenevenodd = odd;\n        long evenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenodd = odd;\n        long evenevenevenevenevenevenevenodd\
    \ = even;\n        long oddevenevenevenevenevenodd = odd;\n        long \n   \
    \ }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuuuuejry.java:58: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpuuuuejry.java:58: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        long even = 1;\n        long odd = 1;\n        long biggest =\
    \ x;\n        long smallest = y;\n        long mid = x + (y - x) / 2;\n      \
    \  long mid2 = y + (x - y) / 2;\n        long mid3 = x + (y - x) / 3;\n      \
    \  long mid4 = y + (x - y) / 3;\n        long mid5 = x + (y - x) / 5;\n      \
    \  long mid6 = y + (x - y) / 5;\n        long mid7 = x + (y - x) / 7;\n      \
    \  long mid8 = y + (x - y) / 7;\n        long mid9 = x + (y - x) / 9;\n      \
    \  long mid10 = y + (x - y) / 9;\n        long mid11 = x + (y - x) / 11;\n   \
    \     long mid12 = y + (x - y) / 11;\n        long mid13 = x + (y - x) / 13;\n\
    \        long mid14 = y + (x - y) / 13;\n        long mid15 = x + (y - x) / 15;\n\
    \        long mid16 = y + (x - y) / 15;\n        long mid17 = x + (y - x) / 17;\n\
    \        long mid18 = y + (x - y) / 17;\n        long mid19 = x + (y - x) / 19;\n\
    \        long mid20 = y + (x - y) / 19;\n        long mid21 = x + (y - x) / 21;\n\
    \        long mid22 = y + (x - y) / 21;\n        long mid23 = x + (y - x) / 23;\n\
    \        long mid24 = y + (x - y) / 23;\n        long mid25 = x + (y - x) / 25;\n\
    \        long mid26 = y + (x - y) / 25;\n        long mid27 = x + (y - x) / 27;\n\
    \        long mid28 = y + (x - y) / 27;\n        long mid29 = x + (y - x) / 29;\n\
    \        long mid30 = y + (x - y) / 29;\n        long mid31 = x + (y - x) / 31;\n\
    \        long mid32 = y + (x - y) / 31;\n        long mid33 = x + (y - x) / 33;\n\
    \        long mid34 = y + (x - y) / 33;\n        long mid35 = x + (y - x) / 35;\n\
    \        long mid36 = y + (x - y) / 35;\n        long mid37 = x + (y - x) / 37;\n\
    \        long mid38 = y + (x - y) / 37;\n        long mid39 = x + (y - x) / 39;\n\
    \        long mid40 = y + (x - y\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplu5j1l9_.java:60: error: ')' expected\n        long mid40 = y +\
    \ (x - y\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while(even < odd) {\n            even = even * 2;\n        \
    \    odd = odd * 2;\n            if(even > odd) {\n                biggest = even;\n\
    \                smallest = odd;\n            } else {\n                biggest\
    \ = odd;\n                smallest = even;\n            }\n        }\n       \
    \ return biggest;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv3f4wxmy.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while(even < odd) {\n            biggest = even;\n         \
    \   smallest = odd;\n            even = even + 2;\n            odd = odd - 2;\n\
    \            if(even > odd) {\n                biggest = even;\n             \
    \   smallest = odd;\n                even = even + 1;\n                odd = odd\
    \ - 1;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_483sx0e.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ > 0 && odd > 0) {\n            if(even % 2 == 0 && odd % 2 == 0) {\n       \
    \         biggest = even;\n                break;\n            }\n           \
    \ else if(even % 2 != 0 && odd % 2 != 0) {\n                biggest = odd;\n \
    \               break;\n            }\n            else if(even % 2 == 0 && odd\
    \ % 2 != 0) {\n                biggest = even;\n                break;\n     \
    \       }\n            else if(even % 2 != 0 && odd % 2 == 0) {\n            \
    \    biggest = odd;\n                break;\n            }\n            even =\
    \ even / 2;\n            odd = odd / 2;\n        }\n        return biggest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48ia2aec.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        while (even\
    \ < odd) {\n            even = even + 1;\n            odd = odd - 1;\n       \
    \     if (even % 2 == 0 && odd % 2 == 0) {\n                biggest = even;\n\
    \            }\n        }\n        return biggest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft46l75q.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            long tempX = x;\n            long\
    \ tempY = y;\n            x = y;\n            y = tempX;\n        }\n        long\
    \ even = 0;\n        long odd = 0;\n        while (x != y) {\n            long\
    \ tempX = x;\n            long tempY = y;\n            x = y;\n            y =\
    \ tempX;\n            if (x % 2 == 0) {\n                even = even + x;\n  \
    \          } else {\n                odd = odd + x;\n            }\n        }\n\
    \        if (even > odd) {\n            result = even;\n        } else {\n   \
    \         result = odd;\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        while(even < odd)\
    \ {\n            long mid = (even+odd)/2;\n            if(mid % 2 == 0) {\n  \
    \              even = mid;\n            } else {\n                odd = mid;\n\
    \            }\n        }\n        if(even > maxEven) {\n            maxEven =\
    \ even;\n        }\n        return maxEven;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long biggestEven\
    \ = 0;\n        long biggestOdd = 0;\n        long evenCount = 0;\n        long\
    \ oddCount = 0;\n        long biggestEvenCount = 0;\n        long biggestOddCount\
    \ = 0;\n        long evenCount2 = 0;\n        long oddCount2 = 0;\n        long\
    \ biggestEvenCount2 = 0;\n        long biggestOddCount2 = 0;\n        long evenCount3\
    \ = 0;\n        long oddCount3 = 0;\n        long biggestEvenCount3 = 0;\n   \
    \     long biggestOddCount3 = 0;\n        long evenCount4 = 0;\n        long oddCount4\
    \ = 0;\n        long biggestEvenCount4 = 0;\n        long biggestOddCount4 = 0;\n\
    \        long evenCount5 = 0;\n        long oddCount5 = 0;\n        long biggestEvenCount5\
    \ = 0;\n        long biggestOddCount5 = 0;\n        long evenCount6 = 0;\n   \
    \     long oddCount6 = 0;\n        long biggestEvenCount6 = 0;\n        long biggestOddCount6\
    \ = 0;\n        long evenCount7 = 0;\n        long oddCount7 = 0;\n        long\
    \ biggestEvenCount7 = 0;\n        long biggestOddCount7 = 0;\n        long evenCount8\
    \ = 0;\n        long oddCount8 = 0;\n        long biggestEvenCount8 = 0;\n   \
    \     long biggestOddCount8 = 0;\n        long evenCount9 = 0;\n        long oddCount9\
    \ = 0;\n        long biggestEvenCount9 = 0;\n        long biggestOddCount9 = 0;\n\
    \        long evenCount10 = 0;\n        long oddCount10 = 0;\n        long biggestEvenCount10\
    \ = 0;\n        long biggestOddCount10 = 0;\n        long evenCount11 = 0;\n \
    \       long oddCount11 = 0;\n        long biggestEvenCount11 = 0;\n        long\
    \ biggestOddCount11 = 0;\n        long evenCount12 = 0;\n        long oddCount12\
    \ = 0;\n        long biggestEvenCount12 = 0;\n        long biggestOddCount12 =\
    \ 0;\n        long evenCount13 = 0;\n        long oddCount13 = 0;\n        long\
    \ biggestEvenCount13 = 0;\n        long biggestOddCount13 = 0;\n        long evenCount14\
    \ = 0;\n        long oddCount14 = 0;\n        long biggestEvenCount14 = 0;\n \
    \       long biggestOddCount14 = 0;\n        long evenCount15 = 0;\n        long\
    \ oddCount15 = 0;\n        long biggestEvenCount15 = 0;\n        long biggestOddCount15\
    \ = 0;\n        long evenCount16 = 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp92jols1f.java:82: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long minNum = -1;\n        long maxNum\
    \ = -1;\n        long evenNum = -1;\n        long oddNum = -1;\n        long evenMin\
    \ = -1;\n        long evenMax = -1;\n        long oddMin = -1;\n        long oddMax\
    \ = -1;\n        long evenMinNum = -1;\n        long evenMaxNum = -1;\n      \
    \  long oddMinNum = -1;\n        long oddMaxNum = -1;\n        long evenMinNum2\
    \ = -1;\n        long evenMaxNum2 = -1;\n        long oddMinNum2 = -1;\n     \
    \   long oddMaxNum2 = -1;\n        long evenMinNum3 = -1;\n        long evenMaxNum3\
    \ = -1;\n        long oddMinNum3 = -1;\n        long oddMaxNum3 = -1;\n      \
    \  long evenMinNum4 = -1;\n        long evenMaxNum4 = -1;\n        long oddMinNum4\
    \ = -1;\n        long oddMaxNum4 = -1;\n        long evenMinNum5 = -1;\n     \
    \   long evenMaxNum5 = -1;\n        long oddMinNum5 = -1;\n        long oddMaxNum5\
    \ = -1;\n        long evenMinNum6 = -1;\n        long evenMaxNum6 = -1;\n    \
    \    long oddMinNum6 = -1;\n        long oddMaxNum6 = -1;\n        long evenMinNum7\
    \ = -1;\n        long evenMaxNum7 = -1;\n        long oddMinNum7 = -1;\n     \
    \   long oddMaxNum7 = -1;\n        long evenMinNum8 = -1;\n        long evenMaxNum8\
    \ = -1;\n        long oddMinNum8 = -1;\n        long oddMaxNum8 = -1;\n      \
    \  long evenMinNum9 = -1;\n        long evenMaxNum9 = -1;\n        long oddMinNum9\
    \ = -1;\n        long oddMaxNum9 = -1;\n        long evenMinNum10 = -1;\n    \
    \    long evenMaxNum10 = -1;\n        long oddMinNum10 = -1;\n        long oddMaxNum10\
    \ = -1;\n        long evenMinNum11 = -1;\n        long evenMaxNum11 = -1;\n  \
    \      long oddMinNum11 = -1;\n        long oddMaxNum11 = -1;\n        long evenMinNum12\
    \ = -1;\n        long evenMaxNum12 = -1;\n        long oddMinNum12 = -1;\n   \
    \     long oddMaxNum12 = -1;\n        long evenMinNum13 = -1;\n        long evenMaxNum13\
    \ = -1;\n        long oddMinNum13 = -1;\n        long oddMaxNum13 = -1;\n    \
    \    long evenMinNum14 = -1;\n        long evenMaxNum14 = -1;\n        long oddMin\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoxg703_8.java:80: error: ';' expected\n        long oddMin\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long ans =\
    \ -1;\n        if (x >= y) {\n            ans = x;\n            while (ans <=\
    \ y) {\n                ans += 2;\n            }\n        } else {\n         \
    \   ans = y;\n            while (ans >= x) {\n                ans -= 2;\n    \
    \        }\n        }\n        return ans;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2qnfuikm.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while (even < odd) {\n            even = even + even;\n    \
    \        odd = odd + odd;\n            if (even > odd) {\n                biggest\
    \ = even;\n                smallest = odd;\n            }\n        }\n       \
    \ if (biggest > smallest) {\n            return biggest;\n        }\n        return\
    \ -1;\n\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy8j8zp7h.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x % 2 == 0 ? x : -1;\n        long odd = y % 2 == 0 ? y : -1;\n        long\
    \ biggest = even;\n        if (even > odd) {\n            biggest = odd;\n   \
    \     }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kvq_56q.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            if(even % 2 == 0) {\n                biggest = even;\n\
    \                break;\n            }\n            even++;\n        }\n     \
    \   while(odd < even) {\n            if(odd % 2 == 0) {\n                biggest\
    \ = odd;\n                break;\n            }\n            odd++;\n        }\n\
    \        return biggest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt1whh0a3.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ 0;\n        long min = x;\n        long mid = x;\n        long mid2 = y;\n \
    \       long mid3 = y;\n        long mid4 = y;\n        long mid5 = y;\n     \
    \   long mid6 = y;\n        long mid7 = y;\n        long mid8 = y;\n        long\
    \ mid9 = y;\n        long mid10 = y;\n        long mid11 = y;\n        long mid12\
    \ = y;\n        long mid13 = y;\n        long mid14 = y;\n        long mid15 =\
    \ y;\n        long mid16 = y;\n        long mid17 = y;\n        long mid18 = y;\n\
    \        long mid19 = y;\n        long mid20 = y;\n        long mid21 = y;\n \
    \       long mid22 = y;\n        long mid23 = y;\n        long mid24 = y;\n  \
    \      long mid25 = y;\n        long mid26 = y;\n        long mid27 = y;\n   \
    \     long mid28 = y;\n        long mid29 = y;\n        long mid30 = y;\n    \
    \    long mid31 = y;\n        long mid32 = y;\n        long mid33 = y;\n     \
    \   long mid34 = y;\n        long mid35 = y;\n        long mid36 = y;\n      \
    \  long mid37 = y;\n        long mid38 = y;\n        long mid39 = y;\n       \
    \ long mid40 = y;\n        long mid41 = y;\n        long mid42 = y;\n        long\
    \ mid43 = y;\n        long mid44 = y;\n        long mid45 = y;\n        long mid46\
    \ = y;\n        long mid47 = y;\n        long mid48 = y;\n        long mid49 =\
    \ y;\n        long mid50 = y;\n        long mid51 = y;\n        long mid52 = y;\n\
    \        long mid53 = y;\n        long mid54 = y;\n        long mid55 = y;\n \
    \       long mid56 = y;\n        long mid57 = y;\n        long mid58 = y;\n  \
    \      long mid59 = y;\n        long mid60 = y;\n        long mid61 = y;\n   \
    \     long mid62 = y;\n        long mid63 = y;\n        long mid64 = y;\n    \
    \    long mid65 = y;\n        long mid66 = y;\n        long mid67 = y;\n     \
    \   long mid68 = y;\n        long mid69 = y;\n        long mid70 = y;\n      \
    \  long mid71 = y;\n        long mid72 = y;\n        long mid73 = y;\n       \
    \ long mid\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdvcikoql.java:91: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ -1;\n        long min = x;\n        long mid = min;\n        long counter =\
    \ 0;\n        while (min <= y) {\n            mid = (min + max) / 2;\n       \
    \     if (mid % 2 == 0) {\n                counter++;\n                if (counter\
    \ == 2) {\n                    max = mid;\n                }\n            } else\
    \ {\n                counter = 0;\n            }\n            min = mid + 1;\n\
    \        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long minNum = -1;\n        long maxNum\
    \ = -1;\n        long evenNum = -1;\n        long oddNum = -1;\n        long evenMax\
    \ = -1;\n        long oddMax = -1;\n        long evenMin = -1;\n        long oddMin\
    \ = -1;\n        long evenSum = -1;\n        long oddSum = -1;\n        long evenProduct\
    \ = -1;\n        long oddProduct = -1;\n        long evenMinNum = -1;\n      \
    \  long evenMaxNum = -1;\n        long oddMinNum = -1;\n        long oddMaxNum\
    \ = -1;\n        long evenSumNum = -1;\n        long oddSumNum = -1;\n       \
    \ long evenProductNum = -1;\n        long oddProductNum = -1;\n        long evenMinNumNum\
    \ = -1;\n        long evenMaxNumNum = -1;\n        long oddMinNumNum = -1;\n \
    \       long oddMaxNumNum = -1;\n        long evenSumNumNum = -1;\n        long\
    \ oddSumNumNum = -1;\n        long evenProductNumNum = -1;\n        long oddProductNumNum\
    \ = -1;\n        long evenMinNumNumNum = -1;\n        long evenMaxNumNumNum =\
    \ -1;\n        long oddMinNumNumNum = -1;\n        long oddMaxNumNumNum = -1;\n\
    \        long evenSumNumNumNum = -1;\n        long oddSumNumNumNum = -1;\n   \
    \     long evenProductNumNumNum = -1;\n        long oddProductNumNumNum = -1;\n\
    \        long evenMinNumNumNumNum = -1;\n        long evenMaxNumNumNumNum = -1;\n\
    \        long oddMinNumNumNumNum = -1;\n        long oddMaxNumNumNumNum = -1;\n\
    \        long evenSumNumNumNumNum = -1;\n        long oddSumNumNumNumNum = -1;\n\
    \        long evenProductNumNumNumNum = -1;\n        long oddProductNumNumNumNum\
    \ = -1;\n        long evenMinNumNumNumNumNum = -1;\n        long evenMaxNumNumNumNumNum\
    \ = -1;\n        long oddMinNumNumNumNumNum = -1;\n        long oddMaxNumNumNumNumNum\
    \ = -1;\n        long evenSumNumNumNumNumNum = -1;\n        long oddSumNumNumNumNumNum\
    \ = -1;\n        long evenProductNumNumNumNumNum = -1;\n        long oddProductNumNumNumNumNum\
    \ = -1;\n        long evenMinNumNumNumNumNumNum = -1;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp8atra4ga.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            biggest = even;\n            even += 2;\n            odd\
    \ -= 2;\n        }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpalizzkhr.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long temp =\
    \ 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n\
    \        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n \
    \       long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n \
    \       long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n\
    \        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        long temp74 = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n\
    \        long temp77 = 0;\n        long temp78 = 0;\n        long temp79 = 0;\n\
    \        long temp80 = 0;\n        long temp81 = 0;\n        long temp82 = 0;\n\
    \        long temp83 = 0;\n        long temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpl6aq284n.java:102: error: ';' expected\n        long temp\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        long temp;\n \
    \       while (even < odd) {\n            temp = even;\n            even = odd\
    \ % even;\n            odd = temp % odd;\n            if (even > maxEven) {\n\
    \                maxEven = even;\n            }\n        }\n        return maxEven;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.chooseNum(tmpqiter433.java:22)\n\tat Problem.main(tmpqiter433.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long even = -1;\n        long odd\
    \ = 0;\n        long evenMax = -1;\n        long evenMin = -1;\n        long oddMax\
    \ = -1;\n        long oddMin = -1;\n        long evenMax2 = -1;\n        long\
    \ evenMin2 = -1;\n        long oddMax2 = -1;\n        long oddMin2 = -1;\n   \
    \     long evenMax3 = -1;\n        long evenMin3 = -1;\n        long oddMax3 =\
    \ -1;\n        long oddMin3 = -1;\n        long evenMax4 = -1;\n        long evenMin4\
    \ = -1;\n        long oddMax4 = -1;\n        long oddMin4 = -1;\n        long\
    \ evenMax5 = -1;\n        long evenMin5 = -1;\n        long oddMax5 = -1;\n  \
    \      long oddMin5 = -1;\n        long evenMax6 = -1;\n        long evenMin6\
    \ = -1;\n        long oddMax6 = -1;\n        long oddMin6 = -1;\n        long\
    \ evenMax7 = -1;\n        long evenMin7 = -1;\n        long oddMax7 = -1;\n  \
    \      long oddMin7 = -1;\n        long evenMax8 = -1;\n        long evenMin8\
    \ = -1;\n        long oddMax8 = -1;\n        long oddMin8 = -1;\n        long\
    \ evenMax9 = -1;\n        long evenMin9 = -1;\n        long oddMax9 = -1;\n  \
    \      long oddMin9 = -1;\n        long evenMax10 = -1;\n        long evenMin10\
    \ = -1;\n        long oddMax10 = -1;\n        long oddMin10 = -1;\n        long\
    \ evenMax11 = -1;\n        long evenMin11 = -1;\n        long oddMax11 = -1;\n\
    \        long oddMin11 = -1;\n        long evenMax12 = -1;\n        long evenMin12\
    \ = -1;\n        long oddMax12 = -1;\n        long oddMin12 = -1;\n        long\
    \ evenMax13 = -1;\n        long evenMin13 = -1;\n        long oddMax13 = -1;\n\
    \        long oddMin13 = -1;\n        long evenMax14 = -1;\n        long evenMin14\
    \ = -1;\n        long oddMax14 = -1;\n        long oddMin14 = -1;\n        long\
    \ evenMax15 = -1;\n        long evenMin15 = -1;\n        long oddMax15 = -1;\n\
    \        long oddMin15 = -1;\n        long evenMax16 = -1;\n        long evenMin16\
    \ = -1;\n        long oddMax16 = -1;\n        long oddMin16 = -1;\n        long\
    \ evenMax17 = -1;\n        long evenMin17 = -1;\n        long oddMax17 = -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa_lwacli.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = 0;\n        long odd = 0;\n        long temp = 0;\n\
    \        long eveneven = 0;\n        long evenodd = 0;\n        long oddodd =\
    \ 0;\n        long tempeven = 0;\n        long tempodd = 0;\n        long tempeveneven\
    \ = 0;\n        long tempevenodd = 0;\n        long tempoddodd = 0;\n        long\
    \ tempeveneveneven = 0;\n        long tempevenevenodd = 0;\n        long tempevenoddoddodd\
    \ = 0;\n        long tempoddoddodd = 0;\n        long tempoddoddeven = 0;\n  \
    \      long tempoddoddeveneven = 0;\n        long tempoddoddevenevenodd = 0;\n\
    \        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenoddodd\
    \ = 0;\n        long tempoddoddevenevenevenoddodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long tempoddoddevenevenevenodd = 0;\n        long tempoddoddevenevenevenodd\
    \ = 0;\n        long temp\n    }\n    public static void main(String[] args) {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6r3rwsde.java:69: error: ';' expected\n        long temp\n    \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        boolean evenOdd = even%2 == 0;\n        boolean oddEven = odd%2\
    \ == 0;\n        boolean evenOddEven = evenOdd%2 == 0;\n        boolean oddEvenOdd\
    \ = oddEven%2 == 0;\n        boolean evenOddEvenOdd = evenOddEven%2 == 0;\n  \
    \      boolean oddEvenOddEven = oddEvenOdd%2 == 0;\n        boolean evenOddEvenOddEven\
    \ = evenOddEvenOdd%2 == 0;\n        boolean oddEvenOddEvenOddEven = oddEvenOddEvenOdd%2\
    \ == 0;\n        boolean evenOddEvenOddEvenOdd = evenOddEvenOddEvenOdd%2 == 0;\n\
    \        boolean oddEvenOddEvenOddEvenOdd = oddEvenOddEvenOddEvenOdd%2 == 0;\n\
    \        boolean evenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddOdd%2 == 0;\n\
    \        boolean oddEvenOddEvenOddEvenOddEven = oddEvenOddEvenOddEvenOddOdd%2\
    \ == 0;\n        boolean evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddOdd%2\
    \ == 0;\n        boolean oddEvenOddEvenOddEvenOddEvenOdd = oddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0;\n        boolean evenOddEvenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddEvenOddOddEven%2\
    \ == 0;\n        boolean oddEvenOddEvenOddEvenOddEvenOddEven = oddEvenOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0;\n        boolean evenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddOdd%2\
    \ == 0;\n        boolean oddEvenOddEvenOddEvenOddEvenOddEvenOdd = oddEvenOddEvenOddEvenOddEvenOddEvenOddOdd%2\
    \ == 0;\n        boolean evenOddEvenOddEvenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnt81uom9.java:38: error: ';' expected\n        boolean evenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = evenOddEvenOddEvenOddEvenOddEvenOdd\n                                    \
    \                                                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = 0;\n        long odd = 0;\n        long xMinusY =\
    \ x - y;\n        long yMinusX = y - x;\n        long xMinusXMinusY = xMinusY\
    \ - xMinusY;\n        long yMinusYMinusX = yMinusX - yMinusX;\n        long xMinusXMinusXMinusY\
    \ = xMinusXMinusY - xMinusXMinusY;\n        long yMinusYMinusYMinusX = yMinusYMinusX\
    \ - yMinusYMinusX;\n        long xMinusXMinusXMinusXMinusY = xMinusXMinusXMinusY\
    \ - xMinusXMinusXMinusY;\n        long yMinusYMinusYMinusXMinusY = yMinusYMinusYMinusX\
    \ - yMinusYMinusYMinusX;\n        long xMinusXMinusXMinusXMinusXMinusY = xMinusXMinusXMinusXMinusY\
    \ - xMinusXMinusXMinusXMinusY;\n        long yMinusYMinusYMinusYMinusXMinusY =\
    \ yMinusYMinusYMinusYMinusX - yMinusYMinusYMinusYMinusX;\n        long xMinusXMinusXMinusXMinusXMinusXMinusY\
    \ = xMinusXMinusXMinusXMinusXMinusY - xMinusXMinusXMinusXMinusXMinusY;\n     \
    \   long yMinusYMinusYMinusYMinusYMinusXMinusY = yMinusYMinusYMinusYMinusYMinusX\
    \ - yMinusYMinusYMinusYMinusYMinusX;\n        long xMinusXMinusXMinusXMinusXMinusXMinusXMinusY\
    \ = xMinusXMinusXMinusXMinusXMinusXMinusY - xMinusXMinusXMinusXMinusXMinusXMinusY;\n\
    \        long yMinusYMinusYMinusYMinusYMinusYMinusXMinusY = yMinusYMinusYMin\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsw2wrr7v.java:32: error: ';' expected\n        long yMinusYMinusYMinusYMinusYMinusYMinusXMinusY\
    \ = yMinusYMinusYMin\n                                                       \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if (mid % 2\
    \ == 0) {\n                even = mid;\n            } else {\n               \
    \ odd = mid;\n            }\n            if (even > biggest) {\n             \
    \   biggest = even;\n            }\n            if (odd > biggest) {\n       \
    \         biggest = odd;\n            }\n        }\n        return biggest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long temp =\
    \ 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n\
    \        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n \
    \       long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n \
    \       long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n\
    \        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        long temp74 = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n\
    \        long temp77 = 0;\n        long temp78 = 0;\n        long temp79 = 0;\n\
    \        long temp80 = 0;\n        long temp81 = 0;\n        long temp82 = 0;\n\
    \        long temp83 = 0;\n        long temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpsip__qzh.java:102: error: ';' expected\n        long temp\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        long even = 1;\n        long odd = 0;\n        long biggestEven\
    \ = 0;\n        long biggestOdd = 0;\n        long evenCount = 0;\n        long\
    \ oddCount = 0;\n        long biggestEvenCount = 0;\n        long biggestOddCount\
    \ = 0;\n        long evenSum = 0;\n        long oddSum = 0;\n        long biggestEvenSum\
    \ = 0;\n        long biggestOddSum = 0;\n        long evenSum2 = 0;\n        long\
    \ oddSum2 = 0;\n        long biggestEvenSum2 = 0;\n        long biggestOddSum2\
    \ = 0;\n        long evenSum3 = 0;\n        long oddSum3 = 0;\n        long biggestEvenSum3\
    \ = 0;\n        long biggestOddSum3 = 0;\n        long evenSum4 = 0;\n       \
    \ long oddSum4 = 0;\n        long biggestEvenSum4 = 0;\n        long biggestOddSum4\
    \ = 0;\n        long evenSum5 = 0;\n        long oddSum5 = 0;\n        long biggestEvenSum5\
    \ = 0;\n        long biggestOddSum5 = 0;\n        long evenSum6 = 0;\n       \
    \ long oddSum6 = 0;\n        long biggestEvenSum6 = 0;\n        long biggestOddSum6\
    \ = 0;\n        long evenSum7 = 0;\n        long oddSum7 = 0;\n        long biggestEvenSum7\
    \ = 0;\n        long biggestOddSum7 = 0;\n        long evenSum8 = 0;\n       \
    \ long oddSum8 = 0;\n        long biggestEvenSum8 = 0;\n        long biggestOddSum8\
    \ = 0;\n        long evenSum9 = 0;\n        long oddSum9 = 0;\n        long biggestEvenSum9\
    \ = 0;\n        long biggestOddSum9 = 0;\n        long evenSum10 = 0;\n      \
    \  long oddSum10 = 0;\n        long biggestEvenSum10 = 0;\n        long biggestOddSum10\
    \ = 0;\n        long evenSum11 = 0;\n        long oddSum11 = 0;\n        long\
    \ biggestEvenSum11 = 0;\n        long biggestOddSum11 = 0;\n        long evenSum12\
    \ = 0;\n        long oddSum12 = 0;\n        long biggestEvenSum12 = 0;\n     \
    \   long biggestOddSum12 = 0;\n        long evenSum13 = 0;\n        long oddSum13\
    \ = 0;\n        long biggestEvenSum13 = 0;\n        long biggestOddSum13 = 0;\n\
    \        long evenSum14 = 0;\n        long oddSum14 = 0;\n        long biggestEvenSum14\
    \ = 0;\n        long biggestOddSum14 = 0;\n        long evenSum15 = 0;\n     \
    \   long oddSum\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphktjneep.java:82: error: ';' expected\n        long oddSum\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ -1;\n        long min = x;\n        long mid = x;\n        long mid2 = y;\n\
    \        long mid3 = y;\n        long mid4 = y;\n        long mid5 = y;\n    \
    \    long mid6 = y;\n        long mid7 = y;\n        long mid8 = y;\n        long\
    \ mid9 = y;\n        long mid10 = y;\n        long mid11 = y;\n        long mid12\
    \ = y;\n        long mid13 = y;\n        long mid14 = y;\n        long mid15 =\
    \ y;\n        long mid16 = y;\n        long mid17 = y;\n        long mid18 = y;\n\
    \        long mid19 = y;\n        long mid20 = y;\n        long mid21 = y;\n \
    \       long mid22 = y;\n        long mid23 = y;\n        long mid24 = y;\n  \
    \      long mid25 = y;\n        long mid26 = y;\n        long mid27 = y;\n   \
    \     long mid28 = y;\n        long mid29 = y;\n        long mid30 = y;\n    \
    \    long mid31 = y;\n        long mid32 = y;\n        long mid33 = y;\n     \
    \   long mid34 = y;\n        long mid35 = y;\n        long mid36 = y;\n      \
    \  long mid37 = y;\n        long mid38 = y;\n        long mid39 = y;\n       \
    \ long mid40 = y;\n        long mid41 = y;\n        long mid42 = y;\n        long\
    \ mid43 = y;\n        long mid44 = y;\n        long mid45 = y;\n        long mid46\
    \ = y;\n        long mid47 = y;\n        long mid48 = y;\n        long mid49 =\
    \ y;\n        long mid50 = y;\n        long mid51 = y;\n        long mid52 = y;\n\
    \        long mid53 = y;\n        long mid54 = y;\n        long mid55 = y;\n \
    \       long mid56 = y;\n        long mid57 = y;\n        long mid58 = y;\n  \
    \      long mid59 = y;\n        long mid60 = y;\n        long mid61 = y;\n   \
    \     long mid62 = y;\n        long mid63 = y;\n        long mid64 = y;\n    \
    \    long mid65 = y;\n        long mid66 = y;\n        long mid67 = y;\n     \
    \   long mid68 = y;\n        long mid69 = y;\n        long mid70 = y;\n      \
    \  long mid71 = y;\n        long mid72 = y;\n        long mid73 = y;\n       \
    \ long mid\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplqrvaxxs.java:91: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while(even < odd) {\n            even = even * 2;\n        \
    \    odd = odd * 2;\n            if(even > odd) {\n                biggest = even;\n\
    \                smallest = odd;\n            }\n        }\n        return biggest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqe1n429.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x != y) {\n               \
    \ if (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x /= 2;\n            }\n        } else {\n\
    \            while (y != x) {\n                if (y % 2 == 0) {\n           \
    \         result = y;\n                    break;\n                }\n       \
    \         y /= 2;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwdzt3y4.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        long temp;\n\
    \        while (even < odd) {\n            temp = (even * 2) + odd;\n        \
    \    if (temp > biggest) {\n                biggest = temp;\n            }\n \
    \           even = temp;\n            odd += 1;\n        }\n        return biggest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq25k24_s.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long minOdd = -1;\n        long maxOdd\
    \ = -1;\n        long even = -1;\n        long odd = -1;\n        long minNum\
    \ = -1;\n        long maxNum = -1;\n        long num;\n        long num2;\n  \
    \      long num3;\n        long num4;\n        long num5;\n        long num6;\n\
    \        long num7;\n        long num8;\n        long num9;\n        long num10;\n\
    \        long num11;\n        long num12;\n        long num13;\n        long num14;\n\
    \        long num15;\n        long num16;\n        long num17;\n        long num18;\n\
    \        long num19;\n        long num20;\n        long num21;\n        long num22;\n\
    \        long num23;\n        long num24;\n        long num25;\n        long num26;\n\
    \        long num27;\n        long num28;\n        long num29;\n        long num30;\n\
    \        long num31;\n        long num32;\n        long num33;\n        long num34;\n\
    \        long num35;\n        long num36;\n        long num37;\n        long num38;\n\
    \        long num39;\n        long num40;\n        long num41;\n        long num42;\n\
    \        long num43;\n        long num44;\n        long num45;\n        long num46;\n\
    \        long num47;\n        long num48;\n        long num49;\n        long num50;\n\
    \        long num51;\n        long num52;\n        long num53;\n        long num54;\n\
    \        long num55;\n        long num56;\n        long num57;\n        long num58;\n\
    \        long num59;\n        long num60;\n        long num61;\n        long num62;\n\
    \        long num63;\n        long num64;\n        long num65;\n        long num66;\n\
    \        long num67;\n        long num68;\n        long num69;\n        long num70;\n\
    \        long num71;\n        long num72;\n        long num73;\n        long num74;\n\
    \        long num75;\n        long num76;\n        long num77;\n        long num78;\n\
    \        long num79;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpoxhagzvj.java:103: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpoxhagzvj.java:103: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = Math.max(even, odd);\n            even = biggest\
    \ / 2;\n            odd = biggest % 2;\n        }\n        return biggest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1e9qnu71.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x <= y) {\n               \
    \ if (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x += 2;\n            }\n        } else {\n\
    \            while (y <= x) {\n                if (y % 2 == 0) {\n           \
    \         result = y;\n                    break;\n                }\n       \
    \         y += 2;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8cc6gulg.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd - 1;\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qqrubxn.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            long temp = x;\n            x = y;\n\
    \            y = temp;\n        }\n        long even = 0;\n        long odd =\
    \ 0;\n        long biggest = 0;\n        while (x <= y) {\n            if (x %\
    \ 2 == 0) {\n                even = even + x;\n            } else {\n        \
    \        odd = odd + x;\n            }\n            x = x + 1;\n        }\n  \
    \      if (even > biggest) {\n            biggest = even;\n        }\n       \
    \ if (odd > biggest) {\n            biggest = odd;\n        }\n        return\
    \ biggest;\n\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphlowcquz.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = 0;\n        long odd = 0;\n        long range = (long)\
    \ Math.pow(2, 32) - 1;\n        long range2 = (long) Math.pow(2, 32) - 2;\n  \
    \      long range3 = (long) Math.pow(2, 32) - 3;\n        long range4 = (long)\
    \ Math.pow(2, 32) - 4;\n        long range5 = (long) Math.pow(2, 32) - 5;\n  \
    \      long range6 = (long) Math.pow(2, 32) - 6;\n        long range7 = (long)\
    \ Math.pow(2, 32) - 7;\n        long range8 = (long) Math.pow(2, 32) - 8;\n  \
    \      long range9 = (long) Math.pow(2, 32) - 9;\n        long range10 = (long)\
    \ Math.pow(2, 32) - 10;\n        long range11 = (long) Math.pow(2, 32) - 11;\n\
    \        long range12 = (long) Math.pow(2, 32) - 12;\n        long range13 = (long)\
    \ Math.pow(2, 32) - 13;\n        long range14 = (long) Math.pow(2, 32) - 14;\n\
    \        long range15 = (long) Math.pow(2, 32) - 15;\n        long range16 = (long)\
    \ Math.pow(2, 32) - 16;\n        long range17 = (long) Math.pow(2, 32) - 17;\n\
    \        long range18 = (long) Math.pow(2, 32) - 18;\n        long range19 = (long)\
    \ Math.pow(2, 32) - 19;\n        long range20 = (long) Math.pow(2, 32) - 20;\n\
    \        long range21 = (long) Math.pow(2, 32) - 21;\n        long range22 = (long)\
    \ Math.pow(2, 32) - 22;\n        long range23 = (long) Math.pow(2, 32) - 23;\n\
    \        long range24 = (long) Math.pow(2, 32) - 24;\n        long range25 = (long)\
    \ Math.pow(2, 32) - 25;\n        long range26 = (long) Math.pow(2, 32) - 26;\n\
    \        long range27 = (long) Math.pow(2, 32) - 27;\n        long range28 = (long)\
    \ Math.pow(2, 32) - 28;\n        long range29 = (long) Math.pow(2, 32) - 29;\n\
    \        long range30 = (long) Math.pow(2, 32) - 30;\n        long range31 = (long)\
    \ Math.pow(2, 32) - 31;\n        long range32 = (long) Math.pow(2, 32) - 32;\n\
    \        long range33 = (long) Math.pow(2, 32) - 33;\n        long range34 = (long)\
    \ Math.pow(2, 32) - 34;\n        long range35 = (\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp3qvd2lu2.java:54: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      if (even > odd) {\n                even = even - 1;\n                odd\
    \ = odd + 1;\n            }\n        }\n        return biggest;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdwnp_gk.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x < y) {\n                long\
    \ mid = (x + y) / 2;\n                if (mid % 2 == 0) {\n                  \
    \  result = mid;\n                    x = mid;\n                } else {\n   \
    \                 y = mid;\n                }\n            }\n        } else {\n\
    \            while (y < x) {\n                long mid = (x + y) / 2;\n      \
    \          if (mid % 2 == 0) {\n                    result = mid;\n          \
    \          y = mid;\n                } else {\n                    x = mid;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4fs20y5b.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = 0;\n        long odd = 0;\n        long range = (long)\
    \ Math.pow(2, 32) - 1;\n        long range2 = (long) Math.pow(2, 32) - 2;\n  \
    \      long range3 = (long) Math.pow(2, 32) - 3;\n        long range4 = (long)\
    \ Math.pow(2, 32) - 4;\n        long range5 = (long) Math.pow(2, 32) - 5;\n  \
    \      long range6 = (long) Math.pow(2, 32) - 6;\n        long range7 = (long)\
    \ Math.pow(2, 32) - 7;\n        long range8 = (long) Math.pow(2, 32) - 8;\n  \
    \      long range9 = (long) Math.pow(2, 32) - 9;\n        long range10 = (long)\
    \ Math.pow(2, 32) - 10;\n        long range11 = (long) Math.pow(2, 32) - 11;\n\
    \        long range12 = (long) Math.pow(2, 32) - 12;\n        long range13 = (long)\
    \ Math.pow(2, 32) - 13;\n        long range14 = (long) Math.pow(2, 32) - 14;\n\
    \        long range15 = (long) Math.pow(2, 32) - 15;\n        long range16 = (long)\
    \ Math.pow(2, 32) - 16;\n        long range17 = (long) Math.pow(2, 32) - 17;\n\
    \        long range18 = (long) Math.pow(2, 32) - 18;\n        long range19 = (long)\
    \ Math.pow(2, 32) - 19;\n        long range20 = (long) Math.pow(2, 32) - 20;\n\
    \        long range21 = (long) Math.pow(2, 32) - 21;\n        long range22 = (long)\
    \ Math.pow(2, 32) - 22;\n        long range23 = (long) Math.pow(2, 32) - 23;\n\
    \        long range24 = (long) Math.pow(2, 32) - 24;\n        long range25 = (long)\
    \ Math.pow(2, 32) - 25;\n        long range26 = (long) Math.pow(2, 32) - 26;\n\
    \        long range27 = (long) Math.pow(2, 32) - 27;\n        long range28 = (long)\
    \ Math.pow(2, 32) - 28;\n        long range29 = (long) Math.pow(2, 32) - 29;\n\
    \        long range30 = (long) Math.pow(2, 32) - 30;\n        long range31 = (long)\
    \ Math.pow(2, 32) - 31;\n        long range32 = (long) Math.pow(2, 32) - 32;\n\
    \        long range33 = (long) Math.pow(2, 32) - 33;\n        long range34 = (long)\
    \ Math.pow(2, 32) - 34;\n        long range35 = (\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpsm224_1w.java:54: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x & 1;\n        long odd = x >> 1;\n        long evenodd = even | odd;\n \
    \       long biggest = evenodd;\n        long smallest = evenodd ^ 1;\n      \
    \  long range = (y - x) + 1;\n        long eveneven = even & even;\n        long\
    \ evenodd = even & odd;\n        long evenevenodd = even | odd;\n        long\
    \ eveneveneven = even & even & even;\n        long evenevenodd = even & even &\
    \ odd;\n        long eveneveneven = even & even & even & even;\n        long evenevenevenodd\
    \ = even & even & even & odd;\n        long eveneveneveneven = even & even & even\
    \ & even & even;\n        long evenevenevenevenodd = even & even & even & even\
    \ & odd;\n        long eveneveneveneveneven = even & even & even & even & even\
    \ & even;\n        long evenevenevenevenevenodd = even & even & even & even &\
    \ even & odd;\n        long eveneveneveneveneveneven = even & even & even & even\
    \ & even & even & even;\n        long evenevenevenevenevenevenodd = even & even\
    \ & even & even & even & even & odd;\n        long eveneveneveneveneveneveneven\
    \ = even & even & even & even & even & even & even & even;\n        long evenevenevenevenevenevenevenodd\
    \ = even & even & even & even & even & even & even & odd;\n        long eveneveneveneveneveneveneveneveneven\
    \ = even & even & even & even & even & even & even & even & even;\n        long\
    \ evenevenevenevenevenevenevenevenodd = even & even & even & even & even & even\
    \ & even & even & odd;\n        long eveneveneveneveneveneveneveneveneven = even\
    \ & even & even & even & even & even & even & even & even;\n        long evenevenevenevenevenevenevenevenodd\
    \ = even & even & even & even & even & even & even & even & odd;\n        long\
    \ eveneveneveneveneveneveneveneveneven = even & even & even & even & even & even\
    \ & even & even & even & even;\n        long evenevenevenevenevenevenevenevenevenodd\
    \ = even & even & even & even & even & even & even & even & even \n    }\n   \
    \ public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa2nd_dcn.java:42: error: ';' expected\n        long evenevenevenevenevenevenevenevenevenodd\
    \ = even & even & even & even & even & even & even & even & even \n          \
    \                                                                            \
    \                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x | y;\n        long odd = x ^ y;\n        long biggest = even;\n        if\
    \ (even > odd) {\n            biggest = odd;\n        }\n        return biggest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy4gwg5ta.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x <= y) {\n               \
    \ if (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x++;\n            }\n        } else {\n  \
    \          while (y <= x) {\n                if (y % 2 == 0) {\n             \
    \       result = y;\n                    break;\n                }\n         \
    \       y++;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp24fy94m1.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ -1;\n        long min = x;\n        long mid = min + (max - min) / 2;\n    \
    \    long mid2 = mid + (max - min) / 2;\n        long mid3 = mid2 + (max - min)\
    \ / 2;\n        long mid4 = mid3 + (max - min) / 2;\n        long mid5 = mid4\
    \ + (max - min) / 2;\n        long mid6 = mid5 + (max - min) / 2;\n        long\
    \ mid7 = mid6 + (max - min) / 2;\n        long mid8 = mid7 + (max - min) / 2;\n\
    \        long mid9 = mid8 + (max - min) / 2;\n        long mid10 = mid9 + (max\
    \ - min) / 2;\n        long mid11 = mid10 + (max - min) / 2;\n        long mid12\
    \ = mid11 + (max - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n\
    \        long mid14 = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max\
    \ - min) / 2;\n        long mid16 = mid15 + (max - min) / 2;\n        long mid17\
    \ = mid16 + (max - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n\
    \        long mid19 = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max\
    \ - min) / 2;\n        long mid21 = mid20 + (max - min) / 2;\n        long mid22\
    \ = mid21 + (max - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n\
    \        long mid24 = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max\
    \ - min) / 2;\n        long mid26 = mid25 + (max - min) / 2;\n        long mid27\
    \ = mid26 + (max - min) / 2;\n        long mid28 = mid27 + (max - min) / 2;\n\
    \        long mid29 = mid28 + (max - min) / 2;\n        long mid30 = mid29 + (max\
    \ - min) / 2;\n        long mid31 = mid30 + (max - min) / 2;\n        long mid32\
    \ = mid31 + (max - min) / 2;\n        long mid33 = mid32 + (max - min) / 2;\n\
    \        long mid34 = mid33 + (max - min) / 2;\n        long mid35 = mid34 + (max\
    \ - min) / 2;\n        long mid36 = mid35 + (max - min) / 2;\n        long mid37\
    \ = mid36 + (max - min) / 2;\n        long mid38 = mid37 + (max - min) / 2;\n\
    \        long mid39 = mid38 + (max - min) / 2;\n        long mid40 = mid39 + (max\
    \ - \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpufonv8zn.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        while(even < odd)\
    \ {\n            if(even % 2 == 0 && odd % 2 == 0) {\n                maxEven\
    \ = even;\n                break;\n            }\n            even++;\n      \
    \      odd--;\n        }\n        return maxEven;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiodr3hvf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x <= y) {\n               \
    \ if (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x += 2;\n            }\n        } else {\n\
    \            while (y <= x) {\n                if (y % 2 == 0) {\n           \
    \         result = y;\n                    break;\n                }\n       \
    \         y += 2;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfctmvma5.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        long temp;\n \
    \       while (even < odd) {\n            temp = even;\n            even = odd\
    \ % even;\n            odd = temp % odd;\n            if (even > maxEven) {\n\
    \                maxEven = even;\n            }\n        }\n        return maxEven;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.chooseNum(tmpy76zv1o3.java:22)\n\tat Problem.main(tmpy76zv1o3.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = x;\n        long odd = y;\n        long eveneven\
    \ = even;\n        long evenodd = odd;\n        long oddeven = even;\n       \
    \ long oddodd = odd;\n        long eveneveneven = eveneven;\n        long evenevenodd\
    \ = evenodd;\n        long evenoddeven = eveneven;\n        long evenoddodd =\
    \ evenodd;\n        long oddeveneveneven = oddeveneven;\n        long oddevenevenodd\
    \ = oddevenodd;\n        long oddevenoddeven = oddeveneven;\n        long oddevenoddodd\
    \ = oddevenodd;\n        long eveneveneveneven = eveneveneven;\n        long evenevenevenodd\
    \ = evenevenodd;\n        long evenevenoddeven = eveneveneven;\n        long evenevenoddodd\
    \ = evenevenodd;\n        long evenoddeveneven = eveneveneven;\n        long evenoddevenodd\
    \ = evenevenodd;\n        long evenoddoddeven = evenoddeven;\n        long evenoddoddeven\
    \ = evenoddeven;\n        long evenoddoddeven = evenoddoddeven;\n        long\
    \ oddeveneveneveneven = oddeveneveneven;\n        long oddevenevenevenodd = oddevenevenodd;\n\
    \        long oddevenoddeven = oddeveneveneven;\n        long oddevenoddeven =\
    \ oddeveneveneven;\n        long oddevenoddeven = oddeveneveneven;\n        long\
    \ oddevenoddeven = oddevenoddeven;\n        long oddoddeveneven = oddoddeveneven;\n\
    \        long oddoddeveneven = oddoddeveneven;\n        long oddoddeveneven =\
    \ oddoddeveneven;\n        long oddoddoddeven = oddoddoddeven;\n        long eveneveneveneven\
    \ = eveneveneven;\n        long evenevenevenodd = evenevenodd;\n        long evenevenoddeven\
    \ = eveneveneven;\n        long evenevenoddodd = eveneveneven;\n        long evenoddeveneven\
    \ = eveneveneven;\n        long evenoddevenodd = evenevenodd;\n        long evenoddoddeven\
    \ = eveneveneven;\n        long evenoddoddeven = evenevenodd;\n        long evenoddoddeven\
    \ = evenoddeven;\n        long evenoddoddeven = evenoddoddeven;\n        long\
    \ oddeveneveneven = eveneveneven;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp8khs2ao3.java:27: error: cannot find symbol\n        long oddeveneveneven\
    \ = oddeveneven;\n                               ^\n  symbol:   variable oddeveneven\n\
    \  location: class Problem\n/tmp/tmp8khs2ao3.java:28: error: cannot find symbol\n\
    \        long oddevenevenodd = oddevenodd;\n                              ^\n\
    \  symbol:   variable oddevenodd\n  location: class Problem\n/tmp/tmp8khs2ao3.java:29:\
    \ error: cannot find symbol\n        long oddevenoddeven = oddeveneven;\n    \
    \                          ^\n  symbol:   variable oddeveneven\n  location: class\
    \ Problem\n/tmp/tmp8khs2ao3.java:30: error: cannot find symbol\n        long oddevenoddodd\
    \ = oddevenodd;\n                             ^\n  symbol:   variable oddevenodd\n\
    \  location: class Problem\n/tmp/tmp8khs2ao3.java:38: error: variable evenoddoddeven\
    \ is already defined in method chooseNum(long,long)\n        long evenoddoddeven\
    \ = evenoddeven;\n             ^\n/tmp/tmp8khs2ao3.java:39: error: variable evenoddoddeven\
    \ is already defined in method chooseNum(long,long)\n        long evenoddoddeven\
    \ = evenoddoddeven;\n             ^\n/tmp/tmp8khs2ao3.java:42: error: variable\
    \ oddevenoddeven is already defined in method chooseNum(long,long)\n        long\
    \ oddevenoddeven = oddeveneveneven;\n             ^\n/tmp/tmp8khs2ao3.java:43:\
    \ error: variable oddevenoddeven is already defined in method chooseNum(long,long)\n\
    \        long oddevenoddeven = oddeveneveneven;\n             ^\n/tmp/tmp8khs2ao3.java:44:\
    \ error: variable oddevenoddeven is already defined in method chooseNum(long,long)\n\
    \        long oddevenoddeven = oddeveneveneven;\n             ^\n/tmp/tmp8khs2ao3.java:45:\
    \ error: variable oddevenoddeven is already defined in method chooseNum(long,long)\n\
    \        long oddevenoddeven = oddevenoddeven;\n             ^\n/tmp/tmp8khs2ao3.java:47:\
    \ error: variable oddoddeveneven is already defined in method chooseNum(long,long)\n\
    \        long oddoddeveneven = oddoddeveneven;\n             ^\n/tmp/tmp8khs2ao3.java:48:\
    \ error: variable oddoddeveneven is already defined in method chooseNum(long,long)\n\
    \        long oddoddeveneven = oddoddeveneven;\n             ^\n/tmp/tmp8khs2ao3.java:50:\
    \ error: variable eveneveneveneven is already defined in method chooseNum(long,long)\n\
    \        long eveneveneveneven = eveneveneven;\n             ^\n/tmp/tmp8khs2ao3.java:51:\
    \ error: variable evenevenevenodd is already defined in method chooseNum(long,long)\n\
    \        long evenevenevenodd = evenevenodd;\n             ^\n/tmp/tmp8khs2ao3.java:52:\
    \ error: variable evenevenoddeven is already defined in method chooseNum(long,long)\n\
    \        long evenevenoddeven = eveneveneven;\n             ^\n/tmp/tmp8khs2ao3.java:53:\
    \ error: variable evenevenoddodd is already defined in method chooseNum(long,long)\n\
    \        long evenevenoddodd = eveneveneven;\n             ^\n/tmp/tmp8khs2ao3.java:54:\
    \ error: variable evenoddeveneven is already defined in method chooseNum(long,long)\n\
    \        long evenoddeveneven = eveneveneven;\n             ^\n/tmp/tmp8khs2ao3.java:55:\
    \ error: variable evenoddevenodd is already defined in method chooseNum(long,long)\n\
    \        long evenoddevenodd = evenevenodd;\n             ^\n/tmp/tmp8khs2ao3.java:56:\
    \ error: variable evenoddoddeven is already defined in method chooseNum(long,long)\n\
    \        long evenoddoddeven = eveneveneven;\n             ^\n/tmp/tmp8khs2ao3.java:57:\
    \ error: variable evenoddoddeven is already defined in method chooseNum(long,long)\n\
    \        long evenoddoddeven = evenevenodd;\n             ^\n/tmp/tmp8khs2ao3.java:58:\
    \ error: variable evenoddoddeven is already defined in method chooseNum(long,long)\n\
    \        long evenoddoddeven = evenoddeven;\n             ^\n/tmp/tmp8khs2ao3.java:59:\
    \ error: variable evenoddoddeven is already defined in method chooseNum(long,long)\n\
    \        long evenoddoddeven = evenoddoddeven;\n             ^\n/tmp/tmp8khs2ao3.java:60:\
    \ error: variable oddeveneveneven is already defined in method chooseNum(long,long)\n\
    \        long oddeveneveneven = eveneveneven;\n             ^\n23 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        if (x >= y) {\n            biggest = x;\n        } else {\n \
    \           biggest = y;\n        }\n        long even = biggest % 2 == 0 ? biggest\
    \ : biggest - 1;\n        long even2 = even % 2 == 0 ? even : even - 1;\n    \
    \    long even3 = even2 % 2 == 0 ? even2 : even2 - 1;\n        long even4 = even3\
    \ % 2 == 0 ? even3 : even3 - 1;\n        long even5 = even4 % 2 == 0 ? even4 :\
    \ even4 - 1;\n        long even6 = even5 % 2 == 0 ? even5 : even5 - 1;\n     \
    \   long even7 = even6 % 2 == 0 ? even6 : even6 - 1;\n        long even8 = even7\
    \ % 2 == 0 ? even7 : even7 - 1;\n        long even9 = even8 % 2 == 0 ? even8 :\
    \ even8 - 1;\n        long even10 = even9 % 2 == 0 ? even9 : even9 - 1;\n    \
    \    long even11 = even10 % 2 == 0 ? even10 : even10 - 1;\n        long even12\
    \ = even11 % 2 == 0 ? even11 : even11 - 1;\n        long even13 = even12 % 2 ==\
    \ 0 ? even12 : even12 - 1;\n        long even14 = even13 % 2 == 0 ? even13 : even13\
    \ - 1;\n        long even15 = even14 % 2 == 0 ? even14 : even14 - 1;\n       \
    \ long even16 = even15 % 2 == 0 ? even15 : even15 - 1;\n        long even17 =\
    \ even16 % 2 == 0 ? even16 : even16 - 1;\n        long even18 = even17 % 2 ==\
    \ 0 ? even17 : even17 - 1;\n        long even19 = even18 % 2 == 0 ? even18 : even18\
    \ - 1;\n        long even20 = even19 % 2 == 0 ? even19 : even19 - 1;\n       \
    \ long even21 = even20 % 2 == 0 ? even20 : even20 - 1;\n        long even22 =\
    \ even21 % 2 == 0 ? even21 : even21 - 1;\n        long even23 = even22 % 2 ==\
    \ 0 ? even22 : even22 - 1;\n        long even24 = even23 % 2 == 0 ? even23 : even23\
    \ - 1;\n        long even25 = even24 % 2 == 0 ? even24 : even24 - 1;\n       \
    \ long even26 = even25 % 2 == 0 ? even25 : even25 - 1;\n        long even27 =\
    \ even26 % 2 == 0 ? even26 : even26 - 1;\n        long even28 = even27 % 2 ==\
    \ 0 ? even27 : even27 - 1;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp2rh6q27v.java:51: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x % 2 == 0 ? x : x + 1;\n        long odd = y % 2 == 0 ? y : y + 1;\n    \
    \    long biggest = even;\n        long biggestOdd = odd;\n        long biggestEven\
    \ = even;\n        long biggestOddEven = even;\n        long biggestOddEvenOdd\
    \ = odd;\n        long biggestOddEvenOddEven = even;\n        long biggestOddEvenOddEvenOdd\
    \ = odd;\n        long biggestOddEvenOddEvenOddEven = even;\n        long biggestOddEvenOddEvenOddEvenOdd\
    \ = odd;\n        long biggestOddEvenOddEvenOddEvenOddEven = even;\n        long\
    \ biggestOddEvenOddEvenOddEvenOddEvenOdd = odd;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = even;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOdd = odd;\n\
    \        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = even;\n    \
    \    long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = odd;\n      \
    \  long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = even;\n   \
    \     long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = odd;\n\
    \        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = even;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = odd;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = even;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = odd;\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw1pdcyxa.java:39: error: ';' expected\n        long biggestOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n\
    \                                                                            \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long ans =\
    \ -1;\n        if (x >= y) {\n            ans = x;\n        } else {\n       \
    \     ans = y;\n        }\n        long even = 0;\n        long odd = 0;\n   \
    \     long temp = 0;\n        while (ans > 0) {\n            temp = ans % 10;\n\
    \            even = even + temp;\n            ans = ans / 10;\n        }\n   \
    \     while (even > 0) {\n            temp = even % 10;\n            odd = odd\
    \ + temp;\n            even = even / 10;\n        }\n        if (odd > 0 && odd\
    \ < even) {\n            ans = odd;\n        } else if (even > 0 && even < odd)\
    \ {\n            ans = even;\n        }\n        return ans;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkygncwc7.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while(even < odd) {\n            biggest = even;\n         \
    \   smallest = odd;\n            if(even % 2 == 0) {\n                even = even\
    \ + 1;\n            } else {\n                odd = odd - 1;\n            }\n\
    \        }\n        if(even > odd) {\n            biggest = even;\n          \
    \  smallest = odd;\n        }\n        return biggest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpogngot6r.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            long mid = (even+odd)/2;\n            if(mid % 2 == 0)\
    \ {\n                even = mid;\n            } else {\n                odd =\
    \ mid;\n            }\n            if(biggest < even) {\n                biggest\
    \ = even;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ Math.max(x, y);\n        long min = Math.min(x, y);\n        long even = min\
    \ / 2;\n        long odd = max - even;\n        if (even % 2 == 0) {\n       \
    \     return even;\n        } else {\n            return odd;\n        }\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13yyju4e.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x <= y) {\n               \
    \ if (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x += 2;\n            }\n        } else {\n\
    \            while (y <= x) {\n                if (y % 2 == 0) {\n           \
    \         result = y;\n                    break;\n                }\n       \
    \         y += 2;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcm14mh4l.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long temp;\n\
    \        while (even < odd) {\n            temp = even;\n            even = odd\
    \ % even;\n            odd = temp % odd;\n            biggest = even;\n      \
    \  }\n        if (biggest == even) {\n            return biggest;\n        } else\
    \ {\n            return -1;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.chooseNum(tmpqt8nnp3z.java:22)\n\tat Problem.main(tmpqt8nnp3z.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = Math.max(even, odd);\n            even = biggest\
    \ / 2;\n            odd = biggest % 2;\n        }\n        return biggest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcc9u7kon.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x != y) {\n               \
    \ if (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x /= 2;\n            }\n        } else {\n\
    \            while (y != x) {\n                if (y % 2 == 0) {\n           \
    \         result = y;\n                    break;\n                }\n       \
    \         y /= 2;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2nbxagd1.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        while (even < odd) {\n            if (even\
    \ % 2 == 0 && odd % 2 == 0) {\n                return even;\n            }\n \
    \           even = even + 1;\n            odd = odd - 1;\n        }\n        return\
    \ -1;\n\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9zpd9eqz.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long even = -1;\n        long odd\
    \ = 0;\n        long evenMax = -1;\n        long evenMin = -1;\n        long oddMax\
    \ = -1;\n        long oddMin = -1;\n        long evenMax2 = -1;\n        long\
    \ evenMin2 = -1;\n        long oddMax2 = -1;\n        long oddMin2 = -1;\n   \
    \     long evenMax3 = -1;\n        long evenMin3 = -1;\n        long oddMax3 =\
    \ -1;\n        long oddMin3 = -1;\n        long evenMax4 = -1;\n        long evenMin4\
    \ = -1;\n        long oddMax4 = -1;\n        long oddMin4 = -1;\n        long\
    \ evenMax5 = -1;\n        long evenMin5 = -1;\n        long oddMax5 = -1;\n  \
    \      long oddMin5 = -1;\n        long evenMax6 = -1;\n        long evenMin6\
    \ = -1;\n        long oddMax6 = -1;\n        long oddMin6 = -1;\n        long\
    \ evenMax7 = -1;\n        long evenMin7 = -1;\n        long oddMax7 = -1;\n  \
    \      long oddMin7 = -1;\n        long evenMax8 = -1;\n        long evenMin8\
    \ = -1;\n        long oddMax8 = -1;\n        long oddMin8 = -1;\n        long\
    \ evenMax9 = -1;\n        long evenMin9 = -1;\n        long oddMax9 = -1;\n  \
    \      long oddMin9 = -1;\n        long evenMax10 = -1;\n        long evenMin10\
    \ = -1;\n        long oddMax10 = -1;\n        long oddMin10 = -1;\n        long\
    \ evenMax11 = -1;\n        long evenMin11 = -1;\n        long oddMax11 = -1;\n\
    \        long oddMin11 = -1;\n        long evenMax12 = -1;\n        long evenMin12\
    \ = -1;\n        long oddMax12 = -1;\n        long oddMin12 = -1;\n        long\
    \ evenMax13 = -1;\n        long evenMin13 = -1;\n        long oddMax13 = -1;\n\
    \        long oddMin13 = -1;\n        long evenMax14 = -1;\n        long evenMin14\
    \ = -1;\n        long oddMax14 = -1;\n        long oddMin14 = -1;\n        long\
    \ evenMax15 = -1;\n        long evenMin15 = -1;\n        long oddMax15 = -1;\n\
    \        long oddMin15 = -1;\n        long evenMax16 = -1;\n        long evenMin16\
    \ = -1;\n        long oddMax16 = -1;\n        long oddMin16 = -1;\n        long\
    \ evenMax17 = -1;\n        long evenMin17 = -1;\n        long oddMax17 = -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5t46q1h8.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd - 1;\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpon2hq9n7.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long ans =\
    \ -1;\n        if (x >= y) {\n            ans = x;\n        } else {\n       \
    \     ans = y;\n        }\n        long even = 0;\n        long odd = 0;\n   \
    \     long biggest = 0;\n        long evenBiggest = 0;\n        long oddBiggest\
    \ = 0;\n        long biggestEven = 0;\n        long biggestOdd = 0;\n        long\
    \ evenBiggestEven = 0;\n        long evenBiggestOdd = 0;\n        long oddBiggestEven\
    \ = 0;\n        long oddBiggestOdd = 0;\n        long biggestEvenEven = 0;\n \
    \       long biggestOddEven = 0;\n        long biggestEvenOdd = 0;\n        long\
    \ biggestOddOdd = 0;\n        long evenBiggestEvenEven = 0;\n        long evenBiggestOddEven\
    \ = 0;\n        long oddBiggestEvenEven = 0;\n        long oddBiggestOddEven =\
    \ 0;\n        long evenBiggestEvenOdd = 0;\n        long evenBiggestOddOdd = 0;\n\
    \        long oddBiggestEvenEven = 0;\n        long oddBiggestOddEven = 0;\n \
    \       long evenBiggestEvenEvenOdd = 0;\n        long evenBiggestOddOdd = 0;\n\
    \        long oddBiggestEvenEven = 0;\n        long oddBiggestOddEven = 0;\n \
    \       long evenBiggestEvenEvenOdd = 0;\n        long evenBiggestOddOdd = 0;\n\
    \        long oddBiggestEvenEven = 0;\n        long oddBiggestOddEven = 0;\n \
    \       long evenBiggestEvenEvenOdd = 0;\n        long evenBiggestOddOdd = 0;\n\
    \        long oddBiggestEvenEven = 0;\n        long oddBiggestOddEven = 0;\n \
    \       long evenBiggestEvenEvenOdd = 0;\n        long evenBiggestOddOdd = 0;\n\
    \        long oddBiggestEvenEven = 0;\n        long oddBiggestOddEven = 0;\n \
    \       long evenBiggestEvenEvenOdd = 0;\n        long evenBiggestOddOdd = 0;\n\
    \        long oddBiggestEvenEven = 0;\n        long oddBiggestOddEven = 0;\n \
    \       long evenBiggestEvenEvenOdd = 0;\n        long evenBiggestOddOdd = 0;\n\
    \        long oddBiggestEvenEven = 0;\n        long oddBiggestOddEven = 0;\n \
    \       long evenBiggestEvenEvenOdd = 0;\n        long evenBiggestOddOdd = 0;\n\
    \        long oddBiggestEvenEven = 0;\n        long oddBiggestOddEven = 0;\n \
    \       long evenBiggestEvenEvenO\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmdw2lwux.java:73: error: ';' expected\n        long evenBiggestEvenEvenO\n\
    \                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even += 2;\n            odd\
    \ -= 2;\n        }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpusaeqo_p.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ -1;\n        long min = x;\n        long mid = min;\n        long even = 0;\n\
    \        long odd = 0;\n        long sum = 0;\n        while(min <= y) {\n   \
    \         mid = (min + max) / 2;\n            even = mid;\n            odd = mid\
    \ * 2;\n            sum = even + odd;\n            if(sum > max) {\n         \
    \       max = sum;\n            }\n            if(sum < min) {\n             \
    \   min = sum;\n            }\n        }\n        return max;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x <= y) {\n               \
    \ if (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x += 2;\n            }\n        } else {\n\
    \            while (y <= x) {\n                if (y % 2 == 0) {\n           \
    \         result = y;\n                    break;\n                }\n       \
    \         y += 2;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp44r97jby.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        long eveneven\
    \ = even;\n        long evenodd = odd;\n        long oddeven = even;\n       \
    \ long oddodd = odd;\n        long eveneveneven = eveneven;\n        long evenevenodd\
    \ = evenodd;\n        long evenoddeven = oddeven;\n        long evenoddodd = oddodd;\n\
    \        long oddeveneveneven = eveneveneven;\n        long oddevenevenodd = evenoddeven;\n\
    \        long oddevenoddeven = oddevenevenodd;\n        long oddoddeveneven =\
    \ evenoddeveneven;\n        long oddoddevenodd = evenevenoddodd;\n        long\
    \ eveneveneveneven = eveneveneveneven;\n        long evenevenevenodd = evenevenevenodd;\n\
    \        long evenevenoddeven = evenevenoddeven;\n        long evenevenoddodd\
    \ = evenevenoddodd;\n        long evenoddeveneven = evenoddeveneven;\n       \
    \ long evenoddevenodd = evenoddevenodd;\n        long oddeveneveneven = eveneveneveneven;\n\
    \        long oddevenevenodd = evenevenevenodd;\n        long oddevenoddeven =\
    \ evenoddeveneven;\n        long oddoddeveneven = evenevenoddeven;\n        long\
    \ eveneveneveneven = eveneveneveneven;\n        long evenevenevenodd = evenevenevenodd;\n\
    \        long evenevenoddeven = evenevenoddeven;\n        long evenoddeveneven\
    \ = evenoddeveneven;\n        long evenoddevenodd = evenoddevenodd;\n        long\
    \ oddeveneveneven = eveneveneveneven;\n        long oddevenevenodd = evenevenevenodd;\n\
    \        long oddevenoddeven = evenoddeveneven;\n        long oddoddeveneven =\
    \ evenevenoddeven;\n        long eveneveneveneven = eveneveneveneven;\n      \
    \  long evenevenevenodd = evenevenevenodd;\n        long evenevenoddeven = evenevenoddeven;\n\
    \        long evenoddeveneven = evenoddeveneven;\n        long evenoddevenodd\
    \ = evenoddevenodd;\n        long oddeveneveneven = eveneveneveneven;\n      \
    \  long oddevenevenodd = evenevenevenodd;\n        long oddevenoddeven = evenoddeveneven;\n\
    \        long eveneveneveneven = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_ihvqfnx.java:60: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            long temp = x;\n            x = y;\n\
    \            y = temp;\n        }\n        long even = x;\n        long odd =\
    \ y;\n        while (even > 0 && odd > 0) {\n            if (even % 2 == 0 &&\
    \ odd % 2 == 0) {\n                result = even;\n                break;\n  \
    \          }\n            even = even / 2;\n            odd = odd / 2;\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgjhbbk18.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = LongStream.range(x, y).filter(x -> x % 2 == 0).max().getAsLong();\n      \
    \  if (even > y)\n            return -1;\n        return even;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpek_i3dgr.java:16: error: variable x is already defined in method\
    \ chooseNum(long,long)\n        long even = LongStream.range(x, y).filter(x ->\
    \ x % 2 == 0).max().getAsLong();\n                                           \
    \       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = 0;\n        long odd = 0;\n        long temp = 0;\n\
    \        long even2 = 0;\n        long odd2 = 0;\n        long temp2 = 0;\n  \
    \      long even3 = 0;\n        long odd3 = 0;\n        long temp3 = 0;\n    \
    \    long even4 = 0;\n        long odd4 = 0;\n        long temp4 = 0;\n      \
    \  long even5 = 0;\n        long odd5 = 0;\n        long temp5 = 0;\n        long\
    \ even6 = 0;\n        long odd6 = 0;\n        long temp6 = 0;\n        long even7\
    \ = 0;\n        long odd7 = 0;\n        long temp7 = 0;\n        long even8 =\
    \ 0;\n        long odd8 = 0;\n        long temp8 = 0;\n        long even9 = 0;\n\
    \        long odd9 = 0;\n        long temp9 = 0;\n        long even10 = 0;\n \
    \       long odd10 = 0;\n        long temp10 = 0;\n        long even11 = 0;\n\
    \        long odd11 = 0;\n        long temp11 = 0;\n        long even12 = 0;\n\
    \        long odd12 = 0;\n        long temp12 = 0;\n        long even13 = 0;\n\
    \        long odd13 = 0;\n        long temp13 = 0;\n        long even14 = 0;\n\
    \        long odd14 = 0;\n        long temp14 = 0;\n        long even15 = 0;\n\
    \        long odd15 = 0;\n        long temp15 = 0;\n        long even16 = 0;\n\
    \        long odd16 = 0;\n        long temp16 = 0;\n        long even17 = 0;\n\
    \        long odd17 = 0;\n        long temp17 = 0;\n        long even18 = 0;\n\
    \        long odd18 = 0;\n        long temp18 = 0;\n        long even19 = 0;\n\
    \        long odd19 = 0;\n        long temp19 = 0;\n        long even20 = 0;\n\
    \        long odd20 = 0;\n        long temp20 = 0;\n        long even21 = 0;\n\
    \        long odd21 = 0;\n        long temp21 = 0;\n        long even22 = 0;\n\
    \        long odd22 = 0;\n        long temp22 = 0;\n        long even23 = 0;\n\
    \        long odd23 = 0;\n        long temp23 = 0;\n        long even24 = 0;\n\
    \        long odd24 = 0;\n        long temp24 = 0;\n        long even25 = 0;\n\
    \        long odd25 = 0;\n        long temp25 = 0;\n        long even26 = 0;\n\
    \        long odd26 = 0;\n        long temp26 = 0;\n        long even27 = 0;\n\
    \        long odd27 = 0;\n        long temp27 = 0;\n        long even28 = 0;\n\
    \        long odd28 = 0;\n        long temp28 = 0;\n        long even29 = 0;\n\
    \        long odd29 = 0;\n        long temp29\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvwk3vw92.java:103: error: ';' expected\n        long temp29\n \
    \                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long even = -1;\n        long odd\
    \ = -1;\n        long biggestEven = -1;\n        long biggestOdd = -1;\n     \
    \   long biggestEvenBiggestOdd = -1;\n        long biggestEvenBiggestEven = -1;\n\
    \        long biggestEvenBiggestOddBiggestEven = -1;\n        long biggestEvenBiggestOddBiggestOdd\
    \ = -1;\n        long biggestEvenBiggestEvenBiggestEven = -1;\n        long biggestEvenBiggestEvenBiggestOdd\
    \ = -1;\n        long biggestEvenBiggestOddBiggestEvenBiggestEven = -1;\n    \
    \    long biggestEvenBiggestOddBiggestEvenBiggestOdd = -1;\n        long biggestEvenBiggestEvenBiggestEvenBiggestEven\
    \ = -1;\n        long biggestEvenBiggestEvenBiggestOddBiggestEvenBiggestEven =\
    \ -1;\n        long biggestEvenBiggestOddBiggestEvenBiggestOddBiggestEven = -1;\n\
    \        long biggestEvenBiggestEvenBiggestEvenBiggestEvenBiggestOdd = -1;\n \
    \       long biggestEvenBiggestEvenBiggestOddBiggestOddBiggestEven = -1;\n   \
    \     long biggestEvenBiggestEvenBiggestEvenBiggestEvenBiggestEven = -1;\n   \
    \     long biggestEvenBiggestEvenBiggestOddBiggestOddBiggestEvenBiggestEven =\
    \ -1;\n        long biggestEvenBiggestEvenBiggestEvenBiggestEvenBiggestOddBiggestEven\
    \ = -1;\n        long biggestEvenBiggestEvenBiggestOddBiggestEvenBiggestEvenBiggestEven\
    \ = -1;\n        long biggestEvenBiggestEvenBiggestEvenBiggestOddBiggestOddBiggestEven\
    \ = -1;\n        long biggestEvenBiggestEvenBiggestEvenBiggestEvenBiggestEvenBiggestEven\
    \ = -1;\n        long biggestEvenBiggestEvenBiggestOddBiggestOddBiggestEvenBiggestEven\
    \ = -1;\n        long biggestEvenBiggestEvenBiggestEvenBiggestEvenBiggestOddBiggestOddBiggestEven\
    \ = -1;\n        long biggestEvenBiggestEvenBiggestEvenBiggestEvenBiggestEvenBiggestEvenBiggestEven\
    \ = -1;\n        long biggestEvenBiggestEvenBiggestOddBiggestOddBiggestEvenBiggestOddBiggestEven\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphc7ie9y2.java:44: error: ';' expected\n        long biggestEvenBiggestEvenBiggestOddBiggestOddBiggestEvenBiggestOddBiggestEven\n\
    \                                                                            \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long maxOdd = -1;\n        long minOdd\
    \ = -1;\n        long even = -1;\n        long odd = -1;\n        long minEven2\
    \ = -1;\n        long minOdd2 = -1;\n        long maxEven2 = -1;\n        long\
    \ maxOdd2 = -1;\n        long even2 = -1;\n        long odd2 = -1;\n        long\
    \ minEven3 = -1;\n        long minOdd3 = -1;\n        long maxEven3 = -1;\n  \
    \      long maxOdd3 = -1;\n        long even3 = -1;\n        long odd3 = -1;\n\
    \        long minEven4 = -1;\n        long minOdd4 = -1;\n        long maxEven4\
    \ = -1;\n        long maxOdd4 = -1;\n        long even4 = -1;\n        long odd4\
    \ = -1;\n        long minEven5 = -1;\n        long minOdd5 = -1;\n        long\
    \ maxEven5 = -1;\n        long maxOdd5 = -1;\n        long even5 = -1;\n     \
    \   long odd5 = -1;\n        long minEven6 = -1;\n        long minOdd6 = -1;\n\
    \        long maxEven6 = -1;\n        long maxOdd6 = -1;\n        long even6 =\
    \ -1;\n        long odd6 = -1;\n        long minEven7 = -1;\n        long minOdd7\
    \ = -1;\n        long maxEven7 = -1;\n        long maxOdd7 = -1;\n        long\
    \ even7 = -1;\n        long odd7 = -1;\n        long minEven8 = -1;\n        long\
    \ minOdd8 = -1;\n        long maxEven8 = -1;\n        long maxOdd8 = -1;\n   \
    \     long even8 = -1;\n        long odd8 = -1;\n        long minEven9 = -1;\n\
    \        long minOdd9 = -1;\n        long maxEven9 = -1;\n        long maxOdd9\
    \ = -1;\n        long even9 = -1;\n        long odd9 = -1;\n        long minEven10\
    \ = -1;\n        long minOdd10 = -1;\n        long maxEven10 = -1;\n        long\
    \ maxOdd10 = -1;\n        long even10 = -1;\n        long odd10 = -1;\n      \
    \  long minEven11 = -1;\n        long minOdd11 = -1;\n        long maxEven11 =\
    \ -1;\n        long maxOdd11 = -1;\n        long even11 = -1;\n        long odd11\
    \ = -1;\n        long minEven12 = -1;\n        long minOdd12 = -1;\n        long\
    \ maxEven12 = -1;\n        long maxOdd12 = -1;\n        long even12 = -1;\n  \
    \      long odd12 = -1;\n        long minEven13 = -1;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp38074j_1.java:90: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long range =\
    \ (long)Math.pow(2, 32) - 1;\n        long range2 = (long) Math.pow(2, 32);\n\
    \        long range3 = (long) Math.pow(2, 32);\n        long range4 = (long) Math.pow(2,\
    \ 32);\n        long range5 = (long) Math.pow(2, 32);\n        long range6 = (long)\
    \ Math.pow(2, 32);\n        long range7 = (long) Math.pow(2, 32);\n        long\
    \ range8 = (long) Math.pow(2, 32);\n        long range9 = (long) Math.pow(2, 32);\n\
    \        long range10 = (long) Math.pow(2, 32);\n        long range11 = (long)\
    \ Math.pow(2, 32);\n        long range12 = (long) Math.pow(2, 32);\n        long\
    \ range13 = (long) Math.pow(2, 32);\n        long range14 = (long) Math.pow(2,\
    \ 32);\n        long range15 = (long) Math.pow(2, 32);\n        long range16 =\
    \ (long) Math.pow(2, 32);\n        long range17 = (long) Math.pow(2, 32);\n  \
    \      long range18 = (long) Math.pow(2, 32);\n        long range19 = (long) Math.pow(2,\
    \ 32);\n        long range20 = (long) Math.pow(2, 32);\n        long range21 =\
    \ (long) Math.pow(2, 32);\n        long range22 = (long) Math.pow(2, 32);\n  \
    \      long range23 = (long) Math.pow(2, 32);\n        long range24 = (long) Math.pow(2,\
    \ 32);\n        long range25 = (long) Math.pow(2, 32);\n        long range26 =\
    \ (long) Math.pow(2, 32);\n        long range27 = (long) Math.pow(2, 32);\n  \
    \      long range28 = (long) Math.pow(2, 32);\n        long range29 = (long) Math.pow(2,\
    \ 32);\n        long range30 = (long) Math.pow(2, 32);\n        long range31 =\
    \ (long) Math.pow(2, 32);\n        long range32 = (long) Math.pow(2, 32);\n  \
    \      long range33 = (long) Math.pow(2, 32);\n        long range34 = (long) Math.pow(2,\
    \ 32);\n        long range35 = (long) Math.pow(2, 32);\n        long range36 =\
    \ (long) Math.pow(2, 32);\n        long range37 = (long) Math.pow(2, 32);\n  \
    \      long range38 = (long) Math.pow(2, 32);\n        long range39 = (long) Math.pow(2,\
    \ 32);\n        long range40 = (long) Math.pow(2, 32);\n        long range41 =\
    \ (long) Math.pow(2, 32);\n        long range42 = \n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpprr55u4g.java:61: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ -1;\n        long min = x;\n        long mid = min + (max - min) / 2;\n    \
    \    long mid2 = mid + (max - min) / 2;\n        long mid3 = mid2 + (max - min)\
    \ / 2;\n        long mid4 = mid3 + (max - min) / 2;\n        long mid5 = mid4\
    \ + (max - min) / 2;\n        long mid6 = mid5 + (max - min) / 2;\n        long\
    \ mid7 = mid6 + (max - min) / 2;\n        long mid8 = mid7 + (max - min) / 2;\n\
    \        long mid9 = mid8 + (max - min) / 2;\n        long mid10 = mid9 + (max\
    \ - min) / 2;\n        long mid11 = mid10 + (max - min) / 2;\n        long mid12\
    \ = mid11 + (max - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n\
    \        long mid14 = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max\
    \ - min) / 2;\n        long mid16 = mid15 + (max - min) / 2;\n        long mid17\
    \ = mid16 + (max - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n\
    \        long mid19 = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max\
    \ - min) / 2;\n        long mid21 = mid20 + (max - min) / 2;\n        long mid22\
    \ = mid21 + (max - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n\
    \        long mid24 = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max\
    \ - min) / 2;\n        long mid26 = mid25 + (max - min) / 2;\n        long mid27\
    \ = mid26 + (max - min) / 2;\n        long mid28 = mid27 + (max - min) / 2;\n\
    \        long mid29 = mid28 + (max - min) / 2;\n        long mid30 = mid29 + (max\
    \ - min) / 2;\n        long mid31 = mid30 + (max - min) / 2;\n        long mid32\
    \ = mid31 + (max - min) / 2;\n        long mid33 = mid32 + (max - min) / 2;\n\
    \        long mid34 = mid33 + (max - min) / 2;\n        long mid35 = mid34 + (max\
    \ - min) / 2;\n        long mid36 = mid35 + (max - min) / 2;\n        long mid37\
    \ = mid36 + (max - min) / 2;\n        long mid38 = mid37 + (max - min) / 2;\n\
    \        long mid39 = mid38 + (max - min) / 2;\n        long mid40 = mid39 + (max\
    \ - \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq9lnma4i.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        while(even < odd)\
    \ {\n            if(even % 2 == 0 && odd % 2 == 0) {\n                maxEven\
    \ = even;\n                break;\n            }\n            even++;\n      \
    \      odd--;\n        }\n        return maxEven;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1t0cl3q.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = 1, odd = 0;\n        while (even < x && odd < y)\
    \ {\n            if (even % 2 == 0 && odd % 2 == 0) {\n                biggest\
    \ = even;\n                break;\n            } else if (even % 2 != 0 && odd\
    \ % 2 != 0) {\n                biggest = odd;\n                break;\n      \
    \      }\n            even++;\n            odd++;\n        }\n        return biggest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxrwlpbci.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long ans =\
    \ -1;\n        if (x >= y) {\n            ans = x;\n        } else {\n       \
    \     ans = y;\n        }\n        long even = 0;\n        long odd = 0;\n   \
    \     while (ans >= 0) {\n            even = even + ans % 2;\n            ans\
    \ = ans / 2;\n        }\n        while (odd >= 0) {\n            odd = odd + odd\
    \ % 2;\n            odd = odd / 2;\n        }\n        if (even > odd) {\n   \
    \         ans = even;\n        } else {\n            ans = odd;\n        }\n \
    \       return ans;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            biggest = even;\n            even = even + 2;\n      \
    \      if (even > odd) {\n                even = even - 2;\n                odd\
    \ = odd + 2;\n            }\n        }\n        return biggest;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long maxOdd = -1;\n        long minOdd\
    \ = -1;\n        long even = -1;\n        long odd = -1;\n        long x = x;\n\
    \        long y = y;\n        long evenMax = -1;\n        long oddMax = -1;\n\
    \        long evenMin = -1;\n        long oddMin = -1;\n        long evenMax2\
    \ = -1;\n        long oddMax2 = -1;\n        long evenMin2 = -1;\n        long\
    \ oddMin2 = -1;\n        long evenMax3 = -1;\n        long oddMax3 = -1;\n   \
    \     long evenMin3 = -1;\n        long oddMin3 = -1;\n        long evenMax4 =\
    \ -1;\n        long oddMax4 = -1;\n        long evenMin4 = -1;\n        long oddMin4\
    \ = -1;\n        long evenMax5 = -1;\n        long oddMax5 = -1;\n        long\
    \ evenMin5 = -1;\n        long oddMin5 = -1;\n        long evenMax6 = -1;\n  \
    \      long oddMax6 = -1;\n        long evenMin6 = -1;\n        long oddMin6 =\
    \ -1;\n        long evenMax7 = -1;\n        long oddMax7 = -1;\n        long evenMin7\
    \ = -1;\n        long oddMin7 = -1;\n        long evenMax8 = -1;\n        long\
    \ oddMax8 = -1;\n        long evenMin8 = -1;\n        long oddMin8 = -1;\n   \
    \     long evenMax9 = -1;\n        long oddMax9 = -1;\n        long evenMin9 =\
    \ -1;\n        long oddMin9 = -1;\n        long evenMax10 = -1;\n        long\
    \ oddMax10 = -1;\n        long evenMin10 = -1;\n        long oddMin10 = -1;\n\
    \        long evenMax11 = -1;\n        long oddMax11 = -1;\n        long evenMin11\
    \ = -1;\n        long oddMin11 = -1;\n        long evenMax12 = -1;\n        long\
    \ oddMax12 = -1;\n        long evenMin12 = -1;\n        long oddMin12 = -1;\n\
    \        long evenMax13 = -1;\n        long oddMax13 = -1;\n        long evenMin13\
    \ = -1;\n        long oddMin13 = -1;\n        long evenMax14 = -1;\n        long\
    \ oddMax14 = -1;\n        long evenMin14 = -1;\n        long oddMin14 = -1;\n\
    \        long evenMax15 = -1;\n        long oddMax15 = -1;\n        long evenMin15\
    \ = -1;\n        long oddMin15 = -1;\n        long evenMax16 = -1;\n        long\
    \ oddMax16 = -1;\n        long evenMin16 = -1;\n        long oddMin\n    }\n \
    \   public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzsdpze4q.java:87: error: ';' expected\n        long oddMin\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            long mid = (x + y) / 2;\n        \
    \    if (mid % 2 == 0) {\n                result = mid;\n            }\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyzsmdcg1.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x % 2 == 0 ? x : x + 1;\n        long odd = y % 2 == 0 ? y : y + 1;\n    \
    \    long biggest = even;\n        if (even > odd) {\n            biggest = odd;\n\
    \        }\n        long min = biggest;\n        while (even > odd) {\n      \
    \      even = even - odd;\n            odd = odd + (even % 2);\n            if\
    \ (even > odd) {\n                biggest = even;\n            }\n           \
    \ min = biggest;\n        }\n        return min;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd8fj8r9q.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        while(even < odd)\
    \ {\n            if(even % 2 == 0 && odd % 2 == 0) {\n                maxEven\
    \ = even;\n                break;\n            }\n            even++;\n      \
    \      odd--;\n        }\n        return maxEven;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp77ubpc6w.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        long temp;\n \
    \       while (even < odd) {\n            temp = even;\n            even = odd\
    \ % even;\n            odd = temp % odd;\n            if (even > maxEven) {\n\
    \                maxEven = even;\n            }\n        }\n        return maxEven;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.chooseNum(tmpgioqemsm.java:22)\n\tat Problem.main(tmpgioqemsm.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long max =\
    \ -1;\n        long min = x;\n        long mid = min + (max - min) / 2;\n    \
    \    long mid2 = mid + (max - min) / 2;\n        long mid3 = mid2 + (max - min)\
    \ / 2;\n        long mid4 = mid3 + (max - min) / 2;\n        long mid5 = mid4\
    \ + (max - min) / 2;\n        long mid6 = mid5 + (max - min) / 2;\n        long\
    \ mid7 = mid6 + (max - min) / 2;\n        long mid8 = mid7 + (max - min) / 2;\n\
    \        long mid9 = mid8 + (max - min) / 2;\n        long mid10 = mid9 + (max\
    \ - min) / 2;\n        long mid11 = mid10 + (max - min) / 2;\n        long mid12\
    \ = mid11 + (max - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n\
    \        long mid14 = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max\
    \ - min) / 2;\n        long mid16 = mid15 + (max - min) / 2;\n        long mid17\
    \ = mid16 + (max - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n\
    \        long mid19 = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max\
    \ - min) / 2;\n        long mid21 = mid20 + (max - min) / 2;\n        long mid22\
    \ = mid21 + (max - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n\
    \        long mid24 = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max\
    \ - min) / 2;\n        long mid26 = mid25 + (max - min) / 2;\n        long mid27\
    \ = mid26 + (max - min) / 2;\n        long mid28 = mid27 + (max - min) / 2;\n\
    \        long mid29 = mid28 + (max - min) / 2;\n        long mid30 = mid29 + (max\
    \ - min) / 2;\n        long mid31 = mid30 + (max - min) / 2;\n        long mid32\
    \ = mid31 + (max - min) / 2;\n        long mid33 = mid32 + (max - min) / 2;\n\
    \        long mid34 = mid33 + (max - min) / 2;\n        long mid35 = mid34 + (max\
    \ - min) / 2;\n        long mid36 = mid35 + (max - min) / 2;\n        long mid37\
    \ = mid36 + (max - min) / 2;\n        long mid38 = mid37 + (max - min) / 2;\n\
    \        long mid39 = mid38 + (max - min) / 2;\n        long mid40 = mid39 + (max\
    \ - \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpies1uien.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if (mid % 2\
    \ == 0) {\n                even = mid;\n            } else {\n               \
    \ odd = mid;\n            }\n            if (even > biggest) {\n             \
    \   biggest = even;\n            } else if (odd > biggest) {\n               \
    \ biggest = odd;\n            }\n        }\n        return biggest;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x <= y) {\n               \
    \ if (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x++;\n            }\n        } else {\n  \
    \          while (y <= x) {\n                if (y % 2 == 0) {\n             \
    \       result = y;\n                    break;\n                }\n         \
    \       y++;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8u1a3n7r.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            long mid = x + (y - x) / 2;\n    \
    \        if (mid % 2 == 0) {\n                result = mid;\n            }\n \
    \           else {\n                result = chooseNum(x, mid);\n            }\n\
    \        }\n        else if (x <= y) {\n            long mid = y + (x - y) / 2;\n\
    \            if (mid % 2 == 0) {\n                result = mid;\n            }\n\
    \            else {\n                result = chooseNum(mid, y);\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.chooseNum(tmp3nukb423.java:16)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n\tat Problem.chooseNum(tmp3nukb423.java:23)\n\
    \tat Problem.chooseNum(tmp3nukb423.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        long even = 0;\n        long odd = 0;\n        long range = (long)\
    \ Math.pow(2, y);\n        long range2 = (long) Math.pow(2, x);\n        long\
    \ range3 = (long) Math.pow(2, y);\n        long range4 = (long) Math.pow(2, x);\n\
    \        long range5 = (long) Math.pow(2, y);\n        long range6 = (long) Math.pow(2,\
    \ x);\n        long range7 = (long) Math.pow(2, y);\n        long range8 = (long)\
    \ Math.pow(2, x);\n        long range9 = (long) Math.pow(2, y);\n        long\
    \ range10 = (long) Math.pow(2, x);\n        long range11 = (long) Math.pow(2,\
    \ y);\n        long range12 = (long) Math.pow(2, x);\n        long range13 = (long)\
    \ Math.pow(2, y);\n        long range14 = (long) Math.pow(2, x);\n        long\
    \ range15 = (long) Math.pow(2, y);\n        long range16 = (long) Math.pow(2,\
    \ x);\n        long range17 = (long) Math.pow(2, y);\n        long range18 = (long)\
    \ Math.pow(2, x);\n        long range19 = (long) Math.pow(2, y);\n        long\
    \ range20 = (long) Math.pow(2, x);\n        long range21 = (long) Math.pow(2,\
    \ y);\n        long range22 = (long) Math.pow(2, x);\n        long range23 = (long)\
    \ Math.pow(2, y);\n        long range24 = (long) Math.pow(2, x);\n        long\
    \ range25 = (long) Math.pow(2, y);\n        long range26 = (long) Math.pow(2,\
    \ x);\n        long range27 = (long) Math.pow(2, y);\n        long range28 = (long)\
    \ Math.pow(2, x);\n        long range29 = (long) Math.pow(2, y);\n        long\
    \ range30 = (long) Math.pow(2, x);\n        long range31 = (long) Math.pow(2,\
    \ y);\n        long range32 = (long) Math.pow(2, x);\n        long range33 = (long)\
    \ Math.pow(2, y);\n        long range34 = (long) Math.pow(2, x);\n        long\
    \ range35 = (long) Math.pow(2, y);\n        long range36 = (long) Math.pow(2,\
    \ x);\n        long range37 = (long) Math.pow(2, y);\n        long range38 = (long)\
    \ Math.pow(2, x);\n        long range39 = (long) Math.pow(2, y);\n        long\
    \ range40 = (long) Math.pow(2, x);\n        long range41 = (long) Math.pow(2,\
    \ y);\n        long range42 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpa7uta8qf.java:61: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x & 1;\n        long odd = x >> 1;\n        long evenodd = even + odd;\n \
    \       long result = evenodd * y;\n        if (result < x)\n            return\
    \ -1;\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2nr67cm1.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        long even = 1;\n        long odd = 1;\n        long biggest =\
    \ x;\n        long smaller = y;\n        while(smaller < biggest) {\n        \
    \    even = even * biggest;\n            odd = odd * biggest;\n            biggest\
    \ = biggest / 2;\n            smaller = smaller / 2;\n        }\n        if(even\
    \ > odd) {\n            result = even;\n        } else {\n            result =\
    \ odd;\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6dh5375h.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd + 1;\n        }\n        while(even > odd) {\n            biggest\
    \ = odd;\n            even = even - 1;\n            odd = odd - 1;\n        }\n\
    \        return biggest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd + 1;\n        }\n        while(even > odd) {\n            biggest\
    \ = odd;\n            even = even - 1;\n            odd = odd - 1;\n        }\n\
    \        return biggest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        if (x >= y) {\n            long temp = x;\n            x = y;\n\
    \            y = temp;\n        }\n        long even = x;\n        long odd =\
    \ y;\n        while (even < odd) {\n            long mid = (even + odd) / 2;\n\
    \            if (mid % 2 == 0) {\n                even = mid;\n            } else\
    \ {\n                odd = mid;\n            }\n        }\n        if (even >\
    \ maxEven) {\n            maxEven = even;\n        }\n        return maxEven;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd + 1;\n        }\n        while(even > odd) {\n            biggest\
    \ = odd;\n            even = even - 1;\n            odd = odd - 1;\n        }\n\
    \        return biggest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        long biggestEven\
    \ = 0;\n        long biggestOdd = 0;\n        long biggest = 0;\n        while(even\
    \ <= odd) {\n            biggestEven = even;\n            biggestOdd = odd;\n\
    \            even = even + 1;\n            odd = odd + 1;\n            if(even\
    \ > odd) {\n                biggestEven = even;\n                biggestOdd =\
    \ odd;\n                even = even + 1;\n                odd = odd + 1;\n   \
    \         }\n            if(biggestEven > biggestOdd) {\n                biggestEven\
    \ = biggestOdd;\n                biggestOdd = biggestEven;\n            }\n  \
    \          if(biggestEven > maxEven) {\n                maxEven = biggestEven;\n\
    \            }\n            if(biggestOdd > maxEven) {\n                maxEven\
    \ = biggestOdd;\n            }\n        }\n        return maxEven;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x <= y) {\n               \
    \ if (x % 2 == 0 && y % 2 == 0) {\n                    result = x;\n         \
    \           break;\n                }\n                x += 2;\n             \
    \   y += 2;\n            }\n        } else {\n            while (y <= x) {\n \
    \               if (x % 2 == 0 && y % 2 == 0) {\n                    result =\
    \ y;\n                    break;\n                }\n                y += 2;\n\
    \                x += 2;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ra51zdv.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if (mid % 2\
    \ == 0) {\n                even = mid;\n            } else {\n               \
    \ odd = mid;\n            }\n            if (even > biggest) {\n             \
    \   biggest = even;\n            } else if (odd > biggest) {\n               \
    \ biggest = odd;\n            }\n        }\n        return biggest;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while(even > 0 && odd > 0) {\n            if(even % 2 == 0 &&\
    \ odd % 2 == 0) {\n                biggest = even;\n                smallest =\
    \ odd;\n            }\n            else if(even % 2 == 0 && odd % 2 != 0) {\n\
    \                biggest = even;\n            }\n            else if(even % 2\
    \ != 0 && odd % 2 == 0) {\n                biggest = odd;\n            }\n   \
    \         else if(even % 2 != 0 && odd % 2 != 0) {\n                biggest =\
    \ even;\n                smallest = odd;\n            }\n            even = even\
    \ / 2;\n            odd = odd / 2;\n        }\n        return biggest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp90mrs08m.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long even = -1;\n        long odd\
    \ = 0;\n        long evenMax = -1;\n        long evenMin = -1;\n        long oddMax\
    \ = -1;\n        long oddMin = -1;\n        long evenMax2 = -1;\n        long\
    \ evenMin2 = -1;\n        long oddMax2 = -1;\n        long oddMin2 = -1;\n   \
    \     long evenMax3 = -1;\n        long evenMin3 = -1;\n        long oddMax3 =\
    \ -1;\n        long oddMin3 = -1;\n        long evenMax4 = -1;\n        long evenMin4\
    \ = -1;\n        long oddMax4 = -1;\n        long oddMin4 = -1;\n        long\
    \ evenMax5 = -1;\n        long evenMin5 = -1;\n        long oddMax5 = -1;\n  \
    \      long oddMin5 = -1;\n        long evenMax6 = -1;\n        long evenMin6\
    \ = -1;\n        long oddMax6 = -1;\n        long oddMin6 = -1;\n        long\
    \ evenMax7 = -1;\n        long evenMin7 = -1;\n        long oddMax7 = -1;\n  \
    \      long oddMin7 = -1;\n        long evenMax8 = -1;\n        long evenMin8\
    \ = -1;\n        long oddMax8 = -1;\n        long oddMin8 = -1;\n        long\
    \ evenMax9 = -1;\n        long evenMin9 = -1;\n        long oddMax9 = -1;\n  \
    \      long oddMin9 = -1;\n        long evenMax10 = -1;\n        long evenMin10\
    \ = -1;\n        long oddMax10 = -1;\n        long oddMin10 = -1;\n        long\
    \ evenMax11 = -1;\n        long evenMin11 = -1;\n        long oddMax11 = -1;\n\
    \        long oddMin11 = -1;\n        long evenMax12 = -1;\n        long evenMin12\
    \ = -1;\n        long oddMax12 = -1;\n        long oddMin12 = -1;\n        long\
    \ evenMax13 = -1;\n        long evenMin13 = -1;\n        long oddMax13 = -1;\n\
    \        long oddMin13 = -1;\n        long evenMax14 = -1;\n        long evenMin14\
    \ = -1;\n        long oddMax14 = -1;\n        long oddMin14 = -1;\n        long\
    \ evenMax15 = -1;\n        long evenMin15 = -1;\n        long oddMax15 = -1;\n\
    \        long oddMin15 = -1;\n        long evenMax16 = -1;\n        long evenMin16\
    \ = -1;\n        long oddMax16 = -1;\n        long oddMin16 = -1;\n        long\
    \ evenMax17 = -1;\n        long evenMin17 = -1;\n        long oddMax17 = -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpokr6f9om.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x <= y) {\n               \
    \ if (x % 2 == 0 && y % 2 == 0) {\n                    result = x;\n         \
    \           break;\n                }\n                x += 2;\n             \
    \   y += 2;\n            }\n        } else {\n            while (y <= x) {\n \
    \               if (x % 2 == 0 && y % 2 == 0) {\n                    result =\
    \ y;\n                    break;\n                }\n                y += 2;\n\
    \                x += 2;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoqe2xnvj.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            while (x <= y) {\n               \
    \ if (x % 2 == 0) {\n                    result = x;\n                    break;\n\
    \                }\n                x += 2;\n            }\n        } else {\n\
    \            while (y <= x) {\n                if (y % 2 == 0) {\n           \
    \         result = y;\n                    break;\n                }\n       \
    \         y += 2;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8pex56y.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            long tempX = x;\n            long\
    \ tempY = y;\n            x = y;\n            y = tempX;\n        }\n        if\
    \ (x % 2 == 0) {\n            while (x != 0) {\n                if (x % 2 == 0)\
    \ {\n                    result = x;\n                    break;\n           \
    \     }\n                x /= 2;\n            }\n        } else {\n          \
    \  while (y != 0) {\n                if (y % 2 == 0) {\n                    result\
    \ = y;\n                    break;\n                }\n                y /= 2;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5c4kyrs.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smaller\
    \ = odd;\n        while(even < odd) {\n            biggest = even;\n         \
    \   smaller = odd;\n            if((even % 2) == 0) {\n                biggest\
    \ = even;\n                smaller = odd - (even / 2);\n            }\n      \
    \      if((odd % 2) == 0) {\n                biggest = even + (odd / 2);\n   \
    \             smaller = odd;\n            }\n            if((biggest > x) && (biggest\
    \ < y)) {\n                even = even * 2;\n            }\n            if((smaller\
    \ > x) && (smaller < y)) {\n                odd = odd * 2;\n            }\n  \
    \      }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            if (even % 2 == 0) {\n                even = even + 1;\n\
    \            } else {\n                odd = odd + 1;\n            }\n       \
    \ }\n        if (even > odd) {\n            biggest = even;\n        } else {\n\
    \            biggest = odd;\n        }\n        return biggest;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x % 2 == 0 ? x : x + 1;\n        long odd = y % 2 == 0 ? y : y + 1;\n    \
    \    long biggest = even;\n        long smallest = odd;\n        while(even <\
    \ odd) {\n            biggest = even;\n            smallest = odd;\n         \
    \   if(biggest % 2 == 0 && even < odd) {\n                biggest = even + 1;\n\
    \            }\n            if(smallest % 2 == 1 && odd > even) {\n          \
    \      smallest = odd - 1;\n            }\n            if(biggest > smallest)\
    \ {\n                even = even * 2;\n                odd = odd * 2;\n      \
    \      } else {\n                even = even * 2 + 1;\n                odd = odd\
    \ * 2 + 1;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8lyycw2k.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long minNum = -1;\n        long maxNum\
    \ = -1;\n        long evenNum = -1;\n        long oddNum = -1;\n        long evenMin\
    \ = -1;\n        long evenMax = -1;\n        long oddMin = -1;\n        long oddMax\
    \ = -1;\n        long evenMinNum = -1;\n        long evenMaxNum = -1;\n      \
    \  long oddMinNum = -1;\n        long oddMaxNum = -1;\n        long evenMinNum2\
    \ = -1;\n        long evenMaxNum2 = -1;\n        long oddMinNum2 = -1;\n     \
    \   long oddMaxNum2 = -1;\n        long evenMinNum3 = -1;\n        long evenMaxNum3\
    \ = -1;\n        long oddMinNum3 = -1;\n        long oddMaxNum3 = -1;\n      \
    \  long evenMinNum4 = -1;\n        long evenMaxNum4 = -1;\n        long oddMinNum4\
    \ = -1;\n        long oddMaxNum4 = -1;\n        long evenMinNum5 = -1;\n     \
    \   long evenMaxNum5 = -1;\n        long oddMinNum5 = -1;\n        long oddMaxNum5\
    \ = -1;\n        long evenMinNum6 = -1;\n        long evenMaxNum6 = -1;\n    \
    \    long oddMinNum6 = -1;\n        long oddMaxNum6 = -1;\n        long evenMinNum7\
    \ = -1;\n        long evenMaxNum7 = -1;\n        long oddMinNum7 = -1;\n     \
    \   long oddMaxNum7 = -1;\n        long evenMinNum8 = -1;\n        long evenMaxNum8\
    \ = -1;\n        long oddMinNum8 = -1;\n        long oddMaxNum8 = -1;\n      \
    \  long evenMinNum9 = -1;\n        long evenMaxNum9 = -1;\n        long oddMinNum9\
    \ = -1;\n        long oddMaxNum9 = -1;\n        long evenMinNum10 = -1;\n    \
    \    long evenMaxNum10 = -1;\n        long oddMinNum10 = -1;\n        long oddMaxNum10\
    \ = -1;\n        long evenMinNum11 = -1;\n        long evenMaxNum11 = -1;\n  \
    \      long oddMinNum11 = -1;\n        long oddMaxNum11 = -1;\n        long evenMinNum12\
    \ = -1;\n        long evenMaxNum12 = -1;\n        long oddMinNum12 = -1;\n   \
    \     long oddMaxNum12 = -1;\n        long evenMinNum13 = -1;\n        long evenMaxNum13\
    \ = -1;\n        long oddMinNum13 = -1;\n        long oddMaxNum13 = -1;\n    \
    \    long evenMinNum14 = -1;\n        long evenMaxNum14 = -1;\n        long oddMin\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppttth7el.java:80: error: ';' expected\n        long oddMin\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        long even = 1;\n        long odd = 0;\n        long biggestEven\
    \ = 0;\n        long biggestOdd = 0;\n        long biggestEvenInRange = 0;\n \
    \       long biggestOddInRange = 0;\n        long evenInRange = 0;\n        long\
    \ oddInRange = 0;\n        long evenInRange2 = 0;\n        long oddInRange2 =\
    \ 0;\n        long evenInRange3 = 0;\n        long oddInRange3 = 0;\n        long\
    \ evenInRange4 = 0;\n        long oddInRange4 = 0;\n        long evenInRange5\
    \ = 0;\n        long oddInRange5 = 0;\n        long evenInRange6 = 0;\n      \
    \  long oddInRange6 = 0;\n        long evenInRange7 = 0;\n        long oddInRange7\
    \ = 0;\n        long evenInRange8 = 0;\n        long oddInRange8 = 0;\n      \
    \  long evenInRange9 = 0;\n        long oddInRange9 = 0;\n        long evenInRange10\
    \ = 0;\n        long oddInRange10 = 0;\n        long evenInRange11 = 0;\n    \
    \    long oddInRange11 = 0;\n        long evenInRange12 = 0;\n        long oddInRange12\
    \ = 0;\n        long evenInRange13 = 0;\n        long oddInRange13 = 0;\n    \
    \    long evenInRange14 = 0;\n        long oddInRange14 = 0;\n        long evenInRange15\
    \ = 0;\n        long oddInRange15 = 0;\n        long evenInRange16 = 0;\n    \
    \    long oddInRange16 = 0;\n        long evenInRange17 = 0;\n        long oddInRange17\
    \ = 0;\n        long evenInRange18 = 0;\n        long oddInRange18 = 0;\n    \
    \    long evenInRange19 = 0;\n        long oddInRange19 = 0;\n        long evenInRange20\
    \ = 0;\n        long oddInRange20 = 0;\n        long evenInRange21 = 0;\n    \
    \    long oddInRange21 = 0;\n        long evenInRange22 = 0;\n        long oddInRange22\
    \ = 0;\n        long evenInRange23 = 0;\n        long oddInRange23 = 0;\n    \
    \    long evenInRange24 = 0;\n        long oddInRange24 = 0;\n        long evenInRange25\
    \ = 0;\n        long oddInRange25 = 0;\n        long evenInRange26 = 0;\n    \
    \    long oddInRange26 = 0;\n        long evenInRange27 = 0;\n        long oddInRange27\
    \ = 0;\n        long evenInRange28 = 0;\n        long oddInRange28 = 0;\n    \
    \    long evenInRange29 = 0;\n        long oddInRange29 = 0;\n        long evenInRange30\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiw1rep9m.java:83: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long even = x;\n        long odd = y;\n        while(even < odd)\
    \ {\n            long mid = (even+odd)/2;\n            if(mid % 2 == 0) {\n  \
    \              even = mid;\n            } else {\n                odd = mid;\n\
    \            }\n            if(even > maxEven) {\n                maxEven = even;\n\
    \            }\n        }\n        return maxEven;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = LongStream.rangeClosed(1, x).filter(i -> i % 2 == 0).max().getAsLong();\n\
    \        long odd = LongStream.rangeClosed(1, y).filter(i -> i % 2 == 1).max().getAsLong();\n\
    \        if (even > odd) {\n            return even;\n        } else {\n     \
    \       return -1;\n        }\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5dz7rpze.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while (even\
    \ < odd) {\n            biggest = even;\n            even += 2;\n            odd\
    \ -= 2;\n        }\n        if (biggest == -1) {\n            return -1;\n   \
    \     }\n        return biggest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl4v67puz.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        while(even > 0 && odd > 0) {\n            if(even % 2 == 0 &&\
    \ odd % 2 == 0) {\n                biggest = even;\n                smallest =\
    \ odd;\n            }\n            else if(even % 2 == 0 && odd % 2 != 0) {\n\
    \                biggest = even;\n            }\n            else if(even % 2\
    \ != 0 && odd % 2 == 0) {\n                biggest = odd;\n            }\n   \
    \         else if(even % 2 != 0 && odd % 2 != 0) {\n                biggest =\
    \ even;\n                smallest = odd;\n            }\n            even = even\
    \ / 2;\n            odd = odd / 2;\n        }\n        return biggest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_b3woe6x.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long ans =\
    \ -1;\n        if (x >= y) {\n            long mid = (x + y) / 2;\n          \
    \  ans = chooseNum(x, mid);\n            if (ans == -1) {\n                ans\
    \ = chooseNum(mid, y);\n            }\n        } else {\n            long mid\
    \ = (x + y) / 2;\n            ans = chooseNum(mid, y);\n            if (ans ==\
    \ -1) {\n                ans = chooseNum(x, mid);\n            }\n        }\n\
    \        return ans;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n\tat Problem.chooseNum(tmpd830obym.java:25)\n\
    \tat Problem.chooseNum(tmpd830obym.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long biggest\
    \ = -1;\n        if (x >= y) {\n            biggest = x;\n        } else {\n \
    \           biggest = y;\n        }\n        long even = 1;\n        long odd\
    \ = 1;\n        while (even <= biggest) {\n            long mid = (even + odd)\
    \ / 2;\n            if (mid % 2 == 0) {\n                even = mid;\n       \
    \     } else {\n                odd = mid;\n            }\n        }\n       \
    \ return even;\n\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        long range = (even-odd)+1;\n        while(even < odd) {\n  \
    \          even = even * 2;\n            odd = odd * 2;\n            if((even-odd)%2\
    \ == 0) {\n                biggest = even;\n                smallest = odd;\n\
    \            }\n        }\n        while(even > odd) {\n            even = even\
    \ / 2;\n            odd = odd / 2;\n            if((even-odd)%2 == 0) {\n    \
    \            biggest = even;\n                smallest = odd;\n            }\n\
    \        }\n        if(biggest > smallest && biggest > range) {\n            return\
    \ biggest;\n        }\n        return -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh449zli.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = 0;\n        long odd = 0;\n        long biggest = 0;\n        long temp =\
    \ 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n\
    \        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n \
    \       long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n \
    \       long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n\
    \        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        long temp74 = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n\
    \        long temp77 = 0;\n        long temp78 = 0;\n        long temp79 = 0;\n\
    \        long temp80 = 0;\n        long temp81 = 0;\n        long temp82 = 0;\n\
    \        long temp83 = 0;\n        long temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpavup01n1.java:102: error: ';' expected\n        long temp\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd + 1;\n        }\n        while(even > odd) {\n            biggest\
    \ = odd;\n            even = even - 1;\n            odd = odd - 1;\n        }\n\
    \        return biggest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long result\
    \ = -1;\n        if (x >= y) {\n            long mid = (x + y) / 2;\n        \
    \    if (mid % 2 == 0) {\n                result = mid;\n            }\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphs8fnfmk.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long even\
    \ = x;\n        long odd = y;\n        long biggest = -1;\n        while(even\
    \ < odd) {\n            long mid = (even + odd) / 2;\n            if(mid % 2 ==\
    \ 0) {\n                even = mid;\n            } else {\n                odd\
    \ = mid;\n            }\n            if(even > biggest) {\n                biggest\
    \ = even;\n            }\n            if(odd > biggest) {\n                biggest\
    \ = odd;\n            }\n        }\n        return biggest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12)\
    \ = -1\n    public static long chooseNum(long x, long y) {\n        long maxEven\
    \ = -1;\n        long minEven = -1;\n        long even = -1;\n        long odd\
    \ = 0;\n        long evenMin = -1;\n        long evenMax = -1;\n        long oddMin\
    \ = -1;\n        long oddMax = -1;\n        long evenMin2 = -1;\n        long\
    \ evenMax2 = -1;\n        long oddMin2 = -1;\n        long oddMax2 = -1;\n   \
    \     long evenMin3 = -1;\n        long evenMax3 = -1;\n        long oddMin3 =\
    \ -1;\n        long oddMax3 = -1;\n        long evenMin4 = -1;\n        long evenMax4\
    \ = -1;\n        long oddMin4 = -1;\n        long oddMax4 = -1;\n        long\
    \ evenMin5 = -1;\n        long evenMax5 = -1;\n        long oddMin5 = -1;\n  \
    \      long oddMax5 = -1;\n        long evenMin6 = -1;\n        long evenMax6\
    \ = -1;\n        long oddMin6 = -1;\n        long oddMax6 = -1;\n        long\
    \ evenMin7 = -1;\n        long evenMax7 = -1;\n        long oddMin7 = -1;\n  \
    \      long oddMax7 = -1;\n        long evenMin8 = -1;\n        long evenMax8\
    \ = -1;\n        long oddMin8 = -1;\n        long oddMax8 = -1;\n        long\
    \ evenMin9 = -1;\n        long evenMax9 = -1;\n        long oddMin9 = -1;\n  \
    \      long oddMax9 = -1;\n        long evenMin10 = -1;\n        long evenMax10\
    \ = -1;\n        long oddMin10 = -1;\n        long oddMax10 = -1;\n        long\
    \ evenMin11 = -1;\n        long evenMax11 = -1;\n        long oddMin11 = -1;\n\
    \        long oddMax11 = -1;\n        long evenMin12 = -1;\n        long evenMax12\
    \ = -1;\n        long oddMin12 = -1;\n        long oddMax12 = -1;\n        long\
    \ evenMin13 = -1;\n        long evenMax13 = -1;\n        long oddMin13 = -1;\n\
    \        long oddMax13 = -1;\n        long evenMin14 = -1;\n        long evenMax14\
    \ = -1;\n        long oddMin14 = -1;\n        long oddMax14 = -1;\n        long\
    \ evenMin15 = -1;\n        long evenMax15 = -1;\n        long oddMin15 = -1;\n\
    \        long oddMax15 = -1;\n        long evenMin16 = -1;\n        long evenMax16\
    \ = -1;\n        long oddMin16 = -1;\n        long oddMax16 = -1;\n        long\
    \ evenMin17 = -1;\n        long evenMax17 = -1;\n        long oddMin17 = -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprumo5p0l.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
