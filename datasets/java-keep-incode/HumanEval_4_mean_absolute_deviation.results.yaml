name: HumanEval_4_mean_absolute_deviation
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuhvthed7.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpuhvthed7.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> x - mean).sum();\n        return sumOfSquares / sumOfDifferences;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbhq9i7ln.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpbhq9i7ln.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                             ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpbhq9i7ln.java:19: error: cannot\
    \ find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> x - mean).sum();\n                                                 ^\n  symbol:\
    \   method mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdysm50cr.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps0r0feqx.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp83ptmoc.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp80eee6tz.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_ay4jtu.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (Float number : numbers)\
    \ {\n            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp960suou6.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpefpv0toz.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpefpv0toz.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        float average = Math.abs(sumOfSquares / numbers.size());\n\
    \        return average;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw9t5ry0h.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpw9t5ry0h.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj9tdr3nl.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpj9tdr3nl.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        return sumOfDifferences / numbers.size() - mean;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsf8neioi.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpsf8neioi.java:18: error: cannot\
    \ find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                                 ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzyb1o721.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp80q_l4ch.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp80q_l4ch.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwu_hlo5b.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdtbn_hes.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (Float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp84zx324.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (Float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (Float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzr5hqru.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnnmkratg.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpnnmkratg.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpec60mpx8.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> x - mean).sum();\n        return sumOfSquares / sumOfDifferences;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpse45zao6.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpse45zao6.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                             ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpse45zao6.java:19: error: cannot\
    \ find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> x - mean).sum();\n                                                 ^\n  symbol:\
    \   method mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (Float number : numbers)\
    \ {\n            sum += Math.abs(number);\n        }\n        float mean = sum\
    \ / numbers.size();\n        float sumOfSquare = 0.0f;\n        for (Float number\
    \ : numbers) {\n            sumOfSquare += Math.pow(number - mean, 2);\n     \
    \   }\n        return sumOfSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wgygl6a.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuosnnk1c.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpuosnnk1c.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]), 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphg06pvaz.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmphg06pvaz.java:18: error: cannot\
    \ find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \                               ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n        return sum / numbers.size();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi2xl_rym.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpi2xl_rym.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return Math.sqrt(sumOfSquares);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo8szkacb.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(sumOfSquares);\n            \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9pwp0fzm.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp9pwp0fzm.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]), 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb49hvwes.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpb49hvwes.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        for (float number : numbers) {\n            sum +=\
    \ Math.pow(number - mean, 2);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp29s88k9w.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp04_4s7a_.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqcac0q9t.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lu9avit.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (Float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (Float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfh3930ym.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7g71u95p.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / (numbers.size() - 1);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc0ia2vxw.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpc0ia2vxw.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]), 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5r9u5g9.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpq5r9u5g9.java:18: error: cannot\
    \ find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \                               ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwckoxura.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkiyrcuiz.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        float variance = sumOfSquares / numbers.size();\n\
    \        return Math.sqrt(variance);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu13t3w6p.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpu13t3w6p.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n/tmp/tmpu13t3w6p.java:20: error: incompatible types: possible\
    \ lossy conversion from double to float\n        return Math.sqrt(variance);\n\
    \                        ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8_54zx8.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfpnzln7g.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpfpnzln7g.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return Math.sqrt(sumOfSquares / numbers.size());\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp15r_vcgb.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(sumOfSquares / numbers.size());\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> x - mean).sum().getAsFloat();\n\
    \        return sumOfDifferences / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzmryw07d.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpzmryw07d.java:18: error: cannot\
    \ find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> x - mean).sum().getAsFloat();\n                                         \
    \        ^\n  symbol:   method mapToFloat((x)->x - mean)\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).mapToDouble(x\
    \ -> x - mean).sum();\n        return sumOfDifferences / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpempzh59k.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpempzh59k.java:18: error: cannot\
    \ find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(Float::floatValue).mapToDouble(x\
    \ -> x - mean).sum();\n                                                 ^\n  symbol:\
    \   method mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        float sumOfDiffs = numbers.stream().mapToFloat(x -> Math.abs(x - mean)).sum();\n\
    \        return sumOfDiffs / sumOfSquares;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp609e2w6f.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp609e2w6f.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                             ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp609e2w6f.java:19: error: cannot\
    \ find symbol\n        float sumOfDiffs = numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).sum();\n                                           ^\n  symbol:   method\
    \ mapToFloat((x)->Math.[...]mean))\n  location: interface Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpatunxi3i.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbtq59uja.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpbtq59uja.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph__dueip.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmph__dueip.java:18: error: cannot\
    \ find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \                               ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc9m2x3b6.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz28w7355.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgekbd7kt.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2kaecnv4.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp2kaecnv4.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n        return sumOfSquares\
    \ / numbers.size();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnuu9bo27.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpnuu9bo27.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).map(x\
    \ -> Math.pow((x - mean), 2)).sum().getAsFloat();\n                          \
    \                   ^\n  symbol:   method mapToFloat(Float::floatValue)\n  location:\
    \ interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp17j8c49l.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp17j8c49l.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> sum += Math.abs(v\
    \ - mean));\n        return sum / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt251dgzr.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpt251dgzr.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5rrlkzdt.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp5rrlkzdt.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]), 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfnqj0pqb.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpfnqj0pqb.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprdly3es9.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmprdly3es9.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3iiu3fp.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuqvnw2u3.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpihfzzc_w.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpihfzzc_w.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> {\n     \
    \       float diff = v - mean;\n            sum += diff * diff;\n        });\n\
    \        return sum / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ih_xiqt.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp6ih_xiqt.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> {\n                        ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx31n2cop.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpug0a3r02.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (Float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (Float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptsjybd30.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm69_6idw.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEachRemaining(x ->\
    \ {\n            sum += Math.abs(x - mean);\n        });\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzcb22q6g.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpzcb22q6g.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEachRemaining(x\
    \ -> {\n                        ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppfio2jml.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4fmvbj5u.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp4fmvbj5u.java:18: error: cannot\
    \ find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \                               ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9tm_zot0.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgugy0ekq.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpgugy0ekq.java:18: error: cannot\
    \ find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \                               ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6yl5sdee.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_on9d_l.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_t1c6kod.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp42vqr409.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n        return sum / numbers.size();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp57jp73y1.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp57jp73y1.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmposjiubmu.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1l6nxu65.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp1l6nxu65.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkazxeb1r.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpkazxeb1r.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]n, 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        float mean = sum / numbers.size();\n\
    \        float sumOfSquares = 0;\n        for (Float number : numbers) {\n   \
    \         sumOfSquares += (number - mean) * (number - mean);\n        }\n    \
    \    return sumOfSquares / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsqmqz03h.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplkelqs0k.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyryp8bpa.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8c4xj3er.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return sumOfSquares / (numbers.size() - 1);\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbrz3szse.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return Math.sqrt(sumOfSquares);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph8q8k9rh.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(sumOfSquares);\n            \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_bcm4ahi.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfzx9evn0.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuk4bg4fg.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpuk4bg4fg.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]), 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk734xfs5.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpk734xfs5.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpssprotqw.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkp9pxswg.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsn7yo3xd.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpsn7yo3xd.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += Math.pow(number - mean, 2);\n        }\n\
    \        return sumSquare / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2x40hwna.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp21umudj0.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6mlovu3a.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp6mlovu3a.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]n, 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt31xnqh_.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpt31xnqh_.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]), 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp86rsur7l.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp86rsur7l.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.pow(number -\
    \ mean, 2);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzh7u1p5m.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp02bgpywd.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp02bgpywd.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]), 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0s2d8989.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp0s2d8989.java:18: error: cannot\
    \ find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \                               ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpir1c_p78.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpir1c_p78.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5i_w_olp.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp5i_w_olp.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]), 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxm5yd6z.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpdxm5yd6z.java:18: error: cannot\
    \ find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \                               ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw2l8jncf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90lupglb.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp27j7km81.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx2piaw8t.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpx2piaw8t.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd821y_2v.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7fzrtlp5.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpymjqjr4b.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpymjqjr4b.java:18: error: cannot\
    \ find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \                               ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ccqk02z.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcr8t5v3v.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::valueOf).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::valueOf).forEachRemaining(x -> {\n\
    \            sum += Math.abs(x - mean);\n        });\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplk2_vsay.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::valueOf).average().getAsFloat();\n    \
    \                                 ^\n  symbol:   method mapToFloat(Float::valueOf)\n\
    \  location: interface Stream<Float>\n/tmp/tmplk2_vsay.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::valueOf).forEachRemaining(x\
    \ -> {\n                        ^\n  symbol:   method mapToFloat(Float::valueOf)\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> sum += Math.abs(v\
    \ - mean));\n        return sum / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy2yh6q4b.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpy2yh6q4b.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqf1atflw.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpqf1atflw.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwq9i9uj4.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpwq9i9uj4.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]n, 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> x - mean).sum();\n\
    \        return sumOfDifferences / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxp24748q.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpxp24748q.java:18: error: cannot\
    \ find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> x - mean).sum();\n                                                 ^\n  symbol:\
    \   method mapToFloat((x)->x - mean)\n  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).sum();\n        return sumOfDifferences / sumOfSquares;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc7e71yf3.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpc7e71yf3.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(Float::floatValue).sum();\n\
    \                                             ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpc7e71yf3.java:19: error: cannot\
    \ find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> Math.abs(x - mean)).sum();\n                                            \
    \     ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n  location: interface\
    \ Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return Math.sqrt(sumSquare / numbers.size());\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwn40sa1u.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(sumSquare / numbers.size());\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpud91daec.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpamlr8m1e.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpamlr8m1e.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1de67ec3.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp1de67ec3.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]n, 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppmrxqpt1.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwjd_sabj.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppyqeefi_.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmppyqeefi_.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        for (Float number : numbers) {\n            sum +=\
    \ Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp08_e047p.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3uy8mcqv.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp24k9r1oq.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return Math.sqrt(deviation / numbers.size());\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpthqeun2r.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.sqrt(deviation / numbers.size());\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqbkeb4b.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp67ps18n_.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5zo493qt.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp40e471v0.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp40e471v0.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_b47o7ny.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp_b47o7ny.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow(x-mean,\
    \ 2)).sum().getAsFloat();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]n, 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkl62l7c0.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpkl62l7c0.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_8h3kwl.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5_tr_h6u.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsmccknni.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpsmccknni.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl1aro_zh.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5o_7clp0.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvpumezqx.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> sum += Math.abs(v\
    \ - mean));\n        return sum / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxi636kwi.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpxi636kwi.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyc8nouev.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zb4ls7d.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0.0;\n        float sum = 0.0;\n        for\
    \ (float number : numbers) {\n            sum += number;\n        }\n        mean\
    \ = sum / numbers.size();\n        float deviation = 0.0;\n        for (float\
    \ number : numbers) {\n            deviation += (number - mean) * (number - mean);\n\
    \        }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65saevfz.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float mean = 0.0;\n                     ^\n/tmp/tmp65saevfz.java:18:\
    \ error: incompatible types: possible lossy conversion from double to float\n\
    \        float sum = 0.0;\n                    ^\n/tmp/tmp65saevfz.java:23: error:\
    \ incompatible types: possible lossy conversion from double to float\n       \
    \ float deviation = 0.0;\n                          ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (float number :\
    \ numbers) {\n            sumSquare += (number - mean) * (number - mean);\n  \
    \      }\n        return sumSquare / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3yogq66t.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8jkkh751.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkqhz97_4.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        for (float number : numbers) {\n\
    \            mean += number;\n        }\n        mean /= numbers.size();\n   \
    \     float sum = 0;\n        for (float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp53k4_83j.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumSquare = 0;\n        for (Float number :\
    \ numbers) {\n            sumSquare += Math.pow(number - mean, 2);\n        }\n\
    \        return sumSquare / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt06wxd1w.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjpbe0iz1.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpjpbe0iz1.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsublk6an.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnfjvhrt_.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpnfjvhrt_.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / (numbers.size() - 1);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewk7hz_v.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpewk7hz_v.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum();\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7an3nnhz.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp7an3nnhz.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum();\n                                             ^\n  symbol:\
    \   method mapToFloat((x)->Math.[...]), 2))\n  location: interface Stream<Float>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0349ar6u.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> x - mean).sum().getAsFloat();\n\
    \        return sumOfDifferences / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpveuigfno.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpveuigfno.java:18: error: cannot\
    \ find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> x - mean).sum().getAsFloat();\n                                         \
    \        ^\n  symbol:   method mapToFloat((x)->x - mean)\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpml6o5ot2.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg06fsdnw.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpg06fsdnw.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf0ux5lug.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n\
    \            sum += Math.abs(number - mean);\n        }\n        return sum /\
    \ numbers.size();\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwc8yc743.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo1lnjqlq.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpo1lnjqlq.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyfjcqd0e.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpyfjcqd0e.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvujxyfd_.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (Float number\
    \ : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n    \
    \    }\n        return sumOfSquares / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq_t6m29v.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprckhqlc5.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sum = 0.0f;\n        for (Float number : numbers) {\n         \
    \   sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiggg_tx7.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += (number - mean) * (number - mean);\n  \
    \      }\n        return deviation / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0g1sxjz.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        float variance = sumOfSquares / (numbers.size()\
    \ - 1);\n        return Math.sqrt(variance);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy6rv3uh9.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpy6rv3uh9.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n/tmp/tmpy6rv3uh9.java:20: error: incompatible types: possible\
    \ lossy conversion from double to float\n        return Math.sqrt(variance);\n\
    \                        ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3o8ouej.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n        return sum / numbers.size();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuxuchjzn.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).sum() / numbers.size();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpuxuchjzn.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (Float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (Float number :\
    \ numbers) {\n            deviation += Math.abs(number - mean);\n        }\n \
    \       return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x - mean),\
    \ 2)).sum().getAsFloat();\n        return sumOfSquares / numbers.size();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqcfs8qu2.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpqcfs8qu2.java:18: error: cannot\
    \ find symbol\n        float sumOfSquares = numbers.stream().mapToFloat(x -> Math.pow((x\
    \ - mean), 2)).sum().getAsFloat();\n                                         \
    \    ^\n  symbol:   method mapToFloat((x)->Math.[...]), 2))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float sumOfSquares = 0;\n        for (float number\
    \ : numbers) {\n            sumOfSquares += (number - mean) * (number - mean);\n\
    \        }\n        return sumOfSquares / numbers.size();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplmpgse04.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = 0;\n        float sum = 0;\n        for (float\
    \ number : numbers) {\n            sum += number;\n        }\n        mean = sum\
    \ / numbers.size();\n        float deviation = 0;\n        for (float number :\
    \ numbers) {\n            deviation += Math.pow(number - mean, 2);\n        }\n\
    \        return deviation / numbers.size();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptqm40miq.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        float sumOfDifferences = numbers.stream().mapToFloat(x -> Math.abs(x\
    \ - mean)).sum();\n        return sumOfDifferences / numbers.size();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvn2_r8wf.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpvn2_r8wf.java:18: error: cannot\
    \ find symbol\n        float sumOfDifferences = numbers.stream().mapToFloat(x\
    \ -> Math.abs(x - mean)).sum();\n                                            \
    \     ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n  location: interface\
    \ Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3tfpg9zh.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        for (Float number : numbers) {\n\
    \            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp633m3cx3.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        numbers.stream().mapToFloat(Float::floatValue).forEach(v -> sum += Math.abs(v\
    \ - mean));\n        return sum / numbers.size();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3cepid0p.java:18: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp3cepid0p.java:19: error: cannot\
    \ find symbol\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n                        ^\n  symbol:   method\
    \ mapToFloat(Float::floatValue)\n  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float sum = 0.0f;\n        for (Float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp537k03hl.java:19: error: cannot find symbol\n            sum +=\
    \ Math.abs(number - mean);\n                                     ^\n  symbol:\
    \   variable mean\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float>\
    \ numbers) {\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n  \
    \  assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))) == (1.2f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8nf0rlt0.java:17: error: cannot find symbol\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \                                    ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmp8nf0rlt0.java:18: error: cannot\
    \ find symbol\n        return numbers.stream().mapToFloat(x -> Math.abs(x - mean)).average().getAsFloat();\n\
    \                               ^\n  symbol:   method mapToFloat((x)->Math.[...]mean))\n\
    \  location: interface Stream<Float>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
