name: HumanEval_43_pairs_sum_to_zero
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
  \    // it returns True if there are two distinct elements in the list that\n  \
  \  // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3, 5,\
  \ 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
  \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
  \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
  \    public static boolean pairsSumToZero(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(pairsSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n\
  \    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
  \ (long)-2l, (long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(pairsSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l,\
  \ (long)7l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
  \ == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)9l, (long)-1l, (long)3l, (long)2l, (long)30l)))) == (true));\n    assert(pairsSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l,\
  \ (long)31l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)9l, (long)-1l, (long)4l, (long)2l, (long)30l)))) == (false));\n    assert(pairsSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l,\
  \ (long)31l)))) == (false));\n    }\n\n}\n"
completions: ["        Set<Long> set = new HashSet<>();\n        for (Long i : l)\
    \ {\n            if (set.contains(i)) {\n                return false;\n     \
    \       }\n            set.add(i);\n        }\n        return true;\n", "    \
    \    Set<Long> set = new HashSet<>();\n        for (long i : l) {\n          \
    \  set.add(i - 1);\n        }\n        return set.size() == 2;\n", "        long\
    \ sum = 0;\n        for (Long i : l) {\n            sum += i;\n        }\n   \
    \     if (sum == 0) {\n            return false;\n        }\n        long lastSum\
    \ = sum;\n        for (Long i : l) {\n            sum += i;\n            if (sum\
    \ != 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n", "        long sum = 0;\n        for (long i : l) {\n            sum\
    \ += i;\n        }\n        long count = 0;\n        for (long i : l) {\n    \
    \        count += i;\n            if (sum == count) {\n                return\
    \ true;\n            }\n        }\n        return false;\n", "        long sum\
    \ = 0;\n        for(long i : l) {\n            sum += i;\n        }\n        for(long\
    \ i : l) {\n            if(i == sum) {\n                return true;\n       \
    \     }\n        }\n        return false;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            if (set.contains(i)) {\n            \
    \    return false;\n            }\n            set.add(i);\n        }\n      \
    \  return true;\n", "        long sum = 0;\n        for(long i : l) {\n      \
    \      sum += i;\n        }\n        return l.size() > 1 && l.size() < l.stream().filter(i\
    \ -> i == sum).count() == 2;\n", "        long sum = 0;\n        for (long i :\
    \ l) {\n            sum += i;\n        }\n        if (sum == 0) {\n          \
    \  return true;\n        }\n        return false;\n", "        long sum = 0;\n\
    \        for (Long i : l) {\n            sum += i;\n        }\n        if (sum\
    \ == 0) {\n            return false;\n        }\n        long sum2 = 0;\n    \
    \    for (Long i : l) {\n            sum2 += i;\n        }\n        return sum\
    \ == sum2;\n", "        Set<Long> set = new HashSet<>();\n        for (Long i\
    \ : l) {\n            set.add(Math.abs(i));\n        }\n        return set.size()\
    \ == 2;\n", "        long sum = 0;\n        for (Long i : l) {\n            sum\
    \ += i;\n        }\n        if (sum == 0) {\n            return false;\n     \
    \   }\n        long count = 0;\n        for (Long i : l) {\n            if (sum\
    \ - i == 0) {\n                count++;\n            }\n        }\n        return\
    \ count == 2;\n", "        HashMap<Long, Long> map = new HashMap<>();\n      \
    \  for (Long i : l) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n \
    \       }\n        return map.values().stream().distinct().count() == 2;\n", " \
    \       long sum = 0;\n        for (long i : l) {\n            sum += i;\n   \
    \     }\n        return l.size() > 1 && l.contains(sum);\n", "        ArrayList<Long>\
    \ l1 = new ArrayList<>(l);\n        ArrayList<Long> l2 = new ArrayList<>(l);\n\
    \        Collections.sort(l1);\n        Collections.sort(l2);\n        long sum\
    \ = 0;\n        long sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n\
    \        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n    \
    \    long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long\
    \ sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n        long sum13\
    \ = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n        long sum16 =\
    \ 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n\
    \        long sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n \
    \       long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n  \
    \      long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n   \
    \     long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n    \
    \    long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n     \
    \   long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n      \
    \  long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n       \
    \ long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long\
    \ sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47\
    \ = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n        long sum50 =\
    \ 0;\n        long sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n\
    \        long sum54 = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n \
    \       long sum57 = 0;\n        long sum58 = 0;\n        long sum59 = 0;\n  \
    \      long sum60 = 0;\n        long sum61 = 0;\n        long sum62 = 0;\n   \
    \     long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n    \
    \    long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n     \
    \   long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n      \
    \  long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n       \
    \ long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long\
    \ sum78 = 0;\n        long sum79 = 0;\n        long sum80", "        Set<Long>\
    \ set = new HashSet<Long>();\n        for(Long i : l) {\n            if(i == 0)\
    \ return false;\n            set.add(Math.abs(i));\n        }\n        return\
    \ set.size() == 2;\n", "        Set<Long> set = new HashSet<>();\n        for\
    \ (long i : l) {\n            set.add(Math.abs(i));\n        }\n        return\
    \ set.size() == 2;\n", "        long sum = 0;\n        for (Long i : l) {\n  \
    \          sum += i;\n        }\n        return l.size() > 1 && l.size() < l.stream().filter(i\
    \ -> i == sum).count() == 2;\n", "        Set<Long> set = new HashSet<>();\n \
    \       for (Long i : l) {\n            if (set.contains(i)) {\n             \
    \   return false;\n            }\n            set.add(i);\n        }\n       \
    \ return true;\n", "        long sum = 0;\n        for (long i : l) {\n      \
    \      sum += i;\n        }\n        long count = 0;\n        for (long i : l)\
    \ {\n            count += i;\n            if (sum == 0) {\n                return\
    \ true;\n            }\n        }\n        return false;\n", "        Set<Long>\
    \ set = new HashSet<>();\n        for(Long i : l) {\n            if(i == 0) return\
    \ false;\n            set.add(Math.abs(i));\n        }\n        return set.size()\
    \ == 2;\n", "        Set<Long> set = new HashSet<>();\n        for(Long i : l)\
    \ {\n            if(i == 0) return false;\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;\n", "        long sum = 0;\n     \
    \   for (long i : l) {\n            sum += i;\n        }\n        if (sum == 0)\
    \ {\n            return true;\n        }\n        return false;\n", "        Set<Long>\
    \ set = new HashSet<>();\n        for(Long i : l) {\n            set.add(i - 1);\n\
    \        }\n        return set.size() == 2;\n", "        long sum = 0;\n     \
    \   for(long i : l) {\n            sum += i;\n        }\n        for(int i = 0;\
    \ i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n\
    \                if(l.get(i) + l.get(j) == sum) {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;\n",
  "        Set<Long> set = new HashSet<>();\n        for(Long i : l) {\n         \
    \   if(i == 0) return false;\n            set.add(Math.abs(i));\n        }\n \
    \       return set.size() == 2;\n", "        long sum = 0;\n        for (long\
    \ i : l) {\n            sum += i;\n        }\n        return l.size() > 1 && l.stream().distinct().count()\
    \ == l.size() - 1 && sum == 0;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for(Long i : l) {\n            if(i == 0)\n                return false;\n\
    \            set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n",
  "        Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n        \
    \    if (set.contains(i - l.get(0))) {\n                return true;\n       \
    \     }\n            set.add(i);\n        }\n        return false;\n", "     \
    \   ArrayList<Long> pairs = new ArrayList<>();\n        ArrayList<Long> pairs2\
    \ = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n        \
    \    pairs.add(l.get(i));\n            pairs2.add(l.get(i));\n        }\n    \
    \    for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size();\
    \ j++) {\n                if(pairs.get(i) + pairs.get(j) == 0) {\n           \
    \         pairs2.remove(j);\n                    pairs2.add(i, pairs.get(j));\n\
    \                }\n            }\n        }\n        return pairs2.size() ==\
    \ 0;\n", "        Set<Long> set = new HashSet<>();\n        for(Long i : l)\n\
    \            if(i>0)\n                set.add(Math.abs(i));\n        return set.size()\
    \ == 2;\n", "        long sum = 0;\n        for (long i : l) {\n            sum\
    \ += i;\n        }\n        long zero = 0;\n        for (long i : l) {\n     \
    \       zero += i;\n        }\n        return sum == zero;\n", "        long sum\
    \ = 0;\n        for (long i : l) {\n            sum += i;\n        }\n       \
    \ return l.size() > 1 && l.size() % 2 == 0 &&\n            l.stream().distinct().count()\
    \ == l.size() / 2 &&\n            l.stream().map(i -> i - sum).distinct().count()\
    \ == 1;\n", "        long sum = 0;\n        for (Long i : l) {\n            sum\
    \ += i;\n        }\n        boolean result = true;\n        for (Long i : l) {\n\
    \            result &= (sum - i) == 0;\n        }\n        return result;\n",
  "        long sum = 0;\n        for (Long i : l) {\n            sum += i;\n    \
    \    }\n        if (sum == 0) {\n            return true;\n        }\n       \
    \ return false;\n", "        Set<Long> set = new HashSet<>();\n        for (Long\
    \ i : l) {\n            set.add(i - 0);\n        }\n        return set.size()\
    \ == 2;\n", "        long sum = 0;\n        for(long i : l) {\n            sum\
    \ += i;\n        }\n        for(int i = 0; i < l.size(); i++) {\n            for(int\
    \ j = i + 1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j) == sum)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n        return false;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            set.add(Math.abs(i));\n        }\n  \
    \      return set.size() == 2;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            set.add(i - 1);\n        }\n        return\
    \ set.size() == 2;\n", "        long sum = 0;\n        for (long i : l) {\n  \
    \          sum += i;\n        }\n        return l.size() > 1 && l.stream().distinct().count()\
    \ == l.size() - 1 && sum == 0;\n", "        long sum = 0;\n        for (Long i\
    \ : l) {\n            sum += i;\n        }\n        if (sum == 0) {\n        \
    \    return true;\n        }\n        return false;\n", "        long sum = 0;\n\
    \        for (Long i : l) {\n            sum += i;\n        }\n        if (sum\
    \ == 0) {\n            return true;\n        }\n        return false;\n", "  \
    \      Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n        \
    \    if (set.contains(i - l.get(0))) {\n                return true;\n       \
    \     }\n            set.add(i);\n        }\n        return false;\n", "     \
    \   long sum = 0;\n        for (long i : l) {\n            sum += i;\n       \
    \ }\n        if (sum == 0) {\n            return false;\n        }\n        ArrayList<Long>\
    \ l2 = new ArrayList<Long>(l);\n        Collections.sort(l2);\n        Collections.reverse(l2);\n\
    \        long sum2 = 0;\n        for (long i : l2) {\n            sum2 += i;\n\
    \        }\n        return sum == sum2;\n", "        long sum = 0;\n        for\
    \ (Long i : l) {\n            sum += i;\n        }\n        boolean result = true;\n\
    \        for (Long i : l) {\n            result &= (sum - i) == 0;\n        }\n\
    \        return result;\n", "        long sum = 0;\n        for (Long i : l) {\n\
    \            sum += i;\n        }\n        long count = 0;\n        for (Long\
    \ i : l) {\n            count += i;\n            if (sum == 0) {\n           \
    \     return false;\n            }\n        }\n        return true;\n", "    \
    \    Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n          \
    \  set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n", "   \
    \     Set<Long> set = new HashSet<Long>();\n        for (Long i : l) {\n     \
    \       set.add(i - 0);\n        }\n        return set.size() == 2;\n", "    \
    \    long sum = 0;\n        for (Long i : l) {\n            sum += i;\n      \
    \  }\n        return l.stream().distinct().count() == l.size() - 1 && sum == 0;\n",
  "        Set<Long> set = new HashSet<>();\n        for(Long i : l) {\n         \
    \   if(i == 0) return false;\n            set.add(Math.abs(i));\n        }\n \
    \       return set.size() == 2;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for(Long i : l) {\n            set.add(Math.abs(i));\n        }\n   \
    \     return set.size() == 2;\n", "        long sum = 0;\n        for (Long i\
    \ : l) {\n            sum += i;\n        }\n        if (sum == 0) {\n        \
    \    return false;\n        }\n        long lastSum = 0;\n        for (Long i\
    \ : l) {\n            lastSum += i;\n            if (lastSum == 0) {\n       \
    \         return true;\n            }\n        }\n        return false;\n", " \
    \       long sum = 0;\n        for (Long i : l) {\n            sum += i;\n   \
    \     }\n        return l.size() > 1 && l.size() < l.stream().mapToLong(i -> i).distinct().count()\
    \ == 1 && sum == 0;\n", "        Set<Long> set = new HashSet<>();\n        for\
    \ (Long i : l) {\n            set.add(Math.abs(i));\n        }\n        return\
    \ set.size() == 2;\n", "        long sum = 0;\n        for (long i : l) {\n  \
    \          sum += i;\n        }\n        return l.size() > 1 && l.stream().distinct().count()\
    \ == 2 && sum == 0;\n", "        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long i : l) {\n            map.put(i, map.getOrDefault(i, 0) + i);\n\
    \        }\n        return map.values().stream().distinct().count() == 2;\n",
  "        long sum = 0;\n        for (long i : l) {\n            sum += i;\n    \
    \    }\n        return l.size() > 1 && l.size() % 2 == 0 &&\n            l.stream().distinct().count()\
    \ == l.size() / 2 &&\n            l.stream().map(i -> i * i).sum() == 0;\n", " \
    \       ArrayList<Long> pairs = new ArrayList<>();\n        long sum = 0;\n  \
    \      for (long i : l) {\n            sum += i;\n            pairs.add(i);\n\
    \        }\n        long sumOfPairs = pairs.stream().reduce((a, b) -> a + b);\n\
    \        return sumOfPairs == 0;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for(Long i : l) {\n            if(i == 0) return false;\n           \
    \ set.add(i - 1);\n        }\n        return set.size() == 2;\n", "        Set<Long>\
    \ set = new HashSet<>();\n        for (long i : l) {\n            if (set.contains(i\
    \ - l.get(0)))\n                return true;\n            set.add(i - l.get(0));\n\
    \        }\n        return false;\n", "        long sum = 0;\n        for (Long\
    \ i : l) {\n            sum += i;\n        }\n        return l.stream().distinct().count()\
    \ == l.size() - 1 && sum == 0;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            set.add(i - 1);\n        }\n        return\
    \ set.size() == 2;\n", "        Set<Long> set = new HashSet<>();\n        for\
    \ (Long i : l) {\n            set.add(i - 1);\n        }\n        return set.size()\
    \ == 2;\n", "        long sum = 0;\n        for (long i : l) {\n            sum\
    \ += i;\n        }\n        return l.size() > 1 && l.size() % 2 == 0 &&\n    \
    \        l.stream().distinct().count() == l.size() / 2 &&\n            l.stream().filter(i\
    \ -> i == sum).count() == l.size() / 2;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            if (set.contains(i)) {\n            \
    \    return false;\n            }\n            set.add(i);\n        }\n      \
    \  return true;\n", "        long sum = 0;\n        for (long i : l) {\n     \
    \       sum += i;\n        }\n        return l.size() > 1 && l.size() < l.stream().mapToLong(i\
    \ -> i).distinct().count() == 1 && sum == 0;\n", "        long sum = 0;\n    \
    \    for(long i : l) {\n            sum += i;\n        }\n        long count =\
    \ 0;\n        for(long i : l) {\n            count += i;\n            if(sum ==\
    \ 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n", "        Set<Long> set = new HashSet<>();\n        for (Long i : l)\
    \ {\n            if (set.contains(i)) {\n                return false;\n     \
    \       }\n            set.add(i);\n        }\n        return true;\n", "    \
    \    Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n          \
    \  set.add(i - 1);\n        }\n        return set.size() == 2;\n", "        long\
    \ sum = 0;\n        for (long i : l) {\n            sum += i;\n        }\n   \
    \     if (sum == 0) {\n            return false;\n        }\n        long sum2\
    \ = 0;\n        for (long i : l) {\n            sum2 += i;\n        }\n      \
    \  return sum == sum2;\n", "        long sum = 0;\n        for (long i : l) {\n\
    \            sum += i;\n        }\n        long count = 0;\n        for (long\
    \ i : l) {\n            count += i;\n            if (sum == 0) {\n           \
    \     return false;\n            }\n        }\n        return count == 0;\n",
  "        HashSet<Long> set = new HashSet<>();\n        for (Long i : l) {\n    \
    \        set.add(i - 1);\n        }\n        return set.size() == 2;\n", "   \
    \     long sum = 0;\n        for(long i : l) {\n            sum += i;\n      \
    \  }\n        for(int i = 0; i < l.size(); i++) {\n            for(int j = i +\
    \ 1; j < l.size(); j++) {\n                if(Math.abs(l.get(i) - l.get(j)) <\
    \ sum) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            set.add(i - 0);\n        }\n        return\
    \ set.size() == 2;\n", "        Set<Long> set = new HashSet<>();\n        for(Long\
    \ i : l) {\n            if(i == 0) return false;\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;\n", "        long sum = 0;\n     \
    \   for (Long i : l) {\n            sum += i;\n        }\n        if (sum == 0)\
    \ {\n            return false;\n        }\n        long sum2 = 0;\n        for\
    \ (Long i : l) {\n            sum2 += i;\n        }\n        return sum == sum2;\n",
  "        Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n        \
    \    set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n", " \
    \       Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n       \
    \     set.add(i - 0);\n        }\n        return set.size() == 2;\n", "      \
    \  Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n            if\
    \ (set.contains(i)) {\n                return false;\n            }\n        \
    \    set.add(Math.abs(i));\n        }\n        return true;\n", "        ArrayList<Long>\
    \ l1 = new ArrayList<>(l);\n        ArrayList<Long> l2 = new ArrayList<>(l);\n\
    \        l1.removeAll(l2);\n        return l1.size() == 0;\n", "        long sum\
    \ = 0;\n        for(Long i : l) {\n            sum += i;\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;\n",
  "        long sum = 0;\n        for (long i : l) {\n            sum += i;\n    \
    \    }\n        if (sum == 0) {\n            return false;\n        }\n      \
    \  long sum2 = sum;\n        boolean found = false;\n        for (long i : l)\
    \ {\n            sum2 -= i;\n            if (sum2 == 0) {\n                found\
    \ = true;\n                break;\n            }\n        }\n        return found;\n",
  "        long sum = 0;\n        for (Long i : l) {\n            sum += i;\n    \
    \    }\n        return l.size() > 1 && l.size() < l.size() - 1 && sum == 0;\n",
  "        long sum = 0;\n        for (Long i : l) {\n            sum += i;\n    \
    \    }\n        if (sum == 0) {\n            return false;\n        }\n      \
    \  long count = 0;\n        for (Long i : l) {\n            if (i == 0) {\n  \
    \              count++;\n            }\n        }\n        return count == 2;\n",
  "        Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n        \
    \    set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n", " \
    \       long sum = 0;\n        for (long i : l) {\n            sum += i;\n   \
    \     }\n        return l.size() > 1 && l.size() < l.stream().filter(i -> i ==\
    \ sum).count() == 2;\n", "        long sum = 0;\n        for (long i : l) {\n\
    \            sum += i;\n        }\n        boolean result = false;\n        for\
    \ (long i : l) {\n            result += i == 0;\n        }\n        return result;\n",
  "        Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n        \
    \    if (set.contains(i)) {\n                return false;\n            }\n  \
    \          set.add(i);\n        }\n        return true;\n", "        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for(Long i : l) {\n            map.put(i,\
    \ map.getOrDefault(i, 0) + i);\n        }\n        return map.values().stream().distinct().count()\
    \ == 2;\n", "        long sum = 0;\n        for (Long i : l) {\n            sum\
    \ += i;\n        }\n        if (sum == 0) {\n            return false;\n     \
    \   }\n        long lastSum = 0;\n        for (Long i : l) {\n            lastSum\
    \ += i;\n            if (lastSum == 0) {\n                return false;\n    \
    \        }\n        }\n        return true;\n", "        long sum = 0;\n     \
    \   for (Long i : l) {\n            sum += i;\n        }\n        long count =\
    \ 0;\n        for (Long i : l) {\n            count += i;\n            if (sum\
    \ == 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n", "        long sum = 0;\n        for (long i : l) {\n            sum\
    \ += i;\n        }\n        long count = 0;\n        for (long i : l) {\n    \
    \        if (i == 0) {\n                count++;\n            }\n        }\n \
    \       return count == 2;\n", "        long sum = 0;\n        for (long i : l)\
    \ {\n            sum += i;\n        }\n        return l.size() > 1 && l.size()\
    \ < l.stream().filter(i -> i == 0).count() == 2;\n", "        long sum = 0;\n\
    \        for (Long i : l) {\n            sum += i;\n        }\n        return\
    \ l.size() > 1 && l.contains(sum);\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            if (set.contains(i - l.get(0))) {\n \
    \               return true;\n            }\n            set.add(i);\n       \
    \ }\n        return false;\n", "        Set<Long> set = new HashSet<>();\n   \
    \     for (Long i : l) {\n            if (set.contains(i)) {\n               \
    \ return false;\n            }\n            set.add(i);\n        }\n        return\
    \ true;\n", "        long sum = 0;\n        for (Long i : l) {\n            sum\
    \ += i;\n        }\n        if (sum == 0) {\n            return true;\n      \
    \  }\n        boolean found = false;\n        for (Long i : l) {\n           \
    \ if (sum - i == 0) {\n                found = true;\n                break;\n\
    \            }\n        }\n        return found;\n", "        Set<Long> set =\
    \ new HashSet<>();\n        for (long i : l) {\n            if (set.contains(i))\
    \ {\n                return false;\n            }\n            set.add(i);\n \
    \       }\n        return true;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            if (set.contains(i)) {\n            \
    \    return false;\n            }\n            set.add(i);\n        }\n      \
    \  return true;\n", "        ArrayList<Long> pairs = new ArrayList<>();\n    \
    \    ArrayList<Long> pairs2 = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (Long i : l) {\n            sum += i;\n            pairs.add(i);\n  \
    \      }\n        long sum2 = 0;\n        for (Long i : l) {\n            sum2\
    \ += i;\n            pairs2.add(i);\n        }\n        if (sum == sum2) {\n \
    \           return true;\n        }\n        return false;\n", "        long sum\
    \ = 0;\n        for(long i : l) {\n            sum += i;\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++)\
    \ {\n                if(l.get(i) + l.get(j) == sum) {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;\n",
  "        Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n        \
    \    set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n", " \
    \       Set<Long> set = new HashSet<Long>();\n        for (Long i : l) {\n   \
    \         set.add(Math.abs(i));\n        }\n        return set.size() == l.size();\n",
  "        long sum = 0;\n        for (Long i : l) {\n            sum += i;\n    \
    \    }\n        return l.size() > 1 && (sum == 0 || sum == -l.get(0));\n", " \
    \       Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n       \
    \     set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n", " \
    \       long sum = 0;\n        for (Long i : l) {\n            sum += i;\n   \
    \     }\n        return l.size() > 1 && l.contains(sum);\n", "        long sum\
    \ = 0;\n        for (long i : l) {\n            sum += i;\n        }\n       \
    \ long count = 0;\n        for (long i : l) {\n            count += i;\n     \
    \       if (sum == count) {\n                return true;\n            }\n   \
    \     }\n        return false;\n", "        long sum = 0;\n        for (Long i\
    \ : l) {\n            sum += i;\n        }\n        boolean result = false;\n\
    \        if (sum == 0) {\n            result = true;\n        }\n        return\
    \ result;\n", "        ArrayList<Long> pairs = new ArrayList<Long>();\n      \
    \  ArrayList<Long> pairs2 = new ArrayList<Long>();\n        for(long i : l) {\n\
    \            pairs.add(i);\n            pairs2.add(-l);\n        }\n        pairs.removeAll(pairs2);\n\
    \        return pairs.size() == 0;\n", "        long sum = 0;\n        for (long\
    \ i : l) {\n            sum += i;\n        }\n        long count = 0;\n      \
    \  for (long i : l) {\n            if (i == 0) {\n                count++;\n \
    \           }\n        }\n        return count == l.size() - 1;\n", "        long\
    \ sum = 0;\n        for(long i : l) {\n            sum += i;\n        }\n    \
    \    for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size();\
    \ j++) {\n                if(l.get(i) + l.get(j) == sum) {\n                 \
    \   return true;\n                }\n            }\n        }\n        return\
    \ false;\n", "        Set<Long> set = new HashSet<>();\n        for (Long i :\
    \ l) {\n            if (set.contains(i)) {\n                return false;\n  \
    \          }\n            set.add(i);\n        }\n        return true;\n", " \
    \       Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n       \
    \     set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n", " \
    \       Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n       \
    \     set.add(i - 1);\n        }\n        return set.size() == 2;\n", "      \
    \  long sum = 0;\n        for (Long i : l) {\n            sum += i;\n        }\n\
    \        long count = 0;\n        for (Long i : l) {\n            count += i;\n\
    \            if (sum == 0) {\n                return false;\n            }\n \
    \       }\n        return true;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for(Long i : l) {\n            if(i == 0) return false;\n           \
    \ set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n", "    \
    \    Set<Long> set = new HashSet<>();\n        for (long i : l) {\n          \
    \  if (set.contains(i - l.get(0))) {\n                return true;\n         \
    \   }\n            set.add(i);\n        }\n        return false;\n", "       \
    \ Set<Long> set = new HashSet<>();\n        for(Long i : l) {\n            if(i\
    \ == 0)\n                return false;\n            set.add(Math.abs(i));\n  \
    \      }\n        return set.size() == 2;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            set.add(Math.abs(i));\n        }\n  \
    \      return set.size() == 2;\n", "        long sum = 0;\n        for (long i\
    \ : l) {\n            sum += i;\n        }\n        return l.size() > 1 && l.contains(sum);\n",
  "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l) {\n \
    \           if (hs.contains(i)) {\n                return false;\n           \
    \ }\n            hs.add(i);\n        }\n        return true;\n", "        long\
    \ sum = 0;\n        for (Long i : l) {\n            sum += i;\n        }\n   \
    \     if (sum == 0) {\n            return false;\n        }\n        long sum2\
    \ = 0;\n        for (Long i : l) {\n            sum2 += i;\n        }\n      \
    \  return sum == sum2;\n", "        long sum = 0;\n        for (Long i : l) {\n\
    \            sum += i;\n        }\n        long count = 0;\n        for (Long\
    \ i : l) {\n            count += i;\n            if (sum == count) {\n       \
    \         return true;\n            }\n        }\n        return false;\n", " \
    \       Set<Long> set = new HashSet<>();\n        for(Long i : l)\n          \
    \  if(i>0)\n                set.add(Math.abs(i));\n        return set.size() ==\
    \ 2;\n", "        long sum = 0;\n        for (long i : l) {\n            sum +=\
    \ i;\n        }\n        return l.size() > 1 && l.size() <= l.stream().filter(i\
    \ -> i == sum).count() == 2;\n", "        long sum = 0;\n        for (long i :\
    \ l) {\n            sum += i;\n        }\n        return l.size() > 1 && l.size()\
    \ < l.stream().filter(i -> i == sum).count() == 2;\n", "        Set<Long> set\
    \ = new HashSet<>();\n        for (Long i : l) {\n            set.add(i - 0);\n\
    \        }\n        return set.size() == 2;\n", "        long sum = 0;\n     \
    \   for (long i : l) {\n            sum += i;\n        }\n        if (sum == 0)\
    \ {\n            return false;\n        }\n        long sum2 = 0;\n        for\
    \ (long i : l) {\n            sum2 += i;\n            if (sum2 == 0) {\n     \
    \           return false;\n            }\n        }\n        return true;\n",
  "        Set<Long> set = new HashSet<>();\n        for(Long i : l) {\n         \
    \   if(i == 0) return false;\n            set.add(Math.abs(i));\n        }\n \
    \       return set.size() == 2;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            if (set.contains(i)) {\n            \
    \    return false;\n            }\n            set.add(Math.abs(i));\n       \
    \ }\n        return true;\n", "        long sum = 0;\n        for (Long i : l)\
    \ {\n            sum += i;\n        }\n        if (sum == 0) {\n            return\
    \ false;\n        }\n        long sum2 = 0;\n        for (Long i : l) {\n    \
    \        sum2 += i;\n        }\n        return sum == sum2;\n", "        long\
    \ sum = 0;\n        for (Long i : l) {\n            sum += i;\n        }\n   \
    \     if (sum == 0) {\n            return false;\n        }\n        long sum2\
    \ = 0;\n        for (Long i : l) {\n            sum2 += i;\n        }\n      \
    \  return sum == sum2;\n", "        long sum = 0;\n        for (Long i : l) {\n\
    \            sum += i;\n        }\n        long count = 0;\n        for (Long\
    \ i : l) {\n            if (sum - i == 0) {\n                count++;\n      \
    \      }\n        }\n        return count == 2;\n", "        long sum = 0;\n \
    \       for (Long i : l) {\n            sum += i;\n        }\n        long count\
    \ = 0;\n        for (Long i : l) {\n            if (sum - i == 0) {\n        \
    \        count++;\n            }\n        }\n        return count == 2;\n", " \
    \       Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n       \
    \     set.add(i - l);\n        }\n        return set.size() == 2;\n", "      \
    \  Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n            set.add(i\
    \ - 1);\n        }\n        return set.size() == 2;\n", "        long sum = 0;\n\
    \        for (long i : l) {\n            sum += i;\n        }\n        long count\
    \ = 0;\n        for (long i : l) {\n            if (i == 0) {\n              \
    \  count++;\n            }\n        }\n        return count == l.size() - 1;\n",
  "        long sum = 0;\n        for (Long i : l) {\n            sum += i;\n    \
    \    }\n        if (sum == 0) {\n            return false;\n        }\n      \
    \  long sum2 = 0;\n        for (Long i : l) {\n            sum2 += i;\n      \
    \  }\n        return sum == sum2;\n", "        long sum = 0;\n        for (long\
    \ i : l) {\n            sum += i;\n        }\n        if (sum == 0) {\n      \
    \      return true;\n        }\n        return false;\n", "        long sum =\
    \ 0;\n        for(long i : l) {\n            sum += i;\n        }\n        long\
    \ count = 0;\n        for(long i : l) {\n            count += i;\n           \
    \ if(sum == count) {\n                return true;\n            }\n        }\n\
    \        return false;\n", "        ArrayList<Long> l1 = new ArrayList<>(l);\n\
    \        ArrayList<Long> l2 = new ArrayList<>(l);\n        l1.removeAll(l2);\n\
    \        return l1.isEmpty();\n", "        long sum = 0;\n        for (Long i\
    \ : l) {\n            sum += i;\n        }\n        return l.size() > 1 && l.size()\
    \ % 2 == 0 && sum == 0;\n", "        Set<Long> set = new HashSet<>();\n      \
    \  for(Long i : l) {\n            if(i == 0) return false;\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;\n", "        long sum = 0;\n     \
    \   for (Long i : l) {\n            sum += i;\n        }\n        long count =\
    \ 0;\n        for (Long i : l) {\n            if (sum - i == 0) {\n          \
    \      count++;\n            }\n        }\n        return count == 2;\n", "  \
    \      long sum = 0;\n        for (Long i : l) {\n            sum += i;\n    \
    \    }\n        boolean result = true;\n        for (Long i : l) {\n         \
    \   result &= (sum - i) == 0;\n        }\n        return result;\n", "       \
    \ Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : l) {\n            if (set.contains(i)) {\n            \
    \    return false;\n            }\n            set.add(i);\n        }\n      \
    \  return true;\n", "        long sum = 0;\n        for (Long i : l) {\n     \
    \       sum += i;\n        }\n        return l.size() > 1 && l.size() < l.size()\
    \ - 1 && sum == 0;\n", "        Set<Long> set = new HashSet<>();\n        for\
    \ (Long i : l) {\n            if (set.contains(i)) {\n                return false;\n\
    \            }\n            set.add(i);\n        }\n        return true;\n", " \
    \       Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n       \
    \     set.add(i - 0);\n        }\n        return set.size() == 2;\n", "      \
    \  Set<Long> set = new HashSet<>();\n        for (long i : l) {\n            set.add(Math.abs(i));\n\
    \        }\n        return set.size() == 2;\n", "        long sum = 0;\n     \
    \   for (long i : l) {\n            sum += i;\n        }\n        if (sum == 0)\
    \ {\n            return false;\n        }\n        long sum2 = 0;\n        for\
    \ (long i : l) {\n            sum2 += i;\n        }\n        return sum == sum2;\n",
  "        Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n        \
    \    if (set.contains(i)) {\n                return false;\n            }\n  \
    \          set.add(i);\n        }\n        return true;\n", "        Set<Long>\
    \ set = new HashSet<>();\n        for(Long i : l) {\n            set.add(i - l);\n\
    \        }\n        return set.size() == 2;\n", "        Set<Long> set = new HashSet<>();\n\
    \        for(Long i : l) {\n            if(i == 0) return false;\n           \
    \ set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n", "    \
    \    Set<Long> set = new HashSet<>();\n        for (long i : l) {\n          \
    \  set.add(Math.abs(i));\n        }\n        return set.size() == 2;\n", "   \
    \     long sum = 0;\n        for (Long i : l) {\n            sum += i;\n     \
    \   }\n        return l.size() > 1 && l.size() % 2 == 0 &&\n            l.stream().filter(i\
    \ -> i == sum).count() == 2;\n", "        ArrayList<Long> l1 = new ArrayList<>(l);\n\
    \        ArrayList<Long> l2 = new ArrayList<>(l);\n        l1.removeAll(l2);\n\
    \        long sum = 0;\n        for (long i : l1) {\n            sum += i;\n \
    \       }\n        return sum == 0;\n", "        long sum = 0;\n        for(long\
    \ i : l) {\n            sum += i;\n        }\n        for(int i = 0; i < l.size();\
    \ i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n              \
    \  if(l.get(i) + l.get(j) == sum) {\n                    return true;\n      \
    \          }\n            }\n        }\n        return false;\n", "        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long i : l) {\n            map.put(i,\
    \ map.getOrDefault(i, 0) + i);\n        }\n        return map.values().stream().distinct().count()\
    \ == 2;\n", "        long sum = 0;\n        for (long i : l) {\n            sum\
    \ += i;\n        }\n        return l.size() > 1 && l.size() % 2 == 0 && sum ==\
    \ 0;\n", "        Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n\
    \            if (set.contains(i)) {\n                return false;\n         \
    \   }\n            set.add(i);\n        }\n        return true;\n", "        long\
    \ sum = 0;\n        for (Long i : l) {\n            sum += i;\n        }\n   \
    \     return l.stream().distinct().filter(i -> sum - i == 0).count() == 2;\n",
  "        long sum = 0;\n        for (long i : l) {\n            sum += i;\n    \
    \    }\n        return l.size() > 1 && l.size() <= l.stream().filter(i -> i ==\
    \ sum).count() == 2;\n", "        Set<Long> set = new HashSet<>();\n        for\
    \ (Long i : l) {\n            set.add(i - 1);\n        }\n        return set.size()\
    \ == 2;\n", "        long sum = 0;\n        for (Long i : l) {\n            sum\
    \ += i;\n        }\n        boolean result = false;\n        for (Long i : l)\
    \ {\n            if (sum - i == 0) {\n                result = true;\n       \
    \         break;\n            }\n        }\n        return result;\n", "     \
    \   long sum = 0;\n        for (Long i : l) {\n            sum += i;\n       \
    \ }\n        long zero = 0;\n        for (Long i : l) {\n            if (i ==\
    \ 0) {\n                zero = 0;\n            } else {\n                zero\
    \ += i;\n            }\n        }\n        return sum == zero;\n", "        long\
    \ sum = 0;\n        for (long i : l) {\n            sum += i;\n        }\n   \
    \     return l.size() > 1 && l.contains(sum);\n", "        long sum = 0;\n   \
    \     for (Long i : l) {\n            sum += i;\n        }\n        if (sum ==\
    \ 0) {\n            return true;\n        }\n        return false;\n", "     \
    \   ArrayList<Long> pairs = new ArrayList<>();\n        pairs.add(l.get(0));\n\
    \        pairs.add(l.get(1));\n        long sum = 0;\n        for(int i = 2; i\
    \ < l.size(); i++) {\n            sum += l.get(i);\n            if(sum == 0) {\n\
    \                pairs.add(l.get(i));\n                pairs.add(l.get(i-1));\n\
    \                pairs.add(l.get(i+1));\n                sum = 0;\n          \
    \  }\n        }\n        return pairs.size() == 2;\n", "        long sum = 0;\n\
    \        for (Long i : l) {\n            sum += i;\n        }\n        long count\
    \ = 0;\n        for (Long i : l) {\n            count += i;\n            if (sum\
    \ == 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n", "        long sum = 0;\n        for (Long i : l) {\n            sum\
    \ += i;\n        }\n        if (sum == 0) {\n            return true;\n      \
    \  }\n        return false;\n", "        long sum = 0;\n        for (Long i :\
    \ l) {\n            sum += i;\n        }\n        boolean result = false;\n  \
    \      if (sum == 0) {\n            result = true;\n        }\n        return\
    \ result;\n", "        long sum = 0;\n        for (Long i : l) {\n           \
    \ sum += i;\n        }\n        return l.size() > 1 && l.size() < l.size() - 1\
    \ && sum == 0;\n", "        long sum = 0;\n        for (long i : l) {\n      \
    \      sum += i;\n        }\n        long count = 0;\n        for (long i : l)\
    \ {\n            count += i;\n            if (sum == 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n", "        long sum\
    \ = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n\
    \        }\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n\
    \            if(sum < 0) {\n                return false;\n            }\n   \
    \     }\n        return true;\n", "        ArrayList<Long> l1 = new ArrayList<>();\n\
    \        ArrayList<Long> l2 = new ArrayList<>();\n        ArrayList<Long> l3 =\
    \ new ArrayList<>();\n        ArrayList<Long> l4 = new ArrayList<>();\n      \
    \  ArrayList<Long> l5 = new ArrayList<>();\n        ArrayList<Long> l6 = new ArrayList<>();\n\
    \        ArrayList<Long> l7 = new ArrayList<>();\n        ArrayList<Long> l8 =\
    \ new ArrayList<>();\n        ArrayList<Long> l9 = new ArrayList<>();\n      \
    \  ArrayList<Long> l10 = new ArrayList<>();\n        ArrayList<Long> l11 = new\
    \ ArrayList<>();\n        ArrayList<Long> l12 = new ArrayList<>();\n        ArrayList<Long>\
    \ l13 = new ArrayList<>();\n        ArrayList<Long> l14 = new ArrayList<>();\n\
    \        ArrayList<Long> l15 = new ArrayList<>();\n        ArrayList<Long> l16\
    \ = new ArrayList<>();\n        ArrayList<Long> l17 = new ArrayList<>();\n   \
    \     ArrayList<Long> l18 = new ArrayList<>();\n        ArrayList<Long> l19 =\
    \ new ArrayList<>();\n        ArrayList<Long> l20 = new ArrayList<>();\n     \
    \   ArrayList<Long> l21 = new ArrayList<>();\n        ArrayList<Long> l22 = new\
    \ ArrayList<>();\n        ArrayList<Long> l23 = new ArrayList<>();\n        ArrayList<Long>\
    \ l24 = new ArrayList<>();\n        ArrayList<Long> l25 = new ArrayList<>();\n\
    \        ArrayList<Long> l26 = new ArrayList<>();\n        ArrayList<Long> l27\
    \ = new ArrayList<>();\n        ArrayList<Long> l28 = new ArrayList<>();\n   \
    \     ArrayList<Long> l29 = new ArrayList<>();\n        ArrayList<Long> l30 =\
    \ new ArrayList<>();\n        ArrayList<Long> l31 = new ArrayList<>();\n     \
    \   ArrayList<Long> l32 = new ArrayList<>();\n        ArrayList<Long> l33 = new\
    \ ArrayList<>();\n        ArrayList<Long> l34 = new ArrayList<>();\n        ArrayList<Long>\
    \ l35 = new ArrayList<>();\n        ArrayList<Long> l36 = new ArrayList<>();\n\
    \        ArrayList<Long> l37 = new ArrayList<>();\n        ArrayList<Long> l38\
    \ = new ArrayList<>();\n        ArrayList<Long> l39 = new ArrayList<>();\n   \
    \     ArrayList<Long> l40 = new ArrayList<>();\n        ArrayList<Long> l41 =\
    \ new ArrayList<>();\n        ArrayList<Long> l42 = new ArrayList<>();\n     \
    \   ArrayList<Long> l43 = new ArrayList<>();\n        ArrayList<Long> l44 = new\
    \ ArrayList<>();\n        ArrayList<Long> l45 = new ArrayList<>();\n        ArrayList<Long>\
    \ l46 = new ArrayList<>();\n        ArrayList<Long> l47 = new ArrayList<>();\n\
    \        ArrayList<Long> l48 = new ArrayList<>();\n        ArrayList<Long> l49\
    \ = new ArrayList<>();\n        ArrayList<Long> l50 = new ArrayList<>();\n   \
    \     ArrayList<Long> l51 = ", "        long sum = 0;\n        for(long i : l)\
    \ {\n            sum += i;\n        }\n        for(int i = 0; i < l.size(); i++)\
    \ {\n            for(int j = i + 1; j < l.size(); j++) {\n                if(Math.abs(l.get(i)\
    \ - l.get(j)) < sum) {\n                    return false;\n                }\n\
    \            }\n        }\n        return true;\n", "        long sum = 0;\n \
    \       for (long i : l) {\n            sum += i;\n        }\n        long count\
    \ = 0;\n        for (long i : l) {\n            if (sum == i) {\n            \
    \    count++;\n            }\n        }\n        return count == 2;\n", "    \
    \    long sum = 0;\n        long zero = 0;\n        for (long i : l) {\n     \
    \       sum += i;\n            if (sum == zero) {\n                return true;\n\
    \            }\n            zero += i;\n        }\n        return false;\n", " \
    \       Set<Long> set = new HashSet<>();\n        for(Long i : l) {\n        \
    \    if(i == 0) return false;\n            set.add(Math.abs(i));\n        }\n\
    \        return set.size() == 2;\n", "        long sum = 0;\n        for (long\
    \ i : l) {\n            sum += i;\n        }\n        boolean result = true;\n\
    \        for (long i : l) {\n            if (i != 0) {\n                if (sum\
    \ != 0) {\n                    result = false;\n                    break;\n \
    \               }\n                sum -= i;\n            }\n        }\n     \
    \   return result;\n", "        long sum = 0;\n        for (Long i : l) {\n  \
    \          sum += i;\n        }\n        return l.size() > 1 && (l.size() == l.stream().filter(i\
    \ -> i == sum).count() == 2);\n", "        long sum = 0;\n        for (long i\
    \ : l) {\n            sum += i;\n        }\n        return l.size() > 1 && l.size()\
    \ < l.stream().mapToLong(i -> i).distinct().count() == l.size() && sum == 0;\n",
  "        long sum = 0;\n        for (Long i : l) {\n            sum += i;\n    \
    \    }\n        return l.size() > 1 && l.size() % 2 == 0 && sum == 0;\n", "  \
    \      long sum = 0;\n        for (Long i : l) {\n            sum += i;\n    \
    \    }\n        return l.size() > 1 && l.stream().distinct().count() == 2 && sum\
    \ == 0;\n", "        long sum = 0;\n        for(Long i : l) {\n            sum\
    \ += i;\n        }\n        long count = 0;\n        for(Long i : l) {\n     \
    \       count += i;\n            if(sum == 0) {\n                return false;\n\
    \            }\n            sum += i;\n        }\n        return count == 0;\n",
  "        HashSet<Long> hs = new HashSet<>();\n        for (Long i : l) {\n     \
    \       if (hs.contains(i - l.get(0))) {\n                return true;\n     \
    \       }\n            hs.add(i);\n        }\n        return false;\n", "    \
    \    Set<Long> set = new HashSet<>();\n        for (Long i : l) {\n          \
    \  if (set.contains(i)) {\n                return false;\n            }\n    \
    \        set.add(i);\n        }\n        return true;\n", "        Set<Long> set\
    \ = new HashSet<Long>();\n        for(Long i : l) {\n            if(i == 0) return\
    \ false;\n            set.add(Math.abs(i));\n        }\n        return set.size()\
    \ == 2;\n", "        long sum = 0;\n        for (Long i : l) {\n            sum\
    \ += i;\n        }\n        return l.size() == l.stream().filter(i -> i == sum).count()\
    \ == 2;\n", "        Set<Long> set = new HashSet<>();\n        for(Long i : l)\n\
    \            set.add(Math.abs(i));\n        return set.size() == 2;\n", "    \
    \    long sum = 0;\n        for (long i : l) {\n            sum += i;\n      \
    \  }\n        return l.size() > 1 && l.stream().distinct().filter(i -> i + sum\
    \ == 0).count() == 2;\n", "        Set<Long> set = new HashSet<>();\n        for\
    \ (Long i : l) {\n            set.add(i - 0);\n        }\n        return set.size()\
    \ == 2;\n", "        long sum = 0;\n        for (Long i : l) {\n            sum\
    \ += i;\n        }\n        long count = 0;\n        for (Long i : l) {\n    \
    \        count += i;\n            if (sum == count) {\n                return\
    \ true;\n            }\n        }\n        return false;\n", "        Set<Long>\
    \ set = new HashSet<>();\n        for (Long i : l) {\n            if (set.contains(i\
    \ - l.get(0))) {\n                return true;\n            }\n            set.add(i);\n\
    \        }\n        return false;\n", "        long sum = 0;\n        for (long\
    \ i : l) {\n            sum += i;\n        }\n        if (sum == 0) {\n      \
    \      return true;\n        }\n        return false;\n", "        ArrayList<Long>\
    \ pairs = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        for (long i : l) {\n            if (pairs.size() == 0) {\n          \
    \      pairs.add(i);\n            } else {\n                long j = pairs.get(pairs.size()\
    \ - 1);\n                if (i - j == 0) {\n                    zeros.add(j);\n\
    \                } else {\n                    return false;\n               \
    \ }\n            }\n        }\n        if (zeros.size() != 0) {\n            return\
    \ false;\n        }\n        return true;\n", "        long sum = 0;\n       \
    \ for (long i : l) {\n            sum += i;\n        }\n        long zero = 0;\n\
    \        for (long i : l) {\n            zero += i;\n        }\n        return\
    \ sum == zero;\n", "        ArrayList<Long> pairs = new ArrayList<>();\n     \
    \   pairs.add(l.get(0));\n        pairs.add(l.get(0));\n        for(int i = 1;\
    \ i < l.size(); i++) {\n            pairs.add(l.get(i));\n            pairs.add(l.get(i));\n\
    \        }\n        for(int i = 0; i < pairs.size(); i++) {\n            for(int\
    \ j = i + 1; j < pairs.size(); j++) {\n                if(pairs.get(i) + pairs.get(j)\
    \ == 0) {\n                    return true;\n                }\n            }\n\
    \        }\n        return false;\n", "        long sum = 0;\n        for (Long\
    \ i : l) {\n            sum += i;\n        }\n        if (sum == 0) {\n      \
    \      return false;\n        }\n        long sum2 = 0;\n        for (Long i :\
    \ l) {\n            sum2 += i;\n            if (sum2 == 0) {\n               \
    \ return true;\n            }\n        }\n        return false;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
