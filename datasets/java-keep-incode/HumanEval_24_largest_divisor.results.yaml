name: HumanEval_24_largest_divisor
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentNumber = n;\n        while (currentNumber\
    \ != 0) {\n            currentDivisor *= currentNumber;\n            currentNumber\
    \ /= 2;\n            if (currentDivisor % 2 == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqfgwibt.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                if (maxDivisor < divisor) {\n           \
    \         maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl8uicbn0.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4t6kxovh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     long currentDivisor = 1;\n        while (currentDivisor <= n) {\n      \
    \      if (n % currentDivisor == 0) {\n                largestDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bzg17ai.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkm_ygiui.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfr5r1av0.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgeikoymt.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsat9648c.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 0;\n       \
    \ long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiegf53gk.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 0;\n       \
    \ long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6we2mev2.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4g_q235t.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6d39xux7.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zjwdpip.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfub1anun.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkb9ah3of.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0vk6qv0c.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4y8byve8.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (maxDivisor < divisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvd_ky2p.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwy21b7d.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                if (divisor * i > largestDivisor)\
    \ {\n                    largestDivisor = divisor * i;\n                }\n  \
    \              divisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9btnfhx3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long currentDivisor = divisor;\n        \
    \        while (n % currentDivisor == 0) {\n                    currentDivisor++;\n\
    \                }\n                if (currentDivisor > maxDivisor) {\n     \
    \               maxDivisor = currentDivisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi581dxci.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ttpc835.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentDivisorRemainder = 1;\n      \
    \  long currentDivisorMax = 1;\n        long currentDivisorMaxRemainder = 1;\n\
    \        long currentDivisorMin = 1;\n        long currentDivisorMinRemainder\
    \ = 1;\n        long currentDivisorMinMax = 1;\n        long currentDivisorMinMaxRemainder\
    \ = 1;\n        long currentDivisorMinMin = 1;\n        long currentDivisorMinMinRemainder\
    \ = 1;\n        long currentDivisorMinMinMax = 1;\n        long currentDivisorMinMinMaxRemainder\
    \ = 1;\n        long currentDivisorMinMinMin = 1;\n        long currentDivisorMinMinMinRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMax = 1;\n        long currentDivisorMinMinMinMaxRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMin = 1;\n        long currentDivisorMinMinMinMinRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMinMax = 1;\n        long currentDivisorMinMinMinMinMaxRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMinMin = 1;\n        long currentDivisorMinMinMinMinMinRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMinMinMax = 1;\n        long currentDivisorMinMinMinMinMinMaxRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMinMinMin = 1;\n        long currentDivisorMinMinMinMinMinMinRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMinMinMinMax = 1;\n        long currentDivisorMinMinMinMinMinMinMaxRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMinMinMinMin = 1;\n        long currentDivisorMinMinMinMinMinMinMinRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMinMinMinMinMax = 1;\n        long\
    \ currentDivisorMinMinMinMinMinMinMinMaxRemainder = 1;\n        long currentDivisorMinMinMinMinMinMinMinMin\
    \ = 1;\n        long currentDivisorMinMinMinMinMinMinMinMinRemainder = 1;\n  \
    \      long currentDivisorMinMinMinMinMinMinMinMinMax = 1;\n        long currentDivisorMinMinMinMinMinMinMinMinMaxRemainder\
    \ = 1;\n        long currentDivisorMinMinMinMinMinMinMinMinMin = 1;\n        long\
    \ currentDivisorMinMinMinMinMinMinMinMinMinRemainder = 1;\n        long currentDivisorMinMinMinMinMinMinMinMinMinMax\
    \ = 1;\n        long currentDi\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_4uziyxj.java:53: error: ';' expected\n        long currentDi\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp104wegrd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwuuozpvi.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MAX_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp174dtxcr.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ickxsh1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            divisor = i;\n            while (divisor % 2 == 0) {\n      \
    \          divisor = divisor / 2;\n            }\n            if (divisor > largestDivisor)\
    \ {\n                largestDivisor = divisor;\n            }\n        }\n   \
    \     return largestDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr271kw8c.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (maxDivisor < divisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx8oq90hi.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpadn9cjap.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        for(long i = 1; i <= n; i++) {\n         \
    \   currentDivisor *= i;\n            if(currentDivisor % 2 == 0) {\n        \
    \        maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbmgcgkzj.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long currentDivisor = divisor;\n        \
    \        while (n % currentDivisor == 0) {\n                    currentDivisor++;\n\
    \                }\n                if (currentDivisor > maxDivisor) {\n     \
    \               maxDivisor = currentDivisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkewggl5p.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (maxDivisor < divisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp9cfph0m.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph8td3e1_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgl6noxqj.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (maxDivisor < divisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbz2v_jje.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long currentDivisor = 1;\n        while (currentDivisor <= n) {\n      \
    \      if (n % currentDivisor == 0) {\n                largestDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxjjlnehj.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        while (currentDivisor <= n) {\n          \
    \  if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbzf3eeb4.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8bq1rnl8.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2iusk4tr.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppbvj_ui6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00lg6f6k.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7dskauy.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpekqkkewm.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw4hf9i63.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgot9id9x.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentDivisorFactor = 1;\n        long\
    \ currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpob1lgydo.java:45: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpob1lgydo.java:45: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentNumber = n;\n        while (currentNumber\
    \ > 1) {\n            currentDivisor = 1;\n            while (currentNumber %\
    \ currentDivisor == 0) {\n                currentDivisor++;\n            }\n \
    \           if (currentDivisor > maxDivisor) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentNumber /= currentDivisor;\n        }\n    \
    \    return maxDivisor;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvc0p_mcz.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long divisor = 1;\n        long currentDivisor = 1;\n        while (divisor\
    \ <= n) {\n            currentDivisor *= divisor;\n            if (currentDivisor\
    \ > maxDivisor) {\n                maxDivisor = currentDivisor;\n            }\n\
    \            divisor++;\n        }\n        return maxDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyhxkn1x6.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentNum = 1;\n        while(currentDivisor\
    \ <= n) {\n            currentNum = currentDivisor * currentDivisor;\n       \
    \     if(currentNum > n) {\n                break;\n            }\n          \
    \  currentDivisor++;\n        }\n        return currentDivisor;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_qlnrxxu.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (maxDivisor < divisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpua3643k3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                if (maxDivisor < divisor) {\n           \
    \         maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ah2o8ep.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        while (currentDivisor <= n) {\n          \
    \  if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpit76vsij.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        while (currentDivisor <= n) {\n          \
    \  if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0py5b7e.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentNumber = n;\n        while (currentNumber\
    \ != 0) {\n            currentDivisor = currentDivisor + 1;\n            currentNumber\
    \ = currentNumber / 2;\n        }\n        if (currentDivisor > maxDivisor) {\n\
    \            maxDivisor = currentDivisor;\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0ee8rx3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MAX_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi632tja2.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpas8b5_t1.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long currentDivisor = divisor;\n        \
    \        while (n % currentDivisor == 0) {\n                    currentDivisor++;\n\
    \                }\n                if (currentDivisor > maxDivisor) {\n     \
    \               maxDivisor = currentDivisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsjryrokl.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw9f5zmy9.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8282j5f.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_mhagbxz.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long remainder = n / divisor;\n         \
    \       if (remainder > largestDivisor) {\n                    largestDivisor\
    \ = remainder;\n                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpud0clewu.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbfbuvvu5.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp911fpjp3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        for(long i = 1; i < n; i++) {\n          \
    \  currentDivisor *= i;\n            if(currentDivisor % 2 == 0) {\n         \
    \       currentDivisor /= 2;\n            }\n            if(currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n        }\n\
    \        return maxDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmsjih1g.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpltf_53le.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprijb2hhz.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp738x_59c.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp464pa7s2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentNumber = n;\n        while (currentNumber\
    \ > 1) {\n            currentDivisor = currentDivisor + 1;\n            currentNumber\
    \ = currentNumber / currentDivisor;\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0wjgx_47.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \ }\n            if (divisor > maxDivisor) {\n                maxDivisor = divisor;\n\
    \            }\n        }\n        return maxDivisor;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvwmojgx.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgflic4s5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n  \
    \      for(long i = 1; i <= n; i++) {\n            currentDivisor *= i;\n    \
    \        if(currentDivisor % 2 == 0) {\n                divisor = i;\n       \
    \     }\n            if(currentDivisor > maxDivisor) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n        }\n        return divisor;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpglmire3z.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps4h6x838.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MAX_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe1wyiam2.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (maxDivisor < divisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7l45yxj.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentDivisorFactor = 1;\n        long\
    \ currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzweksezb.java:45: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpzweksezb.java:45: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long currentDivisor = divisor;\n        \
    \        while (n % currentDivisor == 0) {\n                    currentDivisor++;\n\
    \                }\n                if (currentDivisor > maxDivisor) {\n     \
    \               maxDivisor = currentDivisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjk3xyyrc.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp05kekdwi.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long currentDivisor = 1;\n        long currentNumber = n;\n        while\
    \ (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n     \
    \       currentDivisor /= currentNumber;\n            if (currentDivisor > largestDivisor)\
    \ {\n                largestDivisor = currentDivisor;\n            }\n       \
    \     currentNumber /= 2;\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphk9ymfbb.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ee19qu0.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1gx9qx7.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentDivisorFactor = 1;\n        long\
    \ currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1nhq5p39.java:45: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp1nhq5p39.java:45: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf01ga21s.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n                break;\n            }\n        }\n\
    \        return largestDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq1k6_6ru.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 0;\n       \
    \ long currentDivisor = 1;\n        long currentNum = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                currentNum++;\n\
    \                if (currentNum > maxDivisor) {\n                    maxDivisor\
    \ = currentNum;\n                }\n            }\n            currentDivisor++;\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpng9w75i7.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 0;\n       \
    \ for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhl264oj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_b2878b.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8s5seyfa.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48t6b0pj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcf5fil6f.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4qmnso2.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9rup45yj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjl1sock8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpvrb6u7.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long currentDivisor = 1;\n        while (currentDivisor <= n) {\n   \
    \         if (n % currentDivisor == 0) {\n                maxDivisor = Math.max(maxDivisor,\
    \ currentDivisor);\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvav3nosj.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long divisorDivisor = divisor / n;\n    \
    \            if (divisorDivisor > largestDivisor) {\n                    largestDivisor\
    \ = divisorDivisor;\n                }\n            }\n        }\n        return\
    \ largestDivisor;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyof3sbon.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long divisor = 1;\n        while (divisor < n) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                maxDivisor = Math.max(maxDivisor, divisor);\n\
    \            }\n        }\n        return maxDivisor;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dl3cgz0.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        long divisor = 1;\n        while (divisor <= n) {\n            if (n\
    \ % divisor == 0) {\n                largestDivisor = divisor;\n            }\n\
    \            divisor++;\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwpb_lj07.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long currentDivisor = 1;\n        long currentDivisorRemainder = 0;\n  \
    \      long currentDivisorRemainder2 = 0;\n        long currentDivisorRemainder3\
    \ = 0;\n        long currentDivisorRemainder4 = 0;\n        long currentDivisorRemainder5\
    \ = 0;\n        long currentDivisorRemainder6 = 0;\n        long currentDivisorRemainder7\
    \ = 0;\n        long currentDivisorRemainder8 = 0;\n        long currentDivisorRemainder9\
    \ = 0;\n        long currentDivisorRemainder10 = 0;\n        long currentDivisorRemainder11\
    \ = 0;\n        long currentDivisorRemainder12 = 0;\n        long currentDivisorRemainder13\
    \ = 0;\n        long currentDivisorRemainder14 = 0;\n        long currentDivisorRemainder15\
    \ = 0;\n        long currentDivisorRemainder16 = 0;\n        long currentDivisorRemainder17\
    \ = 0;\n        long currentDivisorRemainder18 = 0;\n        long currentDivisorRemainder19\
    \ = 0;\n        long currentDivisorRemainder20 = 0;\n        long currentDivisorRemainder21\
    \ = 0;\n        long currentDivisorRemainder22 = 0;\n        long currentDivisorRemainder23\
    \ = 0;\n        long currentDivisorRemainder24 = 0;\n        long currentDivisorRemainder25\
    \ = 0;\n        long currentDivisorRemainder26 = 0;\n        long currentDivisorRemainder27\
    \ = 0;\n        long currentDivisorRemainder28 = 0;\n        long currentDivisorRemainder29\
    \ = 0;\n        long currentDivisorRemainder30 = 0;\n        long currentDivisorRemainder31\
    \ = 0;\n        long currentDivisorRemainder32 = 0;\n        long currentDivisorRemainder33\
    \ = 0;\n        long currentDivisorRemainder34 = 0;\n        long currentDivisorRemainder35\
    \ = 0;\n        long currentDivisorRemainder36 = 0;\n        long currentDivisorRemainder37\
    \ = 0;\n        long currentDivisorRemainder38 = 0;\n        long currentDivisorRemainder39\
    \ = 0;\n        long currentDivisorRemainder40 = 0;\n        long currentDivisorRemainder41\
    \ = 0;\n        long currentDivisorRemainder42 = 0;\n        long currentDivisorRemainder43\
    \ = 0;\n        long currentDivisorRemainder44 = 0;\n        long currentDivisorRemainder45\
    \ = 0;\n        long currentDivisorRemainder46 = 0;\n        long currentDivisorRemainder47\
    \ = 0;\n        long currentDivisorRemainder48 = 0;\n        long currentDivisorRemainder49\
    \ = 0;\n        long currentDivisorRemainder50 = 0;\n        long \n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9r8piqcv.java:65: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp9r8piqcv.java:65: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = 1;\n        while (divisor <= n) {\n            if (n\
    \ % divisor == 0) {\n                maxDivisor = Math.max(maxDivisor, divisor);\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc6k_enjv.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long currentDivisor = 1;\n        long currentNumber = n;\n        while\
    \ (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n     \
    \       currentNumber /= 2;\n            if (currentDivisor > maxDivisor) {\n\
    \                maxDivisor = currentDivisor;\n            }\n        }\n    \
    \    return maxDivisor;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3nk4ihcr.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentDivisorRemainder = 0;\n      \
    \  long currentDivisorMaxRemainder = 0;\n        long currentDivisorMaxRemainder2\
    \ = 0;\n        long currentDivisorMaxRemainder3 = 0;\n        long currentDivisorMaxRemainder4\
    \ = 0;\n        long currentDivisorMaxRemainder5 = 0;\n        long currentDivisorMaxRemainder6\
    \ = 0;\n        long currentDivisorMaxRemainder7 = 0;\n        long currentDivisorMaxRemainder8\
    \ = 0;\n        long currentDivisorMaxRemainder9 = 0;\n        long currentDivisorMaxRemainder10\
    \ = 0;\n        long currentDivisorMaxRemainder11 = 0;\n        long currentDivisorMaxRemainder12\
    \ = 0;\n        long currentDivisorMaxRemainder13 = 0;\n        long currentDivisorMaxRemainder14\
    \ = 0;\n        long currentDivisorMaxRemainder15 = 0;\n        long currentDivisorMaxRemainder16\
    \ = 0;\n        long currentDivisorMaxRemainder17 = 0;\n        long currentDivisorMaxRemainder18\
    \ = 0;\n        long currentDivisorMaxRemainder19 = 0;\n        long currentDivisorMaxRemainder20\
    \ = 0;\n        long currentDivisorMaxRemainder21 = 0;\n        long currentDivisorMaxRemainder22\
    \ = 0;\n        long currentDivisorMaxRemainder23 = 0;\n        long currentDivisorMaxRemainder24\
    \ = 0;\n        long currentDivisorMaxRemainder25 = 0;\n        long currentDivisorMaxRemainder26\
    \ = 0;\n        long currentDivisorMaxRemainder27 = 0;\n        long currentDivisorMaxRemainder28\
    \ = 0;\n        long currentDivisorMaxRemainder29 = 0;\n        long currentDivisorMaxRemainder30\
    \ = 0;\n        long currentDivisorMaxRemainder31 = 0;\n        long currentDivisorMaxRemainder32\
    \ = 0;\n        long currentDivisorMaxRemainder33 = 0;\n        long currentDivisorMaxRemainder34\
    \ = 0;\n        long currentDivisorMaxRemainder35 = 0;\n        long currentDivisorMaxRemainder36\
    \ = 0;\n        long currentDivisorMaxRemainder37 = 0;\n        long currentDivisorMaxRemainder38\
    \ = 0;\n        long currentDivisorMaxRemainder39 = 0;\n        long currentDivisorMaxRemainder40\
    \ = 0;\n        long currentDivisorMaxRemainder41 = 0;\n        long currentDivisorMaxRemainder42\
    \ = 0;\n        long currentDivisorMaxRemainder43 = 0;\n        long currentDivisorMaxRemainder44\
    \ = 0;\n        long currentDivisorMaxRemainder45 = 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpglzmi79x.java:61: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 0;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1ivxc25.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9mtitir.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MAX_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03oftkqg.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long currentDivisor = 1;\n        long currentNumber = n;\n        while\
    \ (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n     \
    \       currentNumber = currentDivisor / n;\n            largestDivisor = Math.max(largestDivisor,\
    \ currentDivisor);\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt7w3n1c.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 0;\n       \
    \ for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    long divisor = i;\n                while (n % divisor == 0) {\n         \
    \           divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprl3_s8e5.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5z_v_gj5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjdrp46x4.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpalgzta9b.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjlm4tad8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0d8a4fft.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long currentDivisor = divisor;\n        \
    \        while (currentDivisor <= n / divisor) {\n                    if (n %\
    \ currentDivisor == 0) {\n                        maxDivisor = divisor;\n    \
    \                    break;\n                    }\n                    currentDivisor++;\n\
    \                }\n            }\n        }\n        return maxDivisor;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpujrcx5ad.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long maxDivisorValue = 1;\n        long currentDivisor = 1;\n        long currentDivisorValue\
    \ = 1;\n        long currentDivisorValue2 = 1;\n        long currentDivisorValue3\
    \ = 1;\n        long currentDivisorValue4 = 1;\n        long currentDivisorValue5\
    \ = 1;\n        long currentDivisorValue6 = 1;\n        long currentDivisorValue7\
    \ = 1;\n        long currentDivisorValue8 = 1;\n        long currentDivisorValue9\
    \ = 1;\n        long currentDivisorValue10 = 1;\n        long currentDivisorValue11\
    \ = 1;\n        long currentDivisorValue12 = 1;\n        long currentDivisorValue13\
    \ = 1;\n        long currentDivisorValue14 = 1;\n        long currentDivisorValue15\
    \ = 1;\n        long currentDivisorValue16 = 1;\n        long currentDivisorValue17\
    \ = 1;\n        long currentDivisorValue18 = 1;\n        long currentDivisorValue19\
    \ = 1;\n        long currentDivisorValue20 = 1;\n        long currentDivisorValue21\
    \ = 1;\n        long currentDivisorValue22 = 1;\n        long currentDivisorValue23\
    \ = 1;\n        long currentDivisorValue24 = 1;\n        long currentDivisorValue25\
    \ = 1;\n        long currentDivisorValue26 = 1;\n        long currentDivisorValue27\
    \ = 1;\n        long currentDivisorValue28 = 1;\n        long currentDivisorValue29\
    \ = 1;\n        long currentDivisorValue30 = 1;\n        long currentDivisorValue31\
    \ = 1;\n        long currentDivisorValue32 = 1;\n        long currentDivisorValue33\
    \ = 1;\n        long currentDivisorValue34 = 1;\n        long currentDivisorValue35\
    \ = 1;\n        long currentDivisorValue36 = 1;\n        long currentDivisorValue37\
    \ = 1;\n        long currentDivisorValue38 = 1;\n        long currentDivisorValue39\
    \ = 1;\n        long currentDivisorValue40 = 1;\n        long currentDivisorValue41\
    \ = 1;\n        long currentDivisorValue42 = 1;\n        long currentDivisorValue43\
    \ = 1;\n        long currentDivisorValue44 = 1;\n        long currentDivisorValue45\
    \ = 1;\n        long currentDivisorValue46 = 1;\n        long currentDivisorValue47\
    \ = 1;\n        long currentDivisorValue48 = 1;\n        long currentDivisorValue49\
    \ = 1;\n        long currentDivisorValue50 = 1;\n        long currentDivisorValue51\
    \ = 1;\n        long currentDivisorValue52 = 1;\n        long currentDivisorValue53\
    \ = 1;\n        long currentDivisorValue54 = 1;\n        long current\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfp450a93.java:70: error: ';' expected\n        long current\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long currentDivisor = divisor;\n        \
    \        while (n % currentDivisor == 0) {\n                    currentDivisor++;\n\
    \                }\n                if (currentDivisor > maxDivisor) {\n     \
    \               maxDivisor = currentDivisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvqw3sy4.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplp1mspn6.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentNumber = n;\n        while (currentNumber\
    \ != 0) {\n            currentDivisor = currentDivisor / currentNumber;\n    \
    \        if (currentDivisor % 2 == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentNumber = currentNumber / 2;\n        }\n  \
    \      return maxDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0mo5kuhb.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp40hm3mkz.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfhkn8o3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long currentDivisor = 1;\n        while (currentDivisor <= n) {\n      \
    \      if (n % currentDivisor == 0) {\n                largestDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw94_nwyc.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        while (currentDivisor <= n) {\n          \
    \  if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb4rnu3p.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long currentDivisor = 1;\n        while (currentDivisor <= n) {\n   \
    \         if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa2_msqxe.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long currentDivisor = divisor;\n        \
    \        while (n % currentDivisor == 0) {\n                    currentDivisor++;\n\
    \                }\n                if (currentDivisor > maxDivisor) {\n     \
    \               maxDivisor = currentDivisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpazy6_ko4.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfp7uzvte.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long currentDivisor = 1;\n        while (currentDivisor <= n) {\n      \
    \      if (n % currentDivisor == 0) {\n                largestDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvynw3h6y.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc15hwn4z.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         if (largestDivisor == 0 || largestDivisor > i) {\n                 \
    \   largestDivisor = i;\n                }\n            }\n        }\n       \
    \ return largestDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzrdr7k1v.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentDivisorFactor = 1;\n        long\
    \ currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpff50qpo8.java:45: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpff50qpo8.java:45: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        while (currentDivisor <= n) {\n          \
    \  if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbn9i7imc.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                if (maxDivisor < divisor) {\n           \
    \         maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphbcgdj6d.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long maxDividend = 1;\n        long divisor = 1;\n        long dividend = 1;\n\
    \        while(divisor <= n) {\n            dividend = divisor * 2;\n        \
    \    divisor = dividend / 2;\n            if(dividend % 2 == 0) {\n          \
    \      maxDivisor = dividend;\n            }\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentDivisorFactor = 1;\n        long\
    \ currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9n2q0eb2.java:45: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp9n2q0eb2.java:45: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyv899d4d.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprluuji16.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ydgi1lw.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvukdlcs.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp51wyipjh.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     long currentDivisor = 1;\n        long currentDivisorRemainder = 0;\n  \
    \      long currentDivisorDivisor = 1;\n        long currentDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisor = 1;\n        long currentDivisorDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisorDivisor = 1;\n        long currentDivisorDivisorDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisorDivisorDivisor = 1;\n       \
    \ long currentDivisorDivisorDivisorDivisorRemainder = 0;\n        long currentDivisorDivisorDivisorDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorDivisorRemainder = 0;\n        long\
    \ currentDivisorDivisorDivisorDivisorDivisor = 1;\n        long currentDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisorDivisor = 1;\n        long currentDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuzh3whi7.java:23: error: variable currentDivisorDivisorDivisorDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisorDivisorDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:24: error: variable currentDivisorDivisorDivisorDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisorDivisorDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:25: error: variable currentDivisorDivisorDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisorDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:26: error: variable currentDivisorDivisorDivisorDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisorDivisorDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:27: error: variable currentDivisorDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:28: error: variable currentDivisorDivisorDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisorDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:29: error: variable currentDivisorDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:30: error: variable currentDivisorDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:31: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:32: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:33: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:34: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:35: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:36: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:37: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:38: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:39: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:40: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:41: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:42: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:43: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:44: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:45: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:46: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:47: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:48: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:49: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:50: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:51: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:52: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:53: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:54: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:55: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:56: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:57: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:58: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:59: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:60: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:61: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n/tmp/tmpuzh3whi7.java:62: error: variable currentDivisorDivisor\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorDivisor\
    \ = 1;\n             ^\n/tmp/tmpuzh3whi7.java:63: error: variable currentDivisorRemainder\
    \ is already defined in method largestDivisor(long)\n        long currentDivisorRemainder\
    \ = 0;\n             ^\n41 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 0;\n       \
    \ long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvodl5anl.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_z9jhiod.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ks0yo6v.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc8yxva16.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentDivisorFactor = 1;\n        long\
    \ currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6d9j5y9z.java:45: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp6d9j5y9z.java:45: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00t3z2e9.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentNumber = n;\n        while (currentNumber\
    \ != 0) {\n            currentDivisor = currentDivisor + 1;\n            currentNumber\
    \ = currentNumber / 2;\n        }\n        while (currentDivisor <= n) {\n   \
    \         currentDivisor = currentDivisor + 1;\n            currentNumber = currentNumber\
    \ / 2;\n        }\n        return currentDivisor;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv61512je.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpylm3obo9.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        long divisor = i;\n                while (divisor < n / i) {\n      \
    \              divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1_d7dts.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0enlq38v.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        long remainder = 0;\n        long currentDivisor\
    \ = 1;\n        long currentRemainder = 0;\n        long currentNumber = 0;\n\
    \        long currentNumber2 = 0;\n        long currentNumber3 = 0;\n        long\
    \ currentNumber4 = 0;\n        long currentNumber5 = 0;\n        long currentNumber6\
    \ = 0;\n        long currentNumber7 = 0;\n        long currentNumber8 = 0;\n \
    \       long currentNumber9 = 0;\n        long currentNumber10 = 0;\n        long\
    \ currentNumber11 = 0;\n        long currentNumber12 = 0;\n        long currentNumber13\
    \ = 0;\n        long currentNumber14 = 0;\n        long currentNumber15 = 0;\n\
    \        long currentNumber16 = 0;\n        long currentNumber17 = 0;\n      \
    \  long currentNumber18 = 0;\n        long currentNumber19 = 0;\n        long\
    \ currentNumber20 = 0;\n        long currentNumber21 = 0;\n        long currentNumber22\
    \ = 0;\n        long currentNumber23 = 0;\n        long currentNumber24 = 0;\n\
    \        long currentNumber25 = 0;\n        long currentNumber26 = 0;\n      \
    \  long currentNumber27 = 0;\n        long currentNumber28 = 0;\n        long\
    \ currentNumber29 = 0;\n        long currentNumber30 = 0;\n        long currentNumber31\
    \ = 0;\n        long currentNumber32 = 0;\n        long currentNumber33 = 0;\n\
    \        long currentNumber34 = 0;\n        long currentNumber35 = 0;\n      \
    \  long currentNumber36 = 0;\n        long currentNumber37 = 0;\n        long\
    \ currentNumber38 = 0;\n        long currentNumber39 = 0;\n        long currentNumber40\
    \ = 0;\n        long currentNumber41 = 0;\n        long currentNumber42 = 0;\n\
    \        long currentNumber43 = 0;\n        long currentNumber44 = 0;\n      \
    \  long currentNumber45 = 0;\n        long currentNumber46 = 0;\n        long\
    \ currentNumber47 = 0;\n        long currentNumber48 = 0;\n        long currentNumber49\
    \ = 0;\n        long currentNumber50 = 0;\n        long currentNumber51 = 0;\n\
    \        long currentNumber52 = 0;\n        long currentNumber53 = 0;\n      \
    \  long currentNumber54 = 0;\n        long currentNumber55 = 0;\n        long\
    \ currentNumber56 = 0;\n        long currentNumber57 = 0;\n        long currentNumber58\
    \ = 0;\n        long currentNumber59 = 0;\n        long currentNumber60 = 0;\n\
    \        long currentNumber61 = 0;\n        long currentNumber62 = 0;\n      \
    \  long currentNumber63 = 0;\n        long currentNumber64 = 0;\n        long\
    \ currentNumber65 = 0;\n        long currentNumber66 = 0;\n        long currentNumber67\
    \ = 0;\n        long currentNumber68 = 0;\n        long currentNumber69 = 0;\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd037o9nv.java:88: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm226adi4.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2snm6hvk.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbkp8cc2a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkn8m839j.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqht068mo.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentNumber = n;\n        while (currentNumber\
    \ != 0) {\n            currentDivisor = currentDivisor / currentNumber;\n    \
    \        if (currentDivisor % 2 == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentNumber = currentNumber / 2;\n        }\n  \
    \      return maxDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzhz449u2.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ovhqah9.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long divisor = 1;\n        while (divisor < n) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor < n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n / i) {\n   \
    \                 divisor++;\n                }\n                if (divisor >\
    \ maxDivisor) {\n                    maxDivisor = divisor;\n                }\n\
    \            }\n        }\n        return maxDivisor;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzu70rkj.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyzaehod.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdga9men5.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddg_gx0t.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiuzv3a_7.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                if (divisor > i) {\n     \
    \               divisor = i;\n                }\n                if (maxDivisor\
    \ < divisor) {\n                    maxDivisor = divisor;\n                }\n\
    \            }\n        }\n        return maxDivisor;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwv7gjoh4.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnnqyyutc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 0;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     long divisor = i;\n                while (n % divisor == 0) {\n        \
    \            divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy194vt2o.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentDivisorFactor = 1;\n        long\
    \ currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2tqzs0wz.java:45: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp2tqzs0wz.java:45: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpozjmxk1s.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1d0rknsp.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdls5eh83.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkqaztrps.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiormocbb.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6fi19fog.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = 1;\n        while (divisor <= n) {\n            if (n\
    \ % divisor == 0) {\n                maxDivisor = Math.max(maxDivisor, divisor);\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi1akhuzq.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp536_wraj.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long currentDivisor = 1;\n        while (currentDivisor <= n) {\n      \
    \      if (n % currentDivisor == 0) {\n                largestDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3svi64zq.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     long divisor = 1;\n        while (divisor < n) {\n            if (n % divisor\
    \ == 0) {\n                largestDivisor = divisor;\n            }\n        \
    \    divisor++;\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptmr_hn57.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsppay5ip.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0p0f2pm6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ long currentDivisor = 1;\n        long currentNumber = n;\n        while(currentNumber\
    \ != 0) {\n            currentDivisor = currentDivisor * currentNumber;\n    \
    \        currentNumber = currentNumber / 2;\n            if(currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n        }\n\
    \        return maxDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyv1k8hkq.java:27)\n"
  exit_code: 1
  status: Exception
