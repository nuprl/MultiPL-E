name: HumanEval_62_derivative
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long xpow = 0;\n        long ypow = 0;\n        long zpow = 0;\n\
    \        long sumpow = 0;\n        long xpow2 = 0;\n        long ypow2 = 0;\n\
    \        long zpow2 = 0;\n        long sumpow2 = 0;\n        long xpow3 = 0;\n\
    \        long ypow3 = 0;\n        long zpow3 = 0;\n        long sumpow3 = 0;\n\
    \        long xpow4 = 0;\n        long ypow4 = 0;\n        long zpow4 = 0;\n \
    \       long sumpow4 = 0;\n        long xpow5 = 0;\n        long ypow5 = 0;\n\
    \        long zpow5 = 0;\n        long sumpow5 = 0;\n        long xpow6 = 0;\n\
    \        long ypow6 = 0;\n        long zpow6 = 0;\n        long sumpow6 = 0;\n\
    \        long xpow7 = 0;\n        long ypow7 = 0;\n        long zpow7 = 0;\n \
    \       long sumpow7 = 0;\n        long xpow8 = 0;\n        long ypow8 = 0;\n\
    \        long zpow8 = 0;\n        long sumpow8 = 0;\n        long xpow9 = 0;\n\
    \        long ypow9 = 0;\n        long zpow9 = 0;\n        long sumpow9 = 0;\n\
    \        long xpow10 = 0;\n        long ypow10 = 0;\n        long zpow10 = 0;\n\
    \        long sumpow10 = 0;\n        long xpow11 = 0;\n        long ypow11 = 0;\n\
    \        long zpow11 = 0;\n        long sumpow11 = 0;\n        long xpow12 = 0;\n\
    \        long ypow12 = 0;\n        long zpow12 = 0;\n        long sumpow12 = 0;\n\
    \        long xpow13 = 0;\n        long ypow13 = 0;\n        long zpow13 = 0;\n\
    \        long sumpow13 = 0;\n        long xpow14 = 0;\n        long ypow14 = 0;\n\
    \        long zpow14 = 0;\n        long sumpow14 = 0;\n        long xpow15 = 0;\n\
    \        long ypow15 = 0;\n        long zpow15 = 0;\n        long sumpow15 = 0;\n\
    \        long xpow16 = 0;\n        long ypow16 = 0;\n        long zpow16 = 0;\n\
    \        long sumpow16 = 0;\n        long xpow17 = 0;\n        long ypow17 = 0;\n\
    \        long zpow17 = 0;\n        long sumpow17 = 0;\n        long xpow18 = 0;\n\
    \        long ypow18 = 0;\n        long zpow18 = 0;\n        long sumpow18 = 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn5op4sut.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long sum = 0;\n        long pow = 1;\n        for(int\
    \ i = 1; i < xs.size(); i++) {\n            sum += pow * xs.get(i);\n        \
    \    pow *= xs.get(i);\n        }\n        derivative.add(sum);\n        for(int\
    \ i = xs.size() - 1; i >= 0; i--) {\n            pow *= xs.get(i);\n         \
    \   derivative.add(pow);\n        }\n        return derivative;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuezvv7an.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long sum = 0;\n        for\
    \ (Long coef : xs) {\n            sum += coef * x;\n            x *= y;\n    \
    \        derivative.add(sum);\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ok0ywxo.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long coef : xs) {\n            derivative.add(coef\
    \ * x);\n            x /= xs.get(0);\n        }\n        return derivative;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgavnd82l.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (long y : xs) {\n            derivative .add(x\
    \ * y);\n            x += 1;\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbisffrpc.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpy_0h8j37.java:20)\n\tat Problem.main(tmpy_0h8j37.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for(int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp_g47mzm8.java:20)\n\tat Problem.main(tmp_g47mzm8.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89uao5vl.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (Long coef : xs) {\n\
    \            sum += coef * x;\n            derivative.add(sum);\n            x\
    \ *= x;\n        }\n        return derivative;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa7b2g56x.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpir1t54e_.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long y : xs) {\n            derivative .add(x\
    \ * y);\n            x ++;\n        }\n        return derivative;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplj5k6frv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long d = 0;\n        long e\
    \ = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n      \
    \  long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n\
    \        long m = 0;\n        long n = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long d = 0;\n        long e\
    \ = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n      \
    \  long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n\
    \        long m = 0;\n        long n = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long d = 0;\n        long e\
    \ = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n      \
    \  long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n\
    \        long m = 0;\n        long n = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long d = 0;\n        long e\
    \ = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n      \
    \  long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n\
    \        long m = 0;\n        long n = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long d = 0;\n        long e\
    \ = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n      \
    \  long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n\
    \        long m = 0;\n        long n = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7y8wc2x4.java:40: error: variable x is already defined in method\
    \ derivative(ArrayList<Long>)\n        long x = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:41:\
    \ error: variable y is already defined in method derivative(ArrayList<Long>)\n\
    \        long y = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:42: error: variable\
    \ d is already defined in method derivative(ArrayList<Long>)\n        long d =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:43: error: variable e is already defined\
    \ in method derivative(ArrayList<Long>)\n        long e = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:44: error: variable f is already defined in method derivative(ArrayList<Long>)\n\
    \        long f = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:45: error: variable\
    \ g is already defined in method derivative(ArrayList<Long>)\n        long g =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:46: error: variable h is already defined\
    \ in method derivative(ArrayList<Long>)\n        long h = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:47: error: variable i is already defined in method derivative(ArrayList<Long>)\n\
    \        long i = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:48: error: variable\
    \ j is already defined in method derivative(ArrayList<Long>)\n        long j =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:49: error: variable k is already defined\
    \ in method derivative(ArrayList<Long>)\n        long k = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:50: error: variable l is already defined in method derivative(ArrayList<Long>)\n\
    \        long l = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:51: error: variable\
    \ m is already defined in method derivative(ArrayList<Long>)\n        long m =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:52: error: variable n is already defined\
    \ in method derivative(ArrayList<Long>)\n        long n = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:53: error: variable o is already defined in method derivative(ArrayList<Long>)\n\
    \        long o = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:54: error: variable\
    \ p is already defined in method derivative(ArrayList<Long>)\n        long p =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:55: error: variable q is already defined\
    \ in method derivative(ArrayList<Long>)\n        long q = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:56: error: variable r is already defined in method derivative(ArrayList<Long>)\n\
    \        long r = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:57: error: variable\
    \ s is already defined in method derivative(ArrayList<Long>)\n        long s =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:58: error: variable t is already defined\
    \ in method derivative(ArrayList<Long>)\n        long t = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:59: error: variable u is already defined in method derivative(ArrayList<Long>)\n\
    \        long u = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:60: error: variable\
    \ v is already defined in method derivative(ArrayList<Long>)\n        long v =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:61: error: variable w is already defined\
    \ in method derivative(ArrayList<Long>)\n        long w = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:62: error: variable x is already defined in method derivative(ArrayList<Long>)\n\
    \        long x = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:63: error: variable\
    \ y is already defined in method derivative(ArrayList<Long>)\n        long y =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:64: error: variable d is already defined\
    \ in method derivative(ArrayList<Long>)\n        long d = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:65: error: variable e is already defined in method derivative(ArrayList<Long>)\n\
    \        long e = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:66: error: variable\
    \ f is already defined in method derivative(ArrayList<Long>)\n        long f =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:67: error: variable g is already defined\
    \ in method derivative(ArrayList<Long>)\n        long g = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:68: error: variable h is already defined in method derivative(ArrayList<Long>)\n\
    \        long h = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:69: error: variable\
    \ i is already defined in method derivative(ArrayList<Long>)\n        long i =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:70: error: variable j is already defined\
    \ in method derivative(ArrayList<Long>)\n        long j = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:71: error: variable k is already defined in method derivative(ArrayList<Long>)\n\
    \        long k = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:72: error: variable\
    \ l is already defined in method derivative(ArrayList<Long>)\n        long l =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:73: error: variable m is already defined\
    \ in method derivative(ArrayList<Long>)\n        long m = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:74: error: variable n is already defined in method derivative(ArrayList<Long>)\n\
    \        long n = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:75: error: variable\
    \ o is already defined in method derivative(ArrayList<Long>)\n        long o =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:76: error: variable p is already defined\
    \ in method derivative(ArrayList<Long>)\n        long p = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:77: error: variable q is already defined in method derivative(ArrayList<Long>)\n\
    \        long q = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:78: error: variable\
    \ r is already defined in method derivative(ArrayList<Long>)\n        long r =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:79: error: variable s is already defined\
    \ in method derivative(ArrayList<Long>)\n        long s = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:80: error: variable t is already defined in method derivative(ArrayList<Long>)\n\
    \        long t = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:81: error: variable\
    \ u is already defined in method derivative(ArrayList<Long>)\n        long u =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:82: error: variable v is already defined\
    \ in method derivative(ArrayList<Long>)\n        long v = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:83: error: variable w is already defined in method derivative(ArrayList<Long>)\n\
    \        long w = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:84: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:85: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:86: error: variable d is already defined in method derivative(ArrayList<Long>)\n\
    \        long d = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:87: error: variable\
    \ e is already defined in method derivative(ArrayList<Long>)\n        long e =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:88: error: variable f is already defined\
    \ in method derivative(ArrayList<Long>)\n        long f = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:89: error: variable g is already defined in method derivative(ArrayList<Long>)\n\
    \        long g = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:90: error: variable\
    \ h is already defined in method derivative(ArrayList<Long>)\n        long h =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:91: error: variable i is already defined\
    \ in method derivative(ArrayList<Long>)\n        long i = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:92: error: variable j is already defined in method derivative(ArrayList<Long>)\n\
    \        long j = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:93: error: variable\
    \ k is already defined in method derivative(ArrayList<Long>)\n        long k =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:94: error: variable l is already defined\
    \ in method derivative(ArrayList<Long>)\n        long l = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:95: error: variable m is already defined in method derivative(ArrayList<Long>)\n\
    \        long m = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:96: error: variable\
    \ n is already defined in method derivative(ArrayList<Long>)\n        long n =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:97: error: variable o is already defined\
    \ in method derivative(ArrayList<Long>)\n        long o = 0;\n             ^\n\
    /tmp/tmp7y8wc2x4.java:98: error: variable p is already defined in method derivative(ArrayList<Long>)\n\
    \        long p = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:99: error: variable\
    \ q is already defined in method derivative(ArrayList<Long>)\n        long q =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:100: error: variable r is already\
    \ defined in method derivative(ArrayList<Long>)\n        long r = 0;\n       \
    \      ^\n/tmp/tmp7y8wc2x4.java:101: error: variable s is already defined in method\
    \ derivative(ArrayList<Long>)\n        long s = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:102:\
    \ error: variable t is already defined in method derivative(ArrayList<Long>)\n\
    \        long t = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:103: error: variable\
    \ u is already defined in method derivative(ArrayList<Long>)\n        long u =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:104: error: variable v is already\
    \ defined in method derivative(ArrayList<Long>)\n        long v = 0;\n       \
    \      ^\n/tmp/tmp7y8wc2x4.java:105: error: variable w is already defined in method\
    \ derivative(ArrayList<Long>)\n        long w = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:106:\
    \ error: variable x is already defined in method derivative(ArrayList<Long>)\n\
    \        long x = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:107: error: variable\
    \ y is already defined in method derivative(ArrayList<Long>)\n        long y =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:108: error: variable d is already\
    \ defined in method derivative(ArrayList<Long>)\n        long d = 0;\n       \
    \      ^\n/tmp/tmp7y8wc2x4.java:109: error: variable e is already defined in method\
    \ derivative(ArrayList<Long>)\n        long e = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:110:\
    \ error: variable f is already defined in method derivative(ArrayList<Long>)\n\
    \        long f = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:111: error: variable\
    \ g is already defined in method derivative(ArrayList<Long>)\n        long g =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:112: error: variable h is already\
    \ defined in method derivative(ArrayList<Long>)\n        long h = 0;\n       \
    \      ^\n/tmp/tmp7y8wc2x4.java:113: error: variable i is already defined in method\
    \ derivative(ArrayList<Long>)\n        long i = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:114:\
    \ error: variable j is already defined in method derivative(ArrayList<Long>)\n\
    \        long j = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:115: error: variable\
    \ k is already defined in method derivative(ArrayList<Long>)\n        long k =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:116: error: variable l is already\
    \ defined in method derivative(ArrayList<Long>)\n        long l = 0;\n       \
    \      ^\n/tmp/tmp7y8wc2x4.java:117: error: variable m is already defined in method\
    \ derivative(ArrayList<Long>)\n        long m = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:118:\
    \ error: variable n is already defined in method derivative(ArrayList<Long>)\n\
    \        long n = 0;\n             ^\n/tmp/tmp7y8wc2x4.java:119: error: variable\
    \ o is already defined in method derivative(ArrayList<Long>)\n        long o =\
    \ 0;\n             ^\n/tmp/tmp7y8wc2x4.java:120: error: variable p is already\
    \ defined in method derivative(ArrayList<Long>)\n        long p = 0;\n       \
    \      ^\n81 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp79p7fcci.java:20)\n\tat Problem.main(tmp79p7fcci.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaqkl5smn.java:83: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpaqkl5smn.java:83: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long x : xs) {\n            sum += x;\n \
    \       }\n        derivative.add(1L);\n        for (long x : xs) {\n        \
    \    derivative.add(sum);\n            sum -= x;\n        }\n        return derivative;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnkk8almq.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long xx\
    \ = 1;\n        long yy = 1;\n        long zz = 1;\n        long xy = 1;\n   \
    \     long yz = 1;\n        long zzz = 1;\n        long xyy = 1;\n        long\
    \ yzz = 1;\n        long zzzy = 1;\n        long xyz = 1;\n        long yzzz =\
    \ 1;\n        long xyzy = 1;\n        long yzzzy = 1;\n        long xyzz = 1;\n\
    \        long yzzzyy = 1;\n        long yzzzyz = 1;\n        long yzzzyzz = 1;\n\
    \        long yzzzyzzz = 1;\n        long yzzzyzzzy = 1;\n        long yzzzyzzzyz\
    \ = 1;\n        long yzzzyzzzyzz = 1;\n        long yzzzyzzzyzzz = 1;\n      \
    \  long yzzzyzzzyzzzyz = 1;\n        long yzzzyzzzyzzzyzz = 1;\n        long yzzzyzzzyzzzyzzz\
    \ = 1;\n        long yzzzyzzzyzzzyzzzyz = 1;\n        long yzzzyzzzyzzzyzzzyzz\
    \ = 1;\n        long yzzzyzzzyzzzyzzzyzzz = 1;\n        long yzzzyzzzyzzzyzzzyzzzyz\
    \ = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzz = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzz\
    \ = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyz = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzz\
    \ = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzzz = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzzzyz\
    \ = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzzzyzz = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzzzyzzz\
    \ = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzzzyzzzyz = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzzzyzzzyzz\
    \ = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzzzyzzzyzzz = 1;\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzz\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpynj0dasx.java:61: error: ';' expected\n        long yzzzyzzzyzzzyzzzyzzzyzzzyzz\n\
    \                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcnl9brk5.java:83: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpcnl9brk5.java:83: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long sum = 0;\n        for\
    \ (Long coef : xs) {\n            sum += coef;\n        }\n        for (Long coef\
    \ : xs) {\n            derivative.add(coef * x / (sum * sum));\n            x\
    \ += 1;\n        }\n        return derivative;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw9um724l.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long sum = 0;\n        long\
    \ pow = 1;\n        for(int i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n\
    \            pow *= xs.get(i);\n        }\n        for(int i = 0; i < xs.size();\
    \ i++) {\n            derivative.add(pow * (sum - xs.get(i)));\n        }\n  \
    \      return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpql8_vwyr.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long d = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdp0trh36.java:102: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpdp0trh36.java:102: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i - 1) * xs.get(i));\n        }\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp94k6sa9j.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long sum = 0;\n        for(int\
    \ i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n        }\n   \
    \     for(int i = 0; i < xs.size(); i++) {\n            derivative.add(sum);\n\
    \        }\n        for(int i = 0; i < xs.size(); i++) {\n            x += xs.get(i);\n\
    \            y += sum;\n        }\n        for(int i = 0; i < xs.size(); i++)\
    \ {\n            derivative.add(y - x);\n        }\n        return derivative;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc9a04dyd.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        for(int i = 0; i < xs.size(); i++) {\n            if(i == 0)\n      \
    \          result.add(xs.get(i));\n            else\n                result.add(result.get(i)\
    \ * xs.get(i));\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp28zh4vnu.java:22)\n\tat Problem.main(tmp28zh4vnu.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3o_5dpsn.java:83: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp3o_5dpsn.java:83: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 0;\n        long y = 0;\n        long sum = 0;\n        long\
    \ product = 1;\n        for (int i = 0; i < xs.size(); i++) {\n            x +=\
    \ xs.get(i);\n            y += product;\n            sum += product;\n       \
    \     product *= x;\n        }\n        derivative.add(sum);\n        for (int\
    \ i = xs.size(); i > 0; i--) {\n            derivative.add(sum - product * x);\n\
    \            product *= x;\n        }\n        return derivative;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk3u3sw_6.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long x = 0;\n        for (Long coef : xs) {\n            result.add(coef\
    \ * x);\n            x += 1;\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5jaqsp5f.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long n = 0;\n        long o\
    \ = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n      \
    \  long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n\
    \        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z\
    \ = 0;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n      \
    \  long g = 0;\n        long h = 0;\n        long i = 0;\n        long j = 0;\n\
    \        long k = 0;\n        long l = 0;\n        long m = 0;\n        long n\
    \ = 0;\n        long o = 0;\n        long p = 0;\n        long q = 0;\n      \
    \  long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n\
    \        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y\
    \ = 0;\n        long z = 0;\n        long d = 0;\n        long e = 0;\n      \
    \  long f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n\
    \        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m\
    \ = 0;\n        long n = 0;\n        long o = 0;\n        long p = 0;\n      \
    \  long q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n\
    \        long u = 0;\n        long v = 0;\n        long w = 0;\n        long x\
    \ = 0;\n        long y = 0;\n        long z = 0;\n        long d = 0;\n      \
    \  long e = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n\
    \        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l\
    \ = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n      \
    \  long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n\
    \        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w\
    \ = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n      \
    \  long d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n\
    \        long h = 0;\n        long i = 0;\n        long j = 0;\n        long k\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplqw_hll4.java:41: error: variable x is already defined in method\
    \ derivative(ArrayList<Long>)\n        long x = 0;\n             ^\n/tmp/tmplqw_hll4.java:42:\
    \ error: variable y is already defined in method derivative(ArrayList<Long>)\n\
    \        long y = 0;\n             ^\n/tmp/tmplqw_hll4.java:43: error: variable\
    \ z is already defined in method derivative(ArrayList<Long>)\n        long z =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:44: error: variable d is already defined\
    \ in method derivative(ArrayList<Long>)\n        long d = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:45: error: variable e is already defined in method derivative(ArrayList<Long>)\n\
    \        long e = 0;\n             ^\n/tmp/tmplqw_hll4.java:46: error: variable\
    \ f is already defined in method derivative(ArrayList<Long>)\n        long f =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:47: error: variable g is already defined\
    \ in method derivative(ArrayList<Long>)\n        long g = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:48: error: variable h is already defined in method derivative(ArrayList<Long>)\n\
    \        long h = 0;\n             ^\n/tmp/tmplqw_hll4.java:49: error: variable\
    \ i is already defined in method derivative(ArrayList<Long>)\n        long i =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:50: error: variable j is already defined\
    \ in method derivative(ArrayList<Long>)\n        long j = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:51: error: variable k is already defined in method derivative(ArrayList<Long>)\n\
    \        long k = 0;\n             ^\n/tmp/tmplqw_hll4.java:52: error: variable\
    \ l is already defined in method derivative(ArrayList<Long>)\n        long l =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:53: error: variable m is already defined\
    \ in method derivative(ArrayList<Long>)\n        long m = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:54: error: variable n is already defined in method derivative(ArrayList<Long>)\n\
    \        long n = 0;\n             ^\n/tmp/tmplqw_hll4.java:55: error: variable\
    \ o is already defined in method derivative(ArrayList<Long>)\n        long o =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:56: error: variable p is already defined\
    \ in method derivative(ArrayList<Long>)\n        long p = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:57: error: variable q is already defined in method derivative(ArrayList<Long>)\n\
    \        long q = 0;\n             ^\n/tmp/tmplqw_hll4.java:58: error: variable\
    \ r is already defined in method derivative(ArrayList<Long>)\n        long r =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:59: error: variable s is already defined\
    \ in method derivative(ArrayList<Long>)\n        long s = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:60: error: variable t is already defined in method derivative(ArrayList<Long>)\n\
    \        long t = 0;\n             ^\n/tmp/tmplqw_hll4.java:61: error: variable\
    \ u is already defined in method derivative(ArrayList<Long>)\n        long u =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:62: error: variable v is already defined\
    \ in method derivative(ArrayList<Long>)\n        long v = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:63: error: variable w is already defined in method derivative(ArrayList<Long>)\n\
    \        long w = 0;\n             ^\n/tmp/tmplqw_hll4.java:64: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:65: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:66: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplqw_hll4.java:67: error: variable\
    \ d is already defined in method derivative(ArrayList<Long>)\n        long d =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:68: error: variable e is already defined\
    \ in method derivative(ArrayList<Long>)\n        long e = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:69: error: variable f is already defined in method derivative(ArrayList<Long>)\n\
    \        long f = 0;\n             ^\n/tmp/tmplqw_hll4.java:70: error: variable\
    \ g is already defined in method derivative(ArrayList<Long>)\n        long g =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:71: error: variable h is already defined\
    \ in method derivative(ArrayList<Long>)\n        long h = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:72: error: variable i is already defined in method derivative(ArrayList<Long>)\n\
    \        long i = 0;\n             ^\n/tmp/tmplqw_hll4.java:73: error: variable\
    \ j is already defined in method derivative(ArrayList<Long>)\n        long j =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:74: error: variable k is already defined\
    \ in method derivative(ArrayList<Long>)\n        long k = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:75: error: variable l is already defined in method derivative(ArrayList<Long>)\n\
    \        long l = 0;\n             ^\n/tmp/tmplqw_hll4.java:76: error: variable\
    \ m is already defined in method derivative(ArrayList<Long>)\n        long m =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:77: error: variable n is already defined\
    \ in method derivative(ArrayList<Long>)\n        long n = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:78: error: variable o is already defined in method derivative(ArrayList<Long>)\n\
    \        long o = 0;\n             ^\n/tmp/tmplqw_hll4.java:79: error: variable\
    \ p is already defined in method derivative(ArrayList<Long>)\n        long p =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:80: error: variable q is already defined\
    \ in method derivative(ArrayList<Long>)\n        long q = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:81: error: variable r is already defined in method derivative(ArrayList<Long>)\n\
    \        long r = 0;\n             ^\n/tmp/tmplqw_hll4.java:82: error: variable\
    \ s is already defined in method derivative(ArrayList<Long>)\n        long s =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:83: error: variable t is already defined\
    \ in method derivative(ArrayList<Long>)\n        long t = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:84: error: variable u is already defined in method derivative(ArrayList<Long>)\n\
    \        long u = 0;\n             ^\n/tmp/tmplqw_hll4.java:85: error: variable\
    \ v is already defined in method derivative(ArrayList<Long>)\n        long v =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:86: error: variable w is already defined\
    \ in method derivative(ArrayList<Long>)\n        long w = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:87: error: variable x is already defined in method derivative(ArrayList<Long>)\n\
    \        long x = 0;\n             ^\n/tmp/tmplqw_hll4.java:88: error: variable\
    \ y is already defined in method derivative(ArrayList<Long>)\n        long y =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:89: error: variable z is already defined\
    \ in method derivative(ArrayList<Long>)\n        long z = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:90: error: variable d is already defined in method derivative(ArrayList<Long>)\n\
    \        long d = 0;\n             ^\n/tmp/tmplqw_hll4.java:91: error: variable\
    \ e is already defined in method derivative(ArrayList<Long>)\n        long e =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:92: error: variable f is already defined\
    \ in method derivative(ArrayList<Long>)\n        long f = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:93: error: variable g is already defined in method derivative(ArrayList<Long>)\n\
    \        long g = 0;\n             ^\n/tmp/tmplqw_hll4.java:94: error: variable\
    \ h is already defined in method derivative(ArrayList<Long>)\n        long h =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:95: error: variable i is already defined\
    \ in method derivative(ArrayList<Long>)\n        long i = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:96: error: variable j is already defined in method derivative(ArrayList<Long>)\n\
    \        long j = 0;\n             ^\n/tmp/tmplqw_hll4.java:97: error: variable\
    \ k is already defined in method derivative(ArrayList<Long>)\n        long k =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:98: error: variable l is already defined\
    \ in method derivative(ArrayList<Long>)\n        long l = 0;\n             ^\n\
    /tmp/tmplqw_hll4.java:99: error: variable m is already defined in method derivative(ArrayList<Long>)\n\
    \        long m = 0;\n             ^\n/tmp/tmplqw_hll4.java:100: error: variable\
    \ n is already defined in method derivative(ArrayList<Long>)\n        long n =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:101: error: variable o is already\
    \ defined in method derivative(ArrayList<Long>)\n        long o = 0;\n       \
    \      ^\n/tmp/tmplqw_hll4.java:102: error: variable p is already defined in method\
    \ derivative(ArrayList<Long>)\n        long p = 0;\n             ^\n/tmp/tmplqw_hll4.java:103:\
    \ error: variable q is already defined in method derivative(ArrayList<Long>)\n\
    \        long q = 0;\n             ^\n/tmp/tmplqw_hll4.java:104: error: variable\
    \ r is already defined in method derivative(ArrayList<Long>)\n        long r =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:105: error: variable s is already\
    \ defined in method derivative(ArrayList<Long>)\n        long s = 0;\n       \
    \      ^\n/tmp/tmplqw_hll4.java:106: error: variable t is already defined in method\
    \ derivative(ArrayList<Long>)\n        long t = 0;\n             ^\n/tmp/tmplqw_hll4.java:107:\
    \ error: variable u is already defined in method derivative(ArrayList<Long>)\n\
    \        long u = 0;\n             ^\n/tmp/tmplqw_hll4.java:108: error: variable\
    \ v is already defined in method derivative(ArrayList<Long>)\n        long v =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:109: error: variable w is already\
    \ defined in method derivative(ArrayList<Long>)\n        long w = 0;\n       \
    \      ^\n/tmp/tmplqw_hll4.java:110: error: variable x is already defined in method\
    \ derivative(ArrayList<Long>)\n        long x = 0;\n             ^\n/tmp/tmplqw_hll4.java:111:\
    \ error: variable y is already defined in method derivative(ArrayList<Long>)\n\
    \        long y = 0;\n             ^\n/tmp/tmplqw_hll4.java:112: error: variable\
    \ z is already defined in method derivative(ArrayList<Long>)\n        long z =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:113: error: variable d is already\
    \ defined in method derivative(ArrayList<Long>)\n        long d = 0;\n       \
    \      ^\n/tmp/tmplqw_hll4.java:114: error: variable e is already defined in method\
    \ derivative(ArrayList<Long>)\n        long e = 0;\n             ^\n/tmp/tmplqw_hll4.java:115:\
    \ error: variable f is already defined in method derivative(ArrayList<Long>)\n\
    \        long f = 0;\n             ^\n/tmp/tmplqw_hll4.java:116: error: variable\
    \ g is already defined in method derivative(ArrayList<Long>)\n        long g =\
    \ 0;\n             ^\n/tmp/tmplqw_hll4.java:117: error: variable h is already\
    \ defined in method derivative(ArrayList<Long>)\n        long h = 0;\n       \
    \      ^\n/tmp/tmplqw_hll4.java:118: error: variable i is already defined in method\
    \ derivative(ArrayList<Long>)\n        long i = 0;\n             ^\n/tmp/tmplqw_hll4.java:119:\
    \ error: variable j is already defined in method derivative(ArrayList<Long>)\n\
    \        long j = 0;\n             ^\n/tmp/tmplqw_hll4.java:120: error: variable\
    \ k is already defined in method derivative(ArrayList<Long>)\n        long k =\
    \ 0;\n             ^\n80 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long sum = 0;\n        for\
    \ (Long coef : xs) {\n            sum += coef * x;\n            derivative .add(coef\
    \ * y);\n            y *= x;\n            x *= x;\n        }\n        derivative\
    \ .add(sum);\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2cbcjr7t.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        for (Long coef : xs) {\n  \
    \          derivative += coef * x;\n            y *= x;\n        }\n        derivative\
    \ += y;\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9qh2b1i4.java:21: error: bad operand types for binary operator\
    \ '+'\n            derivative += coef * x;\n                       ^\n  first\
    \ type:  ArrayList<Long>\n  second type: long\n/tmp/tmp9qh2b1i4.java:24: error:\
    \ bad operand types for binary operator '+'\n        derivative += y;\n      \
    \             ^\n  first type:  ArrayList<Long>\n  second type: long\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmppsha5iqg.java:20)\n\tat Problem.main(tmppsha5iqg.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkg_e192w.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (Long coef : xs) {\n\
    \            sum += coef * x;\n            derivative.add(sum);\n            x\
    \ *= x;\n        }\n        return derivative;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp487ecrwa.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprxx20p5h.java:83: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmprxx20p5h.java:83: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (Long coef : xs) {\n\
    \            sum += coef * x;\n            derivative.add(coef * x);\n       \
    \     x *= x;\n        }\n        derivative.add(sum);\n        return derivative;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8asv8ywo.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        long y = 1;\n        long sum = 0;\n        for\
    \ (int i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n         \
    \   derivative.add(sum);\n        }\n        derivative.add(0);\n        derivative.add(xs.size());\n\
    \        for (int i = 0; i < xs.size(); i++) {\n            derivative.set(i,\
    \ derivative.get(i) - x);\n            x += xs.get(i);\n        }\n        return\
    \ derivative;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4w44xnvi.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n        derivative.add(0);\n                       ^\n/tmp/tmp4w44xnvi.java:26:\
    \ error: incompatible types: int cannot be converted to Long\n        derivative.add(xs.size());\n\
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2rwz1dr_.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        long y = 1;\n        long z = 1;\n        long a\
    \ = 1;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n      \
    \  long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n\
    \        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l\
    \ = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long a = 1;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n\
    \        long e = 1;\n        long f = 1;\n        long g = 1;\n        long h\
    \ = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n      \
    \  long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long a = 1;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n      \
    \  long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n\
    \        long l = 1;\n        long m = 1;\n        long n = 1;\n        long o\
    \ = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n      \
    \  long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n\
    \        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z\
    \ = 1;\n        long a = 1;\n        long b = 1;\n        long c = 1;\n      \
    \  long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n\
    \        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k\
    \ = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n      \
    \  long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long s = 1;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiyw8izg4.java:118: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpiyw8izg4.java:118: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        long sum = 0;\n        for(int i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n            derivative.add(sum);\n  \
    \      }\n        for(int i = xs.size()-1; i >= 0; i--) {\n            sum +=\
    \ xs.get(i) * x;\n            derivative.add(sum);\n            x *= xs.get(i);\n\
    \        }\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn35edfbf.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (long y : xs) {\n   \
    \         sum += y * x;\n            derivative.add(sum);\n            x *= y;\n\
    \        }\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i7izknk.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long d = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long yd = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd = 0;\n   \
    \     long xd = 0;\n        long yd = 0;\n        long xd = 0;\n        long yd\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long xd = 0;\n   \
    \     long \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpijqxexfv.java:102: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpijqxexfv.java:102: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (long y : xs) {\n   \
    \         sum += y * x;\n            derivative.add(sum);\n            x *= y;\n\
    \        }\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvnxql2fn.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5_oq52ow.java:83: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp5_oq52ow.java:83: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4jzc_l9t.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x0 = xs.get(0);\n        long x1 = xs.get(1);\n        long x2 =\
    \ xs.get(2);\n        long x3 = xs.get(3);\n        long x4 = xs.get(4);\n   \
    \     long x5 = xs.get(5);\n        long x6 = xs.get(6);\n        long x7 = xs.get(7);\n\
    \        long x8 = xs.get(8);\n        long x9 = xs.get(9);\n        long x10\
    \ = xs.get(10);\n        long x11 = xs.get(11);\n        long x12 = xs.get(12);\n\
    \        long x13 = xs.get(13);\n        long x14 = xs.get(14);\n        long\
    \ x15 = xs.get(15);\n        long x16 = xs.get(16);\n        long x17 = xs.get(17);\n\
    \        long x18 = xs.get(18);\n        long x19 = xs.get(19);\n        long\
    \ x20 = xs.get(20);\n        long x21 = xs.get(21);\n        long x22 = xs.get(22);\n\
    \        long x23 = xs.get(23);\n        long x24 = xs.get(24);\n        long\
    \ x25 = xs.get(25);\n        long x26 = xs.get(26);\n        long x27 = xs.get(27);\n\
    \        long x28 = xs.get(28);\n        long x29 = xs.get(29);\n        long\
    \ x30 = xs.get(30);\n        long x31 = xs.get(31);\n        long x32 = xs.get(32);\n\
    \        long x33 = xs.get(33);\n        long x34 = xs.get(34);\n        long\
    \ x35 = xs.get(35);\n        long x36 = xs.get(36);\n        long x37 = xs.get(37);\n\
    \        long x38 = xs.get(38);\n        long x39 = xs.get(39);\n        long\
    \ x40 = xs.get(40);\n        long x41 = xs.get(41);\n        long x42 = xs.get(42);\n\
    \        long x43 = xs.get(43);\n        long x44 = xs.get(44);\n        long\
    \ x45 = xs.get(45);\n        long x46 = xs.get(46);\n        long x47 = xs.get(47);\n\
    \        long x48 = xs.get(48);\n        long x49 = xs.get(49);\n        long\
    \ x50 = xs.get(50);\n        long x51 = xs.get(51);\n        long x52 = xs.get(52);\n\
    \        long x53 = xs.get(53);\n        long x54 = xs.get(54);\n        long\
    \ x55 = xs.get(55);\n        long x56 = xs.get(56);\n        long x57 = xs.get(57);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6l7gt06i.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpweeztovt.java:20)\n\tat Problem.main(tmpweeztovt.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long x : xs) {\n            sum += x;\n \
    \       }\n        derivative.add(1L);\n        for (long x : xs) {\n        \
    \    derivative.add(sum * x);\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61p_u0jl.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long pow = 1;\n        long sum = 0;\n        for(int i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n            pow *= xs.get(i);\n     \
    \   }\n        derivative.add(sum);\n        for(int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(pow);\n            pow *= xs.get(i);\n       \
    \ }\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3yvi5ho.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for(int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmplzzqm3do.java:20)\n\tat Problem.main(tmplzzqm3do.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpge8koll_.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long pow = 1;\n        long pow2 = 0;\n        long pow3 = 0;\n\
    \        long pow4 = 0;\n        long pow5 = 0;\n        long pow6 = 0;\n    \
    \    long pow7 = 0;\n        long pow8 = 0;\n        long pow9 = 0;\n        long\
    \ pow10 = 0;\n        long pow11 = 0;\n        long pow12 = 0;\n        long pow13\
    \ = 0;\n        long pow14 = 0;\n        long pow15 = 0;\n        long pow16 =\
    \ 0;\n        long pow17 = 0;\n        long pow18 = 0;\n        long pow19 = 0;\n\
    \        long pow20 = 0;\n        long pow21 = 0;\n        long pow22 = 0;\n \
    \       long pow23 = 0;\n        long pow24 = 0;\n        long pow25 = 0;\n  \
    \      long pow26 = 0;\n        long pow27 = 0;\n        long pow28 = 0;\n   \
    \     long pow29 = 0;\n        long pow30 = 0;\n        long pow31 = 0;\n    \
    \    long pow32 = 0;\n        long pow33 = 0;\n        long pow34 = 0;\n     \
    \   long pow35 = 0;\n        long pow36 = 0;\n        long pow37 = 0;\n      \
    \  long pow38 = 0;\n        long pow39 = 0;\n        long pow40 = 0;\n       \
    \ long pow41 = 0;\n        long pow42 = 0;\n        long pow43 = 0;\n        long\
    \ pow44 = 0;\n        long pow45 = 0;\n        long pow46 = 0;\n        long pow47\
    \ = 0;\n        long pow48 = 0;\n        long pow49 = 0;\n        long pow50 =\
    \ 0;\n        long pow51 = 0;\n        long pow52 = 0;\n        long pow53 = 0;\n\
    \        long pow54 = 0;\n        long pow55 = 0;\n        long pow56 = 0;\n \
    \       long pow57 = 0;\n        long pow58 = 0;\n        long pow59 = 0;\n  \
    \      long pow60 = 0;\n        long pow61 = 0;\n        long pow62 = 0;\n   \
    \     long pow63 = 0;\n        long pow64 = 0;\n        long pow65 = 0;\n    \
    \    long pow66 = 0;\n        long pow67 = 0;\n        long pow68 = 0;\n     \
    \   long pow69 = 0;\n        long pow70 = 0;\n        long pow71 = 0;\n      \
    \  long pow72 = 0;\n        long pow73 = 0;\n        long pow74 = 0;\n       \
    \ long pow75 = 0;\n        long pow76 = 0;\n        long pow77 = 0;\n        long\
    \ pow78 = 0;\n        long pow79 = 0;\n        long pow80 = 0;\n        long pow81\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6uqq0sta.java:103: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp6uqq0sta.java:103: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long coef : xs) {\n            derivative.add(coef\
    \ * x);\n            x += 1;\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapo4w691.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6_f_mcar.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpheaa_3kb.java:20)\n\tat Problem.main(tmpheaa_3kb.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x0 = xs.get(0);\n        long x1 = xs.get(1);\n        long x2 =\
    \ xs.get(2);\n        long x3 = xs.get(3);\n        long x4 = xs.get(4);\n   \
    \     long x5 = xs.get(5);\n        long x6 = xs.get(6);\n        long x7 = xs.get(7);\n\
    \        long x8 = xs.get(8);\n        long x9 = xs.get(9);\n        long x10\
    \ = xs.get(10);\n        long x11 = xs.get(11);\n        long x12 = xs.get(12);\n\
    \        long x13 = xs.get(13);\n        long x14 = xs.get(14);\n        long\
    \ x15 = xs.get(15);\n        long x16 = xs.get(16);\n        long x17 = xs.get(17);\n\
    \        long x18 = xs.get(18);\n        long x19 = xs.get(19);\n        long\
    \ x20 = xs.get(20);\n        long x21 = xs.get(21);\n        long x22 = xs.get(22);\n\
    \        long x23 = xs.get(23);\n        long x24 = xs.get(24);\n        long\
    \ x25 = xs.get(25);\n        long x26 = xs.get(26);\n        long x27 = xs.get(27);\n\
    \        long x28 = xs.get(28);\n        long x29 = xs.get(29);\n        long\
    \ x30 = xs.get(30);\n        long x31 = xs.get(31);\n        long x32 = xs.get(32);\n\
    \        long x33 = xs.get(33);\n        long x34 = xs.get(34);\n        long\
    \ x35 = xs.get(35);\n        long x36 = xs.get(36);\n        long x37 = xs.get(37);\n\
    \        long x38 = xs.get(38);\n        long x39 = xs.get(39);\n        long\
    \ x40 = xs.get(40);\n        long x41 = xs.get(41);\n        long x42 = xs.get(42);\n\
    \        long x43 = xs.get(43);\n        long x44 = xs.get(44);\n        long\
    \ x45 = xs.get(45);\n        long x46 = xs.get(46);\n        long x47 = xs.get(47);\n\
    \        long x48 = xs.get(48);\n        long x49 = xs.get(49);\n        long\
    \ x50 = xs.get(50);\n        long x51 = xs.get(51);\n        long x52 = xs.get(52);\n\
    \        long x53 = xs.get(53);\n        long x54 = xs.get(54);\n        long\
    \ x55 = xs.get(55);\n        long x56 = xs.get(56);\n        long x57 = xs.get(57);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwm_p0dl8.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long pow = 1;\n        long pow2 = 0;\n        long pow3 = 0;\n\
    \        long pow4 = 0;\n        long pow5 = 0;\n        long pow6 = 0;\n    \
    \    long pow7 = 0;\n        long pow8 = 0;\n        long pow9 = 0;\n        long\
    \ pow10 = 0;\n        long pow11 = 0;\n        long pow12 = 0;\n        long pow13\
    \ = 0;\n        long pow14 = 0;\n        long pow15 = 0;\n        long pow16 =\
    \ 0;\n        long pow17 = 0;\n        long pow18 = 0;\n        long pow19 = 0;\n\
    \        long pow20 = 0;\n        long pow21 = 0;\n        long pow22 = 0;\n \
    \       long pow23 = 0;\n        long pow24 = 0;\n        long pow25 = 0;\n  \
    \      long pow26 = 0;\n        long pow27 = 0;\n        long pow28 = 0;\n   \
    \     long pow29 = 0;\n        long pow30 = 0;\n        long pow31 = 0;\n    \
    \    long pow32 = 0;\n        long pow33 = 0;\n        long pow34 = 0;\n     \
    \   long pow35 = 0;\n        long pow36 = 0;\n        long pow37 = 0;\n      \
    \  long pow38 = 0;\n        long pow39 = 0;\n        long pow40 = 0;\n       \
    \ long pow41 = 0;\n        long pow42 = 0;\n        long pow43 = 0;\n        long\
    \ pow44 = 0;\n        long pow45 = 0;\n        long pow46 = 0;\n        long pow47\
    \ = 0;\n        long pow48 = 0;\n        long pow49 = 0;\n        long pow50 =\
    \ 0;\n        long pow51 = 0;\n        long pow52 = 0;\n        long pow53 = 0;\n\
    \        long pow54 = 0;\n        long pow55 = 0;\n        long pow56 = 0;\n \
    \       long pow57 = 0;\n        long pow58 = 0;\n        long pow59 = 0;\n  \
    \      long pow60 = 0;\n        long pow61 = 0;\n        long pow62 = 0;\n   \
    \     long pow63 = 0;\n        long pow64 = 0;\n        long pow65 = 0;\n    \
    \    long pow66 = 0;\n        long pow67 = 0;\n        long pow68 = 0;\n     \
    \   long pow69 = 0;\n        long pow70 = 0;\n        long pow71 = 0;\n      \
    \  long pow72 = 0;\n        long pow73 = 0;\n        long pow74 = 0;\n       \
    \ long pow75 = 0;\n        long pow76 = 0;\n        long pow77 = 0;\n        long\
    \ pow78 = 0;\n        long pow79 = 0;\n        long pow80 = 0;\n        long pow81\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf6ebe3ut.java:104: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long product = 1;\n        for (int i = 0; i < xs.size(); i++)\
    \ {\n            sum += xs.get(i);\n        }\n        for (int i = 0; i < xs.size();\
    \ i++) {\n            product *= xs.get(i);\n        }\n        for (int i = 0;\
    \ i < xs.size(); i++) {\n            z = xs.get(i);\n            y = sum;\n  \
    \          derivative.add(z);\n            z = y - product;\n            derivative.add(z);\n\
    \        }\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkpiqn4i.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (long i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n            derivative.add(sum);\n  \
    \          x *= xs.get(i);\n        }\n        return derivative;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6lg52_hf.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += xs.get(i);\n                          ^\n\
    /tmp/tmp6lg52_hf.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            x *= xs.get(i);\n                        ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        derivative.add(a);\n        derivative.add(b * d);\n        derivative.add(c\
    \ * e * d);\n        derivative.add(f * e * d);\n        derivative.add(e * d);\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp1ydl9ifs.java:23)\n\tat Problem.main(tmp1ydl9ifs.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp0g0ciz53.java:20)\n\tat Problem.main(tmp0g0ciz53.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwne5font.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long pow = 1;\n        long\
    \ sum = 0;\n        for (Long i : xs) {\n            sum += i;\n            pow\
    \ *= x;\n            derivative.add(sum);\n            pow *= y;\n           \
    \ x += 1;\n            y += 1;\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbhu7_8qg.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (Long coef : xs) {\n\
    \            sum += coef * x;\n        }\n        result.add(sum);\n        x++;\n\
    \        for (Long coef : xs) {\n            sum += coef * x;\n            result.add(sum);\n\
    \            x++;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoj35088a.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long n = 0;\n        long o\
    \ = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n      \
    \  long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n\
    \        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z\
    \ = 0;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n      \
    \  long g = 0;\n        long h = 0;\n        long i = 0;\n        long j = 0;\n\
    \        long k = 0;\n        long l = 0;\n        long m = 0;\n        long n\
    \ = 0;\n        long o = 0;\n        long p = 0;\n        long q = 0;\n      \
    \  long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n\
    \        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y\
    \ = 0;\n        long z = 0;\n        long d = 0;\n        long e = 0;\n      \
    \  long f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n\
    \        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m\
    \ = 0;\n        long n = 0;\n        long o = 0;\n        long p = 0;\n      \
    \  long q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n\
    \        long u = 0;\n        long v = 0;\n        long w = 0;\n        long x\
    \ = 0;\n        long y = 0;\n        long z = 0;\n        long d = 0;\n      \
    \  long e = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n\
    \        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l\
    \ = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n      \
    \  long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n\
    \        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w\
    \ = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n      \
    \  long d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n\
    \        long h = 0;\n        long i = 0;\n        long j = 0;\n        long k\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfa8yujtz.java:41: error: variable x is already defined in method\
    \ derivative(ArrayList<Long>)\n        long x = 0;\n             ^\n/tmp/tmpfa8yujtz.java:42:\
    \ error: variable y is already defined in method derivative(ArrayList<Long>)\n\
    \        long y = 0;\n             ^\n/tmp/tmpfa8yujtz.java:43: error: variable\
    \ z is already defined in method derivative(ArrayList<Long>)\n        long z =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:44: error: variable d is already defined\
    \ in method derivative(ArrayList<Long>)\n        long d = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:45: error: variable e is already defined in method derivative(ArrayList<Long>)\n\
    \        long e = 0;\n             ^\n/tmp/tmpfa8yujtz.java:46: error: variable\
    \ f is already defined in method derivative(ArrayList<Long>)\n        long f =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:47: error: variable g is already defined\
    \ in method derivative(ArrayList<Long>)\n        long g = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:48: error: variable h is already defined in method derivative(ArrayList<Long>)\n\
    \        long h = 0;\n             ^\n/tmp/tmpfa8yujtz.java:49: error: variable\
    \ i is already defined in method derivative(ArrayList<Long>)\n        long i =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:50: error: variable j is already defined\
    \ in method derivative(ArrayList<Long>)\n        long j = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:51: error: variable k is already defined in method derivative(ArrayList<Long>)\n\
    \        long k = 0;\n             ^\n/tmp/tmpfa8yujtz.java:52: error: variable\
    \ l is already defined in method derivative(ArrayList<Long>)\n        long l =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:53: error: variable m is already defined\
    \ in method derivative(ArrayList<Long>)\n        long m = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:54: error: variable n is already defined in method derivative(ArrayList<Long>)\n\
    \        long n = 0;\n             ^\n/tmp/tmpfa8yujtz.java:55: error: variable\
    \ o is already defined in method derivative(ArrayList<Long>)\n        long o =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:56: error: variable p is already defined\
    \ in method derivative(ArrayList<Long>)\n        long p = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:57: error: variable q is already defined in method derivative(ArrayList<Long>)\n\
    \        long q = 0;\n             ^\n/tmp/tmpfa8yujtz.java:58: error: variable\
    \ r is already defined in method derivative(ArrayList<Long>)\n        long r =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:59: error: variable s is already defined\
    \ in method derivative(ArrayList<Long>)\n        long s = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:60: error: variable t is already defined in method derivative(ArrayList<Long>)\n\
    \        long t = 0;\n             ^\n/tmp/tmpfa8yujtz.java:61: error: variable\
    \ u is already defined in method derivative(ArrayList<Long>)\n        long u =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:62: error: variable v is already defined\
    \ in method derivative(ArrayList<Long>)\n        long v = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:63: error: variable w is already defined in method derivative(ArrayList<Long>)\n\
    \        long w = 0;\n             ^\n/tmp/tmpfa8yujtz.java:64: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:65: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:66: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmpfa8yujtz.java:67: error: variable\
    \ d is already defined in method derivative(ArrayList<Long>)\n        long d =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:68: error: variable e is already defined\
    \ in method derivative(ArrayList<Long>)\n        long e = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:69: error: variable f is already defined in method derivative(ArrayList<Long>)\n\
    \        long f = 0;\n             ^\n/tmp/tmpfa8yujtz.java:70: error: variable\
    \ g is already defined in method derivative(ArrayList<Long>)\n        long g =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:71: error: variable h is already defined\
    \ in method derivative(ArrayList<Long>)\n        long h = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:72: error: variable i is already defined in method derivative(ArrayList<Long>)\n\
    \        long i = 0;\n             ^\n/tmp/tmpfa8yujtz.java:73: error: variable\
    \ j is already defined in method derivative(ArrayList<Long>)\n        long j =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:74: error: variable k is already defined\
    \ in method derivative(ArrayList<Long>)\n        long k = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:75: error: variable l is already defined in method derivative(ArrayList<Long>)\n\
    \        long l = 0;\n             ^\n/tmp/tmpfa8yujtz.java:76: error: variable\
    \ m is already defined in method derivative(ArrayList<Long>)\n        long m =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:77: error: variable n is already defined\
    \ in method derivative(ArrayList<Long>)\n        long n = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:78: error: variable o is already defined in method derivative(ArrayList<Long>)\n\
    \        long o = 0;\n             ^\n/tmp/tmpfa8yujtz.java:79: error: variable\
    \ p is already defined in method derivative(ArrayList<Long>)\n        long p =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:80: error: variable q is already defined\
    \ in method derivative(ArrayList<Long>)\n        long q = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:81: error: variable r is already defined in method derivative(ArrayList<Long>)\n\
    \        long r = 0;\n             ^\n/tmp/tmpfa8yujtz.java:82: error: variable\
    \ s is already defined in method derivative(ArrayList<Long>)\n        long s =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:83: error: variable t is already defined\
    \ in method derivative(ArrayList<Long>)\n        long t = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:84: error: variable u is already defined in method derivative(ArrayList<Long>)\n\
    \        long u = 0;\n             ^\n/tmp/tmpfa8yujtz.java:85: error: variable\
    \ v is already defined in method derivative(ArrayList<Long>)\n        long v =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:86: error: variable w is already defined\
    \ in method derivative(ArrayList<Long>)\n        long w = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:87: error: variable x is already defined in method derivative(ArrayList<Long>)\n\
    \        long x = 0;\n             ^\n/tmp/tmpfa8yujtz.java:88: error: variable\
    \ y is already defined in method derivative(ArrayList<Long>)\n        long y =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:89: error: variable z is already defined\
    \ in method derivative(ArrayList<Long>)\n        long z = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:90: error: variable d is already defined in method derivative(ArrayList<Long>)\n\
    \        long d = 0;\n             ^\n/tmp/tmpfa8yujtz.java:91: error: variable\
    \ e is already defined in method derivative(ArrayList<Long>)\n        long e =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:92: error: variable f is already defined\
    \ in method derivative(ArrayList<Long>)\n        long f = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:93: error: variable g is already defined in method derivative(ArrayList<Long>)\n\
    \        long g = 0;\n             ^\n/tmp/tmpfa8yujtz.java:94: error: variable\
    \ h is already defined in method derivative(ArrayList<Long>)\n        long h =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:95: error: variable i is already defined\
    \ in method derivative(ArrayList<Long>)\n        long i = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:96: error: variable j is already defined in method derivative(ArrayList<Long>)\n\
    \        long j = 0;\n             ^\n/tmp/tmpfa8yujtz.java:97: error: variable\
    \ k is already defined in method derivative(ArrayList<Long>)\n        long k =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:98: error: variable l is already defined\
    \ in method derivative(ArrayList<Long>)\n        long l = 0;\n             ^\n\
    /tmp/tmpfa8yujtz.java:99: error: variable m is already defined in method derivative(ArrayList<Long>)\n\
    \        long m = 0;\n             ^\n/tmp/tmpfa8yujtz.java:100: error: variable\
    \ n is already defined in method derivative(ArrayList<Long>)\n        long n =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:101: error: variable o is already\
    \ defined in method derivative(ArrayList<Long>)\n        long o = 0;\n       \
    \      ^\n/tmp/tmpfa8yujtz.java:102: error: variable p is already defined in method\
    \ derivative(ArrayList<Long>)\n        long p = 0;\n             ^\n/tmp/tmpfa8yujtz.java:103:\
    \ error: variable q is already defined in method derivative(ArrayList<Long>)\n\
    \        long q = 0;\n             ^\n/tmp/tmpfa8yujtz.java:104: error: variable\
    \ r is already defined in method derivative(ArrayList<Long>)\n        long r =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:105: error: variable s is already\
    \ defined in method derivative(ArrayList<Long>)\n        long s = 0;\n       \
    \      ^\n/tmp/tmpfa8yujtz.java:106: error: variable t is already defined in method\
    \ derivative(ArrayList<Long>)\n        long t = 0;\n             ^\n/tmp/tmpfa8yujtz.java:107:\
    \ error: variable u is already defined in method derivative(ArrayList<Long>)\n\
    \        long u = 0;\n             ^\n/tmp/tmpfa8yujtz.java:108: error: variable\
    \ v is already defined in method derivative(ArrayList<Long>)\n        long v =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:109: error: variable w is already\
    \ defined in method derivative(ArrayList<Long>)\n        long w = 0;\n       \
    \      ^\n/tmp/tmpfa8yujtz.java:110: error: variable x is already defined in method\
    \ derivative(ArrayList<Long>)\n        long x = 0;\n             ^\n/tmp/tmpfa8yujtz.java:111:\
    \ error: variable y is already defined in method derivative(ArrayList<Long>)\n\
    \        long y = 0;\n             ^\n/tmp/tmpfa8yujtz.java:112: error: variable\
    \ z is already defined in method derivative(ArrayList<Long>)\n        long z =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:113: error: variable d is already\
    \ defined in method derivative(ArrayList<Long>)\n        long d = 0;\n       \
    \      ^\n/tmp/tmpfa8yujtz.java:114: error: variable e is already defined in method\
    \ derivative(ArrayList<Long>)\n        long e = 0;\n             ^\n/tmp/tmpfa8yujtz.java:115:\
    \ error: variable f is already defined in method derivative(ArrayList<Long>)\n\
    \        long f = 0;\n             ^\n/tmp/tmpfa8yujtz.java:116: error: variable\
    \ g is already defined in method derivative(ArrayList<Long>)\n        long g =\
    \ 0;\n             ^\n/tmp/tmpfa8yujtz.java:117: error: variable h is already\
    \ defined in method derivative(ArrayList<Long>)\n        long h = 0;\n       \
    \      ^\n/tmp/tmpfa8yujtz.java:118: error: variable i is already defined in method\
    \ derivative(ArrayList<Long>)\n        long i = 0;\n             ^\n/tmp/tmpfa8yujtz.java:119:\
    \ error: variable j is already defined in method derivative(ArrayList<Long>)\n\
    \        long j = 0;\n             ^\n/tmp/tmpfa8yujtz.java:120: error: variable\
    \ k is already defined in method derivative(ArrayList<Long>)\n        long k =\
    \ 0;\n             ^\n80 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        for (Long coef : xs) {\n            derivative +=\
    \ coef * x;\n            x *= x;\n        }\n        return derivative;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwfgl1glp.java:20: error: bad operand types for binary operator\
    \ '+'\n            derivative += coef * x;\n                       ^\n  first\
    \ type:  ArrayList<Long>\n  second type: long\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long sum = 0;\n        long\
    \ pow = 1;\n        for(int i = 0; i < xs.size(); i++) {\n            sum += pow\
    \ * xs.get(i);\n            pow *= x;\n        }\n        derivative.add(sum);\n\
    \        for(int i = 0; i < xs.size(); i++) {\n            derivative.add(pow\
    \ * xs.get(i));\n            pow *= x;\n        }\n        return derivative;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpghf_kdd_.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long sum = 0;\n        for\
    \ (int i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n        }\n\
    \        for (int i = 0; i < xs.size(); i++) {\n            y += xs.get(i);\n\
    \        }\n        for (int i = 0; i < xs.size(); i++) {\n            x += (sum\
    \ - y) / (xs.size() - 1);\n            result.add(x);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1uvdg76.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdse7k1it.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long x : xs) {\n            sum += x;\n \
    \       }\n        derivative.add(1L);\n        for (int i = 1; i < xs.size();\
    \ i++) {\n            derivative.add(xs.get(i) * sum);\n        }\n        return\
    \ derivative;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp999jvwad.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for(int i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n            derivative.add(sum);\n  \
    \          x += xs.get(i);\n        }\n        return derivative;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprwbnfm8v.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long sum = 0;\n        for(int\
    \ i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n        }\n   \
    \     for(int i = 0; i < xs.size(); i++) {\n            y += xs.get(i);\n    \
    \    }\n        result.add(sum);\n        for(int i = 0; i < xs.size(); i++) {\n\
    \            x += xs.get(i);\n        }\n        for(int i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n        }\n        result.add(sum);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaaw3msiz.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp3ljln9f1.java:20)\n\tat Problem.main(tmp3ljln9f1.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        derivative.add(xs.get(1));\n    \
    \    for(int i = 2; i < xs.size(); i++) {\n            derivative.add(derivative.get(i-1)\
    \ * xs.get(i));\n        }\n        return derivative;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvqx4m9d.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (Long coef : xs) {\n\
    \            sum += coef * x;\n        }\n        result.add(sum);\n        x\
    \ *= -1;\n        for (Long coef : xs) {\n            sum += coef * x;\n     \
    \   }\n        result.add(sum);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbdudxve5.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp99vjoujl.java:20)\n\tat Problem.main(tmp99vjoujl.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for(int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpznwwbgx7.java:20)\n\tat Problem.main(tmpznwwbgx7.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpci3hl0uk.java:20)\n\tat Problem.main(tmpci3hl0uk.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxb5_oi6k.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb61csxry.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptep0uwvt.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long product = 1;\n        long power = 0;\n        long pow =\
    \ 1;\n        long pow2 = 0;\n        long pow3 = 0;\n        long pow4 = 0;\n\
    \        long pow5 = 0;\n        long pow6 = 0;\n        long pow7 = 0;\n    \
    \    long pow8 = 0;\n        long pow9 = 0;\n        long pow10 = 0;\n       \
    \ long pow11 = 0;\n        long pow12 = 0;\n        long pow13 = 0;\n        long\
    \ pow14 = 0;\n        long pow15 = 0;\n        long pow16 = 0;\n        long pow17\
    \ = 0;\n        long pow18 = 0;\n        long pow19 = 0;\n        long pow20 =\
    \ 0;\n        long pow21 = 0;\n        long pow22 = 0;\n        long pow23 = 0;\n\
    \        long pow24 = 0;\n        long pow25 = 0;\n        long pow26 = 0;\n \
    \       long pow27 = 0;\n        long pow28 = 0;\n        long pow29 = 0;\n  \
    \      long pow30 = 0;\n        long pow31 = 0;\n        long pow32 = 0;\n   \
    \     long pow33 = 0;\n        long pow34 = 0;\n        long pow35 = 0;\n    \
    \    long pow36 = 0;\n        long pow37 = 0;\n        long pow38 = 0;\n     \
    \   long pow39 = 0;\n        long pow40 = 0;\n        long pow41 = 0;\n      \
    \  long pow42 = 0;\n        long pow43 = 0;\n        long pow44 = 0;\n       \
    \ long pow45 = 0;\n        long pow46 = 0;\n        long pow47 = 0;\n        long\
    \ pow48 = 0;\n        long pow49 = 0;\n        long pow50 = 0;\n        long pow51\
    \ = 0;\n        long pow52 = 0;\n        long pow53 = 0;\n        long pow54 =\
    \ 0;\n        long pow55 = 0;\n        long pow56 = 0;\n        long pow57 = 0;\n\
    \        long pow58 = 0;\n        long pow59 = 0;\n        long pow60 = 0;\n \
    \       long pow61 = 0;\n        long pow62 = 0;\n        long pow63 = 0;\n  \
    \      long pow64 = 0;\n        long pow65 = 0;\n        long pow66 = 0;\n   \
    \     long pow67 = 0;\n        long pow68 = 0;\n        long pow69 = 0;\n    \
    \    long pow70 = 0;\n        long pow71 = 0;\n        long pow72 = 0;\n     \
    \   long pow73 = 0;\n        long pow74 = 0;\n        long pow75 = 0;\n      \
    \  long pow76 = 0;\n        long pow77 = 0;\n        long pow78 = 0;\n       \
    \ long pow79 = 0;\n        long pow80\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsmj16ny8.java:103: error: ';' expected\n        long pow80\n  \
    \                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpyxinxfe2.java:20)\n\tat Problem.main(tmpyxinxfe2.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (long y : xs) {\n            derivative .add(x\
    \ * y);\n            x ++;\n        }\n        return derivative;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1rg7wznw.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x0 = xs.get(0);\n        long x1 = xs.get(1);\n        long x2 =\
    \ xs.get(2);\n        long x3 = xs.get(3);\n        long x4 = xs.get(4);\n   \
    \     long x5 = xs.get(5);\n        long x6 = xs.get(6);\n        long x7 = xs.get(7);\n\
    \        long x8 = xs.get(8);\n        long x9 = xs.get(9);\n        long x10\
    \ = xs.get(10);\n        long x11 = xs.get(11);\n        long x12 = xs.get(12);\n\
    \        long x13 = xs.get(13);\n        long x14 = xs.get(14);\n        long\
    \ x15 = xs.get(15);\n        long x16 = xs.get(16);\n        long x17 = xs.get(17);\n\
    \        long x18 = xs.get(18);\n        long x19 = xs.get(19);\n        long\
    \ x20 = xs.get(20);\n        long x21 = xs.get(21);\n        long x22 = xs.get(22);\n\
    \        long x23 = xs.get(23);\n        long x24 = xs.get(24);\n        long\
    \ x25 = xs.get(25);\n        long x26 = xs.get(26);\n        long x27 = xs.get(27);\n\
    \        long x28 = xs.get(28);\n        long x29 = xs.get(29);\n        long\
    \ x30 = xs.get(30);\n        long x31 = xs.get(31);\n        long x32 = xs.get(32);\n\
    \        long x33 = xs.get(33);\n        long x34 = xs.get(34);\n        long\
    \ x35 = xs.get(35);\n        long x36 = xs.get(36);\n        long x37 = xs.get(37);\n\
    \        long x38 = xs.get(38);\n        long x39 = xs.get(39);\n        long\
    \ x40 = xs.get(40);\n        long x41 = xs.get(41);\n        long x42 = xs.get(42);\n\
    \        long x43 = xs.get(43);\n        long x44 = xs.get(44);\n        long\
    \ x45 = xs.get(45);\n        long x46 = xs.get(46);\n        long x47 = xs.get(47);\n\
    \        long x48 = xs.get(48);\n        long x49 = xs.get(49);\n        long\
    \ x50 = xs.get(50);\n        long x51 = xs.get(51);\n        long x52 = xs.get(52);\n\
    \        long x53 = xs.get(53);\n        long x54 = xs.get(54);\n        long\
    \ x55 = xs.get(55);\n        long x56 = xs.get(56);\n        long x57 = xs.get(57);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphse2prdp.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i - 1) * xs.get(i));\n        }\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79zdcewa.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for(int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpk_14kkof.java:20)\n\tat Problem.main(tmpk_14kkof.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long sum = 0;\n        for(int\
    \ i = 0; i < xs.size(); i++) {\n            x += xs.get(i);\n            y +=\
    \ xs.get(i) * x;\n            sum += xs.get(i) * xs.get(i);\n        }\n     \
    \   derivative.add(sum);\n        for(int i = 1; i < xs.size(); i++) {\n     \
    \       derivative.add(sum * i);\n        }\n        return derivative;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoiqpybsm.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp1_mhclg9.java:20)\n\tat Problem.main(tmp1_mhclg9.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_syxi_58.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        for (long i = 0; i < xs.size(); i++) {\n       \
    \     derivative.add(x * xs.get(i));\n            x /= xs.get(i);\n        }\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxsswbt2_.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            derivative.add(x * xs.get(i));\n             \
    \                         ^\n/tmp/tmpxsswbt2_.java:21: error: incompatible types:\
    \ possible lossy conversion from long to int\n            x /= xs.get(i);\n  \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpjjyezlwe.java:20)\n\tat Problem.main(tmpjjyezlwe.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for(int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpa032qjd9.java:20)\n\tat Problem.main(tmpa032qjd9.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmprc18p67o.java:20)\n\tat Problem.main(tmprc18p67o.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpos31esuw.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp27m_ryqv.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long xx\
    \ = 1;\n        long yy = 1;\n        long zz = 1;\n        long xy = 1;\n   \
    \     long yz = 1;\n        long zzz = 1;\n        long xyy = 1;\n        long\
    \ yzz = 1;\n        long zzzy = 1;\n        long xyz = 1;\n        long yzx =\
    \ 1;\n        long zxy = 1;\n        long zxx = 1;\n        long yx = 1;\n   \
    \     long zx = 0;\n        long y = 0;\n        long z = 0;\n        long x =\
    \ 0;\n        long y = 0;\n        long z = 0;\n        long x = 0;\n        long\
    \ y = 0;\n        long z = 0;\n        long x = 0;\n        long y = 0;\n    \
    \    long z = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long x\
    \ = 0;\n        long y = 0;\n        long z = 0;\n        long x = 0;\n      \
    \  long y = 0;\n        long z = 0;\n        long x = 0;\n        long y = 0;\n\
    \        long z = 0;\n        long x = 0;\n        long y = 0;\n        long z\
    \ = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n      \
    \  long x = 0;\n        long y = 0;\n        long z = 0;\n        long x = 0;\n\
    \        long y = 0;\n        long z = 0;\n        long x = 0;\n        long y\
    \ = 0;\n        long z = 0;\n        long x = 0;\n        long y = 0;\n      \
    \  long z = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long x\
    \ = 0;\n        long y = 0;\n        long z = 0;\n        long x = 0;\n      \
    \  long y = 0;\n        long z = 0;\n        long x = 0;\n        long y = 0;\n\
    \        long z = 0;\n        long x = 0;\n        long y = 0;\n        long z\
    \ = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n      \
    \  long x = 0;\n        long y = 0;\n        long z = 0;\n        long x = 0;\n\
    \        long y = 0;\n        long z = 0;\n        long x = 0;\n        long y\
    \ = 0;\n        long z = 0;\n        long x = 0;\n        long y = 0;\n      \
    \  long z = 0;\n        long x = 0;\n        long y = 0;\n        \n    }\n  \
    \  public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplety5y5p.java:36: error: variable y is already defined in method\
    \ derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n/tmp/tmplety5y5p.java:37:\
    \ error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:38: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:39: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:40: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:41: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:42: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:43: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:44: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:45: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:46: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:47: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:48: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:49: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:50: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:51: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:52: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:53: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:54: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:55: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:56: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:57: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:58: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:59: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:60: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:61: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:62: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:63: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:64: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:65: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:66: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:67: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:68: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:69: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:70: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:71: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:72: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:73: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:74: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:75: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:76: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:77: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:78: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:79: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:80: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:81: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:82: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:83: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:84: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:85: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:86: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:87: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:88: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:89: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:90: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:91: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:92: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:93: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:94: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:95: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:96: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:97: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:98: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:99: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmplety5y5p.java:100: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:101: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:102: error: variable y is already\
    \ defined in method derivative(ArrayList<Long>)\n        long y = 0;\n       \
    \      ^\n/tmp/tmplety5y5p.java:103: error: variable z is already defined in method\
    \ derivative(ArrayList<Long>)\n        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:104:\
    \ error: variable x is already defined in method derivative(ArrayList<Long>)\n\
    \        long x = 0;\n             ^\n/tmp/tmplety5y5p.java:105: error: variable\
    \ y is already defined in method derivative(ArrayList<Long>)\n        long y =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:106: error: variable z is already\
    \ defined in method derivative(ArrayList<Long>)\n        long z = 0;\n       \
    \      ^\n/tmp/tmplety5y5p.java:107: error: variable x is already defined in method\
    \ derivative(ArrayList<Long>)\n        long x = 0;\n             ^\n/tmp/tmplety5y5p.java:108:\
    \ error: variable y is already defined in method derivative(ArrayList<Long>)\n\
    \        long y = 0;\n             ^\n/tmp/tmplety5y5p.java:109: error: variable\
    \ z is already defined in method derivative(ArrayList<Long>)\n        long z =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:110: error: variable x is already\
    \ defined in method derivative(ArrayList<Long>)\n        long x = 0;\n       \
    \      ^\n/tmp/tmplety5y5p.java:111: error: variable y is already defined in method\
    \ derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n/tmp/tmplety5y5p.java:112:\
    \ error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmplety5y5p.java:113: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmplety5y5p.java:114: error: variable y is already\
    \ defined in method derivative(ArrayList<Long>)\n        long y = 0;\n       \
    \      ^\n79 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long sum = 0;\n        for(int i = 1; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n            x += xs.get(i);\n       \
    \     derivative.add(sum);\n        }\n        derivative.add(0);\n        return\
    \ derivative;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvpftkskr.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n        derivative.add(0);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 0;\n        long sum = 0;\n        for (Long coef : xs) {\n\
    \            sum += coef;\n            x += coef;\n            result.add(sum);\n\
    \        }\n        long d = 1;\n        for (Long coef : xs) {\n            d\
    \ *= coef;\n        }\n        long xx = x;\n        long xxx = xx;\n        long\
    \ xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx\
    \ = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n\
    \        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n    \
    \    long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long\
    \ xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx\
    \ = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n\
    \        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n    \
    \    long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long\
    \ xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx\
    \ = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n\
    \        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n    \
    \    long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long\
    \ xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx\
    \ = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n\
    \        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n    \
    \    long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long\
    \ xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx\
    \ = xx;\n        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx;\n\
    \        long xxx = xx;\n        long xxx = xx;\n        long xxx = xx\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjoqjtb0l.java:92: error: ';' expected\n        long xxx = xx\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for(int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpdocekz63.java:20)\n\tat Problem.main(tmpdocekz63.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long power = 1;\n        long sum = 0;\n        for (long x : xs) {\n\
    \            sum += power * x;\n            power = power * x;\n        }\n  \
    \      derivative.add(sum);\n        return derivative;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qlr0mt5.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiwpiread.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long xd\
    \ = 0;\n        long yd = 0;\n        long zd = 0;\n        long xdd = 1;\n  \
    \      long ydd = 1;\n        long zdd = 1;\n        long xddd = 1;\n        long\
    \ yddd = 1;\n        long zddd = 1;\n        long xddddd = 1;\n        long yddddd\
    \ = 1;\n        long zddddd = 1;\n        long xddddddd = 1;\n        long yddddddd\
    \ = 1;\n        long zddddddd = 1;\n        long xddddddddd = 1;\n        long\
    \ yddddddddd = 1;\n        long zddddddddd = 1;\n        long xddddddddddd = 1;\n\
    \        long yddddddddddd = 1;\n        long zddddddddddd = 1;\n        long\
    \ xddddddddddddd = 1;\n        long yddddddddddddd = 1;\n        long zddddddddddddd\
    \ = 1;\n        long xddddddddddddddd = 1;\n        long yddddddddddddddd = 1;\n\
    \        long zddddddddddddddd = 1;\n        long xddddddddddddddddd = 1;\n  \
    \      long yddddddddddddddddd = 1;\n        long zddddddddddddddddd = 1;\n  \
    \      long xddddddddddddddddddd = 1;\n        long yddddddddddddddddddd = 1;\n\
    \        long zddddddddddddddddddd = 1;\n        long xddddddddddddddddddddd =\
    \ 1;\n        long yddddddddddddddddddddd = 1;\n        long zddddddddddddddddddddd\
    \ = 1;\n        long xddddddddddddddddddddddd = 1;\n        long yddddddddddddddddddddddd\
    \ = 1;\n        long zddddddddddddddddddddddd = 1;\n        long xddddddddddddddddddddddddd\
    \ = 1;\n        long yddddddddddddddddddddddddd = 1;\n        long zddddddddddddddddddddddddd\
    \ = 1;\n        long xddddddddddddddddddddddddddd = 1;\n        long yddddddddddddddddddddddddddd\
    \ = 1;\n        long zddddddddddddddddddddddddddddd = 1;\n        long xddddddddddddddddddddddddddddd\
    \ = 1;\n        long yddddddddddddddddddddddddddddd = 1;\n        long zddddddddddddddddddddddddddddddddd\
    \ = 1;\n        long xddddddddddddddddddddddddddddddddd = 1;\n        long yddddddddddddddddddddddddddddddddd\
    \ = 1;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr5xt9qi8.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (long i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n        }\n        derivative.add(sum);\n\
    \        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(sum\
    \ * x);\n            sum += xs.get(i);\n            x *= xs.get(i);\n        }\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7yjrg6dh.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += xs.get(i);\n                          ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long coef : xs) {\n            derivative.add(coef\
    \ * x);\n            x *= x;\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3hz8zos.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long y : xs) {\n            derivative.add(y\
    \ * x);\n            x *= y;\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk07w6kue.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long a\
    \ = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n      \
    \  long e = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n\
    \        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l\
    \ = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n      \
    \  long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n\
    \        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w\
    \ = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n\
    \        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h\
    \ = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n      \
    \  long l = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n\
    \        long p = 0;\n        long q = 0;\n        long r = 0;\n        long s\
    \ = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n      \
    \  long w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n\
    \        long a = 0;\n        long b = 0;\n        long c = 0;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long n = 0;\n        long o\
    \ = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n      \
    \  long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n\
    \        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z\
    \ = 0;\n        long a = 0;\n        long b = 0;\n        long c = 0;\n      \
    \  long d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n\
    \        long h = 0;\n        long i = 0;\n        long j = 0;\n        long k\
    \ = 0;\n        long l = 0;\n        long m = 0;\n        long n = 0;\n      \
    \  long o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n\
    \        long s = 0;\n        long t = 0;\n        long u = 0;\n        long v\
    \ = 0;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcpqzx4hf.java:44: error: variable x is already defined in method\
    \ derivative(ArrayList<Long>)\n        long x = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:45:\
    \ error: variable y is already defined in method derivative(ArrayList<Long>)\n\
    \        long y = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:46: error: variable\
    \ z is already defined in method derivative(ArrayList<Long>)\n        long z =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:47: error: variable a is already defined\
    \ in method derivative(ArrayList<Long>)\n        long a = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:48: error: variable b is already defined in method derivative(ArrayList<Long>)\n\
    \        long b = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:49: error: variable\
    \ c is already defined in method derivative(ArrayList<Long>)\n        long c =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:50: error: variable d is already defined\
    \ in method derivative(ArrayList<Long>)\n        long d = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:51: error: variable e is already defined in method derivative(ArrayList<Long>)\n\
    \        long e = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:52: error: variable\
    \ f is already defined in method derivative(ArrayList<Long>)\n        long f =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:53: error: variable g is already defined\
    \ in method derivative(ArrayList<Long>)\n        long g = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:54: error: variable h is already defined in method derivative(ArrayList<Long>)\n\
    \        long h = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:55: error: variable\
    \ i is already defined in method derivative(ArrayList<Long>)\n        long i =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:56: error: variable j is already defined\
    \ in method derivative(ArrayList<Long>)\n        long j = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:57: error: variable k is already defined in method derivative(ArrayList<Long>)\n\
    \        long k = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:58: error: variable\
    \ l is already defined in method derivative(ArrayList<Long>)\n        long l =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:59: error: variable m is already defined\
    \ in method derivative(ArrayList<Long>)\n        long m = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:60: error: variable n is already defined in method derivative(ArrayList<Long>)\n\
    \        long n = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:61: error: variable\
    \ o is already defined in method derivative(ArrayList<Long>)\n        long o =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:62: error: variable p is already defined\
    \ in method derivative(ArrayList<Long>)\n        long p = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:63: error: variable q is already defined in method derivative(ArrayList<Long>)\n\
    \        long q = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:64: error: variable\
    \ r is already defined in method derivative(ArrayList<Long>)\n        long r =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:65: error: variable s is already defined\
    \ in method derivative(ArrayList<Long>)\n        long s = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:66: error: variable t is already defined in method derivative(ArrayList<Long>)\n\
    \        long t = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:67: error: variable\
    \ u is already defined in method derivative(ArrayList<Long>)\n        long u =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:68: error: variable v is already defined\
    \ in method derivative(ArrayList<Long>)\n        long v = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:69: error: variable w is already defined in method derivative(ArrayList<Long>)\n\
    \        long w = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:70: error: variable\
    \ x is already defined in method derivative(ArrayList<Long>)\n        long x =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:71: error: variable y is already defined\
    \ in method derivative(ArrayList<Long>)\n        long y = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:72: error: variable z is already defined in method derivative(ArrayList<Long>)\n\
    \        long z = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:73: error: variable\
    \ a is already defined in method derivative(ArrayList<Long>)\n        long a =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:74: error: variable b is already defined\
    \ in method derivative(ArrayList<Long>)\n        long b = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:75: error: variable c is already defined in method derivative(ArrayList<Long>)\n\
    \        long c = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:76: error: variable\
    \ d is already defined in method derivative(ArrayList<Long>)\n        long d =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:77: error: variable e is already defined\
    \ in method derivative(ArrayList<Long>)\n        long e = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:78: error: variable f is already defined in method derivative(ArrayList<Long>)\n\
    \        long f = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:79: error: variable\
    \ g is already defined in method derivative(ArrayList<Long>)\n        long g =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:80: error: variable h is already defined\
    \ in method derivative(ArrayList<Long>)\n        long h = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:81: error: variable i is already defined in method derivative(ArrayList<Long>)\n\
    \        long i = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:82: error: variable\
    \ j is already defined in method derivative(ArrayList<Long>)\n        long j =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:83: error: variable k is already defined\
    \ in method derivative(ArrayList<Long>)\n        long k = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:84: error: variable l is already defined in method derivative(ArrayList<Long>)\n\
    \        long l = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:85: error: variable\
    \ m is already defined in method derivative(ArrayList<Long>)\n        long m =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:86: error: variable n is already defined\
    \ in method derivative(ArrayList<Long>)\n        long n = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:87: error: variable o is already defined in method derivative(ArrayList<Long>)\n\
    \        long o = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:88: error: variable\
    \ p is already defined in method derivative(ArrayList<Long>)\n        long p =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:89: error: variable q is already defined\
    \ in method derivative(ArrayList<Long>)\n        long q = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:90: error: variable r is already defined in method derivative(ArrayList<Long>)\n\
    \        long r = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:91: error: variable\
    \ s is already defined in method derivative(ArrayList<Long>)\n        long s =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:92: error: variable t is already defined\
    \ in method derivative(ArrayList<Long>)\n        long t = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:93: error: variable u is already defined in method derivative(ArrayList<Long>)\n\
    \        long u = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:94: error: variable\
    \ v is already defined in method derivative(ArrayList<Long>)\n        long v =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:95: error: variable w is already defined\
    \ in method derivative(ArrayList<Long>)\n        long w = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:96: error: variable x is already defined in method derivative(ArrayList<Long>)\n\
    \        long x = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:97: error: variable\
    \ y is already defined in method derivative(ArrayList<Long>)\n        long y =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:98: error: variable z is already defined\
    \ in method derivative(ArrayList<Long>)\n        long z = 0;\n             ^\n\
    /tmp/tmpcpqzx4hf.java:99: error: variable a is already defined in method derivative(ArrayList<Long>)\n\
    \        long a = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:100: error: variable\
    \ b is already defined in method derivative(ArrayList<Long>)\n        long b =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:101: error: variable c is already\
    \ defined in method derivative(ArrayList<Long>)\n        long c = 0;\n       \
    \      ^\n/tmp/tmpcpqzx4hf.java:102: error: variable d is already defined in method\
    \ derivative(ArrayList<Long>)\n        long d = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:103:\
    \ error: variable e is already defined in method derivative(ArrayList<Long>)\n\
    \        long e = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:104: error: variable\
    \ f is already defined in method derivative(ArrayList<Long>)\n        long f =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:105: error: variable g is already\
    \ defined in method derivative(ArrayList<Long>)\n        long g = 0;\n       \
    \      ^\n/tmp/tmpcpqzx4hf.java:106: error: variable h is already defined in method\
    \ derivative(ArrayList<Long>)\n        long h = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:107:\
    \ error: variable i is already defined in method derivative(ArrayList<Long>)\n\
    \        long i = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:108: error: variable\
    \ j is already defined in method derivative(ArrayList<Long>)\n        long j =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:109: error: variable k is already\
    \ defined in method derivative(ArrayList<Long>)\n        long k = 0;\n       \
    \      ^\n/tmp/tmpcpqzx4hf.java:110: error: variable l is already defined in method\
    \ derivative(ArrayList<Long>)\n        long l = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:111:\
    \ error: variable m is already defined in method derivative(ArrayList<Long>)\n\
    \        long m = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:112: error: variable\
    \ n is already defined in method derivative(ArrayList<Long>)\n        long n =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:113: error: variable o is already\
    \ defined in method derivative(ArrayList<Long>)\n        long o = 0;\n       \
    \      ^\n/tmp/tmpcpqzx4hf.java:114: error: variable p is already defined in method\
    \ derivative(ArrayList<Long>)\n        long p = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:115:\
    \ error: variable q is already defined in method derivative(ArrayList<Long>)\n\
    \        long q = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:116: error: variable\
    \ r is already defined in method derivative(ArrayList<Long>)\n        long r =\
    \ 0;\n             ^\n/tmp/tmpcpqzx4hf.java:117: error: variable s is already\
    \ defined in method derivative(ArrayList<Long>)\n        long s = 0;\n       \
    \      ^\n/tmp/tmpcpqzx4hf.java:118: error: variable t is already defined in method\
    \ derivative(ArrayList<Long>)\n        long t = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:119:\
    \ error: variable u is already defined in method derivative(ArrayList<Long>)\n\
    \        long u = 0;\n             ^\n/tmp/tmpcpqzx4hf.java:120: error: variable\
    \ v is already defined in method derivative(ArrayList<Long>)\n        long v =\
    \ 0;\n             ^\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp5lmq_i3p.java:20)\n\tat Problem.main(tmp5lmq_i3p.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long pow = 1;\n        long product = 1;\n        long sumOfSquares\
    \ = 0;\n        long sumOfProducts = 0;\n        long sumOfProductsSquares = 0;\n\
    \        long sumOfProductsSquares_1 = 0;\n        long sumOfProductsSquares_2\
    \ = 0;\n        long sumOfProductsSquares_3 = 0;\n        long sumOfProductsSquares_4\
    \ = 0;\n        long sumOfProductsSquares_5 = 0;\n        long sumOfProductsSquares_6\
    \ = 0;\n        long sumOfProductsSquares_7 = 0;\n        long sumOfProductsSquares_8\
    \ = 0;\n        long sumOfProductsSquares_9 = 0;\n        long sumOfProductsSquares_10\
    \ = 0;\n        long sumOfProductsSquares_11 = 0;\n        long sumOfProductsSquares_12\
    \ = 0;\n        long sumOfProductsSquares_13 = 0;\n        long sumOfProductsSquares_14\
    \ = 0;\n        long sumOfProductsSquares_15 = 0;\n        long sumOfProductsSquares_16\
    \ = 0;\n        long sumOfProductsSquares_17 = 0;\n        long sumOfProductsSquares_18\
    \ = 0;\n        long sumOfProductsSquares_19 = 0;\n        long sumOfProductsSquares_20\
    \ = 0;\n        long sumOfProductsSquares_21 = 0;\n        long sumOfProductsSquares_22\
    \ = 0;\n        long sumOfProductsSquares_23 = 0;\n        long sumOfProductsSquares_24\
    \ = 0;\n        long sumOfProductsSquares_25 = 0;\n        long sumOfProductsSquares_26\
    \ = 0;\n        long sumOfProductsSquares_27 = 0;\n        long sumOfProductsSquares_28\
    \ = 0;\n        long sumOfProductsSquares_29 = 0;\n        long sumOfProductsSquares_30\
    \ = 0;\n        long sumOfProductsSquares_31 = 0;\n        long sumOfProductsSquares_32\
    \ = 0;\n        long sumOfProductsSquares_33 = 0;\n        long sumOfProductsSquares_34\
    \ = 0;\n        long sumOfProductsSquares_35 = 0;\n        long sumOfProductsSquares_36\
    \ = 0;\n        long sumOfProductsSquares_37 = 0;\n        long sumOfProductsSquares_38\
    \ = 0;\n        long sumOfProductsSquares_39 = 0;\n        long sumOfProductsSquares_40\
    \ = 0;\n        long sumOfProductsSquares_41 = 0;\n        long sumOf\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9q_p9q32.java:68: error: ';' expected\n        long sumOf\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbren2e03.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (long y : xs) {\n            derivative += y;\n\
    \            derivative *= x;\n            x += 1;\n        }\n        return\
    \ derivative;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_oomygou.java:20: error: bad operand types for binary operator\
    \ '+'\n            derivative += y;\n                       ^\n  first type: \
    \ ArrayList<Long>\n  second type: long\n/tmp/tmp_oomygou.java:21: error: bad operand\
    \ types for binary operator '*'\n            derivative *= x;\n              \
    \         ^\n  first type:  ArrayList<Long>\n  second type: long\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmppnnxeyd3.java:20)\n\tat Problem.main(tmppnnxeyd3.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpdxc72pfq.java:20)\n\tat Problem.main(tmpdxc72pfq.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long sum = 0;\n        for\
    \ (long i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n        \
    \    derivative.add(sum);\n            y *= x;\n        }\n        return derivative;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp06v7qtsd.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += xs.get(i);\n                          ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpx605f0qh.java:20)\n\tat Problem.main(tmpx605f0qh.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long sum = 0;\n        for(int i = 0; i < xs.size(); i++) {\n       \
    \     sum += xs.get(i);\n        }\n        for(int i = 0; i < xs.size(); i++)\
    \ {\n            derivative.add(sum);\n        }\n        return derivative;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptk1k3hbm.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb6h0exk2.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long sum = 0;\n        for\
    \ (long i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n        }\n\
    \        for (long i = 0; i < xs.size(); i++) {\n            y += xs.get(i);\n\
    \            result.add(y / sum);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoxxsxq__.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += xs.get(i);\n                          ^\n\
    /tmp/tmpoxxsxq__.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            y += xs.get(i);\n                        ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long x : xs) {\n            sum += x;\n \
    \       }\n        derivative.add(1L);\n        for (long x : xs) {\n        \
    \    derivative.add(sum);\n        }\n        return derivative;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg1vxk7op.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 0;\n        long y = 0;\n        long sum = 0;\n        long\
    \ pow = 1;\n        for (int i = 0; i < xs.size(); i++) {\n            sum +=\
    \ xs.get(i);\n            pow *= xs.get(i);\n        }\n        derivative.add(sum);\n\
    \        for (int i = 0; i < xs.size(); i++) {\n            derivative.add(pow);\n\
    \            pow *= x;\n        }\n        return derivative;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7mntmn0q.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp658ep7vm.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long pow = 1;\n        long pow2 = 0;\n        long pow3 = 0;\n\
    \        long pow4 = 0;\n        long pow5 = 0;\n        long pow6 = 0;\n    \
    \    long pow7 = 0;\n        long pow8 = 0;\n        long pow9 = 0;\n        long\
    \ pow10 = 0;\n        long pow11 = 0;\n        long pow12 = 0;\n        long pow13\
    \ = 0;\n        long pow14 = 0;\n        long pow15 = 0;\n        long pow16 =\
    \ 0;\n        long pow17 = 0;\n        long pow18 = 0;\n        long pow19 = 0;\n\
    \        long pow20 = 0;\n        long pow21 = 0;\n        long pow22 = 0;\n \
    \       long pow23 = 0;\n        long pow24 = 0;\n        long pow25 = 0;\n  \
    \      long pow26 = 0;\n        long pow27 = 0;\n        long pow28 = 0;\n   \
    \     long pow29 = 0;\n        long pow30 = 0;\n        long pow31 = 0;\n    \
    \    long pow32 = 0;\n        long pow33 = 0;\n        long pow34 = 0;\n     \
    \   long pow35 = 0;\n        long pow36 = 0;\n        long pow37 = 0;\n      \
    \  long pow38 = 0;\n        long pow39 = 0;\n        long pow40 = 0;\n       \
    \ long pow41 = 0;\n        long pow42 = 0;\n        long pow43 = 0;\n        long\
    \ pow44 = 0;\n        long pow45 = 0;\n        long pow46 = 0;\n        long pow47\
    \ = 0;\n        long pow48 = 0;\n        long pow49 = 0;\n        long pow50 =\
    \ 0;\n        long pow51 = 0;\n        long pow52 = 0;\n        long pow53 = 0;\n\
    \        long pow54 = 0;\n        long pow55 = 0;\n        long pow56 = 0;\n \
    \       long pow57 = 0;\n        long pow58 = 0;\n        long pow59 = 0;\n  \
    \      long pow60 = 0;\n        long pow61 = 0;\n        long pow62 = 0;\n   \
    \     long pow63 = 0;\n        long pow64 = 0;\n        long pow65 = 0;\n    \
    \    long pow66 = 0;\n        long pow67 = 0;\n        long pow68 = 0;\n     \
    \   long pow69 = 0;\n        long pow70 = 0;\n        long pow71 = 0;\n      \
    \  long pow72 = 0;\n        long pow73 = 0;\n        long pow74 = 0;\n       \
    \ long pow75 = 0;\n        long pow76 = 0;\n        long pow77 = 0;\n        long\
    \ pow78 = 0;\n        long pow79 = 0;\n        long pow80 = 0;\n        long pow81\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphko9evlk.java:104: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for(int i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n        }\n        for(int i = 0; i <\
    \ xs.size(); i++) {\n            derivative.add(sum);\n            sum += xs.get(i)\
    \ * x;\n            x++;\n        }\n        return derivative;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5asmq1p.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long x : xs) {\n            sum += x;\n \
    \       }\n        derivative.add(1L);\n        for (long x : xs) {\n        \
    \    derivative.add(sum);\n            sum += x * x;\n        }\n        return\
    \ derivative;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzzk0m8dk.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long x : xs) {\n            sum += x;\n \
    \       }\n        derivative.add(1L);\n        for (long x : xs) {\n        \
    \    derivative.add(sum * x);\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0c8ewkgx.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long pow = 1;\n        long pow2 = 0;\n        long pow3 = 0;\n\
    \        long pow4 = 0;\n        long pow5 = 0;\n        long pow6 = 0;\n    \
    \    long pow7 = 0;\n        long pow8 = 0;\n        long pow9 = 0;\n        long\
    \ pow10 = 0;\n        long pow11 = 0;\n        long pow12 = 0;\n        long pow13\
    \ = 0;\n        long pow14 = 0;\n        long pow15 = 0;\n        long pow16 =\
    \ 0;\n        long pow17 = 0;\n        long pow18 = 0;\n        long pow19 = 0;\n\
    \        long pow20 = 0;\n        long pow21 = 0;\n        long pow22 = 0;\n \
    \       long pow23 = 0;\n        long pow24 = 0;\n        long pow25 = 0;\n  \
    \      long pow26 = 0;\n        long pow27 = 0;\n        long pow28 = 0;\n   \
    \     long pow29 = 0;\n        long pow30 = 0;\n        long pow31 = 0;\n    \
    \    long pow32 = 0;\n        long pow33 = 0;\n        long pow34 = 0;\n     \
    \   long pow35 = 0;\n        long pow36 = 0;\n        long pow37 = 0;\n      \
    \  long pow38 = 0;\n        long pow39 = 0;\n        long pow40 = 0;\n       \
    \ long pow41 = 0;\n        long pow42 = 0;\n        long pow43 = 0;\n        long\
    \ pow44 = 0;\n        long pow45 = 0;\n        long pow46 = 0;\n        long pow47\
    \ = 0;\n        long pow48 = 0;\n        long pow49 = 0;\n        long pow50 =\
    \ 0;\n        long pow51 = 0;\n        long pow52 = 0;\n        long pow53 = 0;\n\
    \        long pow54 = 0;\n        long pow55 = 0;\n        long pow56 = 0;\n \
    \       long pow57 = 0;\n        long pow58 = 0;\n        long pow59 = 0;\n  \
    \      long pow60 = 0;\n        long pow61 = 0;\n        long pow62 = 0;\n   \
    \     long pow63 = 0;\n        long pow64 = 0;\n        long pow65 = 0;\n    \
    \    long pow66 = 0;\n        long pow67 = 0;\n        long pow68 = 0;\n     \
    \   long pow69 = 0;\n        long pow70 = 0;\n        long pow71 = 0;\n      \
    \  long pow72 = 0;\n        long pow73 = 0;\n        long pow74 = 0;\n       \
    \ long pow75 = 0;\n        long pow76 = 0;\n        long pow77 = 0;\n        long\
    \ pow78 = 0;\n        long pow79 = 0;\n        long pow80 = 0;\n        long pow81\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjpj2xjfm.java:103: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpjpj2xjfm.java:103: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp53v9ucwz.java:20)\n\tat Problem.main(tmp53v9ucwz.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (Long coef : xs) {\n\
    \            sum += coef * x;\n            derivative.add(sum);\n            x\
    \ *= x;\n        }\n        return derivative;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6zae7jx.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long pow = 1;\n        long sum = 0;\n        for (long x : xs) {\n \
    \           sum += pow * x;\n            pow *= x;\n        }\n        derivative.add(sum);\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc7d38mrt.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long xx\
    \ = 1;\n        long yy = 1;\n        long zz = 1;\n        long xy = 1;\n   \
    \     long yz = 1;\n        long zzz = 1;\n        long xyy = 1;\n        long\
    \ yzz = 1;\n        long zzzy = 1;\n        long xyzz = 1;\n        long yzzz\
    \ = 1;\n        long zzzyy = 1;\n        long xyzzz = 1;\n        long yzzzy =\
    \ 0;\n        long zzzyz = 0;\n        long xyzzzy = 0;\n        long yzzzyz =\
    \ 0;\n        long zzzyzy = 0;\n        long xyzzzyz = 0;\n        long yzzzyzy\
    \ = 0;\n        long zzzyzyz = 0;\n        long xyzzzyzy = 0;\n        long yzzzyzyz\
    \ = 0;\n        long zzzyzyzy = 0;\n        long xyzzzyzyz = 0;\n        long\
    \ yzzzyzyzy = 0;\n        long zzzyzyzyz = 0;\n        long xyzzzyzyzy = 0;\n\
    \        long yzzzyzyzyz = 0;\n        long zzzyzyzyzy = 0;\n        long xyzzzyzyzyz\
    \ = 0;\n        long yzzzyzyzyzy = 0;\n        long zzzyzyzyzyz = 0;\n       \
    \ long xyzzzyzyzyzy = 0;\n        long yzzzyzyzyzyz = 0;\n        long zzzyzyzyzyzy\
    \ = 0;\n        long xyzzzyzyzyzyz = 0;\n        long yzzzyzyzyzyzy = 0;\n   \
    \     long zzzyzyzyzyzyz = 0;\n        long xyzzzyzyzyzyzy = 0;\n        long\
    \ yzzzyzyzyzyzyz = 0;\n        long zzzyzyzyzyzyzy = 0;\n        long xyzzzyzyzyzyzyz\
    \ = 0;\n        long yzzzyzyzyzyzyzy = 0;\n        long zzzyzyzyzyzyzyz = 0;\n\
    \        long xyzzzyzyzyzyzyzy = 0;\n        long yzzzyzyzyzyzyzyz = 0;\n    \
    \    long zzzyzyzyzyzyzyzy = 0;\n        long xyzzzyzyzyzyzyzy = 0;\n        long\
    \ yzzzyzyzyzyzyzyz = 0;\n        long zzzyzyzyzyzyzyzyz = 0;\n        long xyzzzyzyzyzyzyzyzy\
    \ = 0;\n        long yzzzyzyzyzyzyzyzyz = 0;\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8et8mw6a.java:69: error: variable xyzzzyzyzyzyzyzy is already defined\
    \ in method derivative(ArrayList<Long>)\n        long xyzzzyzyzyzyzyzy = 0;\n\
    \             ^\n/tmp/tmp8et8mw6a.java:70: error: variable yzzzyzyzyzyzyzyz is\
    \ already defined in method derivative(ArrayList<Long>)\n        long yzzzyzyzyzyzyzyz\
    \ = 0;\n             ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpmzz_rfsp.java:20)\n\tat Problem.main(tmpmzz_rfsp.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long sum = 0;\n        long pow = 1;\n        for (long x : xs) {\n \
    \           sum += pow * x;\n            pow *= x;\n        }\n        derivative.add(sum);\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4up3f6f9.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long y : xs) {\n            derivative .add(x\
    \ * y);\n            x ++;\n        }\n        return derivative;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv0bjmqf3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmprpggb6bi.java:20)\n\tat Problem.main(tmprpggb6bi.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        for (long i = 0; i < xs.size();\
    \ i++) {\n            long xi = xs.get(i);\n            long yi = y;\n       \
    \     y = xi * y;\n            result.add(yi);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppu4hgojs.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            long xi = xs.get(i);\n                       \
    \      ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (long y : xs) {\n            derivative .add(x\
    \ * y);\n            x *= y;\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeh1yq8z3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7z08pf22.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph9lbueoj.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8s0za4i5.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        for (long i = 0; i < xs.size();\
    \ i++) {\n            derivative += xs.get(i);\n            derivative += x *\
    \ y;\n            derivative += x * xs.get(i);\n            derivative += x *\
    \ x * xs.get(i);\n            derivative += x * x * x * xs.get(i);\n         \
    \   derivative += x * x * x * x * xs.get(i);\n            derivative += x * x\
    \ * x * x * x * xs.get(i);\n            derivative += x * x * x * x * x * x *\
    \ xs.get(i);\n            derivative += x * x * x * x * x * x * x * xs.get(i);\n\
    \            derivative += x * x * x * x * x * x * x * x * xs.get(i);\n      \
    \      derivative += x * x * x * x * x * x * x * x * x * xs.get(i);\n        \
    \    derivative += x * x * x * x * x * x * x * x * x * x * xs.get(i);\n      \
    \      derivative += x * x * x * x * x * x * x * x * x * x * x * xs.get(i);\n\
    \            derivative += x * x * x * x * x * x * x * x * x * x * x * x * xs.get(i);\n\
    \            derivative += x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ xs.get(i);\n            derivative += x * x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x * xs.get(i);\n            derivative += x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * xs.get(i);\n            derivative +=\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * xs.get(i);\n\
    \            derivative += x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * xs.get(i);\n            derivative += x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * xs.get(i);\n            derivative\
    \ += x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * xs.get(i);\n\
    \            derivative += x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * xs.get(i);\n            derivative += x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * xs.get(i);\n \
    \           derivative += x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * xs.get(i);\n            derivative += x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * xs.get(i);\n\
    \            derivative += x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * xs.get(i);\n            derivative += x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * \n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8p8lwufq.java:48: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp8p8lwufq.java:49: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (long i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n            derivative.add(sum);\n  \
    \      }\n        derivative.add(1);\n        return derivative;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplykmbzxr.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += xs.get(i);\n                          ^\n\
    /tmp/tmplykmbzxr.java:24: error: incompatible types: int cannot be converted to\
    \ Long\n        derivative.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for(int i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n        }\n        for(int i = 0; i <\
    \ xs.size(); i++) {\n            derivative.add((long) (xs.get(i) * x));\n   \
    \         x += xs.get(i);\n        }\n        derivative.add(sum);\n        return\
    \ derivative;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk06grad3.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long sum = 0;\n        long pow = 1;\n        for(int\
    \ i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n            pow\
    \ *= x;\n            derivative.add(sum * pow);\n        }\n        return derivative;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxg21sdxz.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        derivative.add((b * e * f) - (c * d * f));\n        derivative.add((b\
    \ * d * f) - (c * e * f));\n        derivative.add((b * c * f) - (a * d * f));\n\
    \        derivative.add((b * c * f) - (a * e * f));\n        derivative.add((b\
    \ * c * f) - (a * d * f));\n        derivative.add((b * c * f) - (a * e * f));\n\
    \        derivative.add((b * c * f) - (a * d * f));\n        derivative.add((b\
    \ * c * f) - (a * e * f));\n        derivative.add((b * c * f) - (a * d * f));\n\
    \        derivative.add((b * c * f) - (a * e * f));\n        derivative.add((b\
    \ * c * f) - (a * d * f));\n        derivative.add((b * c * f) - (a * e * f));\n\
    \        derivative.add((b * c * f) - (a * d * f));\n        derivative.add((b\
    \ * c * f) - (a * e * f));\n        derivative.add((b * c * f) - (a * d * f));\n\
    \        derivative.add((b * c * f) - (a * e * f));\n        derivative.add((b\
    \ * c * f) - (a * d * f));\n        derivative.add((b * c * f) - (a * e * f));\n\
    \        derivative.add((b * c * f) - (a * d * f));\n        derivative.add((b\
    \ * c * f) - (a * e * f));\n        derivative.add((b * c * f) - (a * d * f));\n\
    \        derivative.add((b * c * f) - (a * e * f));\n        derivative.add((b\
    \ * c * f) - (a * d * f));\n        derivative.add((b * c * f) - (a * e * f));\n\
    \        derivative.add((b * c * f) - (a * d * f));\n        derivative.add((b\
    \ * c * f) - (a * e * f));\n        derivative.add((b * c * f) - (a * d * f));\n\
    \        derivative.add((b * c * f) - (a * e * f));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8swaelp0.java:53: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long pow = 1;\n        for (long x : xs) {\n            derivative.add(pow\
    \ * x);\n            pow *= x;\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp09dm16hl.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (Long y : xs) {\n   \
    \         sum += y * x;\n            derivative.add(sum);\n            x *= y;\n\
    \        }\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7p3gl48w.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo0nyfi0g.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbnyv2gwk.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp844di6l7.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzve_8cqm.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 0;\n        long sum = 0;\n        for (long i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n        }\n        derivative.add(sum);\n\
    \        for (long i = xs.size(); i > 0; i--) {\n            derivative.add((xs.get(i\
    \ - 1) * sum));\n        }\n        return derivative;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1wo31lnt.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += xs.get(i);\n                          ^\n\
    /tmp/tmp1wo31lnt.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            derivative.add((xs.get(i - 1) * sum));\n     \
    \                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp4i9q_v2v.java:20)\n\tat Problem.main(tmp4i9q_v2v.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp2kog7ukk.java:20)\n\tat Problem.main(tmp2kog7ukk.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn468xtim.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long sum = 0;\n        for\
    \ (long i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n        }\n\
    \        derivative.add(sum);\n        derivative.add(0);\n        derivative.add(0);\n\
    \        for (long i = 2; i < xs.size(); i++) {\n            derivative.set(i,\
    \ derivative.get(i-1) + x);\n            derivative.set(i-1, derivative.get(i-2)\
    \ * x);\n            x += xs.get(i);\n        }\n        return derivative;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyy_xifdh.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += xs.get(i);\n                          ^\n\
    /tmp/tmpyy_xifdh.java:25: error: incompatible types: int cannot be converted to\
    \ Long\n        derivative.add(0);\n                       ^\n/tmp/tmpyy_xifdh.java:26:\
    \ error: incompatible types: int cannot be converted to Long\n        derivative.add(0);\n\
    \                       ^\n/tmp/tmpyy_xifdh.java:28: error: incompatible types:\
    \ possible lossy conversion from long to int\n            derivative.set(i, derivative.get(i-1)\
    \ + x);\n                                              ^\n/tmp/tmpyy_xifdh.java:29:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        derivative.set(i-1, derivative.get(i-2) * x);\n                     \
    \                           ^\n/tmp/tmpyy_xifdh.java:30: error: incompatible types:\
    \ possible lossy conversion from long to int\n            x += xs.get(i);\n  \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbn09i0rf.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 0;\n        for (long y : xs) {\n            x += y;\n     \
    \       result.add(1);\n        }\n        result.add(0);\n        while (!result.isEmpty())\
    \ {\n            long y = result.get(result.size() - 1);\n            int i =\
    \ result.size() - 2;\n            while (i >= 0) {\n                long temp\
    \ = result.get(i);\n                result.set(i, result.get(i - 1) * y + temp);\n\
    \                i -= 1;\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq1aqeayb.java:21: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpq1aqeayb.java:23:\
    \ error: incompatible types: int cannot be converted to Long\n        result.add(0);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptake9q1o.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 1;\n        long sum = 0;\n        for(int i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n            derivative.add(sum);\n  \
    \          x += 1L;\n        }\n        return derivative;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_th7db3.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long pow = 1;\n        long pow2 = 0;\n        long pow3 = 0;\n\
    \        long pow4 = 0;\n        long pow5 = 0;\n        long pow6 = 0;\n    \
    \    long pow7 = 0;\n        long pow8 = 0;\n        long pow9 = 0;\n        long\
    \ pow10 = 0;\n        long pow11 = 0;\n        long pow12 = 0;\n        long pow13\
    \ = 0;\n        long pow14 = 0;\n        long pow15 = 0;\n        long pow16 =\
    \ 0;\n        long pow17 = 0;\n        long pow18 = 0;\n        long pow19 = 0;\n\
    \        long pow20 = 0;\n        long pow21 = 0;\n        long pow22 = 0;\n \
    \       long pow23 = 0;\n        long pow24 = 0;\n        long pow25 = 0;\n  \
    \      long pow26 = 0;\n        long pow27 = 0;\n        long pow28 = 0;\n   \
    \     long pow29 = 0;\n        long pow30 = 0;\n        long pow31 = 0;\n    \
    \    long pow32 = 0;\n        long pow33 = 0;\n        long pow34 = 0;\n     \
    \   long pow35 = 0;\n        long pow36 = 0;\n        long pow37 = 0;\n      \
    \  long pow38 = 0;\n        long pow39 = 0;\n        long pow40 = 0;\n       \
    \ long pow41 = 0;\n        long pow42 = 0;\n        long pow43 = 0;\n        long\
    \ pow44 = 0;\n        long pow45 = 0;\n        long pow46 = 0;\n        long pow47\
    \ = 0;\n        long pow48 = 0;\n        long pow49 = 0;\n        long pow50 =\
    \ 0;\n        long pow51 = 0;\n        long pow52 = 0;\n        long pow53 = 0;\n\
    \        long pow54 = 0;\n        long pow55 = 0;\n        long pow56 = 0;\n \
    \       long pow57 = 0;\n        long pow58 = 0;\n        long pow59 = 0;\n  \
    \      long pow60 = 0;\n        long pow61 = 0;\n        long pow62 = 0;\n   \
    \     long pow63 = 0;\n        long pow64 = 0;\n        long pow65 = 0;\n    \
    \    long pow66 = 0;\n        long pow67 = 0;\n        long pow68 = 0;\n     \
    \   long pow69 = 0;\n        long pow70 = 0;\n        long pow71 = 0;\n      \
    \  long pow72 = 0;\n        long pow73 = 0;\n        long pow74 = 0;\n       \
    \ long pow75 = 0;\n        long pow76 = 0;\n        long pow77 = 0;\n        long\
    \ pow78 = 0;\n        long pow79 = 0;\n        long pow80 = 0;\n        long pow81\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqh0_3amg.java:103: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpqh0_3amg.java:103: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm_6t7dqj.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long power = 1;\n        long sum = 0;\n        for (long x : xs) {\n\
    \            sum += power * x;\n            power *= x;\n        }\n        derivative.add(sum);\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6pu1mzs.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0iupzbs.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long pow = 1;\n        long\
    \ sum = 0;\n        for(int i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n\
    \            pow *= x;\n            derivative.add(sum);\n            sum += xs.get(i)\
    \ * pow;\n            pow *= y;\n            derivative.add(sum);\n          \
    \  x += 1;\n            y += 1;\n        }\n        return derivative;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbpr9qbkm.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc1ifzszc.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long sum = 0;\n        for(int\
    \ i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n        }\n   \
    \     for(int i = 0; i < xs.size(); i++) {\n            derivative.add(sum);\n\
    \            sum += xs.get(i) * x;\n            x += 1;\n        }\n        return\
    \ derivative;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpawl1r1xu.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long d\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long zd = 0;\n   \
    \     long xd2 = 0;\n        long yd2 = 0;\n        long zd2 = 0;\n        long\
    \ xd3 = 0;\n        long yd3 = 0;\n        long zd3 = 0;\n        long xd4 = 0;\n\
    \        long yd4 = 0;\n        long zd4 = 0;\n        long xd5 = 0;\n       \
    \ long yd5 = 0;\n        long zd5 = 0;\n        long xd6 = 0;\n        long yd6\
    \ = 0;\n        long zd6 = 0;\n        long xd7 = 0;\n        long yd7 = 0;\n\
    \        long zd7 = 0;\n        long xd8 = 0;\n        long yd8 = 0;\n       \
    \ long zd8 = 0;\n        long xd9 = 0;\n        long yd9 = 0;\n        long zd9\
    \ = 0;\n        long xd10 = 0;\n        long yd10 = 0;\n        long zd10 = 0;\n\
    \        long xd11 = 0;\n        long yd11 = 0;\n        long zd11 = 0;\n    \
    \    long xd12 = 0;\n        long yd12 = 0;\n        long zd12 = 0;\n        long\
    \ xd13 = 0;\n        long yd13 = 0;\n        long zd13 = 0;\n        long xd14\
    \ = 0;\n        long yd14 = 0;\n        long zd14 = 0;\n        long xd15 = 0;\n\
    \        long yd15 = 0;\n        long zd15 = 0;\n        long xd16 = 0;\n    \
    \    long yd16 = 0;\n        long zd16 = 0;\n        long xd17 = 0;\n        long\
    \ yd17 = 0;\n        long zd17 = 0;\n        long xd18 = 0;\n        long yd18\
    \ = 0;\n        long zd18 = 0;\n        long xd19 = 0;\n        long yd19 = 0;\n\
    \        long zd19 = 0;\n        long xd20 = 0;\n        long yd20 = 0;\n    \
    \    long zd20 = 0;\n        long xd21 = 0;\n        long yd21 = 0;\n        long\
    \ zd21 = 0;\n        long xd22 = 0;\n        long yd22 = 0;\n        long zd22\
    \ = 0;\n        long xd23 = 0;\n        long yd23 = 0;\n        long zd23 = 0;\n\
    \        long xd24 = 0;\n        long yd24 = 0;\n        long zd24 = 0;\n    \
    \    long xd25 = 0;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr3zhy_42.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for (Long coef : xs) {\n\
    \            sum += coef * x;\n            derivative.add(sum);\n            x\
    \ *= coef;\n        }\n        return derivative;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddczdlf0.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long sum = 0;\n        for(int\
    \ i = 0; i < xs.size(); i++) {\n            sum += xs.get(i);\n            y +=\
    \ xs.get(i) * x;\n            derivative.add(sum);\n            x += 1;\n    \
    \    }\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr21pwak2.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long d\
    \ = 0;\n        long xsq = 0;\n        long xsq2 = 0;\n        long xsq3 = 0;\n\
    \        long xsq4 = 0;\n        long xsq5 = 0;\n        long xsq6 = 0;\n    \
    \    long xsq7 = 0;\n        long xsq8 = 0;\n        long xsq9 = 0;\n        long\
    \ xsq10 = 0;\n        long xsq11 = 0;\n        long xsq12 = 0;\n        long xsq13\
    \ = 0;\n        long xsq14 = 0;\n        long xsq15 = 0;\n        long xsq16 =\
    \ 0;\n        long xsq17 = 0;\n        long xsq18 = 0;\n        long xsq19 = 0;\n\
    \        long xsq20 = 0;\n        long xsq21 = 0;\n        long xsq22 = 0;\n \
    \       long xsq23 = 0;\n        long xsq24 = 0;\n        long xsq25 = 0;\n  \
    \      long xsq26 = 0;\n        long xsq27 = 0;\n        long xsq28 = 0;\n   \
    \     long xsq29 = 0;\n        long xsq30 = 0;\n        long xsq31 = 0;\n    \
    \    long xsq32 = 0;\n        long xsq33 = 0;\n        long xsq34 = 0;\n     \
    \   long xsq35 = 0;\n        long xsq36 = 0;\n        long xsq37 = 0;\n      \
    \  long xsq38 = 0;\n        long xsq39 = 0;\n        long xsq40 = 0;\n       \
    \ long xsq41 = 0;\n        long xsq42 = 0;\n        long xsq43 = 0;\n        long\
    \ xsq44 = 0;\n        long xsq45 = 0;\n        long xsq46 = 0;\n        long xsq47\
    \ = 0;\n        long xsq48 = 0;\n        long xsq49 = 0;\n        long xsq50 =\
    \ 0;\n        long xsq51 = 0;\n        long xsq52 = 0;\n        long xsq53 = 0;\n\
    \        long xsq54 = 0;\n        long xsq55 = 0;\n        long xsq56 = 0;\n \
    \       long xsq57 = 0;\n        long xsq58 = 0;\n        long xsq59 = 0;\n  \
    \      long xsq60 = 0;\n        long xsq61 = 0;\n        long xsq62 = 0;\n   \
    \     long xsq63 = 0;\n        long xsq64 = 0;\n        long xsq65 = 0;\n    \
    \    long xsq66 = 0;\n        long xsq67 = 0;\n        long xsq68 = 0;\n     \
    \   long xsq69 = 0;\n        long xsq70\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmper8d5efz.java:91: error: ';' expected\n        long xsq70\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        for (Long i : xs) {\n     \
    \       derivative .add(x * i);\n            y *= i;\n        }\n        derivative\
    \ .add(y);\n        return derivative;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqjm2lugz.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long z = 1;\n        for (int\
    \ i = 0; i < xs.size(); i++) {\n            z = x * y;\n            y = xs.get(0);\n\
    \            x = z;\n            derivative.add(x);\n        }\n        return\
    \ derivative;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptx27z57q.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long coef : xs) {\n            derivative .add(coef\
    \ * x);\n            x ++;\n        }\n        return derivative;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqhjj71la.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long pow = 1;\n        long pow2 = 0;\n        long pow3 = 0;\n\
    \        long pow4 = 0;\n        long pow5 = 0;\n        long pow6 = 0;\n    \
    \    long pow7 = 0;\n        long pow8 = 0;\n        long pow9 = 0;\n        long\
    \ pow10 = 0;\n        long pow11 = 0;\n        long pow12 = 0;\n        long pow13\
    \ = 0;\n        long pow14 = 0;\n        long pow15 = 0;\n        long pow16 =\
    \ 0;\n        long pow17 = 0;\n        long pow18 = 0;\n        long pow19 = 0;\n\
    \        long pow20 = 0;\n        long pow21 = 0;\n        long pow22 = 0;\n \
    \       long pow23 = 0;\n        long pow24 = 0;\n        long pow25 = 0;\n  \
    \      long pow26 = 0;\n        long pow27 = 0;\n        long pow28 = 0;\n   \
    \     long pow29 = 0;\n        long pow30 = 0;\n        long pow31 = 0;\n    \
    \    long pow32 = 0;\n        long pow33 = 0;\n        long pow34 = 0;\n     \
    \   long pow35 = 0;\n        long pow36 = 0;\n        long pow37 = 0;\n      \
    \  long pow38 = 0;\n        long pow39 = 0;\n        long pow40 = 0;\n       \
    \ long pow41 = 0;\n        long pow42 = 0;\n        long pow43 = 0;\n        long\
    \ pow44 = 0;\n        long pow45 = 0;\n        long pow46 = 0;\n        long pow47\
    \ = 0;\n        long pow48 = 0;\n        long pow49 = 0;\n        long pow50 =\
    \ 0;\n        long pow51 = 0;\n        long pow52 = 0;\n        long pow53 = 0;\n\
    \        long pow54 = 0;\n        long pow55 = 0;\n        long pow56 = 0;\n \
    \       long pow57 = 0;\n        long pow58 = 0;\n        long pow59 = 0;\n  \
    \      long pow60 = 0;\n        long pow61 = 0;\n        long pow62 = 0;\n   \
    \     long pow63 = 0;\n        long pow64 = 0;\n        long pow65 = 0;\n    \
    \    long pow66 = 0;\n        long pow67 = 0;\n        long pow68 = 0;\n     \
    \   long pow69 = 0;\n        long pow70 = 0;\n        long pow71 = 0;\n      \
    \  long pow72 = 0;\n        long pow73 = 0;\n        long pow74 = 0;\n       \
    \ long pow75 = 0;\n        long pow76 = 0;\n        long pow77 = 0;\n        long\
    \ pow78 = 0;\n        long pow79 = 0;\n        long pow80 = 0;\n        long pow81\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ixaugww.java:103: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp5ixaugww.java:103: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for(int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp88q9bekn.java:20)\n\tat Problem.main(tmp88q9bekn.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpy90fbgr5.java:20)\n\tat Problem.main(tmpy90fbgr5.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for(int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp2iyfsiwi.java:20)\n\tat Problem.main(tmp2iyfsiwi.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long d = 0;\n        long d1\
    \ = 0;\n        long d2 = 0;\n        long d3 = 0;\n        long d4 = 0;\n   \
    \     long d5 = 0;\n        long d6 = 0;\n        long d7 = 0;\n        long d8\
    \ = 0;\n        long d9 = 0;\n        long d10 = 0;\n        long d11 = 0;\n \
    \       long d12 = 0;\n        long d13 = 0;\n        long d14 = 0;\n        long\
    \ d15 = 0;\n        long d16 = 0;\n        long d17 = 0;\n        long d18 = 0;\n\
    \        long d19 = 0;\n        long d20 = 0;\n        long d21 = 0;\n       \
    \ long d22 = 0;\n        long d23 = 0;\n        long d24 = 0;\n        long d25\
    \ = 0;\n        long d26 = 0;\n        long d27 = 0;\n        long d28 = 0;\n\
    \        long d29 = 0;\n        long d30 = 0;\n        long d31 = 0;\n       \
    \ long d32 = 0;\n        long d33 = 0;\n        long d34 = 0;\n        long d35\
    \ = 0;\n        long d36 = 0;\n        long d37 = 0;\n        long d38 = 0;\n\
    \        long d39 = 0;\n        long d40 = 0;\n        long d41 = 0;\n       \
    \ long d42 = 0;\n        long d43 = 0;\n        long d44 = 0;\n        long d45\
    \ = 0;\n        long d46 = 0;\n        long d47 = 0;\n        long d48 = 0;\n\
    \        long d49 = 0;\n        long d50 = 0;\n        long d51 = 0;\n       \
    \ long d52 = 0;\n        long d53 = 0;\n        long d54 = 0;\n        long d55\
    \ = 0;\n        long d56 = 0;\n        long d57 = 0;\n        long d58 = 0;\n\
    \        long d59 = 0;\n        long d60 = 0;\n        long d61 = 0;\n       \
    \ long d62 = 0;\n        long d63 = 0;\n        long d64 = 0;\n        long d65\
    \ = 0;\n        long d66 = 0;\n        long d67 = 0;\n        long d68 = 0;\n\
    \        long d69 = 0;\n        long d70 = 0;\n        long d71 = 0;\n       \
    \ long d72 = 0;\n        long d73 = 0;\n        long d74 = 0;\n        long d75\
    \ = 0;\n        long d76 = 0;\n        long d77 = 0;\n        long d78 = 0;\n\
    \        long d79 = 0;\n        long d80 = 0;\n        long d81 = 0;\n       \
    \ long d82 = 0;\n        long d83 = 0;\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_d9pby9m.java:105: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpwv9u_mt_.java:20)\n\tat Problem.main(tmpwv9u_mt_.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpzqggukf3.java:20)\n\tat Problem.main(tmpzqggukf3.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long sum = 0;\n        for(int i = 0; i < xs.size();\
    \ i++) {\n            sum += xs.get(i);\n            derivative.add(sum);\n  \
    \          x += xs.get(i);\n        }\n        return derivative;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp34jkvctb.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i - 1) * xs.get(i));\n        }\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbw2sg676.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmp7nplztap.java:20)\n\tat Problem.main(tmp7nplztap.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i - 1) * xs.get(i));\n        }\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrlkcza8.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        long pow = 1;\n        for(int\
    \ i = 0; i < xs.size(); i++) {\n            pow *= x;\n            derivative.add(pow);\n\
    \            pow *= xs.get(i);\n            pow *= y;\n            derivative.add(pow);\n\
    \            pow *= xs.get(i);\n            pow *= y;\n            pow *= x;\n\
    \            derivative.add(pow);\n            pow *= xs.get(i);\n           \
    \ pow *= y;\n            pow *= x;\n            derivative.add(pow);\n       \
    \     pow *= xs.get(i);\n            pow *= y;\n            pow *= x;\n      \
    \      derivative.add(pow);\n            pow *= xs.get(i);\n            pow *=\
    \ y;\n            pow *= x;\n            derivative.add(pow);\n            pow\
    \ *= xs.get(i);\n            pow *= y;\n            pow *= x;\n            derivative.add(pow);\n\
    \            pow *= xs.get(i);\n            pow *= y;\n            pow *= x;\n\
    \            derivative.add(pow);\n            pow *= xs.get(i);\n           \
    \ pow *= y;\n            pow *= x;\n            derivative.add(pow);\n       \
    \     pow *= xs.get(i);\n            pow *= y;\n            pow *= x;\n      \
    \      derivative.add(pow);\n            pow *= xs.get(i);\n            pow *=\
    \ y;\n            pow *= x;\n            derivative.add(pow);\n            pow\
    \ *= xs.get(i);\n            pow *= y;\n            pow *= x;\n            derivative.add(pow);\n\
    \            pow *= xs.get(i);\n            pow *= y;\n            pow *= x;\n\
    \            derivative.add(pow);\n            pow *= xs.get(i);\n           \
    \ pow *= y;\n            pow *= x;\n            derivative.add(pow);\n       \
    \     pow *= xs.get(i);\n            pow *= y;\n            pow *= x;\n      \
    \      derivative.add(pow);\n            pow *= xs.get(i);\n            pow *=\
    \ y;\n            pow *= x;\n            derivative.add(pow);\n            pow\
    \ *= xs.get(i);\n            pow *= y;\n            pow *= x;\n            derivative.add(pow);\n\
    \            pow *= xs.get(i);\n            pow *= y;\n            pow *= x;\n\
    \            derivative.add(pow);\n            pow *= xs.get(i);\n           \
    \ pow *= y;\n            pow *= x;\n            derivative.add(pow);\n       \
    \     pow *= xs.get(i);\n            pow *= y;\n            pow *= x;\n      \
    \      derivative.add(pow);\n            pow *= xs.get(i);\n            pow *=\
    \ y;\n            pow *= x;\n            derivative.add(pow);\n            pow\
    \ *= xs.get(i);\n            pow *= y;\n            pow *= \n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbtstjayx.java:106: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpbtstjayx.java:107: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp14leo4kk.java:83: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp14leo4kk.java:83: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long pow = 1;\n        long pow2 = 0;\n        long pow3 = 0;\n\
    \        long pow4 = 0;\n        long pow5 = 0;\n        long pow6 = 0;\n    \
    \    long pow7 = 0;\n        long pow8 = 0;\n        long pow9 = 0;\n        long\
    \ pow10 = 0;\n        long pow11 = 0;\n        long pow12 = 0;\n        long pow13\
    \ = 0;\n        long pow14 = 0;\n        long pow15 = 0;\n        long pow16 =\
    \ 0;\n        long pow17 = 0;\n        long pow18 = 0;\n        long pow19 = 0;\n\
    \        long pow20 = 0;\n        long pow21 = 0;\n        long pow22 = 0;\n \
    \       long pow23 = 0;\n        long pow24 = 0;\n        long pow25 = 0;\n  \
    \      long pow26 = 0;\n        long pow27 = 0;\n        long pow28 = 0;\n   \
    \     long pow29 = 0;\n        long pow30 = 0;\n        long pow31 = 0;\n    \
    \    long pow32 = 0;\n        long pow33 = 0;\n        long pow34 = 0;\n     \
    \   long pow35 = 0;\n        long pow36 = 0;\n        long pow37 = 0;\n      \
    \  long pow38 = 0;\n        long pow39 = 0;\n        long pow40 = 0;\n       \
    \ long pow41 = 0;\n        long pow42 = 0;\n        long pow43 = 0;\n        long\
    \ pow44 = 0;\n        long pow45 = 0;\n        long pow46 = 0;\n        long pow47\
    \ = 0;\n        long pow48 = 0;\n        long pow49 = 0;\n        long pow50 =\
    \ 0;\n        long pow51 = 0;\n        long pow52 = 0;\n        long pow53 = 0;\n\
    \        long pow54 = 0;\n        long pow55 = 0;\n        long pow56 = 0;\n \
    \       long pow57 = 0;\n        long pow58 = 0;\n        long pow59 = 0;\n  \
    \      long pow60 = 0;\n        long pow61 = 0;\n        long pow62 = 0;\n   \
    \     long pow63 = 0;\n        long pow64 = 0;\n        long pow65 = 0;\n    \
    \    long pow66 = 0;\n        long pow67 = 0;\n        long pow68 = 0;\n     \
    \   long pow69 = 0;\n        long pow70 = 0;\n        long pow71 = 0;\n      \
    \  long pow72 = 0;\n        long pow73 = 0;\n        long pow74 = 0;\n       \
    \ long pow75 = 0;\n        long pow76 = 0;\n        long pow77 = 0;\n        long\
    \ pow78 = 0;\n        long pow79 = 0;\n        long pow80 = 0;\n        long pow81\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqu9d30aq.java:103: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpqu9d30aq.java:103: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpe54u1xj0.java:20)\n\tat Problem.main(tmpe54u1xj0.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        long y = 1;\n        for (Long coef : xs) {\n  \
    \          derivative .add(coef * y);\n            y *= x;\n        }\n      \
    \  return derivative;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg0o73i75.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long sum\
    \ = 0;\n        long pow = 1;\n        long pow2 = 0;\n        long pow3 = 0;\n\
    \        long pow4 = 0;\n        long pow5 = 0;\n        long pow6 = 0;\n    \
    \    long pow7 = 0;\n        long pow8 = 0;\n        long pow9 = 0;\n        long\
    \ pow10 = 0;\n        long pow11 = 0;\n        long pow12 = 0;\n        long pow13\
    \ = 0;\n        long pow14 = 0;\n        long pow15 = 0;\n        long pow16 =\
    \ 0;\n        long pow17 = 0;\n        long pow18 = 0;\n        long pow19 = 0;\n\
    \        long pow20 = 0;\n        long pow21 = 0;\n        long pow22 = 0;\n \
    \       long pow23 = 0;\n        long pow24 = 0;\n        long pow25 = 0;\n  \
    \      long pow26 = 0;\n        long pow27 = 0;\n        long pow28 = 0;\n   \
    \     long pow29 = 0;\n        long pow30 = 0;\n        long pow31 = 0;\n    \
    \    long pow32 = 0;\n        long pow33 = 0;\n        long pow34 = 0;\n     \
    \   long pow35 = 0;\n        long pow36 = 0;\n        long pow37 = 0;\n      \
    \  long pow38 = 0;\n        long pow39 = 0;\n        long pow40 = 0;\n       \
    \ long pow41 = 0;\n        long pow42 = 0;\n        long pow43 = 0;\n        long\
    \ pow44 = 0;\n        long pow45 = 0;\n        long pow46 = 0;\n        long pow47\
    \ = 0;\n        long pow48 = 0;\n        long pow49 = 0;\n        long pow50 =\
    \ 0;\n        long pow51 = 0;\n        long pow52 = 0;\n        long pow53 = 0;\n\
    \        long pow54 = 0;\n        long pow55 = 0;\n        long pow56 = 0;\n \
    \       long pow57 = 0;\n        long pow58 = 0;\n        long pow59 = 0;\n  \
    \      long pow60 = 0;\n        long pow61 = 0;\n        long pow62 = 0;\n   \
    \     long pow63 = 0;\n        long pow64 = 0;\n        long pow65 = 0;\n    \
    \    long pow66 = 0;\n        long pow67 = 0;\n        long pow68 = 0;\n     \
    \   long pow69 = 0;\n        long pow70 = 0;\n        long pow71 = 0;\n      \
    \  long pow72 = 0;\n        long pow73 = 0;\n        long pow74 = 0;\n       \
    \ long pow75 = 0;\n        long pow76 = 0;\n        long pow77 = 0;\n        long\
    \ pow78 = 0;\n        long pow79 = 0;\n        long pow80 = 0;\n        long pow81\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8u4fh1pm.java:104: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpw87hjce7.java:20)\n\tat Problem.main(tmpw87hjce7.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long coef : xs) {\n            long d = coef\
    \ * x;\n            result.add(d);\n            x -= d;\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprwoml0lq.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long x = 0;\n        for (long y : xs) {\n            x += y;\n     \
    \       result.add(1);\n        }\n        result.add(x);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3werwgta.java:21: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long a = xs.get(0);\n        long b = xs.get(1);\n        long c = xs.get(2);\n\
    \        long d = xs.get(3);\n        long e = xs.get(4);\n        long f = xs.get(5);\n\
    \        long g = xs.get(6);\n        long h = xs.get(7);\n        long i = xs.get(8);\n\
    \        long j = xs.get(9);\n        long k = xs.get(10);\n        long l = xs.get(11);\n\
    \        long m = xs.get(12);\n        long n = xs.get(13);\n        long o =\
    \ xs.get(14);\n        long p = xs.get(15);\n        long q = xs.get(16);\n  \
    \      long r = xs.get(17);\n        long s = xs.get(18);\n        long t = xs.get(19);\n\
    \        long u = xs.get(20);\n        long v = xs.get(21);\n        long w =\
    \ xs.get(22);\n        long x = xs.get(23);\n        long y = xs.get(24);\n  \
    \      long z = xs.get(25);\n        long a = xs.get(26);\n        long b = xs.get(27);\n\
    \        long c = xs.get(28);\n        long d = xs.get(29);\n        long e =\
    \ xs.get(30);\n        long f = xs.get(31);\n        long g = xs.get(32);\n  \
    \      long h = xs.get(33);\n        long i = xs.get(34);\n        long j = xs.get(35);\n\
    \        long k = xs.get(36);\n        long l = xs.get(37);\n        long m =\
    \ xs.get(38);\n        long n = xs.get(39);\n        long o = xs.get(40);\n  \
    \      long p = xs.get(41);\n        long q = xs.get(42);\n        long r = xs.get(43);\n\
    \        long s = xs.get(44);\n        long t = xs.get(45);\n        long u =\
    \ xs.get(46);\n        long v = xs.get(47);\n        long w = xs.get(48);\n  \
    \      long x = xs.get(49);\n        long y = xs.get(50);\n        long z = xs.get(51);\n\
    \        long a = xs.get(52);\n        long b = xs.get(53);\n        long c =\
    \ xs.get(54);\n        long d = xs.get(55);\n        long e = xs.get(56);\n  \
    \      long f = xs.get(57);\n        long g = xs.get(58);\n        long h = xs.get(59);\n\
    \        long i = xs.get(60);\n        long j = xs.get(61);\n        long k =\
    \ xs.get(62);\n        long l = xs.get(63);\n        long m = xs.get(64);\n  \
    \      long n = \n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd5incfhl.java:84: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpxqmpo0ib.java:20)\n\tat Problem.main(tmpxqmpo0ib.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 0;\n        for (long i = 0; i < xs.size(); i++) {\n       \
    \     x += xs.get(i);\n            derivative.add((long) (x * x));\n        }\n\
    \        return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptq9ya3t6.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            x += xs.get(i);\n                        ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long d\
    \ = 0;\n        long xd = 0;\n        long yd = 0;\n        long zd = 0;\n   \
    \     long dd = 1;\n        long xdd = 1;\n        long ydd = 1;\n        long\
    \ zdd = 1;\n        long ddd = 1;\n        long xdd = 1;\n        long ydd = 1;\n\
    \        long zdd = 1;\n        long dddd = 1;\n        long xdd = 1;\n      \
    \  long ydd = 1;\n        long zdd = 1;\n        long dddd = 1;\n        long\
    \ xdd = 1;\n        long ydd = 1;\n        long zdd = 1;\n        long dddd =\
    \ 1;\n        long xdd = 1;\n        long ydd = 1;\n        long zdd = 1;\n  \
    \      long dddd = 1;\n        long xdd = 1;\n        long ydd = 1;\n        long\
    \ zdd = 1;\n        long dddd = 1;\n        long xdd = 1;\n        long ydd =\
    \ 1;\n        long zdd = 1;\n        long dddd = 1;\n        long xdd = 1;\n \
    \       long ydd = 1;\n        long zdd = 1;\n        long dddd = 1;\n       \
    \ long xdd = 1;\n        long ydd = 1;\n        long zdd = 1;\n        long dddd\
    \ = 1;\n        long xdd = 1;\n        long ydd = 1;\n        long zdd = 1;\n\
    \        long dddd = 1;\n        long xdd = 1;\n        long ydd = 1;\n      \
    \  long zdd = 1;\n        long dddd = 1;\n        long xdd = 1;\n        long\
    \ ydd = 1;\n        long zdd = 1;\n        long dddd = 1;\n        long xdd =\
    \ 1;\n        long ydd = 1;\n        long zdd = 1;\n        long dddd = 1;\n \
    \       long xdd = 1;\n        long ydd = 1;\n        long zdd = 1;\n        long\
    \ dddd = 1;\n        long xdd = 1;\n        long ydd = 1;\n        long zdd =\
    \ 1;\n        long dddd = 1;\n        long xdd = 1;\n        long ydd = 1;\n \
    \       long zdd = 1;\n        long dddd = 1;\n        long xdd = 1;\n       \
    \ long ydd = 1;\n        long zdd = 1;\n        long dddd = 1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3di3z5qa.java:30: error: variable xdd is already defined in method\
    \ derivative(ArrayList<Long>)\n        long xdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:31:\
    \ error: variable ydd is already defined in method derivative(ArrayList<Long>)\n\
    \        long ydd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:32: error: variable\
    \ zdd is already defined in method derivative(ArrayList<Long>)\n        long zdd\
    \ = 1;\n             ^\n/tmp/tmp3di3z5qa.java:34: error: variable xdd is already\
    \ defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n     \
    \        ^\n/tmp/tmp3di3z5qa.java:35: error: variable ydd is already defined in\
    \ method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:36: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:37: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:38: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:39: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:40: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:41: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:42: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:43: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:44: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:45: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:46: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:47: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:48: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:49: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:50: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:51: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:52: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:53: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:54: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:55: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:56: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:57: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:58: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:59: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:60: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:61: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:62: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:63: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:64: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:65: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:66: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:67: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:68: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:69: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:70: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:71: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:72: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:73: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:74: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:75: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:76: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:77: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:78: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:79: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:80: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:81: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:82: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:83: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:84: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:85: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:86: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:87: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:88: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:89: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:90: error: variable xdd is\
    \ already defined in method derivative(ArrayList<Long>)\n        long xdd = 1;\n\
    \             ^\n/tmp/tmp3di3z5qa.java:91: error: variable ydd is already defined\
    \ in method derivative(ArrayList<Long>)\n        long ydd = 1;\n             ^\n\
    /tmp/tmp3di3z5qa.java:92: error: variable zdd is already defined in method derivative(ArrayList<Long>)\n\
    \        long zdd = 1;\n             ^\n/tmp/tmp3di3z5qa.java:93: error: variable\
    \ dddd is already defined in method derivative(ArrayList<Long>)\n        long\
    \ dddd = 1;\n             ^\n63 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmph5h8d098.java:20)\n\tat Problem.main(tmph5h8d098.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long coef : xs) {\n            derivative.add(coef\
    \ * x);\n            x += 1;\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsapvzqfw.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        derivative.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++)\
    \ {\n            derivative.add(derivative.get(i) * xs.get(i));\n        }\n \
    \       return derivative;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.derivative(tmpo7xrnf1v.java:20)\n\tat Problem.main(tmpo7xrnf1v.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long x : xs) {\n            sum += x;\n \
    \       }\n        derivative.add(1L);\n        for (long x : xs) {\n        \
    \    derivative.add(sum);\n            sum += x * x;\n        }\n        return\
    \ derivative;\n\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpozr5dibf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12,\
    \ 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Long>\
    \ derivative(ArrayList<Long> xs) {\n        ArrayList<Long> derivative = new ArrayList<>();\n\
    \        long x = 1;\n        for (Long coef : xs) {\n            derivative.add(coef\
    \ * x);\n            x *= x;\n        }\n        return derivative;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9fq_4y_n.java:27)\n"
  exit_code: 1
  status: Exception
