name: HumanEval_9_rolling_max
language: ruby
prompt: "# From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2, 3,\
  \ 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
  \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
  \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
  \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
completions: ["  numbers.each_cons(2).map { |a, b| b }.reduce(:+)\nend", "  numbers.each_with_index.map\
    \ do |number, i|\n    numbers[i+1] = number if number > numbers[i+1]\n    number\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2).map { |a, b| a > b ? a : b }\n\
    end", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max\
    \ << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    rolling_max_index = index\n    rolling_max_value = number\n\
    \    numbers.each do |number|\n      if number > rolling_max_value\n        rolling_max_value\
    \ = number\n        rolling_max_index = index\n      end\n    end\n    numbers.delete_at(rolling_max_index)\n\
    \    numbers.insert(rolling_max_index, rolling_max_value)\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max_list, number|\n\
    \    max_list << number if number > max_list.last\n    max_list\n  end\nend",
  "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] > n }.compact\n\
    end", "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] > n\
    \ }.max\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index > 0\n    max\n  end\n\
    end", "  numbers.each_cons(2).map { |a, b| b }.reduce(:+)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max = number if index == 0\n    max > number\
    \ ? max : number\n  end\nend", "  numbers.each_with_index.inject([]) do |max_rolling,\
    \ el|\n    max_rolling.last < el ? max_rolling << el : max_rolling\n  end\nend",
  "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index == numbers.size - 1\n    max\n  end\nend",
  "  numbers.each_cons(2).map { |a, b| a > b ? a : b }.compact\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject(0) do |max, (number,\
    \ index)|\n    max = number if number > max\n    max\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    rolling_max = number\n    numbers.each { |n| rolling_max\
    \ = n if rolling_max > n }\n    rolling_max\n  end\nend", "  numbers.each_with_index.inject(0)\
    \ do |max, (number, index)|\n    max = max > number ? max : number\n    max =\
    \ max > numbers[index] ? max : numbers[index]\n    max = max > numbers[index +\
    \ 1] ? max : numbers[index + 1]\n    max = max > numbers[index + 2] ? max : numbers[index\
    \ + 2]\n    max = max > numbers[index + 3] ? max : numbers[index + 3]\n    max\
    \ = max > numbers[index + 4] ? max : numbers[index + 4]\n    max = max > numbers[index\
    \ + 5] ? max : numbers[index + 5]\n    max = max > numbers[index + 6] ? max :\
    \ numbers[index + 6]\n    max = max > numbers[index + 7] ? max : numbers[index\
    \ + 7]\n    max = max > numbers[index + 8] ? max : numbers[index + 8]\n    max\
    \ = max > numbers[index + 9] ? max : numbers[index + 9]\n    max = max > numbers[index\
    \ + 10] ? max : numbers[index + 10]\n    max = max > numbers[index + 11] ? max\
    \ : numbers[index + 11]\n    max = max > numbers[index + 12] ? max : numbers[index\
    \ + 12]\n    max = max > numbers[index + 13] ? max : numbers[index + 13]\n   \
    \ max = max > numbers[index + 14] ? max : numbers[index + 14]\n    max = max >\
    \ numbers[index + 15] ? max : numbers[index + 15]\n    max = max > numbers[index\
    \ + 16] ? max : numbers[index + 16]\n    max = max > numbers[index + 17] ? max\
    \ : numbers[index + 17]\n    max = max > numbers[index + 18] ? max : numbers[index\
    \ + 18]\n    max = max > numbers[index + 19] ? max : numbers[index + 19]\n   \
    \ max = max > numbers[index + 20] ? max : numbers[index + 20]\n    max = max >\
    \ numbers[index + 21] ? max : numbers[index + 21]\n    max = max > numbers[index\
    \ + 22] ? max : numbers[index + 22]\n    max = max > numbers[index + 23] ? max\
    \ : numbers[index + 23]\n    max = max > numbers[index + 24] ? max : numbers[index\
    \ + 24]\n    max = max > numbers[index + 25] ? max : numbers[index + 25]\n   \
    \ max = max > numbers[index + 26] ? max : numbers[index + 26]\n    max = max >\
    \ numbers[index + 27] ? max : numbers[index + 27]\n    max = ", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index > 0\n    max\n  end\n\
    end", "  numbers.each_cons(2) do |a, b|\n    a.last > b.last ? a : b\n  end\n\
    end", "  numbers.each_cons(2) do |a, b|\n    next if a.nil? || b.nil?\n    next\
    \ if a.last < b.last\n    a.last > b.last ? a : b\n  end\nend", "  numbers.each_with_index.map\
    \ { |number, index| number > numbers[index] ? number : numbers[index] }\nend",
  "  numbers.each_with_index do |number, index|\n    numbers[index] = number if number\
    \ > numbers[index - 1]\n  end\n  numbers\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.last > b.last\
    \ ? a : b\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i - 1] > n }.max\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i-1] > n }.compact.first\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.last > b.last ? a : b\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index == numbers.size - 1\n    max\n  end\nend",
  "  numbers.each_with_index.map { |number, index| number > numbers[index] ? number\
    \ : numbers[index] }\nend", "  numbers.each_cons(2) do |a, b|\n    a.last < b.last\
    \ ? a << b : a << b.last\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max = number if index == 0\n    max[index] =\
    \ number if number > max[index]\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max = number if index == 0\n    max.nil? || number\
    \ > max[index] ? max : max[index]\n  end\nend", "  numbers.reduce(:<<)\nend",
  "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2).map { |a, b| a > b ? a : b\
    \ }\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n \
    \   max << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_cons(2).map\
    \ { |a, b| a > b ? a : b }.max\nend", "  numbers.each_with_index.inject([]) do\
    \ |max, (number, index)|\n    max << number if index == numbers.size - 1\n   \
    \ max\n  end\nend", "  numbers.each_with_index.map { |number, index| number >\
    \ numbers[index] ? number : numbers[index] }\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.map do |number, index|\n   \
    \ number > numbers[index] ? number : numbers[index]\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.map do |number, i|\n    number\
    \ > numbers[i - 1] ? number : numbers[i - 1]\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index > 0\n    max\n  end\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b)\n \
    \ end\nend", "  numbers.each_cons(2) do |a, b|\n    next if a.nil? || b.nil?\n\
    \    a.max b\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i-1]\
    \ > n }.compact.first\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index == numbers.size - 1\n    max\n  end\nend",
  "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] <= n }.max\n\
    end", "  numbers.each_with_index.map { |number, index| number > numbers[index]\
    \ ? number : numbers[index] }\nend", "  numbers.each_with_index.inject([]) do\
    \ |max, (number, index)|\n    max << number if index == numbers.size - 1\n   \
    \ max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b",
  "  numbers.each_cons(2) do |a, b|\n    a.last > b.last ? a : b\n  end\nend", " \
    \ numbers.reduce(:<<)\nend", "  numbers.each_cons(2).map { |a, b| a > b ? a :\
    \ b }\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max = max << number if index > 0\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max << number if index > 0\n    max\n  end\nend", "  numbers.each_with_index.map\
    \ { |number, index| number > numbers[index] ? number : numbers[index] }\nend",
  "  numbers.reduce(:<<)\nend", "  numbers.each_with_index do |number, index|\n  \
    \  rolling_max_index = index\n    rolling_max_value = number\n    numbers.each\
    \ do |number|\n      if number > rolling_max_value\n        rolling_max_value\
    \ = number\n        rolling_max_index = index\n      end\n    end\n    numbers[rolling_max_index]\
    \ = rolling_max_value\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map\
    \ { |number, index| number > numbers[index] ? number : numbers[index] }\nend",
  "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max = number\
    \ if index == 0\n    max > number ? max : number\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.length - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b)\n  end\nend",
  "  numbers.each_with_index do |number, index|\n    numbers[index] = number if number\
    \ > numbers[index - 1]\n  end\n  numbers\nend", "  numbers.each_cons(2) do |a,\
    \ b|\n    a.last > b.last ? a : b\n  end\nend", "  numbers.each_cons(2) do |a,\
    \ b|\n    a.max(b) if a.max(b) > b\n  end\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i-1] > n }.compact\nend", "  numbers.each_with_index\
    \ do |number, index|\n    numbers[index] = number\n    numbers[index + 1] = numbers[index]\
    \ + number\n  end\n  numbers.max\nend", "  numbers.each_with_index.map { |n, i|\
    \ n if i > 0 && numbers[i - 1] > n }.compact.first\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n  end\nend", " \
    \ numbers.each_with_index.inject([]) do |max, (number, index)|\n    max << number\
    \ if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b)\n  end\nend",
  "  numbers.each_cons(2) do |a, b|\n    a.last > b.last ? a : b\n  end\nend", " \
    \ numbers.each_cons(2) do |a, b|\n    a.last > b.last ? a : b\n  end\nend", " \
    \ numbers.each_with_index do |number, i|\n    numbers[i] = number\n    numbers[i\
    \ + 1] = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i\
    \ + 1] = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i] =\
    \ number\n  end\n  numbers.each_with_index do |number, i|\n    numbers[i + 1]\
    \ = number\n  end\n  numbers.each_with_index do |number, i|\n", "  numbers.each_with_index.map\
    \ { |number, index| number > numbers[index] ? number : numbers[index] }\nend",
  "  numbers.each_with_index.map { |n, i| n if i >= rolling_max_index }.compact\n\
    end", "  numbers.each_with_index.inject(0) do |max, (number, index)|\n    max\
    \ = max > number ? max : number\n    max = max > numbers[index] ? max : numbers[index]\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index == numbers.size - 1\n    max\n  end\nend",
  "  numbers.each_cons(2).map { |a, b| a > b ? a : b }.max\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    next if a.nil? || b.nil?\n    if a > b\n      a\n    else\n \
    \     b\n    end\n  end\nend", "  numbers.each_with_index do |number, index|\n\
    \    numbers[index] = number\n    numbers.delete_at(index) if index > 0\n  end\n\
    \  numbers\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.map { |n, i| [n, i] }.\n    sort_by {\
    \ |n, i| n }.\n    map { |n, i| n }.\n    take_while { |n| n != numbers.last }.\n\
    \    map { |n| n }.\n    to_a\nend", "  numbers.each_with_index.map { |number,\
    \ i| number if number > numbers[i-1] }\nend", "  numbers.each_with_index.inject([])\
    \ do |max_list, number|\n    rolling_max = number\n    max_list << rolling_max\
    \ if rolling_max > number\n    max_list\n  end\nend", "  numbers.each_with_index.inject(0)\
    \ do |max, (number, index)|\n    max = number if number > max\n    max\n  end\n\
    end", "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] > n\
    \ }.compact\nend", "  numbers.each_cons(2).map { |a, b| a > b ? a : b }\nend",
  "  numbers.each_cons(2) do |a, b|\n    a.last > b.last ? a : b\n  end\nend", " \
    \ numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b)\n \
    \ end\nend", "  numbers.each_with_index.map { |number, index| number > numbers[index]\
    \ ? number : numbers[index] }\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2).map\
    \ { |a, b| b }.reduce(:+)\nend", "  numbers.each_with_index.map { |n, i| n if\
    \ i >= rolling_max_index }.compact\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i-1] > n }.compact.first\nend", "  numbers.each_cons(2).map\
    \ { |a, b| b }.reduce(:+)\nend", "  numbers.each_with_index.map { |n, i| n if\
    \ i > 0 && numbers[i-1] > n }.compact.first\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i - 1] > n }.compact.first\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    next if a.nil? ||\
    \ b.nil?\n    a.last > b.last ? a : b\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2).map { |a, b| a > b ? a : b }\n\
    end", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b)\n  end\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.max(b) if a.max(b) > b\n  end\nend", "  numbers.each_with_index.map\
    \ { |number, index| number > numbers[index] ? number : numbers[index] }\nend",
  "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max = max <<\
    \ number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i-1] > n }.compact\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject(0) do |max, (number,\
    \ index)|\n    max = number if number > max\n    max\n  end\nend", "  numbers.each_with_index.map\
    \ { |n, i| [n, i] }.\n    sort_by { |n, i| n }.\n    map { |n, i| n }.\n    take_while\
    \ { |n| n != numbers.last }.\n    map(&:last)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max = number if index == 0\n    max > number ? max : number\n \
    \ end\nend", "  numbers.each_cons(2) do |a, b|\n    a.last > b.last ? a : b\n\
    \  end\nend", "  numbers.each_cons(2) do |a, b|\n    next if a.nil? || b.nil?\n\
    \    if a > b\n      a\n    else\n      b\n    end\n  end\nend", "  numbers.each_with_index.map\
    \ do |number, i|\n    number.to_i > numbers[i - 1] ? number : numbers[i - 1]\n\
    \  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max = number if index == 0\n    max > number\
    \ ? max : number\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.map { |number, index| number > numbers[index]\
    \ ? number : numbers[index] }\nend", "  numbers.each_with_index.inject([]) do\
    \ |max, (number, index)|\n    max << number if index > 0\n    max\n  end\nend",
  "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] > n }.compact\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject(0) do |max,\
    \ (number, index)|\n    max = number if index == 0\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index > 0\n    max\n  end\n\
    end", "  numbers.each_with_index.map { |number, index| number > numbers[index]\
    \ ? number : numbers[index] }\nend", "  numbers.each_with_index.map { |n, i| n\
    \ if i > 0 && numbers[i - 1] > n }.compact\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i-1] > n }.compact\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i-1] > n }.compact\nend", "  numbers.each_with_index.map\
    \ { |number, i| number > numbers[i - 1] ? number : numbers[i - 1] }\nend", " \
    \ numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i-1] > n }.compact.first\n\
    end", "  numbers.each_cons(2).map { |a, b| a > b ? a : b }\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.map { |number, i| number if\
    \ number > numbers[i - 1] }\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max = number if number > max\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index == numbers.size - 1\n    max\n  end\nend",
  "  numbers.each_with_index.map do |number, i|\n    number > numbers[i - 1] ? number\
    \ : numbers[i - 1]\n  end\nend", "  numbers.each_with_index.inject([]) do |max,\
    \ (number, index)|\n    max << number if index == numbers.length - 1\n    max\n\
    \  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b",
  "  numbers.each_cons(2) do |a, b|\n    a.max(b) if a.max(b) > b\n  end\nend", " \
    \ numbers.each_with_index do |number, index|\n    numbers[index] = number\n  \
    \  numbers.delete_at(index) if index > 0\n  end\n  numbers.max\nend", "  numbers.each_with_index.map\
    \ do |number, i|\n    number > numbers[i-1] ? number : numbers[i-1]\n  end\nend",
  "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max = max if\
    \ number > max\n    max = number if index == 0\n    max\n  end\nend", "  numbers.each_with_index.map\
    \ { |number, i| number > numbers[i-1] ? number : numbers[i-1] }\nend", "  numbers.each_cons(2).map\
    \ { |a, b| a > b ? a : b }\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b)\
    \ if a.max(b) > b\n  end\nend", "  numbers.each_with_index.inject([]) do |max,\
    \ (number, index)|\n    max << number if index == numbers.size - 1\n    max\n\
    \  end\nend", "  numbers.each_with_index.map { |number, index| number > numbers[index]\
    \ ? number : numbers[index] }\nend", "  numbers.each_with_index.inject([]) do\
    \ |max, (number, index)|\n    max = number if index == 0\n    max > number ? max\
    \ : number\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i - 1] < n }.compact.max\nend", "  numbers.each_with_index.map\
    \ { |n, i| [n, i] }.\n    sort_by { |n, i| n }.\n    map { |n, i| n }.\n    take_while\
    \ { |n| n != numbers.last }.\n    map { |n| n }.\n    reduce(:+)\nend", "  numbers.each_with_index.map\
    \ { |number, index| number > numbers[index] ? number : numbers[index] }\nend",
  "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] > n }.max\n\
    end", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    numbers[index]\
    \ = number if number > numbers[index - 1]\n  end\n  numbers\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i-1] > n }.compact.first\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do\
    \ |a, b|\n    a.last > b.last ? a : b\n  end\nend", "  numbers.each_cons(2).map\
    \ { |a, b| a > b ? a : b }\nend", "  numbers.each_with_index.inject([]) do |max,\
    \ (number, index)|\n    max << number if index == numbers.length - 1\n    max\n\
    \  end\nend", "  numbers.each_with_index.map { |n, i| [n, i] }.\n    sort_by {\
    \ |n, i| i }.\n    map { |n, i| n }.\n    take_while { |n| n != numbers.last }.\n\
    \    map { |n| n }.\n    last\nend", "  numbers.each_with_index.inject([]) do\
    \ |max, (number, index)|\n    max << number if index == numbers.size - 1\n   \
    \ max\n  end\nend", "  numbers.each_with_index do |number, index|\n    numbers[index]\
    \ = number\n    numbers[index + 1] = numbers[index] + number\n  end\n  numbers.max\n\
    end", "  numbers.each_with_index.map do |number, index|\n    number > numbers[index]\
    \ ? number : numbers[index]\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2).map { |a, b| b }.reduce(:+)\nend",
  "  numbers.each_with_index.inject([]) do |max_list, number|\n    max_list << number\
    \ if number > max_list.last\n    max_list\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    next if a.nil? ||\
    \ b.nil?\n    a.last > b.last ? a : b\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.last > b.last\
    \ ? a : b\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
