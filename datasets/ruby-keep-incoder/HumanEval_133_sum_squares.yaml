name: HumanEval_133_sum_squares
language: ruby
prompt: "# You are given a list of numbers.\n# You need to return the sum of squared\
  \ numbers in the given list,\n# round each element in the list to the upper int(Ceiling)\
  \ first.\n# Examples:\n# For lst = [1,2,3] the output should be 14\n# For lst =\
  \ [1,4,9] the output should be 98\n# For lst = [1,3,5,7] the output should be 84\n\
  # For lst = [1.4,4.2,0] the output should be 29\n# For lst = [-2.4,1,1] the output\
  \ should be 6\ndef sum_squares(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n\
  \    candidate = method(:sum_squares)\n    assert_equal(14, candidate.call([1.0,\
  \ 2.0, 3.0]))\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(84,\
  \ candidate.call([1.0, 3.0, 5.0, 7.0]))\n    assert_equal(29, candidate.call([1.4,\
  \ 4.2, 0.0]))\n    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))\n    assert_equal(10230,\
  \ candidate.call([100.0, 1.0, 15.0, 2.0]))\n    assert_equal(200000000, candidate.call([10000.0,\
  \ 10000.0]))\n    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))\n    assert_equal(1086,\
  \ candidate.call([-1.4, 17.9, 18.9, 19.9]))\n    assert_equal(0, candidate.call([0.0]))\n\
  \    assert_equal(1, candidate.call([-1.0]))\n    assert_equal(2, candidate.call([-1.0,\
  \ 1.0, 0.0]))\n  end\nend\n"
completions: ["  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  sum\nend", "  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.round}\n  lst.inject(:+)\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  lst.map!{|x|\
    \ x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.upcase}\n  lst.map!{|x| x.downcase}\n\
    \  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject(0, :+)\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nI like this solution, but I wonder if there is a\
    \ way to do it without using inject. I'm thinking about using map to create a\
    \ new array with the rounded numbers and then use inject to sum them up. I'm just\
    \ not sure how to do that.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use inject. Hope it helps.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += Math.ceil(x) ** 2\n  end\n  sum\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/ c |>\n<| c |>\n\
    No problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x*x}\n  lst.inject(0, :+)\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\n`lst.map!{|x| x.ceil}` can be written as `lst.map! { |x| x.ceil\
    \ }`\n<|/ c |>\n<| c |>\n`lst.map! { |x| x.ceil }` is more efficient than `lst.map!{|x|\
    \ x.ceil}`\n<|/ c |>\n<| c |>\n`lst.map! { |x| x.ceil }` is more efficient than\
    \ `lst.map!{|x| x.ceil}`. `lst.map!{|x| x.ceil}` will create a new array and assign\
    \ it to `lst`. `lst.map! { |x| x.ceil }` will modify the existing array in-place.\n\
    <|/ c |>\n<| c |>\n`lst.map! { |x| x.ceil }` is more efficient than `lst.map!{|x|\
    \ x.ceil}`. `lst.map!{|x| x.ceil}` will create a new array and assign it to `lst`.\
    \ `lst.map! { |x| x.ceil }` will modify the existing array in-place.\n<|/ c |>\n\
    <| c |>\n`lst.map! { |x| x.ceil }` is more efficient than `lst.map!{|x| x.ceil}`.\
    \ `lst.map!{|x| x.ceil}` will create a new array and assign it to `lst`. `lst.map!\
    \ { |x| x.ceil }` will modify the existing array in-place.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n \
    \ end\n  return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby |>\n<code>",
  "  sum = 0\n  lst.each do |x|\n    sum += x*x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x * x\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x|\
    \ x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject{|sum, el| sum + el}\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  lst.map!{|x| x.round}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject{|sum, num|\
    \ sum + num}\nend", "  sum = 0\n  lst.each do |x|\n    sum += x*x\n  end\n  sum\n\
    end", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n\
    \  lst.inject(:+)\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis\
    \ doesn't round the numbers to the ceiling first. `2.4.to_i` returns `2` not `4`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer.\n<|/\
    \ c |>\n<| a |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x*x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x*x}\n  lst.inject{|sum, e| sum + e}\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x|\
    \ x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject{|sum, e| sum + e}\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", " \
    \ sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x * x)\n  end\n  sum\nend",
  "  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.round}\n  lst.inject(0){|sum, e| sum +\
    \ e ** 2}\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x*x}\n  lst.inject(:+)\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a\
    \ dscore=0 |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\n\
    end", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.to_i}\n\
    \  lst.inject(:+)\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x*x}\n  lst.inject(:+)\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x*x}\n  lst.inject(:+)\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x.to_i ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n \
    \   sum += x * x\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n \
    \   sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n\
    \  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.to_i}\n  lst.map!{|x|\
    \ x*x}\n  lst.inject(:+)\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c\
    \ |>\nThis doesn't round the numbers to the ceiling first. Try `sum_squares([1.4,\
    \ 4.2, 0])` which returns `29` instead of `6`.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. I've updated the answer to include a solution that rounds\
    \ the numbers to the ceiling first.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I believe it can be simplified even more. `lst.inject(:+)` can be replaced\
    \ with `lst.inject(:*)`.\n<|/ c |>\n<| c |>\nI agree, thanks for pointing that\
    \ out. I've updated the answer to reflect that.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  return sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n \
    \ lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!",
  "  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x*x\n  end\n  return sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  lst.map!{|x| x.ceil}\n\
    \  lst.inject(0){|sum,x| sum + x*x}\nend", "  sum = 0\n  lst.each do |x|\n   \
    \ sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x*x\n  end\n  return sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return\
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend",
  "  lst.map!{|x| x.round}\n  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return\
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  return\
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend",
  "  lst.map!{|x| x.ceil}\n  lst.inject(:+)\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.inject(0){|sum,x|\
    \ sum + x*x}\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) **\
    \ 2\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.to_i}\n  lst.inject(0){|sum, el| sum + el**2}\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x*x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n\
    \  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.to_i}\n  lst.map!{|x|\
    \ x*x}\n  lst.inject(:+)\nend", "  sum = 0\n  lst.each do |x|\n    sum += x *\
    \ x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x * x)\n  end\n\
    \  sum\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Can\
    \ you please explain how this works?\n<|/ c |>\n<| c |>\nThe `Math.ceil` function\
    \ rounds up to the next integer. `Math.ceil` rounds down to the next integer.\
    \ `Math.ceil` rounds up to the next integer. `Math.ceil` rounds down to the next\
    \ integer. `Math.ceil` rounds up to the next integer. `Math.ceil` rounds down\
    \ to the next integer. `Math.ceil` rounds up to the next integer. `Math.ceil`\
    \ rounds down to the next integer. `Math.ceil` rounds up to the next integer.\
    \ `Math.ceil` rounds down to the next integer. `Math.ceil` rounds up to the next\
    \ integer. `Math.ceil` rounds down to the next integer. `Math.ceil` rounds up\
    \ to the next integer. `Math.ceil` rounds down to the next integer. `Math.ceil`\
    \ rounds up to the next integer. `Math.ceil` rounds down to the next integer.\
    \ `Math.ceil` rounds up to the next integer. `Math.ceil` rounds down to the next\
    \ integer. `Math.ceil` rounds up to the next integer. `Math.ceil` rounds down\
    \ to the next integer. `Math.ceil` rounds up to the next integer. `Math.ceil`\
    \ rounds down to the next integer. `Math.ceil` rounds up to the next integer.\
    \ `Math.ceil` rounds down to the next integer. `Math.ceil` rounds up to the next\
    \ integer. `Math.ceil` rounds down to the next integer. `Math.ceil` rounds up\
    \ to the next integer. `Math.ceil` rounds down to the next integer. `Math.ceil`\
    \ rounds up to the next integer. `Math.ceil` rounds down to the next integer.\
    \ `Math.ceil` rounds up to the next integer. `Math.ceil` rounds down to the next\
    \ integer. `Math.ceil` rounds up to the next integer. `Math.ceil` rounds down\
    \ to the next integer. `Math.ceil` rounds up to the next integer. `Math.ceil`\
    \ rounds down to the next integer. `Math.ceil` rounds up to the next integer.\
    \ `Math.ceil` rounds down to the next integer. `Math.ceil` rounds up to the next\
    \ integer. `Math.ceil` rounds down to the next integer. `Math.ceil", "  lst.map!{|x|\
    \ x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.upcase}\n  lst.map!{|x| x.downcase}\n\
    \  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a dscore=2 |>\n<code>", " \
    \ sum = 0\n  lst.each do |x|\n    sum += x*x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x*x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ x * x\n  end\n  sum\nend", "  lst.each do |x|\n    x.round(Ceiling(x))\n  end\n\
    \  lst.inject(:+)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby |>\n<code>",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return\
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  return sum\nend", "  lst.map!{|x| x.ceil}\n  lst.inject(:+).to_s\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| a |>\n<code>", "  sum = 0\n  lst.each do\
    \ |x|\n    sum += x * x\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.upcase}\n  lst.map!{|x| x.downcase}\n  lst.map!{|x|\
    \ x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\nend\n</code>\n<|/ a |>\n<| a\
    \ dscore=0 |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\n\
    end", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.to_i}\n\
    \  lst.inject(0) {|sum, e| sum + e * e}\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\nend", "  lst.map!{|x| x.round}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.to_i}\n  lst.inject(0) {|sum, el| sum\
    \ + el**2}\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n  sum\nend", " \
    \ lst.map!{|x| x.ceil}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += Math.ceil(x * x)\n  end\n  sum\nend", "  lst.map!{|x|\
    \ x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x*x}\n  lst.inject{|sum, num|\
    \ sum + num}\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) **\
    \ 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x\
    \ * x)\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x\
    \ * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i **\
    \ 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.ceil}\n  lst.map!", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x*x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x*x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i\n\
    \  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", " \
    \ lst.map!{|x| x.round}\n  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a dscore=1 |>\n<code>", " \
    \ sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n\
    \  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.to_i}\n  lst.inject(:+)\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", " \
    \ lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\n\
    end", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.upcase}\n\
    \  lst.map!{|x| x.downcase}\n  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n`lst.map!{|x| x.round}`\
    \ is redundant. `lst.map!{|x| x.round(2)}` would suffice.\n<|/ c |>\n<| c |>\n\
    I agree, `lst.map!{|x| x.round(2)}` would suffice. `lst.map!{|x| x.round}` would\
    \ suffice as well, though.\n<|/ c |>\n<| c |>\n`lst.map!{|x| x.round(2)}` would\
    \ suffice. `lst.map!{|x| x.round}` would suffice as well, though.\n<|/ c |>\n\
    <| c |>\n`lst.map!{|x| x.round(2)}` would suffice. `lst.map!{|x| x.round}` would\
    \ suffice as well, though.\n<|/ c |>\n<| c |>\n`lst.map!{|x| x.round(2)}` would\
    \ suffice. `lst.map!{|x| x.round}` would suffice as well, though.\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x *\
    \ x\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x*x\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) **\
    \ 2\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.inject(:+).to_i\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.round}\n  lst.inject(0){|sum,x| sum + x*x}\nend",
  "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| a |>\n<code>", "  sum = 0\n  lst.each do\
    \ |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n \
    \   sum += x * x\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x|\
    \ x.ceil}\n  lst.map!{|x| x.upcase}\n  lst.map!{|x| x.to_i}\n  lst.inject(0) {|sum,\
    \ el| sum + el ** 2}\nend\n</code>\n<|/ a |>\n<| c |>\n`lst.inject(0) {|sum, el|\
    \ sum + el ** 2}` can be replaced with `lst.inject(:+) ** (1/2)`\n<|/ c |>\n<|\
    \ c |>\n`lst.inject(:+) ** (1/2)` will also work, but `lst.inject(:+) ** (1/2)`\
    \ will also work. :)\n<|/ c |>\n<| c |>\n`lst.inject(:+) ** (1/2)` will also work,\
    \ but `lst.inject(:+) ** (1/2)` will also work. :)\n<|/ c |>\n<| c |>\n`lst.inject(:+)\
    \ ** (1/2)` will also work, but `lst.inject(:+) ** (1/2)` will also work. :)\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ x.to_i ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x\
    \ * x)\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x\
    \ * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x*x\n  end\n\
    \  sum\nend", "  lst.map!{|x| x.round}\n  lst.inject(0){|sum,x| sum + x*x}\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  return sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n \
    \ lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x * x\n  end\n  sum\nend", "  lst.map!{|x| x.ceil}\n  lst.inject(:+).to_f\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", " \
    \ sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x * x)\n  end\n  return sum\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x*x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += x * x\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  lst.map!{|x|\
    \ x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x.upcase}\n  lst.map!{|x| x.downcase}\n\
    \  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| a dscore=0 |>\n<code>", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x *\
    \ x\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.to_i}\n  lst.map!{|x|\
    \ x*x}\n  lst.inject(:+)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x|\
    \ x*x}\n  lst.inject(:+)\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a\
    \ tags=ruby,ruby-on-rails |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x *\
    \ x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  return\
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend",
  "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x*x}\n  lst.inject{|sum,x|\
    \ sum + x}\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) **\
    \ 2\n  end\n  sum\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't round the numbers\
    \ to the ceiling first\n<|/ c |>\n<| c |>\nIt does round the numbers to the ceiling\
    \ first. Try it yourself.\n<|/ c |>\n<| c |>\nIt does round the numbers to the\
    \ ceiling first. Try it yourself. `sum_squares([1.4,4.2,0])` returns `29` instead\
    \ of `6`.\n<|/ c |>\n<| c |>\nYes, it does round the numbers to the ceiling first.\
    \ Try it yourself. `sum_squares([1.4,4.2,0])` returns `29` instead of `6`.\n<|/\
    \ c |>\n<| c |>\nIt does round the numbers to the ceiling first. Try it yourself.\
    \ `sum_squares([1.4,4.2,0])` returns `29` instead of `6`.\n<|/ c |>\n<| a |>\n\
    <code>", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x*x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += x.to_i ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ x * x\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x*x}\n  lst.inject(:+)\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  lst.map!{|x| x.ceil}\n \
    \ lst.map!{|x| x.round}\n  lst.inject(:+).to_s\nend", "  sum = 0\n  lst.each do\
    \ |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", "  lst.map!{|x|\
    \ x.round}\n  lst.map!{|x| x.ceil}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to round the numbers to the nearest integer, not just round the whole list.\n\
    <|/ c |>\n<| c |>\nI thought he wanted the sum of the squares of the numbers in\
    \ the list. He said \"round each element in the list to the upper int(Ceiling)\
    \ first.\"\n<|/ c |>\n<| c |>\nThe OP also said \"round each element in the list\
    \ to the upper int(Ceiling) first.\"\n<|/ c |>\n<| c |>\nI guess I missed that\
    \ part. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution that rounds the numbers to the nearest integer.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n \
    \ end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n \
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  return\
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  return sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
