name: HumanEval_39_prime_fib
language: ruby
results:
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  return prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ + prime_fib_cache[n-2]\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ + prime_fib_cache[n-2]\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [0,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array[1] = prime_fib_array[0] + prime_fib_array[1]\n  prime_fib_array.each\
    \ do |i|\n    if i % prime_fib_array[0] == 0\n      prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n    end\n  end\n  return prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2]\n  prime_numbers = [1]\n  prime_numbers_count = n\n  while prime_numbers_count\
    \ > 0\n    prime_numbers_count -= 1\n    primes << prime_numbers[-1]\n    prime_numbers\
    \ = prime_numbers[0..-2] + [prime_numbers[-1] + prime_numbers[-2]]\n  end\n  prime_numbers.reverse\n\
    \  prime_numbers.each do |prime|\n    if prime_fib(prime) == n\n      return prime\n\
    \    end\n  end\n  return nil\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2,3]\n  for i in [4,5,6,7,8,9,10,11,12]\n    if primes.include?(prime_fib(primes.last))\
    \ == false\n      primes << prime_fib(primes.last)\n    end\n  end\n  primes.last\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_number = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    if prime_fib_number == n\n      return prime_fib_number\n    else\n\
    \      return prime_fib_number\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 2\n    puts \"2\"\n\
    \  elsif n == 3\n    puts \"3\"\n  elsif n % 2 == 0\n    puts \"Not a Fibonacci\
    \ number\"\n  else\n    puts prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    if prime_fib_array[n] == i\n   \
    \   return i\n    end\n    prime_fib_array.push(i+prime_fib_array[n])\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = n <= 2 ? 1 : prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list[0] = prime_fib_list[1] = 1\n  for i in 2..n\n    prime_fib_list[i]\
    \ = prime_fib_list[i - 1] + prime_fib_list[i - 2]\n  end\n  prime_fib_list[n]\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_number = prime_fib(n - 2)\n    if\
    \ prime_fib_number == 1\n      return n\n    else\n      return prime_fib_number\
    \ + n\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    if prime_fib_array[n] == i\n   \
    \   return i\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [0,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_number = prime_fib(n - 2)\n    if\
    \ prime_fib_number == 0\n      return n\n    else\n      return prime_fib_number\
    \ + prime_fib(n - 1)\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array[1] = prime_fib_array[0] + prime_fib_array[1]\n  prime_fib_array.each\
    \ do |i|\n    if i % prime_fib_array[0] == 0\n      prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i]\n    end\n  end\n  return prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,2]\n  prime_fib_list.each do |i|\n    if i % n == 0\n      prime_fib_list\
    \ << i\n    end\n  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_list = [1,1]\n    prime_fib_list.each\
    \ do |i|\n      prime_fib_list[i] = prime_fib_list[i-1] + prime_fib_list[i-2]\n\
    \    end\n    return prime_fib_list[n]\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime = 1\n  elsif n == 1\n    prime = 2\n  elsif n % 2 == 0\n \
    \   prime = prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    prime = prime_fib(n\
    \ - 1) + prime_fib(n - 3)\n  end\n  return prime\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n) if n <= MAX_INT else prime_fib_recursive(n)"
  stdout: b''
  stderr: "b\"/tmp/tmp84znw5u0.rb:13: else without rescue is useless\\n...erative(n)\
    \ if n <= MAX_INT else prime_fib_recursive(n)\\n...                          \
    \ ^~~~\\n/tmp/tmp84znw5u0.rb:13: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n).next\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list[0] = prime_fib_list[1] = 1\n  prime_fib_list[n] =\
    \ prime_fib_list[n-1] + prime_fib_list[n-2]\n  prime_fib_list\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list << prime_fib_list[i-1]\
    \ + prime_fib_list[i-2]\n  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  return prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_numbers\
    \ = []\n  prime_fib_numbers_index = 0\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 2\n  prime_fib_numbers_index += 2"
  stdout: b''
  stderr: "b\"/tmp/tmpbnj9983h.rb:59: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 1) do\n      prime_fib_cache[n] = prime_fib_cache.fetch(n + 2) do\n      \
    \  prime_fib_cache[n] = prime_fib_cache.fetch(n + 3) do\n          prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n + 4) do\n            prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 5) do\n              prime_fib_cache[n] = prime_fib_cache.fetch(n + 6) do\n\
    \                prime_fib_cache[n] = prime_fib_cache.fetch(n + 7) do\n      \
    \            prime_fib_cache[n] = prime_fib_cache.fetch(n + 8) do\n          \
    \          prime_fib_cache[n] = prime_fib_cache.fetch(n + 9) do\n            \
    \          prime_fib_cache[n] = prime_fib_cache.fetch(n + 10) do\n           \
    \             prime_fib_cache[n] = prime_fib_cache.fetch(n + 11) do\n        \
    \                  prime_fib_cache[n] = prime_fib_cache.fetch(n + 12) do\n   \
    \                         prime_fib_cache[n] = prime_fib_cache.fetch(n + 13) do\n\
    \                              prime_fib_cache[n] = prime_fib_cache.fetch(n +\
    \ 14) do\n                                prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 15) do\n                                  prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 16) do\n                                    prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 17) do\n                                      prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 18) do\n                                        prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 19) do\n                                          prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 20) do\n                                            prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 21) do\n                                              prime_fib_cache[n] =\
    \ prime_fib_cache.fetch(n + 22) do\n                                         \
    \       prime_fib_cache[n] = prime_fib_cache.fetch(n + 23) do\n              \
    \                                    prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 24) do\n                                                    prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n + 25) do\n                                       \
    \               "
  stdout: b''
  stderr: "b'/tmp/tmp2uqdgmik.rb:39: syntax error, unexpected end-of-input\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime_fib(1) # return 1 as it's prime\n  elsif n == 1\n    prime_fib(2)\
    \ # return 2 as it's prime\n  elsif n % 2 == 0\n    prime_fib(3) # return 3 as\
    \ it's prime\n  else\n    prime_fib(5) # return 5 as it's prime\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n) if n.is_a?(Integer) && n > 1 \\\n    else prime_fib_recursive(n)\n\
    end"
  stdout: b''
  stderr: "b'/tmp/tmpmz8lqlqh.rb:14: else without rescue is useless\\n    else prime_fib_recursive(n)\\\
    n    ^~~~\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime_fib(1)\n  elsif n == 1\n    prime_fib(2)\n  elsif n % 2 ==\
    \ 0\n    prime_fib(3 * n + 1)\n  else\n    prime_fib(3 * n + 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 2\n    puts \"2\"\n\
    \  elsif n == 3\n    puts \"3\"\n  elsif n % 2 == 0\n    puts \"Not a Fibonacci\
    \ number\"\n  else\n    puts prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ = prime_fib_cache[n-1] if n == 1 or prime_fib_cache[n-1] == nil \n  prime_fib_cache[n]\
    \ = prime_fib_cache[n-1] + prime_fib_cache[n-2] if prime_fib_cache[n-1] + prime_fib_cache[n-2]\
    \ <= n \n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { prime_fib_cache[n] = prime_fib_cache[n-1] + prime_fib_cache[n-2]\
    \ }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  else\n    puts \"n is greater than 2\"\
    \n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n   \
    \ puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts\
    \ \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n\
    \ is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\
    \n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n   \
    \ puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts\
    \ \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n\
    \ is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\
    \n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n   \
    \ puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts\
    \ \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n\
    \ is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\
    \n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n   \
    \ puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts\
    \ \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n\
    \ is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\
    \n    puts \"n is #{n}\"\n    puts \"n is #{n}\"\n    puts \""
  stdout: b''
  stderr: "b'/tmp/tmpmxy4r_x_.rb:71: unterminated string meets end of file\\n    puts\
    \ \"\\n          ^\\n/tmp/tmpmxy4r_x_.rb:71: syntax error, unexpected end-of-input,\
    \ expecting `end\\'\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2,3]\n  fib = [1]\n  while fib[-1] < n\n    primes << primes[-1] + primes[-2]\n\
    \    fib[-1] = fib[-2] + fib[-3]\n  end\n  primes.reverse\n  fib.reverse\n  primes.find\
    \ {|x| x == n}\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,2]\n  prime_fib_list.each do |i|\n    if i % n == 0\n      return i\n \
    \   end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return 2\n  else\n    prime_fib_list = [2,3]\n    prime_fib_list.each\
    \ do |i|\n      prime_fib_list.each do |j|\n        if j > i\n          break\n\
    \        end\n        if j == i + i\n          prime_fib_list << j\n        end\n\
    \      end\n    end\n    prime_fib_list.each do |i|\n      if prime_fib_list.include?(i\
    \ + n)\n        return i\n      end\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = n <= 2 ? 1 : prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  elsif n == 2\n    puts \"2 is prime\"\
    \n  elsif n == 3\n    puts \"3 is prime\"\n  elsif n % 2 == 0\n    puts \"2 is\
    \ not prime\"\n  elsif n % 3 == 0\n    puts \"3 is not prime\"\n  else\n    puts\
    \ \"n is prime\"\n    puts n\n    puts prime_fib(n - 1)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array[1] = prime_fib_array[0] + prime_fib_array[1]\n  prime_fib_array.each_with_index\
    \ do |number, index|\n    if number > n\n      prime_fib_array[index] = prime_fib_array[index-1]\
    \ + prime_fib_array[index-2]\n    end\n  end\n  return prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2,3]\n  prime_numbers = []\n  i = 5\n  while i <= n\n    prime_numbers.push(primes[i])\n\
    \    i += 2\n  end\n  prime_numbers.each do |prime|\n    prime_fib_number = prime_fib(prime)\n\
    \    prime_fib_number == prime ? prime_fib_number += 1 : prime_fib_number\n  \
    \  prime_fib_number == n ? prime_fib_number += 1 : prime_fib_number\n  end\n \
    \ prime_fib_number\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n) if n.odd? else prime_fib_iterative(n-1)\nend"
  stdout: b''
  stderr: "b'/tmp/tmpkc_cerw0.rb:13: else without rescue is useless\\n...fib_iterative(n)\
    \ if n.odd? else prime_fib_iterative(n-1)\\n...                           ^~~~\\\
    n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list.each do |j|\n    \
    \  if j+i > n\n        prime_fib_list.push(j+i)\n        break\n      end\n  \
    \  end\n  end\n  prime_fib_list.last\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  elsif n == 2\n    puts \"2 is prime\"\
    \n  elsif n == 3\n    puts \"3 is prime\"\n  elsif n % 2 == 0\n    puts \"2 is\
    \ not prime\"\n  else\n    puts \"3 is not prime\"\n  end\n  puts \"n is #{n}\"\
    \n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"\
    n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n"
  stdout: b''
  stderr: "b\"/tmp/tmplr1yxnyn.rb:72: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime_fib.memo[0] ||= 2\n    prime_fib.memo[1] ||= 2\n    prime_fib.memo[2]\
    \ ||= 2\n    prime_fib.memo[3] ||= 2\n    return prime_fib.memo[3]\n  else\n \
    \   prime_fib.memo[0] ||= prime_fib.memo[1] ||= prime_fib.memo[2] ||= prime_fib.memo[3]\
    \ ||= prime_fib.memo[4] ||= prime_fib.memo[5] ||= prime_fib.memo[6] ||= prime_fib.memo[7]\
    \ ||= prime_fib.memo[8] ||= prime_fib.memo[9] ||= prime_fib.memo[10] ||= prime_fib.memo[11]\
    \ ||= prime_fib.memo[12] ||= prime_fib.memo[13] ||= prime_fib.memo[14] ||= prime_fib.memo[15]\
    \ ||= prime_fib.memo[16] ||= prime_fib.memo[17] ||= prime_fib.memo[18] ||= prime_fib.memo[19]\
    \ ||= prime_fib.memo[20] ||= prime_fib.memo[21] ||= prime_fib.memo[22] ||= prime_fib.memo[23]\
    \ ||= prime_fib.memo[24] ||= prime_fib.memo[25] ||= prime_fib.memo[26] ||= prime_fib.memo[27]\
    \ ||= prime_fib.memo[28] ||= prime_fib.memo[29] ||= prime_fib.memo[30] ||= prime_fib.memo[31]\
    \ ||= prime_fib.memo[32] ||= prime_fib.memo[33] ||= prime_fib.memo[34] ||= prime_fib.memo[35]\
    \ ||= prime_fib.memo[36] ||= prime_fib.memo[37] ||= prime_fib.memo[38] ||= prime_fib.memo[39]\
    \ ||= prime_fib.memo[40] ||= prime_fib.memo[41] ||= prime_fib.memo[42] ||= prime_fib.memo[43]\
    \ ||= prime_fib.memo[44] ||= prime_fib.memo[45] ||= prime_fib.memo[46] ||= prime"
  stdout: b''
  stderr: "b\"/tmp/tmpq4ybe4zp.rb:20: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime_fib(1) # return 1 as it's prime\n  elsif n == 1\n    prime_fib(2)\n\
    \  elsif n % 2 == 0\n    prime_fib(3 * n + 1)\n  else\n    prime_fib(3 * n + 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [0,1]\n  prime_fib_array[1] = prime_fib_array[0] + prime_fib_array[1]\n  prime_fib_array.each\
    \ do |i|\n    if prime_fib_array[i] > n\n      prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n    end\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_number = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    return prime_fib_number\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 1) + prime_fib(n - 2)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n    prime_fib(n - 1)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ = prime_fib_cache[n-1] if n > 1 \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1].is_a? Integer \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1] > n \n  prime_fib_cache[n] = prime_fib_cache[n-1] if\
    \ prime_fib_cache[n-1].is_a? Integer \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1] > n \n  prime_fib_cache[n] = prime_fib_cache[n-1] if\
    \ prime_fib_cache[n-1].is_a? Integer \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1] > n \n  prime_fib_cache[n] = prime_fib_cache[n-1] if\
    \ prime_fib_cache[n-1].is_a? Integer \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1] > n \n  prime_fib_cache[n] = prime_fib_cache[n-1] if\
    \ prime_fib_cache[n-1].is_a? Integer \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1] > n \n  prime_fib_cache[n] = prime_fib_cache[n-1] if\
    \ prime_fib_cache[n-1].is_a? Integer \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1] > n \n  prime_fib_cache[n] = prime_fib_cache[n-1] if\
    \ prime_fib_cache[n-1].is_a? Integer \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1] > n \n  prime_fib_cache[n] = prime_fib_cache[n-1] if\
    \ prime_fib_cache[n-1].is_a? Integer \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1] > n \n  prime_fib_cache[n] = prime_fib_cache[n-1] if\
    \ prime_fib_cache[n-1].is_a? Integer \n  prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ if prime_fib_cache[n-1] > n \n  prime_fib_cache[n"
  stdout: b''
  stderr: "b\"/tmp/tmp_lt2gw4m.rb:32: syntax error, unexpected end-of-input, expecting\
    \ ']'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  elsif n == 2\n    puts \"2 is prime\"\
    \n  elsif n == 3\n    puts \"3 is prime\"\n  elsif n % 2 == 0\n    puts \"2 is\
    \ prime\"\n  elsif n % 3 == 0\n    puts \"3 is prime\"\n  else\n    puts \"5 is\
    \ prime\"\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ = prime_fib_cache[n-1] if n == 1 or prime_fib_cache[n-1] == nil \n  prime_fib_cache[n]\
    \ = prime_fib_cache[n-1] + prime_fib_cache[n-2] if prime_fib_cache[n-1] + prime_fib_cache[n-2]\
    \ <= n \n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_numbers\
    \ = Array.new(n+1)\n  prime_fib_numbers[0] = 1\n  prime_fib_numbers[1] = 1\n \
    \ prime_fib_numbers[2] = 2\n  prime_fib_numbers[3] = 2\n  prime_fib_numbers[4]\
    \ = 3\n  prime_fib_numbers[5] = 5\n  prime_fib_numbers[6] = 8\n  prime_fib_numbers[7]\
    \ = 13\n  prime_fib_numbers[8] = 21\n  prime_fib_numbers[9] = 34\n  prime_fib_numbers[10]\
    \ = 55\n  prime_fib_numbers[11] = 89\n  prime_fib_numbers[12] = 144\n  prime_fib_numbers[13]\
    \ = 233\n  prime_fib_numbers[14] = 377\n  prime_fib_numbers[15] = 610\n  prime_fib_numbers[16]\
    \ = 987\n  prime_fib_numbers[17] = 1597\n  prime_fib_numbers[18] = 2584\n  prime_fib_numbers[19]\
    \ = 4181\n  prime_fib_numbers[20] = 6765\n  prime_fib_numbers[21] = 10946\n  prime_fib_numbers[22]\
    \ = 17711\n  prime_fib_numbers[23] = 28657\n  prime_fib_numbers[24] = 46368\n\
    \  prime_fib_numbers[25] = 75025\n  prime_fib_numbers[26] = 121393\n  prime_fib_numbers[27]\
    \ = 196418\n  prime_fib_numbers[28] = 317811\n  prime_fib_numbers[29] = 514229\n\
    \  prime_fib_numbers[30] = 771907\n  prime_fib_numbers[31] = 1259763\n  prime_fib_numbers[32]\
    \ = 1987819\n  prime_fib_numbers[33] = 2517228\n  prime_fib_numbers[34] = 4052707\n\
    \  prime_fib_numbers[35] = 8058075\n  prime_fib_numbers[36] = 16089173\n  prime_fib_numbers[37]\
    \ = 24199497\n  prime_fib_numbers[38] = 39151279\n  prime_fib_numbers[39] = 57028874\n\
    \  prime_fib_numbers[40] = 95405622\n  prime_fib_numbers[41] = 15"
  stdout: b''
  stderr: "b\"/tmp/tmp0dvxgy4u.rb:55: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array[1] = prime_fib_array[0] + prime_fib_array[1]\n  for\
    \ i in 2..n\n    prime_fib_array[i] = prime_fib_array[i-1] + prime_fib_array[i-2]\n\
    \  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 2\n    puts \"2\"\n\
    \  elsif n == 3\n    puts \"3\"\n  elsif n % 2 == 0\n    puts \"Not a Fibonacci\
    \ number\"\n  else\n    puts prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n    prime_fib(n - 3)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 1) do\n      prime_fib_cache[n] = prime_fib_cache.fetch(n + 2) do\n      \
    \  prime_fib_cache[n] = prime_fib_cache.fetch(n + 3) do\n          prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n + 4) do\n            prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 5) do\n              prime_fib_cache[n] = prime_fib_cache.fetch(n + 6) do\n\
    \                prime_fib_cache[n] = prime_fib_cache.fetch(n + 7) do\n      \
    \            prime_fib_cache[n] = prime_fib_cache.fetch(n + 8) do\n          \
    \          prime_fib_cache[n] = prime_fib_cache.fetch(n + 9) do\n            \
    \          prime_fib_cache[n] = prime_fib_cache.fetch(n + 10) do\n           \
    \             prime_fib_cache[n] = prime_fib_cache.fetch(n + 11) do\n        \
    \                  prime_fib_cache[n] = prime_fib_cache.fetch(n + 12) do\n   \
    \                         prime_fib_cache[n] = prime_fib_cache.fetch(n + 13) do\n\
    \                              prime_fib_cache[n] = prime_fib_cache.fetch(n +\
    \ 14) do\n                                prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 15) do\n                                  prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 16) do\n                                    prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 17) do\n                                      prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 18) do\n                                        prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 19) do\n                                          prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 20) do\n                                            prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 21) do\n                                              prime_fib_cache[n] =\
    \ prime_fib_cache.fetch(n + 22) do\n                                         \
    \       prime_fib_cache[n] = prime_fib_cache.fetch(n + 23) do\n              \
    \                                    prime_fib_cache[n] = prime_fib_cache.fetch(n\
    \ + 24) do\n                                                    prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n + 25) do\n                                       \
    \               "
  stdout: b''
  stderr: "b'/tmp/tmpdkreb0bs.rb:39: syntax error, unexpected end-of-input\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list[i] = prime_fib_list[i-1]\
    \ + prime_fib_list[i-2]\n  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return 2\n  else\n    prime_fib_number = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    if prime_fib_number == n\n      return prime_fib_number\n    else\n\
    \      return prime_fib_number\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 1) + prime_fib(n - 2)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_numbers\
    \ = Array.new(n+1)\n  prime_fib_numbers[0] = 1\n  prime_fib_numbers[1] = 1\n \
    \ prime_fib_numbers[2] = 2\n  prime_fib_numbers[3] = 2\n  prime_fib_numbers[4]\
    \ = 3\n  prime_fib_numbers[5] = 5\n  prime_fib_numbers[6] = 8\n  prime_fib_numbers[7]\
    \ = 13\n  prime_fib_numbers[8] = 21\n  prime_fib_numbers[9] = 34\n  prime_fib_numbers[10]\
    \ = 55\n  prime_fib_numbers[11] = 89\n  prime_fib_numbers[12] = 144\n  prime_fib_numbers[13]\
    \ = 233\n  prime_fib_numbers[14] = 377\n  prime_fib_numbers[15] = 610\n  prime_fib_numbers[16]\
    \ = 987\n  prime_fib_numbers[17] = 1597\n  prime_fib_numbers[18] = 2584\n  prime_fib_numbers[19]\
    \ = 4181\n  prime_fib_numbers[20] = 6765\n  prime_fib_numbers[21] = 10946\n  prime_fib_numbers[22]\
    \ = 17711\n  prime_fib_numbers[23] = 28657\n  prime_fib_numbers[24] = 46368\n\
    \  prime_fib_numbers[25] = 75025\n  prime_fib_numbers[26] = 121393\n  prime_fib_numbers[27]\
    \ = 196418\n  prime_fib_numbers[28] = 317811\n  prime_fib_numbers[29] = 514229\n\
    \  prime_fib_numbers[30] = 771907\n  prime_fib_numbers[31] = 1215351\n  prime_fib_numbers[32]\
    \ = 1933341\n  prime_fib_numbers[33] = 3710721\n  prime_fib_numbers[34] = 5187373\n\
    \  prime_fib_numbers[35] = 8235437\n  prime_fib_numbers[36] = 13462691\n  prime_fib_numbers[37]\
    \ = 21783091\n  prime_fib_numbers[38] = 35245783\n  prime_fib_numbers[39] = 5702887\n\
    \  prime_fib_numbers[40] = 9227465\n  prime_fib_numbers[4"
  stdout: b''
  stderr: "b\"/tmp/tmpwopx0bxn.rb:55: syntax error, unexpected end-of-input, expecting\
    \ ']'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime_fib(1) # return 1 as it's prime\n  elsif n == 1\n    prime_fib(2)\n\
    \  elsif n == 2\n    prime_fib(3)\n  elsif n % 2 == 0\n    prime_fib(3 * n + 1)\n\
    \  else\n    prime_fib(3 * n + 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list[1] = prime_fib_list[0] + prime_fib_list[1]\n  for\
    \ i in 2..n\n    prime_fib_list[i] = prime_fib_list[i-1] + prime_fib_list[i-2]\n\
    \  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 1) + prime_fib(n - 2)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list[i] = prime_fib_list[i-1]\
    \ + prime_fib_list[i-2]\n  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  elsif n == 2\n    puts \"n is 2\"\n\
    \  elsif n % 2 == 0\n    puts \"n is even\"\n    puts n\n    puts prime_fib(n\
    \ - 1)\n  else\n    puts \"n is odd\"\n    puts n\n    puts prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 2\n    puts \"2\"\n\
    \  elsif n == 3\n    puts \"3\"\n  elsif n % 2 == 0\n    puts \"Not a Fibonacci\
    \ number\"\n  else\n    puts prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ + prime_fib_cache[n-2]\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2,3]\n  while primes.include?(n)\n    primes << primes.last\n    primes.last\
    \ = (primes.last**2) + 1\n  end\n  primes.last\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 0\n    puts \"0\"\n\
    \  elsif n == 1\n    puts \"1\"\n  else\n    puts prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_numbers\
    \ = []\n  prime_fib_numbers_index = 0\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_"
  stdout: b''
  stderr: "b\"/tmp/tmppf5p2a2i.rb:64: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n    prime_fib(n - 3)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_numbers\
    \ = []\n  prime_fib_numbers_index = 0\n  prime_fib_numbers_index += 2\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index\
    \ += 1\n  prime_fib_numbers_index += 1\n  prime_fib_numbers_index += 1\n  prime_"
  stdout: b''
  stderr: "b\"/tmp/tmp1jv6yaip.rb:64: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  elsif n == 2\n    puts \"2 is prime\"\
    \n  elsif n == 3\n    puts \"3 is prime\"\n  elsif n % 2 == 0\n    puts \"n is\
    \ even\"\n  else\n    puts \"n is odd\"\n  end\n  puts \"n is #{n}\"\n  puts \"\
    n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n"
  stdout: b''
  stderr: "b\"/tmp/tmpbushy46o.rb:72: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list[i] = prime_fib_list[i-1]\
    \ + prime_fib_list[i-2]\n  end\n  return prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n    prime_fib(n - 1)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n    prime_fib(n - 1)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list[i] = prime_fib_list[i-1]\
    \ + prime_fib_list[i-2]\n  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list[i] = prime_fib_list[i-1]\
    \ + prime_fib_list[i-2]\n  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    if i % n == 0\n      prime_fib_list\
    \ << i+1\n    end\n  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n) if n < prime_fib_iterative(100) else prime_fib_recursive(n)\n\
    end"
  stdout: b''
  stderr: "b'/tmp/tmp_d9fasi7.rb:13: else without rescue is useless\\n...< prime_fib_iterative(100)\
    \ else prime_fib_recursive(n)\\n...                           ^~~~\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Invalid input\"\n  elsif n == 0\n    puts \"0\"\n  elsif n\
    \ == 1\n    puts \"1\"\n  else\n    puts prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = n <= 2 ? 1 : prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 2\n    puts \"2\"\n\
    \  elsif n == 3\n    puts \"3\"\n  elsif n % 2 == 0\n    puts \"Not a Fibonacci\
    \ number\"\n  else\n    puts prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for your answer. Can you please explain me\
    \ why you used the prime number check?\n<|/ c |>\n<| c |>\nI used it to avoid\
    \ the recursion limit. Since Fibonacci numbers are the only numbers that can have\
    \ two consecutive Fibonacci numbers, I used it to avoid the recursion limit.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Can you please explain me why you used\
    \ the prime number check?\n<|/ c |>\n<| c |>\nI used it to avoid the recursion\
    \ limit. Since Fibonacci numbers are the only numbers that can have two consecutive\
    \ Fibonacci numbers, I used it to avoid the recursion limit.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Can you please explain me why you used the prime number\
    \ check?\n<|/ c |>\n<| a dscore=0 |>\n<code>"
  stdout: b''
  stderr: "b\"/tmp/tmpszvpf02d.rb:25: syntax error, unexpected '<', expecting end-of-input\\\
    n</code>\\n^\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iter(n).next\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_number = prime_fib(n - 2)\n    if\
    \ prime_fib_number == 1\n      return n\n    else\n      return prime_fib_number\n\
    \    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1, 2]\n  prime_fib_list.each do |i|\n    prime_fib_list.each do |j|\n   \
    \   prime_fib_list.each do |k|\n        prime_fib_list.each do |l|\n         \
    \ prime_fib_list.each do |m|\n            prime_fib_list.each do |n|\n       \
    \       prime_fib_list.each do |o|\n                prime_fib_list.each do |p|\n\
    \                  prime_fib_list.each do |q|\n                    prime_fib_list.each\
    \ do |r|\n                      prime_fib_list.each do |s|\n                 \
    \       prime_fib_list.each do |t|\n                          prime_fib_list.each\
    \ do |u|\n                            prime_fib_list.each do |v|\n           \
    \                   prime_fib_list.each do |w|\n                             \
    \   prime_fib_list.each do |x|\n                                  prime_fib_list.each\
    \ do |y|\n                                    prime_fib_list.each do |z|\n   \
    \                                   prime_fib_list.each do |a|\n             \
    \                           prime_fib_list.each do |b|\n                     \
    \                     prime_fib_list.each do |c|\n                           \
    \                 prime_fib_list.each do |d|\n                               \
    \               prime_fib_list.each do |e|\n                                 \
    \               prime_fib_list.each do |f|\n                                 \
    \                 prime_fib_list.each do |g|\n                               \
    \                     prime_fib_list.each do |h|\n                           \
    \                           prime_fib_list.each do |i|\n                     \
    \                                   prime_fib_list.each do |j|\n             \
    \                                             prime_fib_list.each do |k|\n   \
    \                                                         prime_fib_list.each\
    \ do |l|\n                                                              prime_fib_list.each\
    \ do |m|\n                                                                prime_fib_list.each\
    \ do |n|\n                                                                  prime_fib_list.each\
    \ do |o|\n                                                                   \
    \ prime_fib_list.each do |p|\n                                               \
    \                       prime_fib_list.each do |q|\n                         \
    \                                               prime_fib_list.each do |r|\n \
    \                                                                         prime_fib_list.each\
    \ do |s|\n                                                                   \
    \         prime_fib_list.each do |t|\n                                       \
    \                                       prime_fib_list.each do |u|\n         \
    \                                                                       prime_fib_list.each\
    \ do |v|\n                                                                   \
    \               prime_fib_list.each do |w|\n                                 \
    \                                                   prime_fib_list.each do |x|\n\
    \                                                                            \
    \          prime_fib_list.each do |y|\n                                      \
    \                                                  prime_fib_list.each do |z|\n\
    \                                                                            \
    \              prime_fib_list.each do |a"
  stdout: b''
  stderr: "b\"/tmp/tmp2ux48im4.rb:58: syntax error, unexpected end-of-input, expecting\
    \ '|'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime_fib(1)\n  elsif n == 1\n    prime_fib(2)\n  elsif n % 2 ==\
    \ 0\n    prime_fib(3 * n + 1)\n  else\n    prime_fib(3 * n + 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_numbers\
    \ = Array.new\n  prime_fib_numbers[0] = 1\n  prime_fib_numbers[1] = 1\n  prime_fib_numbers[2]\
    \ = 2\n  prime_fib_numbers[3] = 2\n  prime_fib_numbers[4] = 3\n  prime_fib_numbers[5]\
    \ = 5\n  prime_fib_numbers[6] = 8\n  prime_fib_numbers[7] = 13\n  prime_fib_numbers[8]\
    \ = 21\n  prime_fib_numbers[9] = 34\n  prime_fib_numbers[10] = 55\n  prime_fib_numbers[11]\
    \ = 89\n  prime_fib_numbers[12] = 144\n  prime_fib_numbers[13] = 233\n  prime_fib_numbers[14]\
    \ = 377\n  prime_fib_numbers[15] = 610\n  prime_fib_numbers[16] = 987\n  prime_fib_numbers[17]\
    \ = 1597\n  prime_fib_numbers[18] = 2584\n  prime_fib_numbers[19] = 4181\n  prime_fib_numbers[20]\
    \ = 6765\n  prime_fib_numbers[21] = 10946\n  prime_fib_numbers[22] = 17711\n \
    \ prime_fib_numbers[23] = 28657\n  prime_fib_numbers[24] = 46368\n  prime_fib_numbers[25]\
    \ = 75025\n  prime_fib_numbers[26] = 121393\n  prime_fib_numbers[27] = 196418\n\
    \  prime_fib_numbers[28] = 317811\n  prime_fib_numbers[29] = 514229\n  prime_fib_numbers[30]\
    \ = 771907\n  prime_fib_numbers[31] = 1215351\n  prime_fib_numbers[32] = 1622519\n\
    \  prime_fib_numbers[33] = 3276829\n  prime_fib_numbers[34] = 514229\n  prime_fib_numbers[35]\
    \ = 823571\n  prime_fib_numbers[36] = 1346269\n  prime_fib_numbers[37] = 1749088\n\
    \  prime_fib_numbers[38] = 2190651\n  prime_fib_numbers[39] = 4293941\n  prime_fib_numbers[40]\
    \ = 6774919\n  prime_fib_numbers[41] = 11765791"
  stdout: b''
  stderr: "b\"/tmp/tmprbplgpqt.rb:55: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_list = [1,2]\n    prime_fib_list.each\
    \ do |i|\n      prime_fib_list.each do |j|\n        if j + i > n\n          break\n\
    \        end\n      end\n    end\n    prime_fib_list[n]\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n      prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n        prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n) do\n          prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n            prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n         \
    \     prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n                prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n) do\n                  prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                    prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n \
    \                     prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n     \
    \                   prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n       \
    \                   prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n       \
    \                     prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n     \
    \                         prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n \
    \                               prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                  prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                    prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                      prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                        prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                          prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                            prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                              prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                  prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                    prime_fib_cache[n] =\
    \ prime_fib_cache.fetch(n) do\n                                              \
    \        prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n                  \
    \                                      prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                          prime_fib_cache"
  stdout: b''
  stderr: "b\"/tmp/tmpnfnvngu0.rb:41: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n).next\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime_fib(1)\n  elsif n == 1\n    prime_fib(2)\n  elsif n % 2 ==\
    \ 0\n    prime_fib(3 * n + 1)\n  else\n    prime_fib(3 * n + 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_numbers\
    \ = []\n  prime_fib_numbers[0] = 1\n  prime_fib_numbers[1] = 1\n  prime_fib_numbers[2]\
    \ = 2\n  prime_fib_numbers[3] = 2\n  prime_fib_numbers[4] = 3\n  prime_fib_numbers[5]\
    \ = 5\n  prime_fib_numbers[6] = 8\n  prime_fib_numbers[7] = 13\n  prime_fib_numbers[8]\
    \ = 21\n  prime_fib_numbers[9] = 34\n  prime_fib_numbers[10] = 55\n  prime_fib_numbers[11]\
    \ = 89\n  prime_fib_numbers[12] = 144\n  prime_fib_numbers[13] = 233\n  prime_fib_numbers[14]\
    \ = 377\n  prime_fib_numbers[15] = 610\n  prime_fib_numbers[16] = 987\n  prime_fib_numbers[17]\
    \ = 1597\n  prime_fib_numbers[18] = 2584\n  prime_fib_numbers[19] = 4181\n  prime_fib_numbers[20]\
    \ = 6765\n  prime_fib_numbers[21] = 10946\n  prime_fib_numbers[22] = 17711\n \
    \ prime_fib_numbers[23] = 28657\n  prime_fib_numbers[24] = 46368\n  prime_fib_numbers[25]\
    \ = 75025\n  prime_fib_numbers[26] = 121393\n  prime_fib_numbers[27] = 196418\n\
    \  prime_fib_numbers[28] = 317811\n  prime_fib_numbers[29] = 514229\n  prime_fib_numbers[30]\
    \ = 771907\n  prime_fib_numbers[31] = 1135641\n  prime_fib_numbers[32] = 1814393\n\
    \  prime_fib_numbers[33] = 2361193\n  prime_fib_numbers[34] = 3291613\n  prime_fib_numbers[35]\
    \ = 5307476\n  prime_fib_numbers[36] = 8320413\n  prime_fib_numbers[37] = 10679118\n\
    \  prime_fib_numbers[38] = 16597551\n  prime_fib_numbers[39] = 26791429\n  prime_fib_numbers[40]\
    \ = 42601329\n  prime_fib_numbers[41] = 55345789\n"
  stdout: b''
  stderr: "b\"/tmp/tmpbbwlb_br.rb:55: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    if i % prime_fib_array.length ==\
    \ 0\n      prime_fib_array << prime_fib_array[i-1] + prime_fib_array[i-2]\n  \
    \  end\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  elsif n == 2\n    puts \"2 is prime\"\
    \n  elsif n == 3\n    puts \"3 is prime\"\n  elsif n % 2 == 0\n    puts \"2 is\
    \ not prime\"\n  else\n    puts \"3 is not prime\"\n  end\n  puts \"n is #{n}\"\
    \n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"\
    n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n"
  stdout: b''
  stderr: "b\"/tmp/tmpgdtb3p7n.rb:72: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_list = [1,2]\n    prime_fib_list.each\
    \ do |i|\n      if prime_fib_list[-1] + prime_fib_list[-2] == n\n        return\
    \ prime_fib_list[-1]\n      end\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ + prime_fib_cache[n-2]\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_list = [2,3]\n    prime_fib_list.each\
    \ do |i|\n      prime_fib_list << prime_fib(i+2)\n    end\n    prime_fib_list.each\
    \ do |i|\n      if prime_fib(i) == n\n        return i\n      end\n    end\n \
    \ end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = if n < 2 then n else\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: "b\"/tmp/tmpeteo8r6i.rb:17: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    if i % n == 0\n      return i\n\
    \    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2]\n  prime_number = 3\n  while prime_number < n\n    prime_number += prime_number\n\
    \    primes << prime_number\n  end\n  primes.last\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_numbers\
    \ = Array.new(n+1)\n  prime_fib_numbers[0] = 1\n  prime_fib_numbers[1] = 1\n \
    \ prime_fib_numbers.each do |i|\n    prime_fib_numbers[i+2] = prime_fib_numbers[i]+prime_fib_numbers[i+1]\n\
    \  end\n  prime_fib_numbers[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n) if n <= MAX_INT else prime_fib_recursive(n)\nend"
  stdout: b''
  stderr: "b'/tmp/tmpm8swdf0l.rb:13: else without rescue is useless\\n...erative(n)\
    \ if n <= MAX_INT else prime_fib_recursive(n)\\n...                          \
    \ ^~~~\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n      prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n        prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n) do\n          prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n            prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n         \
    \     prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n                prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n) do\n                  prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                    prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n \
    \                     prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n     \
    \                   prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n       \
    \                   prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n       \
    \                     prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n     \
    \                         prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n \
    \                               prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                  prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                    prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                      prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                        prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                          prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                            prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                              prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                  prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                    prime_fib_cache[n] =\
    \ prime_fib_cache.fetch(n) do\n                                              \
    \        prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n                  \
    \                                      prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                          prime_fib_cache"
  stdout: b''
  stderr: "b\"/tmp/tmpn0ucev84.rb:41: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,2]\n  prime_fib_list.each do |i|\n    if i % n == 0\n      prime_fib_list\
    \ << i\n    end\n  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_number = prime_fib(n - 2)\n    if\
    \ prime_fib_number == 1\n      return n\n    else\n      return prime_fib_number\
    \ + n\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n    prime_fib(n - 1)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array[1] = prime_fib_array[0] + prime_fib_array[1]\n  prime_fib_array.each_with_index\
    \ do |number, index|\n    if number > n\n      return prime_fib_array[index]\n\
    \    end\n    prime_fib_array[index] = prime_fib_array[index-1] + prime_fib_array[index]\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache[n-1]\
    \ + prime_fib_cache[n-2]\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2,3]\n  prime_numbers = prime_numbers(n)\n  prime_numbers.each do |prime|\n\
    \    prime_fib_number = prime_fib(prime)\n    prime_fib_number == n ? primes.push(prime)\
    \ : nil\n  end\n  primes.first\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    end"
  stdout: b''
  stderr: "b\"/tmp/tmpsejugpq4.rb:17: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n      prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n        prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n) do\n          prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n            prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n         \
    \     prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n                prime_fib_cache[n]\
    \ = prime_fib_cache.fetch(n) do\n                  prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                    prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n \
    \                     prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n     \
    \                   prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n       \
    \                   prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n       \
    \                     prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n     \
    \                         prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n \
    \                               prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                  prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                    prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                      prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                        prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                          prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                            prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                              prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                  prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                    prime_fib_cache[n] =\
    \ prime_fib_cache.fetch(n) do\n                                              \
    \        prime_fib_cache[n] = prime_fib_cache.fetch(n) do\n                  \
    \                                      prime_fib_cache[n] = prime_fib_cache.fetch(n)\
    \ do\n                                                          prime_fib_cache"
  stdout: b''
  stderr: "b\"/tmp/tmp2gxpp2n1.rb:41: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ = prime_fib_cache[n-1] if n-1 in prime_fib_cache else prime_fib_cache[n-1] =\
    \ prime_fib_cache[n-2] if n-2 > 0 else prime_fib_cache[n-2] = prime_fib_cache[n-3]\
    \ if n-3 > 0 else prime_fib_cache[n-3] = prime_fib_cache[n-4] if n-4 > 0 else\
    \ prime_fib_cache[n-4] = prime_fib_cache[n-5] if n-5 >0 else prime_fib_cache[n-5]\
    \ = prime_fib_cache[n-6] if n-6 > 0 else prime_fib_cache[n-6] = prime_fib_cache[n-7]\
    \ if n-7 > 0 else prime_fib_cache[n-7] = prime_fib_cache[n-8] if n-8 > 0 else\
    \ prime_fib_cache[n-8] = prime_fib_cache[n-9] if n-9 > 0 else prime_fib_cache[n-9]\
    \ = prime_fib_cache[n-10] if n-10 > 0 else prime_fib_cache[n-10] = prime_fib_cache[n-11]\
    \ if n-11 > 0 else prime_fib_cache[n-11] = prime_fib_cache[n-12] if n-12 > 0 else\
    \ prime_fib_cache[n-12] = prime_fib_cache[n-13] if n-13 > 0 else prime_fib_cache[n-13]\
    \ = prime_fib_cache[n-14] if n-14 > 0 else prime_fib_cache[n-14] = prime_fib_cache[n-15]\
    \ if n-15 > 0 else prime_fib_cache[n-15] = prime_fib_cache[n-16] if n-16 > 0 else\
    \ prime_fib_cache[n-16] = prime_fib_cache[n-17] if n-17 > 0 else prime_fib_cache[n-17]\
    \ = prime_fib_cache[n-18] if n-18 > 0 else prime_fib_cache[n-18] = prime_fib_cache[n-19]\
    \ if n-19 > 0 else prime_fib_cache[n-19] = prime_fib_cache[n-20] if n-20 > 0 else\
    \ prime_fib_cache[n-20] = prime_fib_cache[n-21] if n-21 > 0 else prime_fib_cache[n-21]\
    \ = prime_fib_cache[n-22] if n-22 > 0 else prime_fib_cache[n-22] = prime_fib_cache[n-23]\
    \ if n-23 > 0 else prime_fib_cache[n-23] = prime_fib_cache[n-24] if n-24 > 0 else\
    \ prime_fib_cache[n-24] = prime_fib_cache[n-25] if n-25 > "
  stdout: b''
  stderr: "b\"/tmp/tmpvuc9_0jl.rb:13: warning: Pattern matching is experimental, and\
    \ the behavior may change in future versions of Ruby!\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ void value expression\\n...[n-1] if n-1 in prime_fib_cache else prime_fib_cache[n-1]\
    \ = ...\\n...         ^~~~~~~~~~~~~~~~~~~~~~\\n/tmp/tmpvuc9_0jl.rb:13: else without\
    \ rescue is useless\\n... if n-1 in prime_fib_cache else prime_fib_cache[n-1]\
    \ = prime...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n..._fib_cache[n-2] if n-2 > 0 else\
    \ prime_fib_cache[n-2] = prime...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n..._fib_cache[n-3] if n-3 > 0 else prime_fib_cache[n-3]\
    \ = prime...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n..._fib_cache[n-4] if n-4 > 0 else\
    \ prime_fib_cache[n-4] = prime...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n...e_fib_cache[n-5] if n-5 >0 else prime_fib_cache[n-5]\
    \ = prime...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n..._fib_cache[n-6] if n-6 > 0 else\
    \ prime_fib_cache[n-6] = prime...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n..._fib_cache[n-7] if n-7 > 0 else prime_fib_cache[n-7]\
    \ = prime...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n..._fib_cache[n-8] if n-8 > 0 else\
    \ prime_fib_cache[n-8] = prime...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n..._fib_cache[n-9] if n-9 > 0 else prime_fib_cache[n-9]\
    \ = prime...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n...ib_cache[n-10] if n-10 > 0 else\
    \ prime_fib_cache[n-10] = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n...ib_cache[n-11] if n-11 > 0 else prime_fib_cache[n-11]\
    \ = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n...ib_cache[n-12] if n-12 > 0 else\
    \ prime_fib_cache[n-12] = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n...ib_cache[n-13] if n-13 > 0 else prime_fib_cache[n-13]\
    \ = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n...ib_cache[n-14] if n-14 > 0 else\
    \ prime_fib_cache[n-14] = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n...ib_cache[n-15] if n-15 > 0 else prime_fib_cache[n-15]\
    \ = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n...ib_cache[n-16] if n-16 > 0 else\
    \ prime_fib_cache[n-16] = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n...ib_cache[n-17] if n-17 > 0 else prime_fib_cache[n-17]\
    \ = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n...ib_cache[n-18] if n-18 > 0 else\
    \ prime_fib_cache[n-18] = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n...ib_cache[n-19] if n-19 > 0 else prime_fib_cache[n-19]\
    \ = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n...ib_cache[n-20] if n-20 > 0 else\
    \ prime_fib_cache[n-20] = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n...ib_cache[n-21] if n-21 > 0 else prime_fib_cache[n-21]\
    \ = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n...ib_cache[n-22] if n-22 > 0 else\
    \ prime_fib_cache[n-22] = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ else without rescue is useless\\n...ib_cache[n-23] if n-23 > 0 else prime_fib_cache[n-23]\
    \ = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13: syntax\
    \ error, unexpected `else', expecting `end'\\n...ib_cache[n-24] if n-24 > 0 else\
    \ prime_fib_cache[n-24] = prim...\\n...                           ^~~~\\n/tmp/tmpvuc9_0jl.rb:13:\
    \ syntax error, unexpected end-of-input\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n) if n <= MAX_INT else prime_fib_recursive(n)\nend"
  stdout: b''
  stderr: "b'/tmp/tmpps54h5da.rb:13: else without rescue is useless\\n...erative(n)\
    \ if n <= MAX_INT else prime_fib_recursive(n)\\n...                          \
    \ ^~~~\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [0,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i+1] = prime_fib_array[i]\
    \ + prime_fib_array[i-1]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  elsif n == 2\n    puts \"2 is prime\"\
    \n  elsif n == 3\n    puts \"3 is prime\"\n  elsif n % 2 == 0\n    puts \"2 is\
    \ prime\"\n  elsif n % 3 == 0\n    puts \"3 is prime\"\n  else\n    puts \"5 is\
    \ prime\"\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return 2\n  else\n    prime_fib_number = prime_fib(n - 1)\n    if\
    \ prime_fib_number == 2\n      return n\n    else\n      return prime_fib_number\
    \ + n\n  end\nend"
  stdout: b''
  stderr: "b\"/tmp/tmphszpuoq1.rb:22: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n) if n <= MAX_INT else prime_fib_recursive(n)\nend"
  stdout: b''
  stderr: "b'/tmp/tmpv7_os67k.rb:13: else without rescue is useless\\n...erative(n)\
    \ if n <= MAX_INT else prime_fib_recursive(n)\\n...                          \
    \ ^~~~\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = if n < 2 then 1 else\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: "b\"/tmp/tmpergrr6mf.rb:17: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iter(n).next\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 2\n    puts \"2\"\n\
    \  elsif n == 3\n    puts \"3\"\n  elsif n % 2 == 0\n    puts \"Not a Fibonacci\
    \ number\"\n  else\n    puts prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list[1] = prime_fib_list[0] + prime_fib_list[1]\n  for\
    \ i in 2..n\n    prime_fib_list[i] = prime_fib_list[i-1] + prime_fib_list[i]\n\
    \  end\n  return prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime_fib(1)\n  elsif n == 1\n    prime_fib(2)\n  elsif n % 2 ==\
    \ 0\n    prime_fib(3 * n + 1)\n  else\n    prime_fib(3 * n + 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,2]\n  prime_fib_list.each do |i|\n    prime_fib_list.each do |j|\n    \
    \  if prime_fib_list.include?(i+j) && prime_fib_list.include?(i-j) && prime_fib_list.include?(j+i)\n\
    \        prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j+i)\n    \
    \    prime_fib_list.delete(i-j)\n        prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j-i)\n\
    \        prime_fib_list.delete(i-j)\n        prime_fib_list.delete(j+i)\n    \
    \    prime_fib_list.delete(j-i)\n        prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j+i)\n\
    \        prime_fib_list.delete(i-j)\n        prime_fib_list.delete(j-i)\n    \
    \    prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j-i)\n        prime_fib_list.delete(i-j)\n\
    \        prime_fib_list.delete(j+i)\n        prime_fib_list.delete(i+j)\n    \
    \    prime_fib_list.delete(j-i)\n        prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j-i)\n\
    \        prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j-i)\n    \
    \    prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j-i)\n        prime_fib_list.delete(i+j)\n\
    \        prime_fib_list.delete(j-i)\n        prime_fib_list.delete(i+j)\n    \
    \    prime_fib_list.delete(j-i)\n        prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j-i)\n\
    \        prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j-i)\n    \
    \    prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j-i)\n        prime_fib_list.delete(i+j)\n\
    \        prime_fib_list.delete(j-i)\n        prime_fib_list.delete(i+j)\n    \
    \    prime_fib_list.delete(j-i)\n        prime_fib_list.delete(i+j)\n        prime_fib_list.delete(j-i)\n\
    \        prime_fib_list.delete"
  stdout: b''
  stderr: "b\"/tmp/tmpypgvhltd.rb:57: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return 2\n  else\n    prime_fib_list = [2,3]\n    prime_fib_list.each\
    \ do |i|\n      if i % n == 0\n        return i\n      end\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [0,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i+1] = prime_fib_array[i]\
    \ + prime_fib_array[i-1]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n == 0\n    prime_fib(2)\n  elsif n == 1\n    prime_fib(1)\n  elsif n % 2 ==\
    \ 0\n    prime_fib(n - 1)\n  else\n    prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_iter(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_number = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    if prime_fib_number == n\n      return prime_fib_number\n    else\n\
    \      return prime_fib_number\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_number = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    return prime_fib_number\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 1)\n    prime_fib(n - 2)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2,3]\n  prime_numbers = []\n  prime_numbers.push(primes[0])\n  prime_numbers.push(primes[1])\n\
    \  for i in 2..n\n    prime_numbers.push(primes[prime_numbers.length-1] + primes[primes.length-2])\n\
    \  end\n  prime_numbers.push(primes[prime_numbers.length-1])\n  return prime_numbers[prime_numbers.length-1]\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n) if n <= MAX_INT else prime_fib_recursive(n)\nend"
  stdout: b''
  stderr: "b'/tmp/tmpm_bijw_b.rb:13: else without rescue is useless\\n...erative(n)\
    \ if n <= MAX_INT else prime_fib_recursive(n)\\n...                          \
    \ ^~~~\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_numbers\
    \ = Array.new(n)\n  prime_fib_numbers[0] = 0\n  prime_fib_numbers[1] = 1\n  prime_fib_numbers.each\
    \ do |i|\n    prime_fib_numbers[i+2] = prime_fib_numbers[i]+prime_fib_numbers[i+1]\n\
    \  end\n  prime_fib_numbers.each do |i|\n    if prime_fib_numbers[i] != i\n  \
    \    return i\n    end\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2]\n  prime_numbers = prime_numbers_up_to_n(n)\n  prime_numbers.each do |prime|\n\
    \    primes << prime + prime_numbers[prime]\n  end\n  primes.last\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list.each do |j|\n    \
    \  prime_fib_list.each do |k|\n        prime_fib_list.each do |l|\n          prime_fib_list.each\
    \ do |m|\n            prime_fib_list.each do |n|\n              prime_fib_list.each\
    \ do |o|\n                prime_fib_list.each do |p|\n                  prime_fib_list.each\
    \ do |q|\n                    prime_fib_list.each do |r|\n                   \
    \   prime_fib_list.each do |s|\n                        prime_fib_list.each do\
    \ |t|\n                          prime_fib_list.each do |u|\n                \
    \            prime_fib_list.each do |v|\n                              prime_fib_list.each\
    \ do |w|\n                                prime_fib_list.each do |x|\n       \
    \                           prime_fib_list.each do |y|\n                     \
    \               prime_fib_list.each do |z|\n                                 \
    \     prime_fib_list.each do |a|\n                                        prime_fib_list.each\
    \ do |b|\n                                          prime_fib_list.each do |c|\n\
    \                                            prime_fib_list.each do |d|\n    \
    \                                          prime_fib_list.each do |e|\n      \
    \                                          prime_fib_list.each do |f|\n      \
    \                                            prime_fib_list.each do |g|\n    \
    \                                                prime_fib_list.each do |h|\n\
    \                                                      prime_fib_list.each do\
    \ |i|\n                                                        prime_fib_list.each\
    \ do |j|\n                                                          prime_fib_list.each\
    \ do |k|\n                                                            prime_fib_list.each\
    \ do |l|\n                                                              prime_fib_list.each\
    \ do |m|\n                                                                prime_fib_list.each\
    \ do |n|\n                                                                  prime_fib_list.each\
    \ do |o|\n                                                                   \
    \ prime_fib_list.each do |p|\n                                               \
    \                       prime_fib_list.each do |q|\n                         \
    \                                               prime_fib_list.each do |r|\n \
    \                                                                         prime_fib_list.each\
    \ do |s|\n                                                                   \
    \         prime_fib_list.each do |t|\n                                       \
    \                                       prime_fib_list.each do |u|\n         \
    \                                                                       prime_fib_list.each\
    \ do |v|\n                                                                   \
    \               prime_fib_list.each do |w|\n                                 \
    \                                                   prime_fib_list.each do |x|\n\
    \                                                                            \
    \          prime_fib_list.each do |y|\n                                      \
    \                                                  prime_fib_list.each do |z|\n\
    \                                                                            \
    \              prime_fib_list.each do |a"
  stdout: b''
  stderr: "b\"/tmp/tmpbqiq37s9.rb:58: syntax error, unexpected end-of-input, expecting\
    \ '|'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  return\
    \ prime_fib_iterative(n).next\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [0,1]\n  prime_fib_array[1] = prime_fib_array[0] + prime_fib_array[1]\n  prime_fib_array.each\
    \ do |i|\n    if prime_fib_array[i] < n\n      prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i]\n    end\n  end\n  return prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list[i] = prime_fib_list[i-1]\
    \ + prime_fib_list[i-2]\n  end\n  return prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array[0] = 1\n  prime_fib_array[1] = 1\n  prime_fib_array[2]\
    \ = prime_fib_array[1]\n  prime_fib_array[3] = prime_fib_array[2]\n  prime_fib_array[4]\
    \ = prime_fib_array[3]\n  prime_fib_array[5] = prime_fib_array[4]\n  prime_fib_array[6]\
    \ = prime_fib_array[5]\n  prime_fib_array[7] = prime_fib_array[6]\n  prime_fib_array[8]\
    \ = prime_fib_array[7]\n  prime_fib_array[9] = prime_fib_array[8]\n  prime_fib_array[10]\
    \ = prime_fib_array[9]\n  prime_fib_array[11] = prime_fib_array[10]\n  prime_fib_array[12]\
    \ = prime_fib_array[11]\n  prime_fib_array[13] = prime_fib_array[12]\n  prime_fib_array[14]\
    \ = prime_fib_array[13]\n  prime_fib_array[15] = prime_fib_array[14]\n  prime_fib_array[16]\
    \ = prime_fib_array[15]\n  prime_fib_array[17] = prime_fib_array[16]\n  prime_fib_array[18]\
    \ = prime_fib_array[17]\n  prime_fib_array[19] = prime_fib_array[18]\n  prime_fib_array[20]\
    \ = prime_fib_array[19]\n  prime_fib_array[21] = prime_fib_array[20]\n  prime_fib_array[22]\
    \ = prime_fib_array[21]\n  prime_fib_array[23] = prime_fib_array[22]\n  prime_fib_array[24]\
    \ = prime_fib_array[23]\n  prime_fib_array[25] = prime_fib_array[24]\n  prime_fib_array[26]\
    \ = prime_fib_array[25]\n  prime_fib_array[27] = prime_fib_array[26]\n  prime_fib_array[28]\
    \ = prime_fib_array[27]\n  prime_fib_array[29] = prime_fib_array[28]\n  prime_fib_array[30]\
    \ = prime_fib_array[29]\n  prime_fib_array[31] = prime_fib_array[30]\n  prime_fib_array[32]\
    \ = prime_fib_array[3"
  stdout: b''
  stderr: "b\"/tmp/tmpvvyisbg7.rb:46: syntax error, unexpected end-of-input, expecting\
    \ ']'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n    prime_fib(n - 3)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array.each do |i|\n    prime_fib_array[i] = prime_fib_array[i-1]\
    \ + prime_fib_array[i-2]\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 2\n    puts \"2\"\n\
    \  elsif n == 3\n    puts \"3\"\n  elsif n % 2 == 0\n    puts \"Not a Fibonacci\
    \ number\"\n  else\n    puts prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 2\n    puts \"2\"\n\
    \  elsif n == 3\n    puts \"3\"\n  elsif n % 2 == 0\n    puts \"#{n} is even\"\
    \n    puts prime_fib(n - 2)\n  elsif n % 3 == 0\n    puts \"#{n} is divisible\
    \ by 3\"\n    puts prime_fib(n - 3)\n  else\n    puts \"#{n} is divisible by 2\
    \ and 3\"\n    puts prime_fib(n - 2)\n    puts prime_fib(n - 3)\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  elsif n == 2\n    puts \"2 is prime\"\
    \n  elsif n == 3\n    puts \"3 is prime\"\n  elsif n % 2 == 0\n    puts \"n is\
    \ even\"\n  else\n    puts \"n is odd\"\n  end\n  puts \"n is #{n}\"\n  puts \"\
    n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n\
    \ is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n\
    \  puts \"n is #{n}\"\n  puts \"n is #{n}\"\n"
  stdout: b''
  stderr: "b\"/tmp/tmpnq21wmrk.rb:72: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    puts \"n is less than 2\"\n  elsif n == 2\n    puts \"2 is prime\"\
    \n  elsif n % 2 == 0\n    puts \"2 is not prime\"\n  else\n    puts \"2 is prime\"\
    \n    puts \"3 is prime\"\n    puts \"5 is prime\"\n    puts \"13 is prime\"\n\
    \    puts \"89 is prime\"\n    puts \"97 is prime\"\n    puts \"1000 is prime\"\
    \n    puts \"9999 is prime\"\n    puts \"1000000000 is prime\"\n    puts \"1000000000000\
    \ is prime\"\n    puts \"1000000000000000 is prime\"\n    puts \"100000000000000000000\
    \ is prime\"\n    puts \"100000000000000000000000 is prime\"\n    puts \"1000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"10000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"10000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"1000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
    \ is prime\"\n    puts \""
  stdout: b''
  stderr: "b'/tmp/tmpag4exa4c.rb:58: unterminated string meets end of file\\n    puts\
    \ \"\\n          ^\\n/tmp/tmpag4exa4c.rb:58: syntax error, unexpected end-of-input,\
    \ expecting `end\\'\\n'"
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) { fib_prime(n) }\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n    prime_fib(n - 3)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,2]\n  prime_fib_array.each do |i|\n    if prime_fib_array[i-1] + prime_fib_array[i-2]\
    \ >= n\n      prime_fib_array[i] = prime_fib_array[i-1] + prime_fib_array[i-2]\n\
    \      break\n    end\n  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib_list = [1,1]\n    prime_fib_list[1]\
    \ = prime_fib_list[0]\n    prime_fib_list[0] = prime_fib_list[1]\n    prime_fib_list.each\
    \ do |i|\n      prime_fib_list[i] = prime_fib_list[i-1] + prime_fib_list[i-2]\n\
    \    end\n    return prime_fib_list[n]\n  end\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2, 3]\n  prime_numbers = primes.clone\n  prime_numbers.delete_if { |x| x\
    \ % n == 0 }\n  prime_numbers.delete_if { |x| x > n }\n  prime_numbers.delete_if\
    \ { |x| x < n }\n  prime_numbers.delete_if { |x| x == n }\n  prime_numbers.delete_if\
    \ { |x| x == 0 }\n  prime_numbers.delete_if { |x| x == 1 }\n  prime_numbers.delete_if\
    \ { |x| x == 2 }\n  prime_numbers.delete_if { |x| x == 3 }\n  prime_numbers.delete_if\
    \ { |x| x == 4 }\n  prime_numbers.delete_if { |x| x == 5 }\n  prime_numbers.delete_if\
    \ { |x| x == 6 }\n  prime_numbers.delete_if { |x| x == 7 }\n  prime_numbers.delete_if\
    \ { |x| x == 8 }\n  prime_numbers.delete_if { |x| x == 9 }\n  prime_numbers.delete_if\
    \ { |x| x == 10 }\n  prime_numbers.delete_if { |x| x == 11 }\n  prime_numbers.delete_if\
    \ { |x| x == 12 }\n  prime_numbers.delete_if { |x| x == 13 }\n  prime_numbers.delete_if\
    \ { |x| x == 14 }\n  prime_numbers.delete_if { |x| x == 15 }\n  prime_numbers.delete_if\
    \ { |x| x == 16 }\n  prime_numbers.delete_if { |x| x == 17 }\n  prime_numbers.delete_if\
    \ { |x| x == 18 }\n  prime_numbers.delete_if { |x| x == 19 }\n  prime_numbers.delete_if\
    \ { |x| x == 20 }\n  prime_numbers.delete_if { |x| x == 21 }\n  prime_numbers.delete_if\
    \ { |x| x == 22 }\n  prime_numbers.delete_if { |x| x == 23 }\n  prime_numbers.delete_if\
    \ { |x| x == 24 }\n  prime_numbers.delete_if { |x| x == 25 }\n  prime_numbers.delete_if\
    \ { |x| x == 26 }\n  prime_numbers.delete_if { |x| x == 27 }\n  prime_numbers.delete_if\
    \ { |x| x == 28 }\n  prime_numbers.delete_if { |x| x == 29 }\n  prime_numbers.delete_if\
    \ { |x| x == 30 }\n  prime_numbers.delete_"
  stdout: b''
  stderr: "b\"/tmp/tmpu_yos195.rb:50: syntax error, unexpected end-of-input, expecting\
    \ `end'\\n\""
  exit_code: 1
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_list\
    \ = [1,1]\n  prime_fib_list.each do |i|\n    prime_fib_list[i] = prime_fib_list[i-1]\
    \ + prime_fib_list[i-2]\n  end\n  prime_fib_list[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_array\
    \ = [1,1]\n  prime_fib_array[1] = prime_fib_array[0] + prime_fib_array[1]\n  for\
    \ i in 2..n\n    prime_fib_array[i] = prime_fib_array[i-1] + prime_fib_array[i-2]\n\
    \  end\n  prime_fib_array[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  prime_fib_cache[n]\
    \ ||= prime_fib_cache.fetch(n) do\n    prime_fib_cache[n] = n % 2 == 0 ? 3 : n\
    \ % 3 == 0 ? 5 : prime_fib(3 * n + 2)\n  end\n  prime_fib_cache[n]\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  if\
    \ n < 2\n    return n\n  else\n    prime_fib(n - 2)\n    prime_fib(n - 3)\n  end\n\
    end"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
    # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\ndef prime_fib(n)\n  primes\
    \ = [2]\n  prime_number = 3\n  while prime_number < n\n    prime_number += prime_number\n\
    \    primes << prime_number\n  end\n  primes.reverse\n  primes.find { |x| x %\
    \ n == 0 }\nend"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
