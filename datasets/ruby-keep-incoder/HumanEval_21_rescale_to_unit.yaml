name: HumanEval_21_rescale_to_unit
language: ruby
prompt: "# Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n# such that the smallest number will become 0 and the largest will\
  \ become 1\n# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5,\
  \ 0.75, 1.0]\ndef rescale_to_unit(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
  \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
  \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
  \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
  end\n"
completions: ["  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |n, i|\n    if n < numbers.min\n      numbers.min = 0\n    end\n    if n\
    \ > numbers.max\n      numbers.max = 1.0\n    end\n  end\n  numbers\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\n\
    end", "  numbers.each_with_index do |number, index|\n    if number > 1.0\n   \
    \   numbers[index] = number / 1.0\n    end\n  end\nend", "  numbers.map! { |n|\
    \ n / numbers.min }\nend", "  numbers.each_with_index do |n, i|\n    if n < numbers[0]\n\
    \      numbers[i] = 0\n    elsif n > numbers[-1]\n      numbers[i] = 1\n    end\n\
    \  end\n  numbers\nend", "  numbers.each_with_index do |n, i|\n    if n < numbers[i-1]\n\
    \      numbers[i] = numbers[i-1] / n\n    end\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\nend", "  numbers.map! {|n| n / numbers.min}\n  numbers.min!(0)\n\
    \  numbers.max!(1)\n  numbers\nend", "  numbers.each do |number|\n    number =\
    \ (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.each_with_index do |number, index|\n\
    \    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n \
    \   if number > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.each_with_index\
    \ do |n, i|\n    if n < numbers[0]\n      numbers[i] = 0\n    elsif n > numbers[-1]\n\
    \      numbers[i] = 1\n    end\n  end\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.min!=1\n  numbers.max!=1\n  numbers.min!=0\n  numbers.max!=1\n  numbers.min!=1\n\
    \  numbers.max!=1\n  numbers.min!=0\n  numbers.max!=1\n  numbers\nend", "  numbers.each_with_index\
    \ do |n, i|\n    if n < numbers[0]\n      numbers[i] = 0\n    elsif n > numbers[-1]\n\
    \      numbers[i] = 1\n    end\n  end\nend", "  numbers.each do |number|\n   \
    \ number = number / numbers[0]\n  end\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n|\
    \ n / numbers.reduce(:+) }\nend", "  numbers.each_with_index do |n, i|\n    if\
    \ n < numbers[i-1]\n      numbers[i] = 0\n    end\n  end\n  numbers\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \   elsif number > numbers[index - 1]\n      numbers[index - 1] = 1\n    end\n\
    \  end\n  numbers\nend", "  numbers.each_with_index do |number, index|\n    if\
    \ number > 1.0\n      numbers[index] = number - 1.0\n    end\n  end\nend", " \
    \ numbers.min\nend", "  numbers.each_with_index do |number, index|\n    if number\
    \ < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n    if number >\
    \ numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number > numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number < numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \     numbers[index] = number\n    end\n  end\nend", "  numbers.map { |n| n /\
    \ numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\nend", "  numbers.each_with_index do |number, index|\n\
    \    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n \
    \   if number > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n\
    \  numbers\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n\
    \  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\nend", "  numbers.each_with_index do |n, i|\n    if n\
    \ < numbers[0]\n      numbers[i] = 0\n    elsif n > numbers[-1]\n      numbers[i]\
    \ = 1\n    end\n  end\nend", "  numbers.min\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \   elsif number > numbers[index - 1]\n      numbers[index - 1] = 1\n    end\n\
    \  end\n  numbers\nend", "  numbers.each_with_index do |number, index|\n    if\
    \ number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n    if number\
    \ > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\nend", " \
    \ numbers.each do |number|\n    number = number.to_f\n    number = (number - min)\
    \ / range\n    number = (number - min).abs / (max - min)\n    number = (number\
    \ - min).abs / range\n  end\nend", "  numbers.each_with_index do |number, index|\n\
    \    numbers[index] = number / numbers.max\n  end\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x|\
    \ (x-numbers.min)/(numbers.max-numbers.min)}\nend", "  numbers.map! do |number|\n\
    \    number / numbers.max\n  end\nend", "  numbers.each_with_index do |number,\
    \ index|\n    numbers[index] = number / numbers.max\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n      numbers[index] = number\n    end\n  end\n  numbers\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.each do |number|\n    number\
    \ = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend", "  numbers.min!=0\n\
    \  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.map! { |n| n / numbers.max }\n  numbers\n\
    end", "  numbers.each do |number|\n    number = (number - numbers.min) / numbers.max\
    \ # Normalize each number between 0 and 1\n    number = number / 2.0 # Divide\
    \ by 2\n    number = number * 2.0 # Multiply by 2\n    number = number + 1.0 #\
    \ Add to 1\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis\
    \ doesn't seem to work. `[1.0, 2.0, 3.0, 4.0, 5.0]` becomes `[0.0, 0.25, 0.5,\
    \ 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it worked for me. Are you sure you copied the code correctly?\
    \ I tested it on ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.8.0]\n\
    <|/ c |>\n<| c |>\nI copied it exactly as you wrote it. I also tested it on ruby\
    \ 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.8.0]\n<|/ c |>\n<| c\
    \ |>\nI tested it on ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.8.0]\n\
    <|/ c |>\n<| c |>\nI tested it on ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.8.0]\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    numbers[index] = number / numbers.max if number > numbers.max\n\
    \    numbers[index] = number / numbers.min if number < numbers.min\n  end\nend",
  "  numbers.each do |number|\n    number = (number - numbers.min) / (numbers.max\
    \ - numbers.min)\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend", " \
    \ numbers.each_with_index do |number, index|\n    if number < numbers[index -\
    \ 1]\n      numbers[index - 1] = 0\n    end\n    if number > numbers[index + 1]\n\
    \      numbers[index + 1] = 1\n    end\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number > 1.0\n      numbers[index] = number - 1.0\n\
    \    end\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    elsif number > numbers[index - 1]\n      numbers[index - 1] =\
    \ 1\n    end\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.each_with_index do |n, i|\n    if\
    \ n < numbers[i-1]\n      numbers[i] = numbers[i-1] / n\n    end\n  end\nend",
  "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend", " \
    \ numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| (x-numbers.min)/(numbers.max-numbers.min)}\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.each_with_index do |n, i|\n    numbers[i] = n / numbers[i - 1]\n  end\n\
    end", "  numbers.each_with_index do |n, i|\n    numbers[i] = ((n - numbers.min)\
    \ / (numbers.max - numbers.min)) * (numbers.max - numbers.min) + numbers.min\n\
    \  end\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.each do |number|\n    number = (number -\
    \ numbers.min) / (numbers.max - numbers.min)\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis doesn't seem to work if you have negative numbers. I got `[-0.5,\
    \ -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]`\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work if you have negative numbers. I got\
    \ `[-0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8,\
    \ 0.9, 1.0]`\n<|/ c |>\n<| c |>\nThis doesn't seem to work if you have negative\
    \ numbers. I got `[-0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5,\
    \ 0.6, 0.7, 0.8, 0.9, 1.0]`\n<|/ c |>\n<| c |>\nThis doesn't seem to work if you\
    \ have negative numbers. I got `[-0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2,\
    \ 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]`\n<|/ c |>\n<| c |>\nThis doesn't seem\
    \ to work if you have negative numbers. I got `[-0.5, -0.4, -0.3, -0.2, -0.1,\
    \ 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]`\n<|/ c |>\n<| a dscore=5\
    \ |>\nI like using Enumerable#reduce for this:\n<code>", "  numbers.each do |number|\n\
    \    number = number / numbers.max\n    number = number - number * numbers.min\n\
    \  end\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| (x-numbers.min)/(numbers.max-numbers.min)}\n\
    end", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\n\
    end", "  numbers.map! { |n| n / numbers.max }\nend", "  numbers.each_with_index\
    \ do |n, i|\n    if i == 0\n      n\n    else\n      n / numbers[i - 1]\n    end\n\
    \  end\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.each_with_index do |number, index|\n\
    \    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n \
    \   if number > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n\
    \  numbers\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.each_with_index\
    \ do |n, i|\n    if n < numbers[i-1]\n      numbers[i] = numbers[i-1] / n\n  \
    \  end\n  end\n  numbers\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index do |n,\
    \ i|\n    if n < numbers[0]\n      numbers[i] = 0\n    elsif n > numbers[-1]\n\
    \      numbers[i] = 1\n    end\n  end\n  numbers\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|n| n/numbers.max}\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.map! {|n| n / numbers.max}\n\
    end", "  numbers.each_with_index do |n, i|\n    if n < numbers.min\n      numbers[i]\
    \ = 0\n    elsif n > numbers.max\n      numbers[i] = 1\n    end\n  end\n  numbers\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.each_with_index do |number, index|\n    if number < numbers[index\
    \ - 1]\n      numbers[index - 1] = 0\n    end\n    if number > numbers[index +\
    \ 1]\n      numbers[index + 1] = 1\n    end\n  end\nend", "  numbers.each do |number|\n\
    \    number = (number - numbers.min) / (numbers.max - numbers.min)\n    number\
    \ = number if number != 0\n  end\n  numbers\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.each_with_index do |number, index|\n    if number < numbers[index\
    \ - 1]\n      numbers[index - 1] = 0\n    end\n    if number > numbers[index +\
    \ 1]\n      numbers[index + 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map! {|n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \     numbers[index] = number\n    end\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\nend", "  numbers.each_with_index do |n, i|\n    numbers[i]\
    \ = n / numbers[i - 1]\n  end\nend", "  numbers.map { |n| n / numbers.min }\n\
    end", "  numbers.map! { |n| n / numbers.max }\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \   end\n    if number > numbers[index + 1]\n      numbers[index + 1] = 1\n  \
    \  end\n  end\nend", "  numbers.each_with_index do |number, index|\n    if number\
    \ < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n    if number >\
    \ numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n  numbers\n\
    end", "  numbers.each_with_index do |number, index|\n    if number < numbers[index\
    \ - 1]\n      numbers[index - 1] = 0\n    elsif number > numbers[index - 1]\n\
    \      numbers[index - 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.map\
    \ { |n| n / numbers.reduce(:+) }\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \   end\n    if number > numbers[index + 1]\n      numbers[index + 1] = 1\n  \
    \  end\n  end\n  numbers\nend", "  numbers.each_with_index do |n, i|\n    if i\
    \ == 0\n      n\n    elsif i == 1\n      n / numbers.last\n    else\n      n *\
    \ (numbers.last / numbers.first)\n    end\n  end\nend", "  numbers.map! {|n| n\
    \ / numbers.min}\n  numbers.min!(0)\n  numbers.max!(1)\n  numbers\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    elsif number > numbers[index - 1]\n      numbers[index - 1] =\
    \ 1\n    end\n  end\nend", "  numbers.each_with_index do |number, index|\n   \
    \ if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    elsif number\
    \ > numbers[index - 1]\n      numbers[index - 1] = 1\n    end\n  end\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n\
    \  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend", "  numbers.min!=0\n\
    \  numbers.max!=1\n  numbers.map!{|n| n/numbers.max}\nend", "  numbers.each do\
    \ |number|\n    number = (number - numbers.min) / (numbers.max - numbers.min)\n\
    \  end\nend", "  numbers.each_with_index do |n, i|\n    if i == 0\n      n\n \
    \   elsif i == 1\n      n / 2.0\n    else\n      n / 2.0 + 0.5\n    end\n  end\n\
    end", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|n| n*1.0/numbers.max}\n\
    end", "  numbers.each do |number|\n    number = number.to_f\n    number = (number\
    \ - min) / (max - min)\n    number = (number - min) / (max - min)\n  end\nend",
  "  numbers.each do |number|\n    number = number / numbers.max\n  end\nend", " \
    \ numbers.each_with_index do |number, index|\n    if number < numbers[index -\
    \ 1]\n      numbers[index - 1] = 0\n    end\n    if number > numbers[index + 1]\n\
    \      numbers[index + 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.each_with_index\
    \ do |n, i|\n    if i == 0\n      n\n    elsif i == 1\n      n / 2.0\n    else\n\
    \      n / 2.0 + 0.5\n    end\n  end\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.each_with_index do |number, index|\n    if number < numbers[index\
    \ - 1]\n      numbers[index - 1] = 0\n    end\n    if number > numbers[index +\
    \ 1]\n      numbers[index + 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.each_with_index\
    \ do |n, i|\n    if n < numbers[i-1]\n      numbers[i] = numbers[i-1] / n\n  \
    \  end\n  end\n  numbers\nend", "  numbers.each_with_index do |number, index|\n\
    \    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n \
    \   if number > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n\
    end", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| (x-numbers.min)/(numbers.max-numbers.min)}\n\
    end", "  numbers.each_with_index do |n, i|\n    if n < numbers.first\n      numbers[i]\
    \ = 0\n    elsif n > numbers.last\n      numbers[i] = 1\n    end\n  end\n  numbers\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each do |number|\n\
    \    number = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\n\
    end", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.each do\
    \ |number|\n    number = (number - numbers.min) / (numbers.max - numbers.min)\n\
    \    number = number % 1.0\n  end\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.each_with_index do |n, i|\n    numbers[i] = ((n - numbers.min)\
    \ / (numbers.max - numbers.min)) * (numbers.max - numbers.min) + numbers.min\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    if number > 1.0\n\
    \      numbers[index] = number - 1.0\n    end\n  end\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.min!=0\n\
    \  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    numbers[index] = number / numbers.max\n  end\nend",
  "  numbers.each_with_index do |number, index|\n    if number < numbers[index - 1]\n\
    \      numbers[index - 1] = 0\n    end\n    if number > numbers[index + 1]\n \
    \     numbers[index + 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.min!=0\n\
    \  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend", "  numbers.min\nend",
  "  numbers.each_with_index do |n, i|\n    numbers[i] = n / numbers[i - 1]\n  end\n\
    end", "  numbers.each_with_index do |n, i|\n    numbers[i] = ((n - numbers.min)\
    \ / (numbers.max - numbers.min)) * (numbers.max - numbers.min) + numbers.min\n\
    \  end\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x|\
    \ x/numbers.max}\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|n|\
    \ n*1.0/numbers.max}\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend",
  "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n \
    \ numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend", "  numbers.each_with_index\
    \ do |n, i|\n    if n < numbers[i-1]\n      numbers[i] = 0\n    end\n  end\n \
    \ numbers\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each\
    \ do |number|\n    number = number / numbers.max\n    number = number - number\
    \ * numbers.min\n    number = number / numbers.min\n  end\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number > numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \   end\n    if number < numbers[index + 1]\n      numbers[index + 1] = 1\n  \
    \  end\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map!\
    \ { |n| n / numbers.min }\n  numbers.min = 0\n  numbers.max = 1\n  numbers\nend",
  "  numbers.each_with_index do |n, i|\n    if n < numbers[0]\n      numbers[i] =\
    \ 0\n    elsif n > numbers[-1]\n      numbers[i] = 1\n    end\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
