name: HumanEval_127_intersection
language: ruby
prompt: "# You are given two intervals,\n# where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n# The given intervals are closed\
  \ which means that the interval (start, end)\n# includes both start and end.\n#\
  \ For each given interval, it is assumed that its start is less or equal its end.\n\
  # Your task is to determine whether the length of intersection of these two \n#\
  \ intervals is a prime number.\n# Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If\
  \ the length of the intersection is a prime number, return \"YES\",\n# otherwise,\
  \ return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output]\
  \ samples:\n# intersection((1, 2), (2, 3)) ==> \"NO\"\n# intersection((-1, 1), (0,\
  \ 4)) ==> \"NO\"\n# intersection((-3, -1), (-5, 5)) ==> \"YES\"\ndef intersection(interval1,\
  \ interval2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n\
  \    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1,\
  \ 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"\
  YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2,\
  \ 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n\
  \    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\"\
  , candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2,\
  \ -2], [-3, -2]))\n  end\nend\n"
completions: ["  interval1[0] < interval2[1] && interval2[0] < interval1[1]\nend",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i.first <= j.first\
    \ && j.first <= i.last)\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[0]\
    \ >= j[1] && i[1] < j[0])\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  interval1[0] = interval1[0] if interval1[0] < interval1[1] \n\
    \  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[1]\
    \ = interval1[1] if interval1[0] < interval1[1] \n  interval2[1] = interval2[1]\
    \ if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[1] = interval1[1] if interval1[0] < interval1[1] \n  interval2[1]\
    \ = interval2[1] if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] \n  \n  interval1[1] = interval1[1] if interval1[0] < interval1[1]\
    \ \n  interval2[1] = interval2[1] if interval2[0] < interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] \n  \n  interval1[1] = interval1[1] if interval1[0]\
    \ < interval1[1] \n  interval2[1] = interval2[1] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[1] = interval1[1]\
    \ if interval1[0] < interval1[1] \n  interval2[1] = interval2[1] if interval2[0]\
    \ < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[1]\
    \ = interval1[1] if interval1[0] < interval1[1] \n  interval2[1] = interval2[1]\
    \ if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[1] = interval1[1] if interval1[0] < interval1[1] \n  interval2[1]\
    \ = interval2[1] if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] \n  \n  interval", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i[1] < j[1] && j[1] < i[1])\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  interval1[0] < interval2[1] and interval2[0]\
    \ < interval1[1]\nend", "  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if\
    \ i1<=>i2\n    end\n  end\nend", "  \n  interval1[0] < interval1[1] and interval2[0]\
    \ < interval2[1]\n  \n  if interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n\
    \    return \"NO\"\n  \n  interval1[0] >= interval1[1] and interval2[0] < interval2[1]\n\
    \  \n  if interval1[0] < interval1[1] and interval2[0] >= interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \  \n  if interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n\
    \  \n  if interval1[0] < interval1[1] and interval2[0] < interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \  \n  if interval1[0] >= interval1[1] and interval2[0] < interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] >= interval1[1] and interval2[0] < interval2[1]\n\
    \  \n  if interval1[0] < interval1[1] and interval2[0] >= interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] < interval1[1] and interval2[0] >= interval2[1]\n\
    \  \n  if interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n\
    \  \n  if interval1[0] < interval1[1] and interval2[0] < interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \  \n  if interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n\
    \  \n  if interval1[0] < interval1[1] and interval2[0] < interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \  \n  if interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n\
    \  \n  if interval1[0] < interval1[1] and interval2[0] < interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] < interval", "  interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]\nend", "  interval1.each do |i|\n    interval2.each do |j|\n\
    \      if(i[0] >= j[0] && i[1] <= j[1])\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  interval1[0] < interval2[1] && interval2[0] <\
    \ interval1[1]\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      if i1.first <= i2.first && i1.last >= i2.last\n        return true\n  \
    \    end\n    end\n  end\n  return false\nend", "  interval1[0] < interval2[1]\
    \ && interval1[1] > interval2[0]\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      if i1[1] >= i2[0] && i1[1] <= i2[1]\n        return true\n  \
    \    end\n    end\n  end\n  return false\nend", "  interval1[0] < interval2[1]\
    \ and interval2[0] < interval1[1]\nend", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&)\n  interval2.reduce(:&).reduce(:&)\nend", " \
    \ interval1[0] < interval1[1] && interval2[0] < interval2[1]\nend", "  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n  \n  if interval1[0]\
    \ >= interval2[0] and interval1[1] < interval2[1]\n    return \"NO\"\n  elsif\
    \ interval1[0] < interval2[0] and interval1[1] >= interval2[1]\n    return \"\
    NO\"\n  elsif interval1[0] >= interval2[0] and interval1[1] > interval2[1]\n \
    \   return \"YES\"\n  elsif interval1[0] < interval2[0] and interval1[1] < interval2[1]\n\
    \    return \"YES\"\n  elsif interval1[0] > interval2[0] and interval1[1] >= interval2[1]\n\
    \    return \"YES\"\n  elsif interval1[0] < interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  else\n    return \"NO\"\n  end\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      i[0] <= j[0] && j[0] <= i[1] && i[1]\
    \ <= j[1]\n    end\n  end\nend", "  interval1 = interval1.to_a\n  interval2 =\
    \ interval2.to_a\n  \n  interval1.each do |i|\n    interval2.each do |j|\n   \
    \   \n      if(i[0] < j[0] && i[1] > j[1])\n        return true\n      end\n \
    \   end\n  end\n  \n  return false\nend", "  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if ", " \
    \ interval1[0] < interval2[1] and interval1[1] > interval2[0]\nend", "  interval1[0]\
    \ < interval2[1] and interval2[0] < interval1[1]\nend", "  interval1.reduce(:&)\n\
    \  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&)\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if(i[1] < j[1] && j[1] < i[1])\n  \
    \      return true\n      end\n    end\n  end\n  return false\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1[0] <= i2[0] && i1[1] >= i2[1]\n\
    \    end\n  end\nend", "  interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ && interval1[1] > interval2[0]\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i[1] < j[1] && j[1] < i[1])\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]\nend", "  interval1 = interval1.to_a\n  interval2 = interval2.to_a\n\
    \  \n  interval1.each do |i|\n    interval2.each do |j|\n      \n      if(i[1]\
    \ < j[1] && j[1] < i[1])\n        return false\n      end\n    end\n  end\n  \n\
    \  return true\nend", "  interval1.each do |i|\n    interval2.each do |j|\n  \
    \    if i[0] < j[0]\n        return false if i[1] > j[1]\n      elsif i[0] > j[0]\n\
    \        return false if i[1] < j[1]\n      else\n        return true if i[1]\
    \ == j[1]\n      end\n    end\n  end\n  return false\nend", "  interval1 = interval1.sort\n\
    \  interval2 = interval2.sort\n  \n  if interval1[0] >= interval2[1]\n    return\
    \ \"NO\"\n  elsif interval1[1] <= interval2[0]\n    return \"NO\"\n  elsif interval1[0]\
    \ == interval2[0]\n    return \"YES\"\n  elsif interval1[1] == interval2[1]\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  interval1[0] <\
    \ interval2[1] && interval1[1] > interval2[0]\nend", "  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] && interval1[1] < interval2[1]\nend", "  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] && interval1[1] < interval2[0]\n\
    end", "  \n  # Write your code here\n  \nend", "  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]\nend", "  interval1 = interval1.to_a\n  interval2\
    \ = interval2.to_a\n  \n  intersection = interval1[0]..interval1[1]\n  intersection.intersect\
    \ interval2[0]..interval2[1]\n  \n  if intersection.length == interval1.length\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  interval1[0] <\
    \ interval2[1] && interval1[1] > interval2[0]\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1.last <= i2.first\n        return i1\n\
    \      end\n    end\n  end\n  return interval2\nend", "  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] \n  \n  interval1[1] = interval1[1] if interval1[0] < interval1[1]\
    \ \n  interval2[1] = interval2[1] if interval2[0] < interval2[1] \n  \n  if interval1[0]\
    \ >= interval2[0] and interval1[1] >= interval2[1]\n    return \"YES\"\n  elsif\
    \ interval1[0] >= interval2[0] and interval1[1] < interval2[1]\n    return \"\
    NO\"\n  elsif interval1[0] < interval2[0] and interval1[1] >= interval2[1]\n \
    \   return \"NO\"\n  elsif interval1[0] < interval2[0] and interval1[1] < interval2[1]\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  interval1[0] <\
    \ interval2[1] && interval1[1] > interval2[0]\nend", "  \n  interval1[0] < interval1[1]\
    \ and interval2[0] < interval2[1]\n  \n  interval1[0] >= interval1[1] and interval2[0]\
    \ >= interval2[1]\n  \n  interval1[0] < interval1[1] and interval2[0] >= interval2[1]\n\
    \  \n  interval1[0] >= interval1[1] and interval2[0] < interval2[1]\n  \n  interval1[0]\
    \ < interval1[1] and interval2[0] < interval2[1]\n  \n  interval1[0] >= interval1[1]\
    \ and interval2[0] >= interval2[1]\n  \n  interval1[0] < interval1[1] and interval2[0]\
    \ < interval2[1]\n  \n  interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n\
    \  \n  interval1[0] < interval1[1] and interval2[0] < interval2[1]\n  \n  interval1[0]\
    \ >= interval1[1] and interval2[0] >= interval2[1]\n  \n  interval1[0] < interval1[1]\
    \ and interval2[0] < interval2[1]\n  \n  interval1[0] >= interval1[1] and interval2[0]\
    \ >= interval2[1]\n  \n  interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \  \n  interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n  \n  interval1[0]\
    \ < interval1[1] and interval2[0] < interval2[1]\n  \n  interval1[0] >= interval1[1]\
    \ and interval2[0] >= interval2[1]\n  \n  interval1[0] < interval1[1] and interval2[0]\
    \ < interval2[1]\n  \n  interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n\
    \  \n  interval1[0] < interval1[1] and interval2[0] < interval2[1]\n  \n  interval1[0]\
    \ >= interval1[1] and interval2[0] >= interval2[1]\n  \n  interval1[0] < interval1[1]\
    \ and interval2[0] < interval2[1]\n  \n  interval1[0] >= interval1[1] and interval2[0]\
    \ >= interval2[1]\n  \n  interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \  \n  interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n  \n  interval1[0]\
    \ < interval1[1] and interval2[0] < interval2[1]\n  \n  interval1[0] >= interval1[1]\
    \ and interval2[0] >= interval2[1]\n  \n  interval1[0] < interval1[1] and interval2[0]\
    \ < interval2[1]", "  \n  interval1 = [interval1[0], interval1[1]].sort\n  interval2\
    \ = [interval2[0], interval2[1]].sort\n  \n  intersection = []\n  \n  for i in\
    \ interval1\n    \n    if interval1[i] < interval2[i]\n      \n      intersection.push(i)\n\
    \      \n    elsif interval1[i] > interval2[i]\n      \n      intersection.push(interval2[i])\n\
    \      \n    end\n    \n  end\n  \n  intersection.sort\n  \n  if intersection.length\
    \ == 1\n    return \"NO\"\n  elsif intersection.length == 2\n    return \"YES\"\
    \n  else\n    return \"NO\"\n  end\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i[1] < j[1] && j[1] < i[1]) || (i[1] > j[1] && j[1] > i[1])\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if(i.first <= j.first and i.last >=\
    \ j.last)\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<i2 ? return \"NO\"\
    \ : return \"YES\"\n    end\n  end\n  return \"NO\"\nend", "  interval1[0] < interval2[1]\
    \ && interval1[1] > interval2[0]\nend", "  interval1[0] < interval2[1] && interval1[1]\
    \ > interval2[0]\nend", "  \n  # Write your code here\n  \n  \nend\n</cell>\n\
    <cell>", "  interval1.each do |i|\n    interval2.each do |j|\n      if i[0] <\
    \ j[0]\n        return false\n      elsif i[1] > j[1]\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", "  interval1[0] < interval2[1]\
    \ and interval2[0] < interval1[1]\nend", "  \n  # Write your code here\n  \nend",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[0]<=j[0] && i[1]>=j[1])\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] \n  \n  interval1[1] = interval1[1] if interval1[0]\
    \ < interval1[1] \n  interval2[1] = interval2[1] if interval2[0] < interval2[1]\
    \ \n  \n  if interval1[0] >= interval2[0] and interval1[1] >= interval2[1]\n \
    \   return \"NO\"\n  \n  if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] <= interval2[0] and interval1[1] >=\
    \ interval2[1]\n    return \"NO\"\n  \n  if interval1[0] <= interval2[0] and interval1[1]\
    \ <= interval2[1]\n    return \"NO\"\n  \n  if interval1[0] < interval2[0] and\
    \ interval1[1] < interval2[1]\n    return \"NO\"\n  \n  if interval1[0] < interval2[0]\
    \ and interval1[1] > interval2[1]\n    return \"NO\"\n  \n  if interval1[0] >\
    \ interval2[0] and interval1[1] < interval2[1]\n    return \"NO\"\n  \n  if interval1[0]\
    \ > interval2[0] and interval1[1] > interval2[1]\n    return \"NO\"\n  \n  if\
    \ interval1[0] == interval2[0] and interval1[1] == interval2[1]\n    return \"\
    YES\"\n  \n  if interval1[0] < interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[0] and interval1[1] < interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] == interval2[0] and interval1[1] < interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] == interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[0] and interval1[1] < interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] == interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[0] and interval1[1] < interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[0] and interval1[1]", " \
    \ interval1[0] < interval2[1] && interval1[1] > interval2[0]\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1[0] < i2[0] && i1[1] > i2[1]\n\
    \    end\n  end\nend", "  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] > interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] \n  interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] \n  \n", "  \n  interval1[0] < interval1[1]\n  interval2[0] <\
    \ interval2[1]\n  \n  if interval1[0] >= interval2[1]\n    return \"NO\"\n  elsif\
    \ interval2[0] >= interval1[1]\n    return \"NO\"\n  elsif interval1[0] == interval2[0]\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  interval1[0] <\
    \ interval2[1] && interval1[1] > interval2[0]\nend", "  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] && interval1[1] > interval2[0]\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if(i[0]<=j[0] && i[1]>=j[1])\n    \
    \    return true\n      end\n    end\n  end\n  return false\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1[0] <= i2[0] && i1[1] >= i2[1]\n\
    \    end\n  end\nend", "  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ else interval2[1]\n  \n  interval1[0] = interval1[0] if ", "  \n  interval1[0]\
    \ < interval1[1] and interval2[0] < interval2[1]\n  \n  if interval1[0] < interval1[1]\
    \ and interval2[0] < interval2[1]\n    \n    if interval1[0] > interval1[1] and\
    \ interval2[0] > interval2[1]\n      \n      if interval1[0] == interval2[0]\n\
    \        return \"NO\"\n      \n      interval1[0] < interval1[1] and interval2[1]\
    \ > interval2[0]\n      \n      if interval1[0] == interval2[0]\n        return\
    \ \"NO\"\n      \n      interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \      \n      if interval1[0] == interval2[0]\n        return \"NO\"\n      \n\
    \      interval1[0] < interval1[1] and interval2[1] > interval2[0]\n      \n \
    \     if interval1[0] == interval2[0]\n        return \"NO\"\n      \n      interval1[0]\
    \ < interval1[1] and interval2[0] < interval2[1]\n      \n      if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n      \n      interval1[0] < interval1[1]\
    \ and interval2[1] > interval2[0]\n      \n      if interval1[0] == interval2[0]\n\
    \        return \"NO\"\n      \n      interval1[0] < interval1[1] and interval2[0]\
    \ < interval2[1]\n      \n      if interval1[0] == interval2[0]\n        return\
    \ \"NO\"\n      \n      interval1[0] < interval1[1] and interval2[1] > interval2[0]\n\
    \      \n      if interval1[0] == interval2[0]\n        return \"NO\"\n      \n\
    \      interval1[0] < interval1[1] and interval2[0] < interval2[1]\n      \n \
    \     if interval1[0] == interval2[0]\n        return \"NO\"\n      \n      interval1[0]\
    \ < interval1[1] and interval2[1] > interval2[0]\n      \n      if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n      \n      interval1[0] < interval1[1]\
    \ and interval2[0] < interval2[1]\n      \n      if interval1[0] == interval2[0]\n\
    \        return \"NO\"\n      \n      interval1[0] < interval1[1] and interval2[1]\
    \ > interval2[0]\n      \n      if interval1[0] == interval2[0]\n        return\
    \ \"NO\"\n      \n      interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \      \n      if interval1[0] == interval2[0]\n        return \"NO\"\n      \n\
    \      interval1[0] < interval1[1] and interval2[1] > interval2[0]\n      \n \
    \     if interval1[0] == interval2[0]\n        return \"NO\"\n      \n      interval1[0]\
    \ < interval1[1] and interval", "  interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] && interval1[1] > interval2[0] && interval1[0] < interval2[1]\n\
    end", "  interval1[0] < interval2[1] && interval1[1] > interval2[0]\nend", " \
    \ interval1[0] < interval1[1] && interval2[0] < interval2[1]\nend", "  interval1[0]\
    \ = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n\
    \  interval2[1] = interval2[1].to_i\n  \n  if interval1[0] >= interval1[1] or\
    \ interval2[0] >= interval2[1]\n    return \"NO\"\n  \n  if interval1[0] < interval1[1]\
    \ and interval2[0] < interval2[1]\n    return \"NO\"\n  \n  if interval1[0] <\
    \ interval1[1] and interval2[0] >= interval2[1]\n    return \"NO\"\n  \n  if interval1[0]\
    \ >= interval1[1] and interval2[0] < interval2[1]\n    return \"NO\"\n  \n  if\
    \ interval1[0] >= interval1[1] and interval2[0] >= interval2[1]\n    return \"\
    YES\"\n  \n  if interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \    return \"YES\"\n  \n  if interval1[0] < interval1[1] and interval2[0] >=\
    \ interval2[1]\n    return \"YES\"\n  \n  if interval1[0] >= interval1[1] and\
    \ interval2[0] < interval2[1]\n    return \"YES\"\n  \n  if interval1[0] >= interval1[1]\
    \ and interval2[0] >= interval2[1]\n    return \"YES\"\nend", "  interval1[0]\
    \ < interval1[1] and interval2[0] < interval2[1]\nend", "  interval1.each do |i|\n\
    \    interval2.each do |j|\n      if i[0] < j[0]\n        return false\n     \
    \ elsif i[1] > j[1]\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "  \n  interval1[0] < interval2[1] and interval1[1] > interval2[0]\n\
    end", "  interval1[0] < interval1[1] && interval2[0] < interval2[1] && interval1[1]\
    \ > interval2[0]\nend", "  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ else interval1[1]\n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n  return interval1[0] <= interval2[0] and interval1[1] <=\
    \ interval2[1]\nend", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&)\n\
    end", "  interval1[0] = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n\
    \  interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n  \n\
    \  if interval1[0] >= interval1[1] or interval2[0] >= interval2[1]\n    return\
    \ \"NO\"\n  end\n  \n  if interval1[1] < interval2[0]\n    return \"NO\"\n  end\n\
    \  \n  if interval1[0] == interval1[1]\n    return \"NO\"\n  end\n  \n  if interval2[0]\
    \ == interval2[1]\n    return \"NO\"\n  end\n  \n  if interval1[0] < interval2[0]\n\
    \    return \"NO\"\n  end\n  \n  if interval1[1] > interval2[1]\n    return \"\
    NO\"\n  end\n  \n  if interval1[0] == interval2[0]\n    return \"NO\"\n  end\n\
    \  \n  if interval1[1] < interval2[1]\n    return \"NO\"\n  end\n  \n  if interval2[0]\
    \ == interval2[1]\n    return \"NO\"\n  end\n  \n  if interval1[0] > interval2[0]\n\
    \    return \"NO\"\n  end\n  \n  if interval1[1] > interval2[1]\n    return \"\
    NO\"\n  end\n  \n  if interval1[0] == interval2[0]\n    return \"NO\"\n  end\n\
    \  \n  if interval1[1] < interval2[1]\n    return \"NO\"\n  end\n  \n  if interval2[0]\
    \ == interval2[1]\n    return \"NO\"\n  end\n  \n  if interval1[0] < interval2[0]\n\
    \    return \"NO\"\n  end\n  \n  if interval1[1] > interval2[1]\n    return \"\
    NO\"\n  end\n  \n  if interval1[0] == interval2[0]\n    return \"NO\"\n  end\n\
    \  \n  if interval1[1] < interval2[1]\n    return \"NO\"\n  end\n  \n  if interval2[0]\
    \ == interval2[1]\n    return \"NO\"\n  end\n  \n  if interval1[0] < interval2[0]\n\
    \    return \"NO\"\n  end\n  \n  if interval1[1] > interval2[1]\n    return \"\
    NO\"\n  end\n  \n  if interval1[0] == interval2[0]\n    return \"NO\"\n  end\n\
    \  \n  if interval1[1] < interval2[1]\n    return \"NO\"\n  end\n  \n  if interval2[0]\
    \ == interval2[1]\n    return \"NO\"\n  end\n  \n  if interval1[0] < interval2[0]\n\
    \    return \"NO\"\n  end\n  \n  if interval1[1] > interval2[1]\n    return \"\
    NO\"\n  end\n  \n  if interval1[0] == interval2[0]\n    return \"NO\"\n  end\n\
    \  \n  if interval1[1] < interval2[1]\n    return \"NO\"\n  end", "  interval1[0]\
    \ < interval2[1] && interval1[1] > interval2[0]\nend", "  interval1.each do |i|\n\
    \    interval2.each do |j|\n      if(i[1] < j[1] && j[1] < i[1])\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  \n  interval1[0] =\
    \ interval1[0] if interval1[0] < interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n  \n  interval1[0]\
    \ = interval1", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<i2\
    \ ? return \"NO\" : return \"YES\"\n    end\n  end\n  return \"NO\"\nend", " \
    \ interval1[0] = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0]\
    \ = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n  \n  if interval1[0]\
    \ >= interval1[1] or interval2[0] >= interval2[1]\n    return \"NO\"\n  \n  intersect_length\
    \ = interval1[1] - interval1[0]\n  \n  if interval2[1] > interval1[1]\n    intersect_length\
    \ = intersect_length + interval2[1] - interval2[0]\n  \n  if intersect_length\
    \ == 2 or intersect_length == 3\n    return \"YES\"\n  \n  if intersect_length\
    \ == 1\n    return \"NO\"\n  \n  return \"NO\"\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1.first <= i2.first and i1.last >= i2.last\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  \n \
    \ # Write your code here\n  \nend", "  interval1[0] < interval2[1] && interval1[1]\
    \ > interval2[0]\nend", "  interval1[0] < interval2[1] and interval2[0] < interval1[1]\n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[0] < j[0]\
    \ && i[1] > j[1])\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  interval1[0] < interval2[1] && interval1[1] > interval2[0]\nend", " \
    \ interval1[0] < interval2[1] && interval1[1] > interval2[0] || interval1[0] >\
    \ interval2[1] && interval1[1] < interval2[0]\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1[1] >= i2[0]\n        return i1\n    \
    \  end\n    end\n  end\n  interval2.each do |i2|\n    return i2\n  end\nend",
  "  interval1Start, interval1End = interval1\n  interval2Start, interval2End = interval2\n\
    \  \n  if interval1Start > interval1End\n    return \"NO\"\n  elsif interval2Start\
    \ > interval2End\n    return \"NO\"\n  elsif interval1Start >= interval2Start\n\
    \    return \"NO\"\n  elsif interval1End <= interval2End\n    return \"NO\"\n\
    \  end\n  \n  intersectionLength = interval1End - interval1Start + 1\n  \n  if\
    \ interval1Start <= interval2Start and interval1End >= interval2End\n    return\
    \ \"YES\"\n  elsif interval1Start <= interval2Start and interval1End <= interval2End\n\
    \    return \"NO\"\n  elsif interval1Start >= interval2Start and interval1End\
    \ >= interval2End\n    return \"NO\"\n  end\n  \n  primeNumbers = Array.new\n\
    \  \n  for i in 1..intersectionLength\n    primeNumbers.push i\n  end\n  \n  for\
    \ i in primeNumbers\n    if interval1Start <= interval2Start and interval1End\
    \ >= interval2End\n      return \"YES\"\n    end\n    if interval1Start <= interval2Start\
    \ and interval1End <= interval2End\n      return \"NO\"\n    end\n    if interval1Start\
    \ >= interval2Start and interval1End >= interval2End\n      return \"NO\"\n  \
    \  end\n  end\n  \n  return \"NO\"\nend", "  interval1[0] = interval1[0].to_i\n\
    \  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1]\
    \ = interval2[1].to_i\n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval2[0] \n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] \n  \n  interval1[1] = interval1[1] if interval1[0]\
    \ < interval1[1] \n  interval2[1] = interval2[1] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[1] = interval1[1] if interval1[0] > interval2[0] \n  interval2[1]\
    \ = interval2[1] if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] > interval2[0]\
    \ \n  interval2[0] = interval2[0] if interval2[0] > interval2[1] \n  \n  interval1[1]\
    \ = interval1[1] if interval1[0] < interval1[1] \n  interval2[1] = interval2[1]\
    \ if interval2[0] < interval2[1] \n  \n  interval1[1] = interval1[1] if interval1[0]\
    \ > interval2[0] \n  interval2[1] = interval2[1] if interval2[0] > interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval2[0] \n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] \n  \n  interval1[1] = interval1[1] if interval1[0] < interval1[1]\
    \ \n  interval2[1] = interval2[1] if interval2[0] < interval2[1] \n  \n  interval1[1]\
    \ = interval1[1] if interval1[0] > interval2[0] \n  interval2[1] = interval2[1]\
    \ if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] > interval2[0] \n  interval2[0]\
    \ = interval2[0] if interval2[0] > ", "  interval1[0] < interval2[1] && interval1[1]\
    \ > interval2[0]\nend", "  interval1[0] < interval2[1] && interval1[1] > interval2[0]\
    \ || interval1[0] > interval2[1] && interval1[1] < interval2[0]\nend", "  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] && interval1[1] > interval2[0]\n\
    end", "  \n  # Write your code here\n  \n  interval1[0] < interval1[1] and interval2[0]\
    \ < interval2[1] and interval1[1] < interval2[0]\nend", "  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]\nend", "  interval1[0] < interval2[1] and interval2[0]\
    \ < interval1[1]\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<i2 ? return \"NO\" : return \"YES\"\n    end\n  end\n  return \"NO\"\
    \nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if\
    \ i1<=>i2\n    end\n  end\nend", "  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] \n  \n  if interval1[0] >= interval2[0]\n\
    \    return interval1[1] if interval1[0] < interval2[0] \n    return interval2[1]\
    \ if interval2[0] < interval1[0] \n  \n  if interval1[1] >= interval2[1]\n   \
    \ return interval1[0] if interval1[1] < interval2[1] \n    return interval2[0]\
    \ if interval2[1] < interval1[1] \n  \n  return \"NO\"\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if(i[1] >= j[1] && i[1] <= j[1])\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      if i1[1] >= i2[0] && i1[1] <= i2[1]\n\
    \        return i1\n      end\n    end\n  end\n  return \"NO\"\nend", "  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1]\nend", "  interval1 = interval1.first\n\
    \  interval2 = interval2.first\n  \n  while interval1 != interval2\n    if interval1\
    \ > interval2\n      interval1 -= 1\n    else\n      interval2 -= 1\n  end\n \
    \ \n  if interval1 == interval2\n    return \"YES\"\n  else\n    return \"NO\"\
    \n  end\nend", "  interval1[0] < interval2[1] && interval1[1] > interval2[0]\n\
    end", "  interval1[0] < interval1[1] && interval2[0] < interval2[1] && interval1[1]\
    \ > interval2[0]\nend", "  interval1.each do |i|\n    interval2.each do |j|\n\
    \      if i[0] < j[0]\n        return false if i[0] > j[1]\n      elsif i[1] >\
    \ j[1]\n        return false if i[0] < j[1]\n      end\n    end\n  end\n  return\
    \ true\nend", "  interval1[0] < interval2[1] && interval2[0] < interval1[1] &&\
    \ interval1[1] < interval2[1]\nend", "  interval1[0] < interval2[1] && interval2[0]\
    \ < interval1[1] && interval1[1] < interval2[1]\nend", "  \n  # Write your code\
    \ here\n  \nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n    \
    \  i1[0] <= i2[0] && i1[1] >= i2[1]\n    end\n  end\nend", "  interval1.each do\
    \ |i1|\n    interval2.each do |i2|\n      if i1.first <= i2.first && i1.last >=\
    \ i2.last\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[0] >= j[0] && i[1]\
    \ <= j[1])\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if i[0] >= j[0] && i[1]\
    \ <= j[1]\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i.first <= j.first\
    \ && j.first <= i.last)\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  interval1[0] < interval1[1] && interval2[0] < interval2[1] &&\
    \ interval1[1] < interval2[0]\nend", "  interval1[0] < interval2[1] && interval1[1]\
    \ > interval2[0]\nend", "  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    \  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    \  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    \  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    \  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    \  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]\n  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    \  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if i[0] < j[0]\n        return false\n\
    \      elsif i[1] > j[1]\n        return false\n      end\n    end\n  end\n  true\n\
    end", "  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[1] = interval1[1]\
    \ if interval1[0] < interval1[1] \n  interval2[1] = interval2[1] if interval2[0]\
    \ < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  if interval1[0]\
    \ >= interval1[1] and interval2[0] >= interval2[1]\n    return \"NO\"\n  \n  if\
    \ interval1[0] >= interval1[1] and interval2[0] < interval2[1]\n    return \"\
    NO\"\n  \n  if interval1[0] < interval1[1] and interval2[0] >= interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \    return \"YES\"\n  \n  if interval1[0] == interval1[1] and interval2[0] ==\
    \ interval2[1]\n    return \"YES\"\n  \n  if interval1[0] == interval1[1] and\
    \ interval2[0] < interval2[1]\n    return \"YES\"\n  \n  if interval1[0] < interval1[1]\
    \ and interval2[0] == interval2[1]\n    return \"YES\"\n  \n  if interval1[0]\
    \ < interval1[1] and interval2[0] < interval2[1]\n    return \"NO\"\n  \n  if\
    \ interval1[0] == interval1[1] and interval2[0] == interval2[1]\n    return \"\
    YES\"\n  \n  if interval1[0] == interval1[1] and interval2[0] < interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval1[1] and interval2[0] == interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval1[1] and interval2[0] < interval2[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] == interval1[1] and interval2[0] ==\
    \ interval2[1]\n    return \"YES\"\n  \n  if interval1[0] == interval1[1] and\
    \ interval2[0] < interval2[1]\n    return \"NO\"\n  \n  if interval1[0] < interval1[1]\
    \ and interval2[0] == interval2[1]\n    return \"NO\"\n  \n  if interval1[0] <\
    \ interval1[1] and interval2[0] < interval2[1]\n    return \"NO\"\n  \n  if interval1[0]\
    \ == interval1[1] and interval2[0] == interval2[1]\n    return \"YES\"\n  \n \
    \ if interval1[0] == interval1[1] and interval2[0] < interval2[1]\n    return\
    \ \"NO\"\n  \n  if interval1[0] < interval1[1] and ", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1[1] < i2[0]\n        return false\n  \
    \    elsif i1[0] > i2[1]\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<i2\
    \ ? return \"NO\" : return \"YES\"\n    end\n  end\n  return \"NO\"\nend", " \
    \ interval1.each do |i|\n    interval2.each do |j|\n      if i[0] >= j[0] && i[1]\
    \ <= j[1]\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] < j[1] && i[0]\
    \ < j[0])\n        return true\n      end\n    end\n  end\n  return false\nend",
  '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[0]<=j[0] && i[1]>=j[1])\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  interval1[0]\
    \ < interval2[1] and interval2[0] < interval1[1]\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1[1] < i2[0]\n        return false\n  \
    \    elsif i1[0] > i2[1]\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "  \n  interval1.each do |i|\n    interval2.each do |j|\n      \n\
    \      if(i[1] < j[1] && j[1] < i[1])\n        return true\n      end\n    end\n\
    \  end\n  \n  return false\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      i[0] <= j[0] && i[1] >= j[1]\n    end\n  end\nend", "  interval1\
    \ = interval1.to_a\n  interval2 = interval2.to_a\n  \n  interval1.each do |i|\n\
    \    interval2.each do |j|\n      \n      if(i[0] < j[0] && i[1] > j[1])\n   \
    \     return true\n      end\n    end\n  end\n  \n  return false\nend", "  \n\
    \  interval1Start = interval1[0]\n  interval1End = interval1[1]\n  interval2Start\
    \ = interval2[0]\n  interval2End = interval2[1]\n  \n  if(interval1Start > interval2Start)\n\
    \    interval1Start, interval1End = interval2Start, interval1End\n  if(interval1End\
    \ < interval2End)\n    interval1End, interval1Start = interval2End, interval1Start\n\
    \  \n  if(interval1Start >= interval1End)\n    return \"NO\"\n  \n  if(interval2Start\
    \ >= interval2End)\n    return \"NO\"\n  \n  if(interval1Start <= interval2Start)\n\
    \    return \"NO\"\n  \n  if(interval1Start <= interval2End)\n    return \"NO\"\
    \n  \n  if(interval1End >= interval2End)\n    return \"NO\"\n  \n  if(interval1Start\
    \ <= interval2Start and interval1End >= interval2End)\n    return \"YES\"\n  \n\
    \  if(interval1Start <= interval2Start and interval1End <= interval2End)\n   \
    \ return \"YES\"\n  \n  if(interval1Start >= interval1End and interval1End >=\
    \ interval2End)\n    return \"YES\"\n  \n  if(interval1Start >= interval1End and\
    \ interval1End <= interval2End)\n    return \"YES\"\n  \n  if(interval1Start <=\
    \ interval2Start and interval1End >= interval2End)\n    return \"YES\"\n  \n \
    \ if(interval1Start <= interval2Start and interval1End <= interval2End)\n    return\
    \ \"YES\"\n  \n  if(interval1Start >= interval1End and interval1End <= interval2End)\n\
    \    return \"YES\"\n  \n  if(interval1Start <= interval2Start and interval1End\
    \ >= interval2End)\n    return \"YES\"\n  \n  if(interval1Start <= interval2Start\
    \ and interval1End <= interval2End)\n    return \"YES\"\n  \n  if(interval1Start\
    \ >= interval1End and interval1End <= interval2End)\n    return \"YES\"\n  \n\
    \  if(interval1Start <= interval2Start and interval1End >= interval2End)\n   \
    \ return \"YES\"\n  \n  if(interval1Start <= interval2Start and interval1End <=\
    \ interval2End)\n    return \"YES\"\n  \n  if(interval1Start >= interval1End and\
    \ interval1End >= interval2End)\n    return \"YES\"\n  \n  if(interval1Start <=\
    \ interval2Start and interval1", "  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  intersection_length = interval1[1] - interval1[0]\n  \n  if interval1[1]\
    \ < interval2[0] or interval2[1] < interval1[0]\n    return \"NO\"\n  \n  if interval1[1]\
    \ > interval2[1] or interval2[1] > interval1[1]\n    return \"NO\"\n  \n  if interval1[0]\
    \ == interval2[0]\n    return \"NO\"\n  \n  if interval1[1] < interval2[1] and\
    \ interval1[1] > interval2[0]\n    return \"NO\"\n  \n  if interval1[1] > interval2[1]\
    \ and interval1[1] < interval2[0]\n    return \"NO\"\n  \n  if interval1[1] <\
    \ interval2[1] and interval1[1] > interval2[0]\n    return \"NO\"\n  \n  if interval1[1]\
    \ > interval2[1] and interval1[1] < interval2[0]\n    return \"NO\"\n  \n  if\
    \ interval1[1] < interval2[1] and interval1[1] > interval2[0]\n    return \"NO\"\
    \n  \n  if interval1[1] > interval2[1] and interval1[1] < interval2[0]\n    return\
    \ \"NO\"\n  \n  if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] > interval2[1] and interval1[1] < interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] > interval2[1] and interval1[1] < interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] > interval2[1] and interval1[1] < interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] > interval2[1] and interval1[1] < interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] > interval2[1] and interval1[1] < interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[1] > interval2[1] and interval1[1] < interval",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if i[0] < j[0] && i[1]\
    \ > j[1]\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1[0] <= i2[0] && i1[1]\
    \ >= i2[1]\n    end\n  end\nend", "  interval1[0] < interval2[1] and interval2[0]\
    \ < interval1[1]\nend", "  interval1[0] < interval2[1] && interval2[0] < interval1[1]\n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if i[1] < j[1]\n\
    \        return false if i[0] < j[0]\n      end\n    end\n  end\n  true\nend",
  "  interval1[0] < interval2[1] && interval1[1] > interval2[0]\nend", "  \n  interval1[0]\
    \ = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n\
    \  interval2[1] = interval2[1].to_i\n  \n  interval1[0] = interval1[0] < interval1[1]\
    \ ? interval1[0] : interval1[1]\n  interval2[0] = interval2[0] < interval2[1]\
    \ ? interval2[0] : interval2[1]\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1.first <= i2.first && i1.last >= i2.last\n\
    \        return i1\n      end\n    end\n  end\n  return nil\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if i[0] < j[0]\n        return false\n\
    \      elsif i[1] > j[1]\n        return false\n      end\n    end\n  end\n  true\n\
    end", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&)\n\
    end", "  interval1[0] < interval1[1] && interval2[0] < interval2[1]\nend", " \
    \ interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] < j[1] && j[1]\
    \ < i[1] || i[1] > j[1] && j[1] > i[1])\n        return false\n      end\n   \
    \ end\n  end\n  return true\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i[0]<=j[1] && j[0]<=i[1])\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(",
  "  interval1[0] < interval2[1] and interval2[0] < interval1[1]\nend", "  interval1[0]\
    \ = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n\
    \  interval2[1] = interval2[1].to_i\n  \n  intersection_length = interval1[1]\
    \ - interval1[0]\n  \n  if interval1[1] > interval2[0]\n    interval1[0], interval1[1]\
    \ = interval1[1], interval1[0]\n  end\n  \n  if interval2[1] > interval1[0]\n\
    \    interval2[0], interval2[1] = interval2[1], interval2[0]\n  end\n  \n  if\
    \ interval1[1] < interval2[0]\n    interval1[0], interval1[1] = interval1[1],\
    \ interval1[0]\n  end\n  \n  if interval2[1] < interval1[0]\n    interval2[0],\
    \ interval2[1] = interval2[1], interval2[0]\n  end\n  \n  if interval1[1] < interval2[1]\n\
    \    interval1[1], interval2[1] = interval2[1], interval1[1]\n  end\n  \n  if\
    \ interval2[1] < interval1[1]\n    interval2[1], interval1[1] = interval1[1],\
    \ interval2[1]\n  end\n  \n  if interval1[1] > interval2[1]\n    interval1[1],\
    \ interval2[1] = interval2[1], interval1[1]\n  end\n  \n  if interval2[1] > interval1[1]\n\
    \    interval2[1], interval1[1] = interval1[1], interval2[1]\n  end\n  \n  if\
    \ interval1[1] < interval2[0]\n    interval1[1], interval2[1] = interval2[1],\
    \ interval1[1]\n  end\n  \n  if interval2[1] < interval1[0]\n    interval2[1],\
    \ interval1[1] = interval1[1], interval2[1]\n  end\n  \n  if interval1[1] > interval2[0]\n\
    \    interval1[1], interval2[1] = interval2[1], interval1[1]\n  end\n  \n  if\
    \ interval2[1] > interval1[0]\n    interval2[1], interval1[1] = interval1[1],\
    \ interval2[1]\n  end\n  \n  if interval1[1] < interval2[1]\n    interval1[1],\
    \ interval2[1] = interval2[1], interval1[1]\n  end\n  \n  if interval2[1] < interval1[1]\n\
    \    interval2[1], interval1[1] = interval1[1], interval2[1]\n  end\n  \n  if\
    \ interval1[1] > interval2[1]\n    interval1[1], interval2[1] = interval2[1],\
    \ interval1[1]\n  end\n  \n  if interval2[1] > interval1[0]\n    interval2[1],\
    \ interval1[1] = interval1[1], interval2[1]\n  end\n  \n  if interval1[1] < interval2[0]\n\
    \    interval1[1], interval2[1] = interval2[1], interval1[1]\n  end\n", "  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] && interval1[1] > interval2[0]\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1[1] <\
    \ i2[0]\n        puts \"NO\"\n        return\n      elsif i1[0] > i2[1]\n    \
    \    puts \"NO\"\n        return\n      end\n    end\n  end\n  puts \"YES\"\n\
    end", "  interval1[0] < interval1[1] && interval2[0] < interval2[1] && interval1[1]\
    \ > interval2[0]\nend", '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<i2 ? return \"NO\"\
    \ : return \"YES\"\n    end\n  end\n  return \"NO\"\nend", "  interval1[0] < interval2[1]\
    \ && interval1[1] > interval2[0]\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i.first <= j.first and i.last >= j.last)\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1[1] >= i2[0] && i1[1] <= i2[1]\n    end\n\
    \  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<i2\
    \ ? return \"NO\" : return \"YES\"\n    end\n  end\n  return \"NO\"\nend", " \
    \ interval1[0] < interval1[1] && interval2[0] < interval2[1] && interval1[1] >\
    \ interval2[0]\nend", "  interval1.each do |i|\n    interval2.each do |j|\n  \
    \    if(i[0]<=j[1] && j[0]<=i[1])\n        return true\n      end\n    end\n \
    \ end\n  return false\nend", "  interval1[0] < interval1[1] && interval2[0] <\
    \ interval2[1] && interval1[1] < interval2[0]\nend", "  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] \n  \n  interval1[1] = interval1[1] if interval1[0] < interval1[1]\
    \ \n  interval2[1] = interval2[1] if interval2[0] < interval2[1] \n  \n  if interval1[1]\
    \ >= interval2[0] and interval2[1] >= interval1[0]\n    return \"YES\"\n  elsif\
    \ interval1[1] >= interval2[0] and interval2[1] < interval1[0]\n    return \"\
    NO\"\n  elsif interval1[1] < interval2[0] and interval2[1] >= interval1[0]\n \
    \   return \"NO\"\n  elsif interval1[1] < interval2[0] and interval2[1] < interval1[0]\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      if i1[1] < i2[0]\n        return\
    \ false\n      elsif i1[0] > i2[1]\n        return false\n      end\n    end\n\
    \  end\n  true\nend", "  interval1.each do |i|\n    interval2.each do |j|\n  \
    \    if i[1] < j[1]\n        return false\n      elsif i[1] > j[1]\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend", "  interval1[0] < interval2[1]\
    \ && interval2[0] < interval1[1]\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<i2 ? return \"NO\" : return \"YES\"\n    end\n  end\n  return\
    \ \"NO\"\nend", "  interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ && interval1[1] < interval2[0]\nend", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&)\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i[0]<=j[0] && i[1]>=j[1])\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]\nend", "  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1[1] >=\
    \ i2[0] && i1[1] <= i2[1]\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2\
    \ if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if i[1] < j[1]\n        return false\n      elsif i[1] > j[1]\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  interval1[0]\
    \ < interval2[1] && interval1[1] > interval2[0] || interval1[0] > interval2[1]\
    \ && interval1[1] < interval2[0]\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1[0] <= i2[0] && i1[1] >= i2[1]\n    end\n  end\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1[1] <=i2[0] && i1[1] >= i2[1]\n\
    \    end\n  end\nend", "  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    end", "  interval1[0] < interval1[1] and interval2[0] < interval2[1]\nend", " \
    \ interval1[0] < interval2[1] and interval2[0] < interval1[1]\nend", "  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] \n  \n  if interval1[0] >= interval2[0]\n   \
    \ return \"NO\"\n  elsif interval1[1] <= interval2[1]\n    return \"NO\"\n  elsif\
    \ interval1[0] < interval2[0]\n    return \"NO\"\n  elsif interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  else\n    return \"YES\"\n  end\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      if i1.first <= i2.first && i1.last\
    \ >= i2.last\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if i[0] < j[0]\n\
    \        return false if i[1] > j[1]\n      elsif i[0] > j[0]\n        return\
    \ false if i[1] < j[1]\n      end\n    end\n  end\n  return true\nend", "  \n\
    \  interval1Start, interval1End = interval1\n  interval2Start, interval2End =\
    \ interval2\n  \n  intersectionStart = interval1Start\n  intersectionEnd = interval1End\n\
    \  \n  while intersectionStart <= intersectionEnd\n    \n    intersectionStart\
    \ = interval2Start\n    intersectionEnd = interval2End\n    \n    while intersectionStart\
    \ <= intersectionEnd\n      \n      if interval1Start <= intersectionStart and\
    \ intersectionStart <= interval1End\n        intersectionStart = interval1Start\n\
    \      elsif intersectionStart <= interval1End and interval1End <= interval2Start\n\
    \        intersectionStart = interval1End\n      elsif intersectionStart <= interval2End\
    \ and interval2Start <= intersectionEnd\n        intersectionEnd = interval2Start\n\
    \      else\n        intersectionEnd = interval2End\n      end\n    end\n    \n\
    \    if intersectionStart <= interval1End\n      interval1Start = intersectionStart\
    \ + 1\n    else\n      interval1End = intersectionEnd - 1\n    end\n    \n   \
    \ if intersectionEnd <= interval2End\n      interval2Start = intersectionEnd +\
    \ 1\n    else\n      interval2End = intersectionEnd - 1\n    end\n  end\n  \n\
    \  if interval1Start <= interval1End\n    interval1Start = interval1Start + 1\n\
    \  end\n  \n  if interval2Start <= interval2End\n    interval2Start = interval2Start\
    \ + 1\n  end\n  \n  if interval1Start <= interval2Start\n    interval1End = interval1End\
    \ - 1\n  end\n  \n  if interval2End <= interval1End\n    interval2End = interval2End\
    \ - 1\n  end\n  \n  if interval1Start <= interval2End\n    return \"YES\"\n  elsif\
    \ interval2Start <= interval1End\n    return \"NO\"\n  else\n    return \"NO\"\
    \n  end\nend", "  \n  interval1Start = interval1[0]\n  interval1End = interval1[1]\n\
    \  interval2Start = interval2[0]\n  interval2End = interval2[1]\n  \n  \n  if\
    \ interval1Start > interval2End\n    return \"NO\"\n  elsif interval1End < interval2Start\n\
    \    return \"NO\"\n  elsif interval1Start > interval2Start\n    return \"NO\"\
    \n  elsif interval1End < interval2End\n    return \"NO\"\n  else\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "  interval1[0] < interval2[1]\
    \ && interval1[1] > interval2[0] || interval1[0] > interval2[1] && interval1[1]\
    \ < interval2[0]\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1[1] <=i2[0] && i1[1] >= i2[1]\n    end\n  end\nend", "  \n  interval1Start\
    \ = interval1[0]\n  interval1End = interval1[1]\n  interval2Start = interval2[0]\n\
    \  interval2End = interval2[1]\n  \n  if(interval1Start > interval2Start)\n  \
    \  interval1Start, interval2Start = interval2Start, interval1Start\n  if(interval1End\
    \ < interval2End)\n    interval1End, interval2End = interval2End, interval1End\n\
    \  \n  if(interval1Start >= interval2Start && interval1End <= interval2End)\n\
    \    return \"YES\"\n  \n  if(interval1Start <= interval2Start && interval1End\
    \ >= interval2End)\n    return \"NO\"\n  \n  if(interval1Start <= interval2Start\
    \ && interval1End >= interval2End)\n    return \"NO\"\n  \n  if(interval1Start\
    \ >= interval2Start && interval1End <= interval2End)\n    return \"NO\"\n  \n\
    \  if(interval1Start <= interval2Start && interval1End >= interval2End)\n    return\
    \ \"NO\"\n  \n  if(interval1Start >= interval2Start && interval1End <= interval2End)\n\
    \    return \"NO\"\n  \n  if(interval1Start <= interval2Start && interval1End\
    \ >= interval2End)\n    return \"NO\"\n  \n  if(interval1Start >= interval2Start\
    \ && interval1End <= interval2End)\n    return \"NO\"\n  \n  if(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n    return \"NO\"\n  \n\
    \  if(interval1Start >= interval2Start && interval1End <= interval2End)\n    return\
    \ \"NO\"\n  \n  if(interval1Start <= interval2Start && interval1End >= interval2End)\n\
    \    return \"NO\"\n  \n  if(interval1Start >= interval2Start && interval1End\
    \ <= interval2End)\n    return \"NO\"\n  \n  if(interval1Start <= interval2Start\
    \ && interval1End >= interval2End)\n    return \"NO\"\n  \n  if(interval1Start\
    \ >= interval2Start && interval1End <= interval2End)\n    return \"NO\"\n  \n\
    \  if(interval1Start <= interval2Start && interval1End >= interval2End)\n    return\
    \ \"NO\"\n  \n  if(interval1Start >= interval2Start && interval1End <= interval2End)\n\
    \    return \"NO\"\n  \n  if(interval1Start <= interval2Start && interval1End\
    \ >= interval2End)\n    return \"NO\"", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      if i1[1] >= i2[0] && i1[0] <= i2[1]\n        return true\n  \
    \    end\n    end\n  end\n  return false\nend", "  interval1.each do |i|\n   \
    \ interval2.each do |j|\n      if(i[1] < j[1] && i[1] > j[0] && j[1] > i[0])\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1[1] >= i2[0] &&\
    \ i1[1] <= i2[1]\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  interval1[0] < interval1[1] && interval2[0] < interval2[1] && interval1[1]\
    \ < interval2[0]\nend", "  \n  interval1[0] < interval2[1] and interval2[0] <\
    \ interval1[1]\n  \n  if interval1[0] < interval2[1] and interval2[0] < interval1[1]\n\
    \    return \"YES\"\n  \n  if interval1[0] > interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1] and interval2[0] < interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] < interval2[1] and interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1]", "  interval1.reduce(:&)\n\
    \  interval2.reduce(:&)\nend", "  \n  interval1 = interval1.to_a\n  interval2\
    \ = interval2.to_a\n  \n  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      \n      i1_end = i1[1]\n      i2_end = i2[1]\n      \n      i1_start =\
    \ i1[0]\n      i2_start = i2[0]\n      \n      i1_length = i1_end - i1_start\n\
    \      i2_length = i2_end - i2_start\n      \n      i1_prime = i1_length == 2\n\
    \      i2_prime = i2_length == 2\n      \n      i1_prime_or_i2_prime = i1_prime\
    \ || i2_prime\n      \n      i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_prime_or_i2_prime_or_i1_",
  "  interval1 = interval1.to_a\n  interval2 = interval2.to_a\n  \n  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      \n      if(i[0] < j[0] && i[1] > j[1])\n\
    \        return true\n      end\n    end\n  end\n  \n  return false\nend", " \
    \ interval1[0] < interval1[1] && interval2[0] < interval2[1] && interval1[1] <\
    \ interval2[0]\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1[0] <= i2[0] && i1[1] >= i2[1]\n    end\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
