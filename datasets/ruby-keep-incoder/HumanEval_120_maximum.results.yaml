name: HumanEval_120_maximum
language: ruby
results:
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp666wh2mv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp666wh2mv.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.85 tests/s, 563.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzw_eg_hh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzw_eg_hh.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003389 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.07 tests/s, 295.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0..k-1\n    result << arr[i]\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7gtjkizu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7gtjkizu.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.69 tests/s, 575.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dip5ke5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dip5ke5.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.68 tests/s, 433.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbsrw6w1z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbsrw6w1z.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.006613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.22 tests/s, 151.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgijh2r70\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgijh2r70.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.86 tests/s, 597.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    \n    max = arr[0]\n    \n    for i in arr\n        if i > max\n        \
    \    max = i\n            \n    arr.delete(max)\n    \n    arr.sort!\n    \n \
    \   arr.insert(0, max)\n    \n    arr.slice!(0, k)\n    \n    return arr\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3nfye3qk.rb:35: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3nfye3qk.rb:50: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprs6vfojh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprs6vfojh.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 581.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe98jzp2k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe98jzp2k.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.67 tests/s, 543.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_2yvge3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_2yvge3.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.03 tests/s, 574.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfryg8iak\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfryg8iak.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.00326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.75 tests/s, 306.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyo87bm7e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyo87bm7e.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.026477 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.77 tests/s, 75.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprh6woaip\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprh6woaip.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.09 tests/s, 306.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max_arr = []\n  max_arr << arr[0]\n  max_arr.sort!\n  max_arr.each_with_index\
    \ do |x, i|\n    if i > k\n      break\n    end\n    max_arr << x\n  end\n  max_arr\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_u9tddfh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_u9tddfh.rb:32:in\
    \ `test_maximum'\n     29: class TestHumanEval < Test::Unit::TestCase\n     30:\
    \   def test_maximum\n     31:     candidate = method(:maximum)\n  => 32:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     33:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     34:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     35:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -3, -3, -3,\
    \ -3]>\n\ndiff:\n? [-4, -3, 5             ]\n?          -3, -3, -3, -3 \n?  ----\
    \    ? \n===============================================================================\n\
    \nFinished in 0.004336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.63 tests/s, 230.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp49r316o2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp49r316o2.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.24 tests/s, 298.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgna_z4y8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgna_z4y8.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.85 tests/s, 605.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_28rz6v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_28rz6v.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.0036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.78 tests/s, 555.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqewltrse\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqewltrse.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.98 tests/s, 309.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dg1gza8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dg1gza8.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.21 tests/s, 309.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtnv_vep\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtnv_vep.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.21 tests/s, 302.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5xa19me\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5xa19me.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.027566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.28 tests/s, 36.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result.push(arr[i])\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfihwsosa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfihwsosa.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.89 tests/s, 583.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  for i in 1..k\n\
    \    if arr[i] > max_arr[1]\n      max_arr[1] = arr[i]\n    elsif arr[i] < max_arr[0]\n\
    \      max_arr[0] = arr[i]\n    end\n  end\n  max_arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrnwsj_v\n\
    Started\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `>' for\
    \ nil:NilClass\n  \n      if arr[i] > max_arr[1]\n                ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrnwsj_v.rb:21:in\
    \ `block in maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrnwsj_v.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrnwsj_v.rb:20:in\
    \ `maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrnwsj_v.rb:33:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrnwsj_v.rb:33:in\
    \ `test_maximum'\n     30: class TestHumanEval < Test::Unit::TestCase\n     31:\
    \   def test_maximum\n     32:     candidate = method(:maximum)\n  => 33:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     34:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     35:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     36:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.002096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    477.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflrnm9sn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflrnm9sn.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.52 tests/s, 575.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(k..-1)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkvu70fn6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkvu70fn6.rb:26:in\
    \ `test_maximum'\n     23:   def test_maximum\n     24:     candidate = method(:maximum)\n\
    \     25:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 26:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     29:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.007191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.06 tests/s, 278.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztc8xl23\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztc8xl23.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.32 tests/s, 169.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3x_rq148\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3x_rq148.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.006432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.47 tests/s, 310.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdnhfzyg9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdnhfzyg9.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.34 tests/s, 518.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1kmnbhck\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1kmnbhck.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.24 tests/s, 552.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3d6cr1rq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3d6cr1rq.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.009578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.41 tests/s, 104.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2v0jhuu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2v0jhuu.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.006819 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.65 tests/s, 293.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7qsnys6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7qsnys6.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.63 tests/s, 276.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n2hjr7t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n2hjr7t.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.53 tests/s, 567.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  max_arr = []\n  \n  for i in 0...k\n    max_arr.push(arr[i])\n  end\n \
    \ \n  max_arr.sort!\n  \n  return max_arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzzqq56_9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzzqq56_9.rb:33:in\
    \ `test_maximum'\n     30:   def test_maximum\n     31:     candidate = method(:maximum)\n\
    \     32:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 33:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     34:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     35:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     36:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.62 tests/s, 595.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcvpuk4a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcvpuk4a.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.010531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.96 tests/s, 94.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwn3l00ng\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwn3l00ng.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.005278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.47 tests/s, 378.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0..k-1\n    result << arr[i]\n  end\n\
    \  result << arr[k]\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7640japv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7640japv.rb:29:in\
    \ `test_maximum'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_maximum\n     28:     candidate = method(:maximum)\n  => 29:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     30:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     31:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     32:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-4, -3, 5, nil]>\n\
    \ndiff:\n? [-4, -3, 5, nil]\n===============================================================================\n\
    \nFinished in 0.010456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.64 tests/s, 95.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(k..-1)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmexbcf6m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmexbcf6m.rb:26:in\
    \ `test_maximum'\n     23:   def test_maximum\n     24:     candidate = method(:maximum)\n\
    \     25:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 26:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     29:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.94 tests/s, 573.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(k..-1)\n    arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyx5g8xve\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyx5g8xve.rb:26:in\
    \ `test_maximum'\n     23:   def test_maximum\n     24:     candidate = method(:maximum)\n\
    \     25:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 26:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     29:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.064886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    15.41 tests/s, 30.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpegx1j12z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpegx1j12z.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.49 tests/s, 558.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v80jkfu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v80jkfu.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.024616 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.62 tests/s, 40.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdumjgk1r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdumjgk1r.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.18 tests/s, 289.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  return arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp43hvtom\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp43hvtom.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.93 tests/s, 300.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclas0qkn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclas0qkn.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.27 tests/s, 594.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaxyvn7_.rb:92: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaxyvn7_.rb:107: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47v03621\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47v03621.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.90 tests/s, 589.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5dnyw23\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5dnyw23.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.049551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    20.18 tests/s, 20.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv43byyer\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv43byyer.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.41 tests/s, 564.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  return arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplo254qhi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplo254qhi.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.49 tests/s, 303.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  return arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9cg0r_w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9cg0r_w.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.81 tests/s, 294.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzx75fe4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzx75fe4.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.01 tests/s, 284.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  return arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkvfcn2eg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkvfcn2eg.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.41 tests/s, 264.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9m2d6xjd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9m2d6xjd.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.20 tests/s, 516.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max_arr = []\n  max_arr << arr[0]\n  max_arr.sort!\n  max_arr.each_with_index\
    \ do |x, i|\n    if i < k\n      max_arr << x\n    end\n  end\n  max_arr\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpach1t3jc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpach1t3jc.rb:31:in\
    \ `test_maximum'\n     28: class TestHumanEval < Test::Unit::TestCase\n     29:\
    \   def test_maximum\n     30:     candidate = method(:maximum)\n  => 31:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     32:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     33:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     34:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -3, -3, -3]>\n\
    \ndiff:\n? [-4, -3, 5         ]\n?          -3, -3, -3 \n?  ----    ? \n===============================================================================\n\
    \nFinished in 0.003573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.88 tests/s, 279.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr[0..k-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18z0r4tc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18z0r4tc.rb:25:in\
    \ `test_maximum'\n     22:   def test_maximum\n     23:     candidate = method(:maximum)\n\
    \     24:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 25:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     26:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     27:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     28:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.49 tests/s, 558.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ugvhf11\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ugvhf11.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.031666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    31.58 tests/s, 63.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  # Write your code here\n  \n  maximum = arr.sort\n  \n  maximum.slice!(0,\
    \ k)\n  \n  return maximum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdvj5ipdr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdvj5ipdr.rb:30:in\
    \ `test_maximum'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:\
    \   def test_maximum\n     29:     candidate = method(:maximum)\n  => 30:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.84 tests/s, 301.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptuansalt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptuansalt.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.005889 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.81 tests/s, 339.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6g83pu1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6g83pu1.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.36 tests/s, 574.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprars6crz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprars6crz.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.77 tests/s, 563.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3oah7i3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3oah7i3.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.80 tests/s, 583.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ta3_uai\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ta3_uai.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.16 tests/s, 316.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  for i in 1..k\n    if arr[i] > max_arr[-1]\n      max_arr.push(arr[i])\n  \
    \  end\n  end\n  max_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyuv3odjn\n\
    Started\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `>' for\
    \ nil:NilClass\n  \n      if arr[i] > max_arr[-1]\n                ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyuv3odjn.rb:22:in\
    \ `block in maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyuv3odjn.rb:21:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyuv3odjn.rb:21:in\
    \ `maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyuv3odjn.rb:32:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyuv3odjn.rb:32:in\
    \ `test_maximum'\n     29: class TestHumanEval < Test::Unit::TestCase\n     30:\
    \   def test_maximum\n     31:     candidate = method(:maximum)\n  => 32:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     33:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     34:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     35:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.001141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    876.42 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0507v1v8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0507v1v8.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.63 tests/s, 583.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwqvh8k6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwqvh8k6.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.17 tests/s, 284.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7rc3znq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7rc3znq.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.0033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.03 tests/s, 303.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm4cned8m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm4cned8m.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.32 tests/s, 304.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mkr6941\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mkr6941.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.00441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.76 tests/s, 226.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptejpb96x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptejpb96x.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.46 tests/s, 294.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88s2k7aa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88s2k7aa.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003462 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.85 tests/s, 577.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_fupfnp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_fupfnp.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.80 tests/s, 571.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ck4c_we\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ck4c_we.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.93 tests/s, 601.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cl_y4n0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cl_y4n0.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.14 tests/s, 570.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph8_fuqbw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph8_fuqbw.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004949 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.06 tests/s, 404.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7ek6lck\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7ek6lck.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 313.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkielc41h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkielc41h.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.39 tests/s, 600.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw685eb32\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw685eb32.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.022957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.56 tests/s, 87.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4hvm0y9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4hvm0y9.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.60 tests/s, 295.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rzv147c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rzv147c.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.17 tests/s, 568.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqc6r23an\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqc6r23an.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.57 tests/s, 585.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  # write your code here\n  \nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4bo33hrw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4bo33hrw.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.90 tests/s, 305.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu3l09u4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu3l09u4.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.78 tests/s, 581.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfuwe83rs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfuwe83rs.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.95 tests/s, 290.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdiym_nho\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdiym_nho.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004741 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.93 tests/s, 421.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ioufr3e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ioufr3e.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.61 tests/s, 567.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result.push(arr[i])\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxfqg7zwv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxfqg7zwv.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.64 tests/s, 559.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8ncyn5b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8ncyn5b.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.00902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.86 tests/s, 110.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptfja4e_w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptfja4e_w.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.61 tests/s, 567.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uett93p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uett93p.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.09 tests/s, 568.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  arr.sort!\n  \n  result = []\n  \n  for i in 0..k-1\n    result.push(arr[i])\n\
    \  end\n  \n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatkpeogn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatkpeogn.rb:33:in\
    \ `test_maximum'\n     30:   def test_maximum\n     31:     candidate = method(:maximum)\n\
    \     32:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 33:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     34:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     35:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     36:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.78 tests/s, 573.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp22l17o93\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp22l17o93.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.016889 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.21 tests/s, 118.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppu3dqfvt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppu3dqfvt.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.60 tests/s, 577.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vnvd_th\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vnvd_th.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.50 tests/s, 561.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n5wbq2q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n5wbq2q.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.14 tests/s, 584.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_2mi566\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_2mi566.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.27 tests/s, 594.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpulaf1oni\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpulaf1oni.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.025606 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.05 tests/s, 78.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1kep99r6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1kep99r6.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.04 tests/s, 598.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqsz34jua\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqsz34jua.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.14 tests/s, 442.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1xjd91f5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1xjd91f5.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.10 tests/s, 133.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0m_0h28f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0m_0h28f.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.80 tests/s, 469.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5beu2r9q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5beu2r9q.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.64 tests/s, 589.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30yr4b7r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30yr4b7r.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.021917 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.63 tests/s, 91.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzeedv3jb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzeedv3jb.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.16 tests/s, 305.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qq_79s6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5qq_79s6.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.98 tests/s, 244.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpire9gj_3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpire9gj_3.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.0034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.12 tests/s, 588.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr[0..k-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2e5jg1q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2e5jg1q.rb:25:in\
    \ `test_maximum'\n     22:   def test_maximum\n     23:     candidate = method(:maximum)\n\
    \     24:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 25:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     26:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     27:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     28:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.88 tests/s, 559.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3, 5],\
    \ candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp260bojtl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp260bojtl.rb:23:in\
    \ `test_maximum'\n     20: class TestHumanEval < Test::Unit::TestCase\n     21:\
    \   def test_maximum\n     22:     candidate = method(:maximum)\n  => 23:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.039089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.58 tests/s, 25.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7bxky15x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7bxky15x.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.009087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.05 tests/s, 110.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnw6h1zi_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnw6h1zi_.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.45 tests/s, 562.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fen3yp1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fen3yp1.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.69 tests/s, 567.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7291arm7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7291arm7.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.037136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.93 tests/s, 53.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0..k-1\n    result.push(arr[i])\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpywq9a2_0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpywq9a2_0.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.62 tests/s, 375.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  # write your code here\n  \nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7rmqa5qm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7rmqa5qm.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.67 tests/s, 318.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70pxcbvb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70pxcbvb.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.008947 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.77 tests/s, 223.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6n3v3n_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6n3v3n_.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.71 tests/s, 557.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4yejq1an\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4yejq1an.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.66 tests/s, 605.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfcez7y_9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfcez7y_9.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003598 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.93 tests/s, 555.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu6h1icnw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu6h1icnw.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.69 tests/s, 309.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gl9immm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gl9immm.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.52 tests/s, 459.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76z4q44i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76z4q44i.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.012813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.05 tests/s, 156.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgyy71z8a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgyy71z8a.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.92 tests/s, 479.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpblcltv0d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpblcltv0d.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.62 tests/s, 457.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4xyj3ht\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4xyj3ht.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.60 tests/s, 597.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdo61op0p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdo61op0p.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.27 tests/s, 574.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  # Write your code here\n  \n  max_arr = []\n  \n  for i in 0...k\n    max_arr\
    \ << arr[i]\n  end\n  \n  max_arr.sort!\n  \n  return max_arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_t2qhh7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_t2qhh7.rb:35:in\
    \ `test_maximum'\n     32:   def test_maximum\n     33:     candidate = method(:maximum)\n\
    \     34:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 35:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     36:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     37:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     38:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.005625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.78 tests/s, 355.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqd0qr6_x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqd0qr6_x.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.009391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.48 tests/s, 212.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklyrrrzv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklyrrrzv.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004857 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.89 tests/s, 411.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  # Write your code here\n  \nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0tpq_yf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0tpq_yf.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.61 tests/s, 281.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result.push(arr[i])\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkg0lpdtr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkg0lpdtr.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.53 tests/s, 573.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyslfj3_1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyslfj3_1.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.74 tests/s, 585.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3ns_d66\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3ns_d66.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.39 tests/s, 554.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dhzmthb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dhzmthb.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.008534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.18 tests/s, 234.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(k..-1)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen1b9ms1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen1b9ms1.rb:26:in\
    \ `test_maximum'\n     23:   def test_maximum\n     24:     candidate = method(:maximum)\n\
    \     25:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 26:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     29:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.74 tests/s, 585.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngz9ornd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngz9ornd.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.27 tests/s, 574.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  for i in 1..k\n\
    \    if arr[i] > max_arr[1]\n      max_arr[1] = arr[i]\n    elsif arr[i] > max_arr[2]\n\
    \      max_arr[2] = arr[i]\n    elsif arr[i] > max_arr[3]\n      max_arr[3] =\
    \ arr[i]\n    end\n  end\n  return max_arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5h4pzdq\n\
    Started\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ nil failed\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5h4pzdq.rb:23:in\
    \ `>'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5h4pzdq.rb:23:in `block\
    \ in maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5h4pzdq.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5h4pzdq.rb:20:in\
    \ `maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5h4pzdq.rb:35:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5h4pzdq.rb:35:in\
    \ `test_maximum'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:\
    \   def test_maximum\n     34:     candidate = method(:maximum)\n  => 35:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     36:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     37:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     38:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.000674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1483.68 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_pk8og3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_pk8og3.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.10 tests/s, 240.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(k..-1)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1q4vkshv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1q4vkshv.rb:26:in\
    \ `test_maximum'\n     23:   def test_maximum\n     24:     candidate = method(:maximum)\n\
    \     25:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 26:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     29:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.14 tests/s, 562.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0lnksqhd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0lnksqhd.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.75 tests/s, 300.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe_02mhkz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe_02mhkz.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.95 tests/s, 549.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  # Write your code here\n  \nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff1hsdmp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff1hsdmp.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.77 tests/s, 213.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp041tid5u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp041tid5u.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.60 tests/s, 128.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2kl2svj0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2kl2svj0.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.24 tests/s, 596.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppitiuc1m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppitiuc1m.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.006108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.72 tests/s, 327.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4vzuqfu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4vzuqfu.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.46 tests/s, 247.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp99svenqg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp99svenqg.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.56 tests/s, 296.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgv7sarw2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgv7sarw2.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.35 tests/s, 260.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  # Write your code here\n  \nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_n_h3ts\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_n_h3ts.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.41 tests/s, 239.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcptfjoq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcptfjoq.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.97 tests/s, 304.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  for i in 1..k\n\
    \    if arr[i] > max_arr[1]\n      max_arr[1] = arr[i]\n    elsif arr[i] > max_arr[2]\n\
    \      max_arr[2] = arr[i]\n    end\n  end\n  max_arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxwya0bm\n\
    Started\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ nil failed\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxwya0bm.rb:23:in\
    \ `>'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxwya0bm.rb:23:in `block\
    \ in maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxwya0bm.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxwya0bm.rb:20:in\
    \ `maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxwya0bm.rb:33:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxwya0bm.rb:33:in\
    \ `test_maximum'\n     30: class TestHumanEval < Test::Unit::TestCase\n     31:\
    \   def test_maximum\n     32:     candidate = method(:maximum)\n  => 33:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     34:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     35:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     36:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.000691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1447.18 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    max = arr[0..k-1]\n    arr.delete_at(k)\n    arr.sort!\n \
    \   return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppydnd0xz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppydnd0xz.rb:28:in\
    \ `test_maximum'\n     25:   def test_maximum\n     26:     candidate = method(:maximum)\n\
    \     27:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 28:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     29:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     30:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     31:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.94 tests/s, 451.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfc3tr7bq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfc3tr7bq.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.11 tests/s, 604.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  for i in 1..k\n    if arr[i] > max_arr[1]\n      max_arr[1] = arr[i]\n    elsif\
    \ arr[i] > max_arr[2]\n      max_arr[2] = arr[i]\n    end\n  end\n  max_arr\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgareds2\n\
    Started\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `>' for\
    \ nil:NilClass\n  \n      if arr[i] > max_arr[1]\n                ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgareds2.rb:22:in\
    \ `block in maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgareds2.rb:21:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgareds2.rb:21:in\
    \ `maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgareds2.rb:34:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgareds2.rb:34:in\
    \ `test_maximum'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:\
    \   def test_maximum\n     33:     candidate = method(:maximum)\n  => 34:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     35:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     36:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     37:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.001415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    706.71 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0jc2p8p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0jc2p8p.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004742 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.88 tests/s, 421.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpun4ae8ld\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpun4ae8ld.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.37 tests/s, 484.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  # write your code here\n  \nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_6qmt_l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_6qmt_l.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.33 tests/s, 298.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92a15mar\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92a15mar.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.91 tests/s, 292.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result.push(arr[i])\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmheuyhg7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmheuyhg7.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.70 tests/s, 581.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bjtapw1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bjtapw1.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.96 tests/s, 571.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5gsud2b2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5gsud2b2.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.94 tests/s, 286.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4cganec\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4cganec.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004398 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.38 tests/s, 454.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpooxmgym6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpooxmgym6.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.08 tests/s, 586.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphckfueek\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphckfueek.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.03 tests/s, 300.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr85non77\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr85non77.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004335 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.68 tests/s, 230.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppu6zrdy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppu6zrdy.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.94 tests/s, 599.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qjmyx46\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qjmyx46.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.041558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.06 tests/s, 48.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppp5o549z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppp5o549z.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.029212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    34.23 tests/s, 34.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplodpfrq6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplodpfrq6.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.006801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.04 tests/s, 147.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6tuoigj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6tuoigj.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.04 tests/s, 255.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe69s27m7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe69s27m7.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.12 tests/s, 572.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  return arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdjkjj4cz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdjkjj4cz.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.22 tests/s, 299.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm1t5dgup\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm1t5dgup.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.014719 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.94 tests/s, 135.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdi_29kep\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdi_29kep.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.01019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.14 tests/s, 196.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp257ho9ih\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp257ho9ih.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003545 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.09 tests/s, 564.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(k..-1)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmfbsvsd9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmfbsvsd9.rb:26:in\
    \ `test_maximum'\n     23:   def test_maximum\n     24:     candidate = method(:maximum)\n\
    \     25:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 26:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     29:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 585.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplfvypoct\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplfvypoct.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.09 tests/s, 556.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekdci4qv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekdci4qv.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.0036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.78 tests/s, 555.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpew3pt1z3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpew3pt1z3.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.86 tests/s, 557.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  \n  # sort arr\n  arr.sort!\n  \n  # create result array\n  result = []\n \
    \ \n  # find max number in arr\n  max_number = arr[0]\n  \n  # find max number\
    \ in arr\n  for i in 1..k\n    max_number = arr[i] if arr[i] > max_number else\
    \ max_number\n  end\n  \n  # add max_number to result\n  result << max_number\n\
    \  \n  # return result\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpksjus68m.rb:29: syntax\
    \ error, unexpected `else', expecting `end'\n...[i] if arr[i] > max_number else\
    \ max_number\n...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4cz3b2d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4cz3b2d.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.53 tests/s, 305.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm5b1sfp2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm5b1sfp2.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.25 tests/s, 458.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_fosk4l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_fosk4l.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.005575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.37 tests/s, 358.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0881vpa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0881vpa.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003909 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.82 tests/s, 255.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  for i in 1..k\n\
    \    if arr[i] > max_arr[1]\n      max_arr[1] = arr[i]\n    elsif arr[i] > max_arr[2]\n\
    \      max_arr[2] = arr[i]\n    end\n  end\n  max_arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74x52q85\n\
    Started\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ nil failed\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74x52q85.rb:23:in\
    \ `>'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74x52q85.rb:23:in `block\
    \ in maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74x52q85.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74x52q85.rb:20:in\
    \ `maximum'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74x52q85.rb:33:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74x52q85.rb:33:in\
    \ `test_maximum'\n     30: class TestHumanEval < Test::Unit::TestCase\n     31:\
    \   def test_maximum\n     32:     candidate = method(:maximum)\n  => 33:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     34:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     35:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     36:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.000648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1543.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3h18zlj_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3h18zlj_.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004952 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.94 tests/s, 201.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97jyx17y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97jyx17y.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.96 tests/s, 571.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpib_ynqgj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpib_ynqgj.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.04 tests/s, 204.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphn28td7p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphn28td7p.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.024039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    41.60 tests/s, 83.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0nylraz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0nylraz.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.004155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.67 tests/s, 481.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0ur57ji\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0ur57ji.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.00335 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.51 tests/s, 298.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6guvizbp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6guvizbp.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.69 tests/s, 249.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj1ykqqkh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj1ykqqkh.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.011379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.88 tests/s, 87.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdmj23jwe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdmj23jwe.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.30 tests/s, 542.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_071pad\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_071pad.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.30 tests/s, 234.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ytw6h5f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ytw6h5f.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.69 tests/s, 609.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6o2jo83\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6o2jo83.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.006728 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.63 tests/s, 297.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqvofkq_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqvofkq_.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.63 tests/s, 285.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n \
    \ result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpow9r6gej\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpow9r6gej.rb:29:in\
    \ `test_maximum'\n     26:   def test_maximum\n     27:     candidate = method(:maximum)\n\
    \     28:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 29:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     32:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.60 tests/s, 531.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6wfw4eiy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6wfw4eiy.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.89 tests/s, 583.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n  \
    \  i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yg9lvz6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yg9lvz6.rb:31:in\
    \ `test_maximum'\n     28:   def test_maximum\n     29:     candidate = method(:maximum)\n\
    \     30:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  =>\
    \ 31:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     32:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     33:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     34:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.003199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.60 tests/s, 625.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr.slice!(0, k)\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp101yjo9i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp101yjo9i.rb:25:in\
    \ `test_maximum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_maximum\n     24:     candidate = method(:maximum)\n  => 25:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n\
    ? [-4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.003138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.67 tests/s, 318.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
