name: HumanEval_47_median
language: ruby
results:
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size /\
    \ 2)-1] : (l[l.size / 2] + l[l.size / 2 - 1]) / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiibqfbkr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiibqfbkr.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.00494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.43 tests/s, 202.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size /\
    \ 2)-1] : l[l.size / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnzpelyl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnzpelyl.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.026972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.08 tests/s, 74.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12dvu247\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12dvu247.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003814 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.19 tests/s, 524.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length < 3 else l[1..-1]\n  l.length / 2\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4j2kx2mt.rb:8: else\
    \ without rescue is useless\n...= l.length if l.length < 3 else l[1..-1]\n...\
    \                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfksxx3rm\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `length!'\
    \ for [1, 2, 3, 4, 5]:Array\n  \n    l.length!\n     ^^^^^^^^\n  Did you mean?\
    \  length\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfksxx3rm.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfksxx3rm.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfksxx3rm.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.004192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo1zxjrmb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo1zxjrmb.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.004127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.31 tests/s, 242.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[(l.length-1)/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoiuzgr0i\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [-10, 4, 6, 10, 20, 1000]:Array\n  \n    l/=2 if l.length%2==0\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoiuzgr0i.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoiuzgr0i.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoiuzgr0i.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n===============================================================================\n\
    \nFinished in 0.013921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.83 tests/s, 71.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[l.size / 2]\
    \ : (l[l.size / 2 - 1] + l[l.size / 2]) / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxmaj9pd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxmaj9pd.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.015655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.88 tests/s, 63.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length\n  l/2\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23lr7ec0\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/2\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23lr7ec0.rb:9:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23lr7ec0.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23lr7ec0.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.0014 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    714.29 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpphssk1fe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpphssk1fe.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.067107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    14.90 tests/s, 14.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 \n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5cjqlma5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5cjqlma5.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.41 tests/s, 309.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length % 2 == 0 else l.length / 2\n  l.ceil\n \
    \ l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31ke3b3e.rb:8: else\
    \ without rescue is useless\n...ength if l.length % 2 == 0 else l.length / 2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpihwfo7gx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpihwfo7gx.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.06 tests/s, 630.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp40ctfot5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp40ctfot5.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.36 tests/s, 308.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9txzalz4\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9txzalz4.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9txzalz4.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9txzalz4.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    723.07 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2].to_f\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8zx68y20.rb:8: else\
    \ without rescue is useless\n  l/=2 if l.length&1==0 else l.length\n         \
    \               ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.size / 2\n  l = (l[1..-1] + l[0..-2]) / 2\n  l\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1agevyt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1agevyt.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <1>\n===============================================================================\n\
    \nFinished in 0.00332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.20 tests/s, 301.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyvu9m_j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyvu9m_j.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.023539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.48 tests/s, 84.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclzftaiz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclzftaiz.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.016852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.34 tests/s, 118.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpofy72od1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpofy72od1.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.00313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.49 tests/s, 638.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6r8k5zp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6r8k5zp.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.005913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.12 tests/s, 169.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length < 2 ? l[0] : (l[l.length / 2] + l[(l.length / 2) - 1]) /\
    \ 2.0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy9iueeha\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy9iueeha.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.022831 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.80 tests/s, 43.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.odd? else l.length\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjeqd4kqx.rb:8: else\
    \ without rescue is useless\n  l/=2 if l.odd? else l.length\n                \
    \ ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2-1]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbu6eydwu.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n  l/=2 if l.length&1==0 then l.length>>1\
    \ else l.length/2\n                        ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbu6eydwu.rb:8:\
    \ else without rescue is useless\n...ngth&1==0 then l.length>>1 else l.length/2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2].to_f\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0r4rots1.rb:8: else\
    \ without rescue is useless\n  l/=2 if l.length&1==0 else l.length\n         \
    \               ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptdb_6g0l\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptdb_6g0l.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptdb_6g0l.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptdb_6g0l.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    760.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwx_kp6t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwx_kp6t.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.004359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.41 tests/s, 458.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 \n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcacfuyby\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcacfuyby.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.00585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.94 tests/s, 170.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7mw_0ge\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7mw_0ge.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7mw_0ge.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7mw_0ge.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    764.53 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauyrgn5y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauyrgn5y.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.97 tests/s, 317.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqnakiss\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqnakiss.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.89 tests/s, 332.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwf2p7wsk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwf2p7wsk.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.24 tests/s, 662.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu31zwxq1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu31zwxq1.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.27 tests/s, 329.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp44l93jez\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp44l93jez.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.78 tests/s, 649.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size /\
    \ 2)-1] : l[l.size / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprw5xbffu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprw5xbffu.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.043106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.20 tests/s, 46.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).floor\n  len.times { l.delete_at((len + 1).floor)\
    \ }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  len\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb41455xv.rb:43: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb41455xv.rb:52: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length < 2 ? l[0] : (l.length / 2).floor\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2pv8lno7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2pv8lno7.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.20 tests/s, 325.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.sort.reverse\n  l.length < 2 ? l[0] : (l.length / 2).floor\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpocf7n3y8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpocf7n3y8.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.65 tests/s, 321.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzg0cg9ph\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzg0cg9ph.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.006153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.52 tests/s, 162.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb8kmk5a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb8kmk5a.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.06 tests/s, 317.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjy39bqe0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjy39bqe0.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.66 tests/s, 629.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2].to_f\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqtgxzyu.rb:8: else\
    \ without rescue is useless\n  l/=2 if l.length&1==0 else l.length\n         \
    \               ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4omwwyt_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4omwwyt_.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 312.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpornkvq5s\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpornkvq5s.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpornkvq5s.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpornkvq5s.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    777.60 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0nr0cn70\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0nr0cn70.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0nr0cn70.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0nr0cn70.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    771.01 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { l.delete_at((len.floor +\
    \ 1).floor) }\n  len.times { l.delete_at((len.floor + 1).ceil) }\n  len.times\
    \ { l.delete_at((len.ceil + 1).floor) }\n  len.times { l.delete_at((len.ceil +\
    \ 1).ceil) }\n  l.sort!\n  len.times { l.delete_at((len.floor + 1).floor) }\n\
    \  len.times { l.delete_at((len.floor + 1).ceil) }\n  len.times { l.delete_at((len.ceil\
    \ + 1).floor) }\n  len.times { l.delete_at((len.ceil + 1).ceil) }\n  l.sort!\n\
    \  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).ceil) }\n  len.times { l.delete_at((len.ceil + 1).floor) }\n  len.times\
    \ { l.delete_at((len.ceil + 1).ceil) }\n  l.sort!\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).ceil) }\n  len.times\
    \ { l.delete_at((len.ceil + 1).floor) }\n  len.times { l.delete_at((len.ceil +\
    \ 1).ceil) }\n  l.sort!\n  len.times { l.delete_at((len.floor + 1).floor) }\n\
    \  len.times { l.delete_at((len.floor + 1).ceil) }\n  len.times { l.delete_at((len.ceil\
    \ + 1).floor) }\n  len.times { l.delete_at((len.ceil + 1).ceil) }\n  l.sort!\n\
    \  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).ceil) }\n  len.times { l.delete_at((len.ceil + 1).floor) }\n  len.times\
    \ { l.delete_at((len.ceil + 1).ceil) }\n  l.sort!\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kho5adi.rb:42: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kho5adi.rb:51: syntax error,\
    \ unexpected end-of-input, expecting '}'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpguzuzytv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpguzuzytv.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.004922 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.17 tests/s, 203.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 # odd\n  l[l.length/2-1] if l.length&1==1 #\
    \ even\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp01pk6ewv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp01pk6ewv.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.37 tests/s, 273.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjqffekb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjqffekb.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.07 tests/s, 616.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size /\
    \ 2)-1] : (l[l.size / 2] + l[l.size / 2 - 1]) / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq169um5t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq169um5t.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.018869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.00 tests/s, 53.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { |i| l[i] > l[len ? len -\
    \ i : -1] and return l[i] }\n  l[len ? len - 1 : -1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15_3in85\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15_3in85.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.52 tests/s, 288.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 \n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3jc4h3zj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3jc4h3zj.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.006564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.35 tests/s, 152.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size /\
    \ 2)-1] : (l[l.size / 2] + l[l.size / 2 - 1]) / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk6c6cnoo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk6c6cnoo.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.011825 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.57 tests/s, 84.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yaoxywl.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n  l/=2 if l.length&1==0 then l.length>>1\
    \ else l.length/2\n                        ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yaoxywl.rb:8:\
    \ else without rescue is useless\n...ngth&1==0 then l.length>>1 else l.length/2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9g95gsq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9g95gsq.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.016649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.06 tests/s, 60.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyoj5jpuq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyoj5jpuq.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.79 tests/s, 309.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgc1xkkox\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgc1xkkox.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.88 tests/s, 559.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3_wnr70\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3_wnr70.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.79 tests/s, 609.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpku_rm6pf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpku_rm6pf.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.88 tests/s, 259.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp48oa2ycf\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp48oa2ycf.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp48oa2ycf.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp48oa2ycf.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    759.30 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[l.length/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7eh2xuco\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [-10, 4, 6, 10, 20, 1000]:Array\n  \n    l/=2 if l.length%2==0\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7eh2xuco.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7eh2xuco.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7eh2xuco.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n===============================================================================\n\
    \nFinished in 0.001555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    643.09 tests/s, 643.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length < 2 ? l[0] : (l[l.length / 2] + l[(l.length / 2) - 1]) /\
    \ 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpieeltj7a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpieeltj7a.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.004066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.94 tests/s, 245.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdaaj7iw4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdaaj7iw4.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.88 tests/s, 615.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).floor\n  len.times { l.delete_at((l.length /\
    \ 2) - 1) }\n  len.times { l.delete_at((l.length / 2) + 1) }\n  l.length / 2\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpml7xcz40\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpml7xcz40.rb:17:in\
    \ `test_median'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:\
    \   def test_median\n     16:     candidate = method(:median)\n  => 17:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     18:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     19:     assert_equal(5, candidate.call([5]))\n \
    \    20:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <1>\n===============================================================================\n\
    \nFinished in 0.011859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.32 tests/s, 84.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppiid0q4f\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppiid0q4f.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppiid0q4f.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppiid0q4f.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    755.86 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length!\n  if l.length % 2 == 0\n    l[(l.length / 2) - 1]\n  else\n\
    \    l[(l.length / 2)]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8863ox7i\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `length!'\
    \ for [1, 2, 3, 4, 5]:Array\n  \n    l.length!\n     ^^^^^^^^\n  Did you mean?\
    \  length\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8863ox7i.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8863ox7i.rb:19:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8863ox7i.rb:19:in\
    \ `test_median'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_median\n     18:     candidate = method(:median)\n  => 19:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     20:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     21:     assert_equal(5, candidate.call([5]))\n \
    \    22:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.003714 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.25 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo11g1p3w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo11g1p3w.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003907 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.95 tests/s, 511.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa9nic63\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa9nic63.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.66 tests/s, 635.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length\n  l.length / 2\n  l[l.length / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnrp4iwiy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnrp4iwiy.rb:17:in\
    \ `test_median'\n     14:   def test_median\n     15:     candidate = method(:median)\n\
    \     16:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 17:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n\
    \     19:     assert_equal(5.5, candidate.call([6, 5]))\n     20:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.28 tests/s, 638.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolx_ade1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolx_ade1.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.28 tests/s, 313.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2-1]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcj5sig83.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n  l/=2 if l.length&1==0 then l.length>>1\
    \ else l.length/2\n                        ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcj5sig83.rb:8:\
    \ else without rescue is useless\n...ngth&1==0 then l.length>>1 else l.length/2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { l.delete_at((len.floor +\
    \ 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35zojcba.rb:37: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35zojcba.rb:46: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkqnzxaa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkqnzxaa.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.021615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.26 tests/s, 46.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length!\n  if l.length % 2 == 0\n    l.length / 2\n  else\n   \
    \ (l.length / 2) + 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg6mdil8\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `length!'\
    \ for [1, 2, 3, 4, 5]:Array\n  \n    l.length!\n     ^^^^^^^^\n  Did you mean?\
    \  length\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg6mdil8.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg6mdil8.rb:19:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg6mdil8.rb:19:in\
    \ `test_median'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_median\n     18:     candidate = method(:median)\n  => 19:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     20:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     21:     assert_equal(5, candidate.call([5]))\n \
    \    22:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.004544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.07 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length < 2 ? l[0] : (l.length / 2).floor\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfjrzm1e6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfjrzm1e6.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.005497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.92 tests/s, 181.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2-1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpez54mmor.rb:8: else\
    \ without rescue is useless\n  l/=2 if l.length&1==0 else l.length\n         \
    \               ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1d8e1_8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1d8e1_8.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.60 tests/s, 288.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7y5qco7q\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7y5qco7q.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7y5qco7q.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7y5qco7q.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    762.20 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[(l.length-1)/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxomdi4p\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [-10, 4, 6, 10, 20, 1000]:Array\n  \n    l/=2 if l.length%2==0\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxomdi4p.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxomdi4p.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxomdi4p.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n===============================================================================\n\
    \nFinished in 0.005842 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.17 tests/s, 171.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpud085jlx\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpud085jlx.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpud085jlx.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpud085jlx.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    768.05 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsetzr9xy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsetzr9xy.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.015367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.07 tests/s, 130.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length % 2 == 0 else l.length / 2\n  l.to_f / l\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1zgiazf.rb:8: else\
    \ without rescue is useless\n...ength if l.length % 2 == 0 else l.length / 2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.sort.reverse\n  l.length / 2\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_plodkd4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_plodkd4.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.037006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.02 tests/s, 27.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size /\
    \ 2)-1] : l[l.size / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp51554e0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp51554e0.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.37 tests/s, 612.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptlqihna4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptlqihna4.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.006695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.37 tests/s, 149.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length < 3 else l[1..-1]\n  l.length / 2\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpju_nhsuz.rb:8: else\
    \ without rescue is useless\n...= l.length if l.length < 3 else l[1..-1]\n...\
    \                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l[-1]-l[0])/2\n  len.times { l.delete_at(l[0]) }\n  l[0]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ccr5i3t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ccr5i3t.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <1>\n===============================================================================\n\
    \nFinished in 0.003247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.98 tests/s, 307.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 # even?\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyon10ap\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyon10ap.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.00917 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.05 tests/s, 109.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.sort\n  if l.length < 2\n    return l[0]\n  mid = l.length\
    \ / 2\n  if l.length % 2 == 0\n    return l[mid]\n  else\n    return (l[mid-1]\
    \ + l[mid]) / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cctvd23.rb:18: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cctvd23.rb:27: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[(l.length-1)/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8m4k_u_q\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [-10, 4, 6, 10, 20, 1000]:Array\n  \n    l/=2 if l.length%2==0\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8m4k_u_q.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8m4k_u_q.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8m4k_u_q.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n===============================================================================\n\
    \nFinished in 0.001507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    663.57 tests/s, 663.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyjk90m3\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyjk90m3.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyjk90m3.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyjk90m3.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.011137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.79 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[l.length/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4kgx58nn\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [-10, 4, 6, 10, 20, 1000]:Array\n  \n    l/=2 if l.length%2==0\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4kgx58nn.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4kgx58nn.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4kgx58nn.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n===============================================================================\n\
    \nFinished in 0.023249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.01 tests/s, 43.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[(l.size / 2).floor]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvjrangqq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvjrangqq.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.025445 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.30 tests/s, 78.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length\n  l/2\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7yfwe9r\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/2\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7yfwe9r.rb:9:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7yfwe9r.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7yfwe9r.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    643.09 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[(l.size / 2).floor]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6rj7h8n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6rj7h8n.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.105776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    9.45 tests/s, 18.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.length\n  l.length == 1 ? l[0] : (l[l.length / 2]\
    \ + l[l.length / 2 - 1]) / 2\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomrbcwb2\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomrbcwb2.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomrbcwb2.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomrbcwb2.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    698.32 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { |i| l[i] > l[len] ? len\
    \ -= 1 : len }\n  len + 0.5\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxb1xkzb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxb1xkzb.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.003251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.60 tests/s, 307.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8uv5vfh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8uv5vfh.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.126516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    7.90 tests/s, 7.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2].to_f\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn7ed_qfx.rb:8: else\
    \ without rescue is useless\n  l/=2 if l.length&1==0 else l.length\n         \
    \               ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_ehsr2y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_ehsr2y.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.050055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    19.98 tests/s, 19.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuc4qbm2i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuc4qbm2i.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.008128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.03 tests/s, 123.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6a5ant8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6a5ant8.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.02521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.67 tests/s, 79.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[(l.size / 2).floor] + l[l.size\
    \ / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf6dvj4el\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf6dvj4el.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <6>\n===============================================================================\n\
    \nFinished in 0.004018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.88 tests/s, 248.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtph8dy3\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtph8dy3.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtph8dy3.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtph8dy3.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.00169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    591.72 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx1gubx4b\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx1gubx4b.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx1gubx4b.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx1gubx4b.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    730.99 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0hu_rfib\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0hu_rfib.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.007775 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.62 tests/s, 257.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).floor\n  len.times { l.delete_at((len + 1).floor)\
    \ }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  l.length == 0\
    \ ? l.first : l.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefqyj1s3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefqyj1s3.rb:19:in\
    \ `test_median'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_median\n     18:     candidate = method(:median)\n  => 19:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     20:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     21:     assert_equal(5, candidate.call([5]))\n \
    \    22:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <1>\n===============================================================================\n\
    \nFinished in 0.003337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.67 tests/s, 299.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpls8q5pdn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpls8q5pdn.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.02 tests/s, 256.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l[0].length + l[1].length + l[2].length + l[3].length + l[4].length).to_f\n\
    \  len.times { |i| l[i] = l[i].to_f }\n  len.to_f / 4\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61rcp8th\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `length'\
    \ for 1:Integer\n  \n    len = (l[0].length + l[1].length + l[2].length + l[3].length\
    \ + l[4].length).to_f\n               ^^^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61rcp8th.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61rcp8th.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61rcp8th.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.002633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    379.79 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length == 0 ? nil : l[(l.length-1)/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7k2iv9z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7k2iv9z.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<6>\n===============================================================================\n\
    \nFinished in 0.003233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.31 tests/s, 618.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ztbdjnm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ztbdjnm.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.022681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.09 tests/s, 88.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4tdar9t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4tdar9t.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.03 tests/s, 588.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[l.length/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsei50ozf\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [-10, 4, 6, 10, 20, 1000]:Array\n  \n    l/=2 if l.length%2==0\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsei50ozf.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsei50ozf.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsei50ozf.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n===============================================================================\n\
    \nFinished in 0.001344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    744.05 tests/s, 744.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpunkv9s68\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpunkv9s68.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.82 tests/s, 329.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { |i| l[i] > l[len ? len -\
    \ i : -1] and return l[i] }\n  l[len ? len - 1 : 0]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd9i3tpmx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd9i3tpmx.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.16 tests/s, 315.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk4qd9r9o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk4qd9r9o.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.005625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.78 tests/s, 177.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrzlylex\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrzlylex.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.05 tests/s, 262.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2phgpg5.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n  l/=2 if l.length&1==0 then l.length>>1\
    \ else l.length/2\n                        ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2phgpg5.rb:8:\
    \ else without rescue is useless\n...ngth&1==0 then l.length>>1 else l.length/2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcztd5uz8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcztd5uz8.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.90 tests/s, 653.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdaaynn5k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdaaynn5k.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.00319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.48 tests/s, 313.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).floor\n  len.times do |i|\n    return l[i] if\
    \ len > 1\n    l[i] = l[i] + l[i - 1] if len == 1\n  end\n  l[len / 2]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hfypj9l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hfypj9l.rb:19:in\
    \ `test_median'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_median\n     18:     candidate = method(:median)\n  => 19:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     20:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     21:     assert_equal(5, candidate.call([5]))\n \
    \    22:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <1>\n===============================================================================\n\
    \nFinished in 0.003117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.82 tests/s, 320.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk8_nf2sl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk8_nf2sl.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.004933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.72 tests/s, 202.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length % 2 == 0 then l.length / 2 else l.length\
    \ / 2 - 1\n  l.ceil\n  l[l/2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1r362bou.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n...ength if l.length % 2 == 0 then\
    \ l.length / 2 else l.length /...\n...                           ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1r362bou.rb:8:\
    \ else without rescue is useless\n...% 2 == 0 then l.length / 2 else l.length\
    \ / 2 - 1\n...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmu7fu88\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmu7fu88.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.31 tests/s, 323.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length < 3 else l[1..-1]\n  l.length < 2 ? l.pop\
    \ : l.length == 2 ? l.pop : (l.length * 0.5 + l[l.length / 2]).to_f\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3uz12y0.rb:8: else\
    \ without rescue is useless\n...= l.length if l.length < 3 else l[1..-1]\n...\
    \                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uu97tvw\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uu97tvw.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uu97tvw.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uu97tvw.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    760.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht_iylg1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht_iylg1.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.00889 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.49 tests/s, 112.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[(l.length-1)/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_bp9ynk\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [-10, 4, 6, 10, 20, 1000]:Array\n  \n    l/=2 if l.length%2==0\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_bp9ynk.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_bp9ynk.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_bp9ynk.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n===============================================================================\n\
    \nFinished in 0.013088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.41 tests/s, 76.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length!\n  if l.length % 2 == 0\n    l.length / 2\n  else\n   \
    \ (l.length / 2) + 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7bki_ffz\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `length!'\
    \ for [1, 2, 3, 4, 5]:Array\n  \n    l.length!\n     ^^^^^^^^\n  Did you mean?\
    \  length\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7bki_ffz.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7bki_ffz.rb:19:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7bki_ffz.rb:19:in\
    \ `test_median'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_median\n     18:     candidate = method(:median)\n  => 19:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     20:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     21:     assert_equal(5, candidate.call([5]))\n \
    \    22:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.003777 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8g3djf4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8g3djf4.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.006933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.24 tests/s, 288.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_wrul19\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_wrul19.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_wrul19.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_wrul19.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    739.64 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yovkj12\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yovkj12.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yovkj12.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yovkj12.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    657.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.sort\n  l.length / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgy8g750l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgy8g750l.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.56 tests/s, 316.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu74wnpu_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu74wnpu_.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.77 tests/s, 313.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply55dqs6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply55dqs6.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.007004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.78 tests/s, 142.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).floor\n  len.times { |i| l[i] > l[len ? len\
    \ - i : -1] and return l[i] }\n  l[len ? len - 1 : -1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlg8imbp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlg8imbp.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.035389 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    28.26 tests/s, 28.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[(l.size / 2).floor]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpts71ro4q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpts71ro4q.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003928 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.58 tests/s, 509.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9h6h2_a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9h6h2_a.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.008709 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.82 tests/s, 229.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.length\n  l.length == 1 ? l[0] : l[l.length / 2]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfsio347k\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfsio347k.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfsio347k.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfsio347k.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    726.22 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd59jtufm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd59jtufm.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.46 tests/s, 310.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphmhe4vp3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphmhe4vp3.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.006192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.50 tests/s, 323.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19hn09ey\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19hn09ey.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19hn09ey.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19hn09ey.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    730.99 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length < 3 else 3\n  l.length\n  l = (l[1]+l[2]+l[3]).to_f\
    \ / 2\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1y9sg35.rb:8: else\
    \ without rescue is useless\n...= l.length if l.length < 3 else 3\n...       \
    \                    ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprikmkpu0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprikmkpu0.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.047923 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    20.87 tests/s, 20.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3ldyvk4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3ldyvk4.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003811 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.40 tests/s, 262.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length % 2 == 0 then l.length / 2 else l.length\
    \ / 2 - 1\n  l[(l.length / 2) - 1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9__42tr.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n...ength if l.length % 2 == 0 then\
    \ l.length / 2 else l.length /...\n...                           ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9__42tr.rb:8:\
    \ else without rescue is useless\n...% 2 == 0 then l.length / 2 else l.length\
    \ / 2 - 1\n...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[l.length/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_z6s2fi\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [-10, 4, 6, 10, 20, 1000]:Array\n  \n    l/=2 if l.length%2==0\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_z6s2fi.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_z6s2fi.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_z6s2fi.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n===============================================================================\n\
    \nFinished in 0.005604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.44 tests/s, 178.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpramtf0jw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpramtf0jw.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.029658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.72 tests/s, 33.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.odd?\n  l[-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2gb7tk2\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `odd?' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.odd?\n             ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2gb7tk2.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2gb7tk2.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2gb7tk2.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.028401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l[-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y4nhi7j\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y4nhi7j.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y4nhi7j.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y4nhi7j.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    644.33 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp04yi8ny\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp04yi8ny.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.16 tests/s, 329.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmuqx6by\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmuqx6by.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmuqx6by.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmuqx6by.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.011762 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.02 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp59hz_1f0.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n  l/=2 if l.length&1==0 then l.length>>1\
    \ else l.length/2\n                        ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp59hz_1f0.rb:8:\
    \ else without rescue is useless\n...ngth&1==0 then l.length>>1 else l.length/2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { |i| l[i] > l[len] ? l[i]\
    \ = l[len] : l[i] }\n  l[len]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6rlt1r24\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6rlt1r24.rb:17:in\
    \ `test_median'\n     14:   def test_median\n     15:     candidate = method(:median)\n\
    \     16:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 17:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n\
    \     19:     assert_equal(5.5, candidate.call([6, 5]))\n     20:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.028403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.21 tests/s, 70.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times do |i|\n    break if l[i]\
    \ == l[len]\n    l[i] > l[len] ? len += 1 : len -= 1\n  end\n  l[len]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1a972hcl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1a972hcl.rb:19:in\
    \ `test_median'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_median\n     18:     candidate = method(:median)\n  => 19:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     20:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     21:     assert_equal(5, candidate.call([5]))\n \
    \    22:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.017088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.52 tests/s, 58.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdkk4jco7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdkk4jco7.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.26 tests/s, 630.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length % 2 == 0 then l.length / 2 else l.length\
    \ / 2 - 1\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rs3iope.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n...ength if l.length % 2 == 0 then\
    \ l.length / 2 else l.length /...\n...                           ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rs3iope.rb:8:\
    \ else without rescue is useless\n...% 2 == 0 then l.length / 2 else l.length\
    \ / 2 - 1\n...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gpyyvoo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gpyyvoo.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.008888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.51 tests/s, 112.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvloow0rv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvloow0rv.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.005106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.85 tests/s, 391.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l[l.length / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n \
    \   assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg333xqog\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg333xqog.rb:15:in\
    \ `test_median'\n     12:   def test_median\n     13:     candidate = method(:median)\n\
    \     14:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 15:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n\
    \     17:     assert_equal(5.5, candidate.call([6, 5]))\n     18:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.087401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    11.44 tests/s, 22.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6isqy1b.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n  l/=2 if l.length&1==0 then l.length>>1\
    \ else l.length/2\n                        ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6isqy1b.rb:8:\
    \ else without rescue is useless\n...ngth&1==0 then l.length>>1 else l.length/2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).ceil]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc86hymcm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc86hymcm.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.00704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.05 tests/s, 284.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { l.delete_at((len + 1).floor)\
    \ }\n  len.times { l.delete_at((len - 1).floor) }\n  l.length == 0 ? nil : l.first\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp44l_k0ca\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp44l_k0ca.rb:17:in\
    \ `test_median'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:\
    \   def test_median\n     16:     candidate = method(:median)\n  => 17:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     18:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     19:     assert_equal(5, candidate.call([5]))\n \
    \    20:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <1>\n===============================================================================\n\
    \nFinished in 0.005515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.32 tests/s, 181.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length < 3 else l[1..-1]\n  l.length / 2\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv0b7xppi.rb:8: else\
    \ without rescue is useless\n...= l.length if l.length < 3 else l[1..-1]\n...\
    \                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3s9kj1u4\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3s9kj1u4.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3s9kj1u4.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3s9kj1u4.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    565.93 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5wdtzy1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5wdtzy1.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.007496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.40 tests/s, 133.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size/2).floor]\
    \ : l[l.size/2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvfu6vanh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvfu6vanh.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.00396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.53 tests/s, 505.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { |i| l[i] > l[len] ? len\
    \ -= 1 : len }\n  len + 0.5\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl2fdbdzm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl2fdbdzm.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.003078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.89 tests/s, 324.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0tk1z36l.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n  l/=2 if l.length&1==0 then l.length>>1\
    \ else l.length/2\n                        ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0tk1z36l.rb:8:\
    \ else without rescue is useless\n...ngth&1==0 then l.length>>1 else l.length/2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp28s8ecv2.rb:66: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp28s8ecv2.rb:75: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).floor\n  len.times { |i| l[i] > l[len] ? len\
    \ += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n\
    \  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i]\
    \ > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1\
    \ : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times\
    \ { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len]\
    \ ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -=\
    \ 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times {\
    \ |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ?\
    \ len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1\
    \ }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i|\
    \ l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len\
    \ += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n\
    \  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i]\
    \ > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1\
    \ : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += \nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3dheny3.rb:30: syntax\
    \ error, unexpected string literal, expecting `do' or '{' or '('\nrequire 'test/unit'\n\
    \        ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3dheny3.rb:31:\
    \ class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n\
    ^~~~~~~~~~~~~~~~~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3dheny3.rb:40:\
    \ syntax error, unexpected end-of-input, expecting '}'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2-1]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1s5m7ol8.rb:8: syntax\
    \ error, unexpected `then', expecting `end'\n  l/=2 if l.length&1==0 then l.length>>1\
    \ else l.length/2\n                        ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1s5m7ol8.rb:8:\
    \ else without rescue is useless\n...ngth&1==0 then l.length>>1 else l.length/2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyp1e4ttj\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyp1e4ttj.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyp1e4ttj.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyp1e4ttj.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.00141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    709.22 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l[-1]-l[0])/2\n  len.times { l.delete_at(l[0]) }\n  l[0]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppjxov6ng\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppjxov6ng.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <1>\n===============================================================================\n\
    \nFinished in 0.003471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.10 tests/s, 288.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp058aldzp\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp058aldzp.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp058aldzp.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp058aldzp.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.040133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.92 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).floor\n  len.times { l.delete_at((len + 1).floor)\
    \ }\n  len.times { l.delete_at((len - 1).floor) }\n  l.length\n  l.length == 0\
    \ ? nil : l.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj1vh88r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj1vh88r.rb:18:in\
    \ `test_median'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_median\n     17:     candidate = method(:median)\n  => 18:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     19:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     20:     assert_equal(5, candidate.call([5]))\n \
    \    21:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <1>\n===============================================================================\n\
    \nFinished in 0.005793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.62 tests/s, 172.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcg34cta\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l/=2 if l.length&1\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcg34cta.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcg34cta.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcg34cta.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.001729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    578.37 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p56l04z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p56l04z.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.016384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.04 tests/s, 122.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpji5ne4ql\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpji5ne4ql.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.007052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.80 tests/s, 283.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[l.size/2-1]\
    \ : (l[l.size/2-1] + l[l.size/2])/2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnfm20i0g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnfm20i0g.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.007166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.55 tests/s, 139.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length < 2 ? l[0] : (l[l.length / 2] + l[(l.length / 2) - 1]) /\
    \ 2.0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0tg73jp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0tg73jp.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.00368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.74 tests/s, 271.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).ceil]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4v3mhrs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4v3mhrs.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.003774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.97 tests/s, 529.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size /\
    \ 2)-1] : l[l.size / 2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4el3axn5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4el3axn5.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.009383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.58 tests/s, 213.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[l.length/2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32j59aqp\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [-10, 4, 6, 10, 20, 1000]:Array\n  \n    l/=2 if l.length%2==0\n     ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32j59aqp.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32j59aqp.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32j59aqp.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n===============================================================================\n\
    \nFinished in 0.001919 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    521.10 tests/s, 521.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l[-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcime5mjr\n\
    Started\nE\n===============================================================================\n\
    Error: test_median(TestHumanEval):\n  NoMethodError: undefined method `/' for\
    \ [1, 2, 3, 4, 5]:Array\n  \n    l = l / 2\n          ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcime5mjr.rb:8:in\
    \ `median'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcime5mjr.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcime5mjr.rb:16:in\
    \ `test_median'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_median\n     15:     candidate = method(:median)\n  => 16:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n \
    \    19:     assert_equal(5.5, candidate.call([6, 5]))\n===============================================================================\n\
    \nFinished in 0.003469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.27 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6wvmymut.rb:8: else\
    \ without rescue is useless\n  l/=2 if l.length&1==0 else l.length\n         \
    \               ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtn6r_s8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtn6r_s8.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.00448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.21 tests/s, 223.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l/=2 if l.length&1==0 \n  l[l.length/2-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rvfmvdn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rvfmvdn.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.89 tests/s, 324.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length % 2 == 0 else l.length / 2\n  l.ceil\n \
    \ l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphydw0t57.rb:8: else\
    \ without rescue is useless\n...ength if l.length % 2 == 0 else l.length / 2\n\
    ...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfolpkfj5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfolpkfj5.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.005124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.16 tests/s, 390.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpee4183ld\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpee4183ld.rb:14:in\
    \ `test_median'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:\
    \   def test_median\n     13:     candidate = method(:median)\n  => 14:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n \
    \    17:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2.5>\n===============================================================================\n\
    \nFinished in 0.003199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.60 tests/s, 312.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size /\
    \ 2)-1] : (l[l.size / 2], l[(l.size / 2)])[1]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81jv4z6h.rb:9: syntax\
    \ error, unexpected ')', expecting '='\n...l[l.size / 2], l[(l.size / 2)])[1]\n\
    ...                              ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81jv4z6h.rb:12:\
    \ class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n\
    ^~~~~~~~~~~~~~~~~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81jv4z6h.rb:21:\
    \ syntax error, unexpected end-of-input, expecting ')'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l.length if l.length < 3 else l[0..(l.length / 2)]\n  l.length\
    \ / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2snjd6i.rb:8: else\
    \ without rescue is useless\n...= l.length if l.length < 3 else l[0..(l.length\
    \ / 2)]\n...                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size/2).floor]\
    \ : ((l[l.size/2-1] + l[l.size/2]) / 2).round\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4sf1gpo7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4sf1gpo7.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.16 tests/s, 315.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4egdss7v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4egdss7v.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.00315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.46 tests/s, 317.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26n6t5gx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26n6t5gx.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.003412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.08 tests/s, 293.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times do |i|\n    if l[i] < l[len]\n\
    \      return l[i]\n    end\n  end\n  l[len]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpriar7zxc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpriar7zxc.rb:20:in\
    \ `test_median'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:\
    \   def test_median\n     19:     candidate = method(:median)\n  => 20:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     21:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     22:     assert_equal(5, candidate.call([5]))\n \
    \    23:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <1>\n===============================================================================\n\
    \nFinished in 0.003418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.57 tests/s, 292.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { l.delete_at((len.floor -\
    \ 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ - 1).floor) }\n  len.times { l.delete_at((len.floor - 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor - 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor - 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor - 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ - 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ - 1).floor) }\n  len.times { l.delete_at((len.floor - 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor - 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor - 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor - 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ - 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76o7pebg.rb:37: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76o7pebg.rb:46: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3m12kwt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3m12kwt.rb:15:in\
    \ `test_median'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_median\n     14:     candidate = method(:median)\n  => 15:     assert_equal(3,\
    \ candidate.call([3, 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n \
    \    18:     assert_equal(5.5, candidate.call([6, 5]))\n<3> expected but was\n\
    <2>\n===============================================================================\n\
    \nFinished in 0.002921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    342.35 tests/s, 342.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4,\
    \ 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n \
    \ l.sort!\n  l.length\n  l[(l.length / 2).floor]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0i_q0e_5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0i_q0e_5.rb:16:in\
    \ `test_median'\n     13:   def test_median\n     14:     candidate = method(:median)\n\
    \     15:     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.00308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.68 tests/s, 649.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
