name: HumanEval_6_parse_nested_parens
language: ruby
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
  \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
  (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
  ))\n  end\nend\n"
completions: ["  paren_string.scan(/[^()]+/).map { |x| x.length }.max\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map { |x| x.scan(/[^()]+/).max }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |group|\n    group.scan(/\\s*\\(([^()]*)\\)\\s*/) do\
    \ |nested_group|\n      nested_group.scan(/\\s*\\(([^()]*)\\)\\s*/) do |nested_nested_group|\n\
    \        nested_nested_group.scan(/\\s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_group|\n\
    \          nested_nested_nested_group.scan(/\\s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_group|\n\
    \            nested_nested_nested_nested_group.scan(/\\s*\\(([^()]*)\\)\\s*/)\
    \ do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^()]*)\\\
    )\\s*/) do |nested_nested_nested_nested_nested_nested_nested_group|\n        \
    \          nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^()]*)\\\
    )\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n \
    \                   nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                  nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n  \
    \  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n      paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n        paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n          paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n            paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n              paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                    paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                      paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                        paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                            paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                              paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                               \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n        \
    \                          paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do\
    \ |paren_string|\n                                    paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n                                   \
    \   paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n      \
    \                                  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map\
    \ do |paren_string|\n                                          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                               \
    \             paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n\
    \                                              paren_string.scan(", "  paren_string\
    \ = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_stack_size\
    \ = -1\n  paren_stack_level = []\n  paren_stack_level_size = []\n  paren_stack_level_max\
    \ = []\n  paren_stack_level_max_size = []\n  paren_stack_level_max_index = []\n\
    \  paren_stack_level_max_size_index = []\n  paren_stack_level_max_index2 = []\n\
    \  paren_stack_level_max_size_index2 = []\n  paren_stack_level_max_index3 = []\n\
    \  paren_stack_level_max_size_index3 = []\n  paren_stack_level_max_index4 = []\n\
    \  paren_stack_level_max_size_index4 = []\n  paren_stack_level_max_index5 = []\n\
    \  paren_stack_level_max_size_index5 = []\n  paren_stack_level_max_index6 = []\n\
    \  paren_stack_level_max_size_index6 = []\n  paren_stack_level_max_index7 = []\n\
    \  paren_stack_level_max_size_index7 = []\n  paren_stack_level_max_index8 = []\n\
    \  paren_stack_level_max_size_index8 = []\n  paren_stack_level_max_index9 = []\n\
    \  paren_stack_level_max_size_index9 = []\n  paren_stack_level_max_index10 = []\n\
    \  paren_stack_level_max_size_index10 = []\n  paren_stack_level_max_index11 =\
    \ []\n  paren_stack_level_max_size_index11 = []\n  paren_stack_level_max_index12\
    \ = []\n  paren_stack_level_max_size_index12 = []\n  paren_stack_level_max_index13\
    \ = []\n  paren_stack_level_max_size_index13 = []\n  paren_stack_level_max_index14\
    \ = []\n  paren_stack_level_max_size_index14 = []\n  paren_stack_level_max_index15\
    \ = []\n  paren_stack_level_max_size_index15 = []\n  paren_stack_level_max_index16\
    \ = []\n  paren_stack_level_max_size_index16 = []\n  paren_stack_level_max_index17\
    \ = []\n  paren_stack_level_max_size_index17 = []\n  paren_stack_level_max_index18\
    \ = []\n  paren_stack_level_max_size_index18 = []\n  paren_stack_level_max_index19\
    \ = []\n  paren_stack_level_max_size_index19 = []\n  paren_stack_level_max_index20\
    \ = []\n  paren_stack_level_max_size_index20 = []\n  paren_stack_level_max_index21\
    \ = []\n  paren_stack_level_max_size_index21 = []\n  paren_stack_level_max_index22\
    \ = []\n  ", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1]\
    \ = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] =\
    \ 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n \
    \ paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size\
    \ = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size =\
    \ 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n\
    \  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n \
    \ paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1]\
    \ = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] =\
    \ 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n \
    \ paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size\
    \ = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size =\
    \ 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n\
    \  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n \
    \ paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1]\
    \ = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] =\
    \ 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n \
    \ paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_levels\
    \ = []\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.length }.max\nend", "  paren_string.scan(/[^()]+/).map do |paren_string|\n\
    \    paren_string.scan(/\\(/).map do |paren_string|\n      paren_string.scan(/\\\
    )/).map do |paren_string|\n        paren_string.count\n      end\n    end.max\n\
    \  end\nend", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\(\\)]*)\\)\\s*\\)\\s*\\)/) do |group|\n    group.scan(/\\s*\\\
    (([^\\(\\)]*)\\)\\s*\\)/) do |nested_group|\n      nested_group.scan(/\\s*\\(([^\\\
    (\\)]*)\\)\\s*\\)/) do |nested_nested_group|\n        nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_group|\n          nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_group|\n       \
    \     nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]*)\\)\\s*\\)/)\
    \ do |nested_nested_nested_nested_group|\n              nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\\
    )]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n      \
    \            nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\\
    (\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n   \
    \                 nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\\
    (([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group",
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]/).map { |x| x.size }.max\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/\\s*\\(\\s*\\((?<paren_level>\\d+)\\\
    )\\s*\\)\\s*|\\s*\\((?<paren_level>\\d+)\\)\\s*\\)/) do |match|\n    levels =\
    \ match.captures.fetch('paren_level', nil)\n    levels ||= 0\n    levels += 1\
    \ if levels > 0\n    levels\n  end\nend", "  paren_string.scan(/[()]/).map { |x|\
    \ x.size }.max\nend", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }.inject(0)\
    \ do |max_level, level|\n    if level > max_level\n      max_level = level\n \
    \   end\n    max_level\n  end\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.length }.max\nend", "  paren_string = paren_string.strip\n  paren_stack =\
    \ []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nest", "  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size == 1\n\
    \      group.captures.first\n    else\n      group.captures.max\n    end\n  end\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_char|\n    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n \
    \     paren_char.scan(/[\\(\\)]+/) do |paren_char|\n        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n            \
    \        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                        paren_char.scan(/[\\(\\)]+/)\
    \ do |paren_char|\n                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n  \
    \                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n  \
    \                              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]+/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                   \
    \ paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                             \
    \                         paren_char.scan(/[\\(\\)]+/) do |paren_char|\n", " \
    \ paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string = paren_string.strip\n  paren_stack = []\n\
    \  paren_level = 0\n  paren_levels = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string = paren_string.strip\n  paren_stack = []\n\
    \  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_", "  paren_string = paren_string.strip\n  paren_string.gsub!(/\\\
    s+/, ' ').gsub!(/\\(/, '[').gsub!(/\\)/, ']')\n  paren_string.gsub!(/\\[/, '(').gsub!(/\\\
    ]/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '('", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\\
    s*/).map do |group|\n    group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_group|\n\
    \      inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_inner_group|\n\
    \        inner_inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_group|\n\
    \          inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_group|\n\
    \            inner_inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |inner_inner_inner_inner_inner_group|\n              inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_group|\n  \
    \              inner_inner_inner_inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_group|\n           \
    \       inner_inner_inner_inner_inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_group|\n     \
    \               inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                      inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                        inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                          inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                            inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                              inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                                inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
