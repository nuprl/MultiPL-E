name: HumanEval_117_select_words
language: ruby
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2)\
  \ ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
  \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
  Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
  Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
  \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n\
  \    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
  \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
  a b c d e f\", 1))\n  end\nend\n"
completions: ["  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").select { |word|\
    \ word.count(n) == n }\nend", "  \n  # TODO: Write your code here\n  \nend", " \
    \ result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.match(/[aeiou]/)\n        if result.length >= n\n          result\
    \ << word\n        end\n      end\n    end\n  end\n  result\nend", "  \n  # TODO:\
    \ Write your code here\n  \nend", "  \n  # TODO: Write your code here\n  \nend",
  "  \nend", "  s.split(\" \").select { |word| word.chars.count == n }.map(&:strip)\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThanks for your answer. Can you please\
    \ explain why you used `&:strip` at the end?\n<|/ c |>\n<| c |>\n`&:strip` means\
    \ \"call the method `strip` on the object `word`\", which is what `word.strip`\
    \ would do. `word.strip` would remove leading and trailing whitespace, whereas\
    \ `word.chars.count == n` would only remove consonants.\n<|/ c |>\n<| c |>\nThanks\
    \ again. Can you please explain why you used `&:strip` at the end?\n<|/ c |>\n\
    <| c |>\n`&:strip` means \"call the method `strip` on the object `word`\", which\
    \ is what `word.strip` would do. `word.strip` would remove leading and trailing\
    \ whitespace, whereas `word.chars.count == n` would only remove consonants.\n\
    <|/ c |>\n<| c |>\nThanks again. Can you please explain why you used `&:strip`\
    \ at the end?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  s.split(\" \").map do |word|\n\
    \    word.split(\"\").select do |char|\n      char.match(/[aeiou]/i).size == n\n\
    \    end\n  end.flatten.compact\nend", "  result = []\n  i = 0\n  while i < s.length\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1", "  s.split(\" \").each do |word|\n    puts word if word.count(n).zero?\n\
    \  end\nend", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\
    \").each do |letter|\n      if letter.match(/[aeiou]/)\n        if result.empty?\
    \ || result.length == n\n          result << word\n        end\n      end\n  \
    \  end\n  end\n  result\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  result = []\n  i = 0\n  while i < s.length\n    if s.slice(i,i+n).scan(/[aeiou]/).length\
    \ == n\n      result << s.slice(i,i+n)\n      i += n\n    end\n    i += 1\n  end\n\
    \  result\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  \n  # Your code\
    \ here\n  \nend", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\
    \").each do |letter|\n      if letter.to_i == n\n        result << word\n    \
    \  end\n    end\n  end\n  result\nend", "  result = []\n  i = 0\n  while i < s.length\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length and s[i] == \" \"\
    \n        i += 1\n    end\n    if s[i] == \" \"\n      i += 1\n      while i <\
    \ s.length and s[i] == \" \"\n        i += 1\n    end\n    if s[i] == \" \"\n\
    \      i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n  \
    \  end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length and s[i]\
    \ == \" \"\n        i += 1\n    end\n    if s[i] == \" \"\n      i += 1\n    \
    \  while i < s.length and s[i] == \" \"\n        i += 1\n    end\n    if s[i]\
    \ == \" \"\n      i += 1\n      while i < s.length and s[i] == \" \"\n       \
    \ i += 1\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\
    \ and s[i] == \" \"\n        i += 1\n    end\n    if s[i] == \" \"\n      i +=\
    \ 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n    end\n   \
    \ if s[i] == \" \"\n      i += 1\n      while i < s.length and s[i] == \" \"\n\
    \        i += 1\n    end\n    if s[i] == \" \"\n      i += 1\n      while i <\
    \ s.length and s[i] == \" \"\n        i += 1\n    end\n    if s[i] == \" \"\n\
    \      i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n  \
    \  end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length and s[i]\
    \ == \" \"\n        i += 1\n    end\n    if s[i] == \" \"\n      i += 1\n    \
    \  while i < s.length and s[i] == \" \"\n        i += 1\n    end\n    if s[i]\
    \ == \" \"\n      i += 1\n      while i < s.length and s[i] == \" \"\n       \
    \ i += 1\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\
    \ and s[i] == \" \"\n        i += 1\n    end\n    if s[i] == \" \"\n      i +=\
    \ 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n    end\n   \
    \ if s[i] == \" \"\n      i += 1\n      while i < s.length and s[i] == \" \"\n\
    \        i += 1\n    end\n    if s[i] == \" \"\n      i += 1\n      while i <\
    \ s.length and s[i] == \" \"\n        i += 1\n    end\n    if s[i] == \" \"\n\
    \      i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n  \
    \  end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length and s[i]\
    \ == \" \"\n        i += 1\n    end\n    if s[i] == \" \"\n      i += 1\n    \
    \  while i < s.length and s[i] == \" \"\n        i += 1\n    end\n    if s[i]\
    \ == \" \"\n      i += 1\n      while i < s.length and s[i] == \" \"\n       \
    \ i += 1\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\
    \ and s[i] == \" \"", "  result = []\n  s.split(\" \").each do |word|\n    if\
    \ word.chars.uniq.count == n\n      result << word\n    end\n  end\n  return result\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your\
    \ solution and it works perfectly fine. However I still don't understand why my\
    \ code doesn't work. Could you please explain why my code doesn't work?\n<|/ c\
    \ |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation. I understand now why my code doesn't work.\
    \ However I still don't understand why my code doesn't work. Could you please\
    \ explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  result = []\n \
    \ s.split(' ').each do |word|\n    if word.include?('a'..'z') && word.include?('A'..'Z')\
    \ && word.include?('0'..'9')\n      result << word\n    end\n  end\n  result\n\
    end", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each\
    \ do |letter|\n      if letter.match(/[aeiou]/)\n        result << word\n    \
    \    break\n      end\n    end\n  end\n  result\nend", "  \n  # TODO: Write your\
    \ code here\n  return []\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").select\
    \ { |word| word.count(n) == n }\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ If this answer solved your problem, please consider marking it as accepted by\
    \ clicking the check mark next to it. This will help future visitors who may have\
    \ a similar problem to yours find this answer more easily.\n<|/ c |>\n<| c |>\n\
    I did but I don't have enough reputation to do so. Thanks again though!\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "  result = []\n  s.split(\" \").each do |word|\n\
    \    word.split(\"\").each do |letter|\n      if letter.match(/[aeiou]/)\n   \
    \     if result.empty?\n          result << word\n        elsif result.size ==\
    \ n\n          result << word\n        end\n      end\n    end\n  end\n  result\n\
    end", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  \n  # TODO: Write your code\
    \ here\n  \nend", "  \nend", "  result = []\n  s.split(\" \").each do |word|\n\
    \    word.split(\"\").each do |letter|\n      if letter.match(/[aeiou]/)\n   \
    \     if result.length == n\n          result << word\n        end\n      end\n\
    \    end\n  end\n  result\nend", "  s.split(\" \").each do |word|\n    puts word\
    \ if word.count(n).zero?\n  end\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  s.split(\" \").each do |word|\n    if word.count(n) == n\n\
    \      puts word\n    end\n  end\nend", "  \n  # Your code here\n  \nend\n</cell>\n\
    <cell>", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").select { |w| w.count(n) == n }\nend", "  s.split(\" \").select { |word|\
    \ word.count(n) == n }\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  result = []\n  s.split(\" \").each do |word|\n    if word.chars.uniq.count\
    \ == n\n      result << word\n    end\n  end\n  result\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for your help. I appreciate it. I tried running\
    \ your code but I am getting a syntax error on line 6. I am not sure why. I tried\
    \ running it on repl.it and I am getting a syntax error on line 6. I am not sure\
    \ why. I tried running it on repl.it and I am getting a syntax error on line 6.\
    \ I am not sure why. I tried running it on repl.it and I am getting a syntax error\
    \ on line 6. I am not sure why. I tried running it on repl.it and I am getting\
    \ a syntax error on line 6. I am not sure why. I tried running it on repl.it and\
    \ I am getting a syntax error on line 6. I am not sure why. I tried running it\
    \ on repl.it and I am getting a syntax error on line 6. I am not sure why. I tried\
    \ running it on repl.it and I am getting a syntax error on line 6. I am not sure\
    \ why. I tried running it on repl.it and I am getting a syntax error on line 6.\
    \ I am not sure why. I tried running it on repl.it and I am getting a syntax error\
    \ on line 6. I am not sure why. I tried running it on repl.it and I am getting\
    \ a syntax error on line 6. I am not sure why. I tried running it on repl.it and\
    \ I am getting a syntax error on line 6. I am not sure why. I tried running it\
    \ on repl.it and I am getting a syntax error on line 6. I am not sure why. I tried\
    \ running it on repl.it and I am getting a syntax error on line 6. I am not sure\
    \ why. I tried running it on repl.it and I am getting a syntax error on line 6.\
    \ I am not sure why. I tried running it on repl.it and I am getting a syntax error\
    \ on line 6. I am not sure why. I tried running it on repl.it and I am getting\
    \ a syntax error on line 6. I am not sure why. I tried running it on repl.it and\
    \ I am getting a syntax error on line 6. I am not sure why. I tried running it\
    \ on repl.it and I am getting a syntax error on line 6. I am not sure why. I tried\
    \ running it on repl.it and I am getting a syntax error on line 6. I am not sure\
    \ why. I tried running it on repl.it and I am getting a syntax error on line 6.\
    \ I am not sure why. I tried running it on repl.it and I am getting a ", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").map do |word|\n\
    \    word.split(\"\").select { |char| char.match(/[aeiou]/) }.size == n\n  end\n\
    end", "  result = []\n  i = 0\n  while i < s.length\n    if s[i] == \" \"\n  \
    \    i += 1\n      while i < s.length\n        if s[i] == \" \"\n          i +=\
    \ 1\n        else\n          break\n      end\n    end\n    if s[i] == \" \"\n\
    \      i += 1\n      while i < s.length\n        if s[i] == \" \"\n          i\
    \ += 1\n        else\n          break\n        end\n      end\n    end\n    if\
    \ s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \"\
    \ \"\n          i += 1\n        else\n          break\n        end\n      end\n\
    \    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n     \
    \   if s[i] == \" \"\n          i += 1\n        else\n          break\n      \
    \  end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i\
    \ < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n     \
    \     break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i +=\
    \ 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n  \
    \      else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").map do |word|\n    word.split(\"\").select {|c| c == \"a\" || c == \"e\"\
    \ || c == \"i\" || c == \"o\" || c == \"u\"}.size == n\n  end\nend", "  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      if letter ==\
    \ \"a\" || letter == \"e\" || letter == \"i\" || letter == \"o\" || letter ==\
    \ \"u\"\n        puts word\n      end\n    end\n  end\nend", "  s.split(\" \"\
    ).select { |word| word.chars.uniq.size == n }\nend\n</code>\n<|/ a tags=ruby,string,arrays\
    \ |>\n<| c |>\nI like the `chars` method - I didn't know about that one. Thanks!\n\
    <|/ c |>\n<| c |>\nI like your solution, but I believe it can be simplified a\
    \ little more. `s.split(\" \").select { |word| word.chars.uniq.size == n }`\n\
    <|/ c |>\n<| c |>\nI agree, that is a much better solution. I'll update my answer.\n\
    <|/ c |>\n<| c |>\nThanks for your solution, it's very helpful to me. I'm new\
    \ to Ruby so I didn't know about `chars`.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").select\
    \ { |word| word.chars.uniq.size == n }\nend", "  s.split(\" \").select { |word|\
    \ word.count(n) == n }\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  \n  # TODO: Write your code here\n  \nend", "  result = []\n\
    \  s.split(\" \").each do |word|\n    if word.include?(\"aeiou\")\n      result\
    \ << word\n    end\n  end\n  result\nend", "  result = []\n  s.split(' ').each\
    \ do |word|\n    word.split(//).each do |letter|\n      if letter.match(/[aeiou]/)\n\
    \        if result.empty? || result.last.count(letter) == n\n          result\
    \ << word\n        end\n      end\n    end\n  end\n  result\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks so much for the help! I really appreciate it.\
    \ I tried it out and it works perfectly. I'm going to try to understand it so\
    \ I can apply it to other problems I have.\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer, hope it helps.\n<|/ c |>\n<| c |>\nThanks so much for the help!\
    \ I really appreciate it. I tried it out and it works perfectly. I'm going to\
    \ try to understand it so I can apply it to other problems I have.\n<|/ c |>\n\
    <| c |>\nI added some comments to my answer, hope it helps.\n<|/ c |>\n<| a tags=ruby,string,arrays\
    \ |>\n<code>", "  s.split(\" \").select { |word| word.count(n) == n }\nend", " \
    \ s.split(\" \").each do |word|\n    puts word if word.count(n).zero?\n  end\n\
    end", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  result\
    \ = []\n  s = s.downcase\n  s.gsub!(/[^a-z ]/, \"\")\n  s.split(\" \").each do\
    \ |word|\n    word.split(\"\").each do |letter|\n      if letter.to_i == n\n \
    \       result << word\n      end\n    end\n  end\n  result\nend\n</code>\n<|/\
    \ a tags=ruby |>\n<| c |>\nThank you for taking the time to write this out. I'm\
    \ going to try it out and see how it works. I appreciate it.\n<|/ c |>\n<| c |>\n\
    I ran your test cases and it works great. Thank you for taking the time to write\
    \ this out. I'm going to try it out and see how it works. I appreciate it.\n<|/\
    \ c |>\n<| c |>\nI ran your test cases and it works great. Thank you for taking\
    \ the time to write this out. I'm going to try it out and see how it works. I\
    \ appreciate it.\n<|/ c |>\n<| c |>\nI ran your test cases and it works great.\
    \ Thank you for taking the time to write this out. I'm going to try it out and\
    \ see how it works. I appreciate it.\n<|/ c |>\n<| c |>\nI ran your test cases\
    \ and it works great. Thank you for taking the time to write this out. I'm going\
    \ to try it out and see how it works. I appreciate it.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  s.split(\" \").select { |word| word.count(n) == n }\nend", " \
    \ \nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks so much for taking the time to write this out.\
    \ I'm going to try this out and see how it works.\n<|/ c |>\n<| c |>\nI added\
    \ some comments to help you understand how it works.\n<|/ c |>\n<| c |>\nThanks\
    \ so much for taking the time to write this out. I'm going to try this out and\
    \ see how it works.\n<|/ c |>\n<| c |>\nThanks so much for taking the time to\
    \ write this out. I'm going to try this out and see how it works.\n<|/ c |>\n\
    <| c |>\nThanks so much for taking the time to write this out. I'm going to try\
    \ this out and see how it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| a tags=ruby,string |>\n<code>", "  s.split(\" \").select { |word| word.chars.count\
    \ == n }\nend", "  s.split(\" \").map do |word|\n    word.split(\"\").select do\
    \ |char|\n      char.match(/[aeiou]/)\n    end.size == n\n  end.flatten.compact\n\
    end\n</code>\n<|/ a tags=ruby,string,regex |>\n<| a tags=ruby,string,regex |>\n\
    <code>", "  s.split(\" \").map do |word|\n    word.split(\"\").select {|c| c ==\
    \ \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\"}.size == n\n \
    \ end\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend", " \
    \ result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.to_s.size == n\n        result << word\n      end\n    end\n\
    \  end\n  result\nend", "  s.split(\" \").select { |word| word.count(n) == n }\n\
    end", "  \n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter == \"a\"..\"z\"\n        puts word\n      end\n    end\n  end\n\
    end", "  \n  # TODO: Write your code here\n  \nend", "  s.split(\" \").select\
    \ { |word| word.count(n) == n }\nend", "  s.split(\" \").select { |w| w.count(n)\
    \ == n }\nend", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\
    \").each do |char|\n      if char.match(/[aeiou]/)\n        if result.empty? ||\
    \ result.last != char\n          result << char\n        end\n      end\n    end\n\
    \  end\n  result\nend", "  \n  # TODO: Write your code here\n  \nend", "  result\
    \ = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.match(/[aeiou]/)\n        result << word\n      end\n    end\n\
    \  end\n  result\nend", "  s.split(\" \").select { |word| word.count(n) == n }\n\
    end", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").each do |word|\n\
    \    word.split(\"\").each do |letter|\n      if letter == \"c\" || letter ==\
    \ \"C\" || letter == \"s\" || letter == \"S\" || letter == \"h\" || letter ==\
    \ \"H\" || letter == \"u\" || letter == \"U\"\n        puts word\n      end\n\
    \    end\n  end\nend", "  s.split(\" \").select { |word| word.count(n) == n }\n\
    end", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").map do |word|\n    word.split(\"\").select { |char| char.match(/[aeiou]/)\
    \ }.size == n\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your\
    \ answer, but this doesn't seem to work. Try it out with select_words(\"Mary had\
    \ a little lamb\", 4) and you'll see that it returns [\"little\"]. Try it out\
    \ with select_words(\"Mary had a little lamb\", 3) and you'll see that it returns\
    \ [\"Mary\", \"lamb\"]. Try it out with select_words(\"simple white space\", 2)\
    \ and you'll see that it returns [].\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I'll edit my answer to fix it.\n<|/ c |>\n<| c |>\nI edited my answer to fix\
    \ the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI appreciate your help\
    \ and your time, but this still doesn't work. Try it out with select_words(\"\
    Mary had a little lamb\", 4) and you'll see that it returns [\"little\"]. Try\
    \ it out with select_words(\"Mary had a little lamb\", 3) and you'll see that\
    \ it returns [\"Mary\", \"lamb\"]. Try it out with select_words(\"simple white\
    \ space\", 2) and you'll see that it returns [].\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  s.split(\" \").each do |word|\n    word.split(\"\").each do\
    \ |letter|\n      if letter.match(/[aeiou]/)\n        puts word\n        break\n\
    \      end\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  result\
    \ = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.match(/[aeiou]/)\n        if result.empty? || result.last !=\
    \ letter\n          result << letter\n        end\n      end\n    end\n  end\n\
    \  result\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  s.split(\" \").map do |word|\n    word.split(\"\").select {|c| c == \"a\" ||\
    \ c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\"}.size == n\n  end\nend",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  \n  # TODO: Write\
    \ your code here\n  \nend\n</cell>\n<text>\nTest your Code\nRun the cell below\
    \ to test your code.", "  s.split(\" \").select { |word| word.count(n) == n }\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThanks for the answer. Can you please\
    \ explain why you used `split` instead of `split!`?\n<|/ c |>\n<| c |>\n`split!`\
    \ modifies the array in place. `split` returns a new array and leaves the original\
    \ untouched.\n<|/ c |>\n<| c |>\nThanks. I understand now. :)\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>", "  s.split(\" \").select { |word| word.chars.count ==\
    \ n }.map(&:strip)\nend", "  s.split(\" \").select { |word| word.chars.count ==\
    \ n }.map { |word| word.downcase }\nend", "  result = []\n  s.split(\" \").each\
    \ do |word|\n    word.split(\"\").each do |char|\n      if char.match(/[aeiou]/)\n\
    \        result << word if word.split(\"\").count(char) == n\n      end\n    end\n\
    \  end\n  result\nend", "  s.split(\" \").select { |word| word.count(n) == n }\n\
    end", "  s.split(\" \").select { |w| w.count(n) == n }\nend", "  result = []\n\
    \  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n    \
    \  if letter.match(/[aeiou]/)\n        if result.length >= n\n          result\
    \ << word\n        end\n      end\n    end\n  end\n  result\nend\n</code>\n<|/\
    \ a tags=ruby,regex |>\n<| c |>\nThanks for your answer. I'm still trying to understand\
    \ how this works. I understand that `s.split(\" \").each do |word|` splits the\
    \ string into words. But what does `word.split(\"\").each do |letter|` do? Does\
    \ it split each word into letters?\n<|/ c |>\n<| c |>\nYes, it splits each word\
    \ into letters. I added a little explanation to the answer.\n<|/ c |>\n<| c |>\n\
    Thanks for your explanation. I'm still trying to understand how this works. I\
    \ understand that `s.split(\" \").each do |word|` splits the string into words.\
    \ But what does `word.split(\"\").each do |letter|` do? Does it split each word\
    \ into letters?\n<|/ c |>\n<| c |>\nYes, it splits each word into letters. I added\
    \ a little explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ I'm still trying to understand how this works. I understand that `s.split(\"\
    \ \").each do |word|` splits the string into words. But what does `word.split(\"\
    \").each do |letter|` do? Does it split each word into letters?\n<|/ c |>\n<|\
    \ a |>\n<code>", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  \nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      if letter.downcase\
    \ == letter.upcase\n        result << word if word.split(\"\").count(letter) ==\
    \ n\n      end\n    end\n  end\n  result\nend", "  s.split(\" \").select { |w|\
    \ w.count(n) == n }\nend", "  s.split(\" \").select { |word| word.count(n) ==\
    \ n }\nend", "  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter == \"c\" || letter == \"C\" || letter == \"s\" || letter == \"\
    S\" || letter == \"h\" || letter == \"H\" || letter == \"u\" || letter == \"U\"\
    \n        puts word\n      end\n    end\n  end\nend", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      result << letter\
    \ if word.count(letter) == n\n    end\n  end\n  result\nend", "  result = []\n\
    \  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n    \
    \  result << letter if letter == n\n    end\n  end\n  result\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    if word.count(n) == n\n      result << word\n    end\n\
    \  end\n  return result\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").select\
    \ { |word| word.count(n) == n }\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  s.split(\" \").select do |word|\n    word.split(\"\").count { |c| c == \"a\"\
    \ || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" }.to_i == n\n  end\n\
    end", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each\
    \ do |letter|\n      if letter.match(/[aeiou]/)\n        if result.empty? or result.last\
    \ != letter\n          result << letter\n        end\n      end\n    end\n  end\n\
    \  result\nend", "  s.split(\" \").select { |w| w.split(\"\").size == n }.map(&:strip)\n\
    end", "  s.split(\" \").select { |word| word.count(n) == n }\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ built-in functions. I edited my question to clarify this.\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a solution that does not use any built-in functions.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any built-in\
    \ functions. I edited my question to clarify this.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a solution that does not use any built-in functions.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  result = []\n  s.split(\" \").each\
    \ do |word|\n    word.split(\"\").each do |letter|\n      if letter.to_i == n\n\
    \        result << word\n      end\n    end\n  end\n  result\nend", "  result\
    \ = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter == \"a\" || letter == \"e\" || letter == \"i\" || letter == \"\
    o\" || letter == \"u\"\n        result << word\n      end\n    end\n  end\n  result\n\
    end", "  s.split(\" \").each do |word|\n    puts word if word.count(n) == n\n\
    \  end\nend", "  result = []\n  i = 0\n  while i < s.length\n    if s[i] == \"\
    \ \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n     \
    \     i += 1\n        else\n          break\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend\n</code>\n<|/ a tags=ruby |>\n\
    <| c |>\n`select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]` should\
    \ be `[\"little\"]`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\n\
    `select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]` should be `[\"\
    little\"]`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\n`select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]` should be `[\"little\"]`\n<|/ c\
    \ |>\n<| a tags=ruby |>\n<code>", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  result = []\n  s.split(\" \").each do |word|\n    if word.count(n)\
    \ == n\n      result << word\n    end\n  end\n  result\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `select_words(\"Mary had a little\
    \ lamb\", 4)`.\n<|/ c |>\n<| c |>\nI added a note at the bottom of my answer to\
    \ explain why this doesn't work.\n<|/ c |>\n<| c |>\nThanks for your answer. I've\
    \ tried your solution and it works perfectly fine. I've also added a note at the\
    \ bottom of my question to explain why this doesn't work. Thanks again for your\
    \ help.\n<|/ c |>\n<| c |>\nI added a note at the bottom of my answer to explain\
    \ why this doesn't work.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for the answer. I am not allowed to use any built-in functions.\
    \ I should also not use any loops. I should also not use any regex. I am not allowed\
    \ to use any string methods. I am not allowed to use any regex. I am not allowed\
    \ to use any loops. I should also not use any regex. I am not allowed to use any\
    \ string methods. I am not allowed to use any regex. I am not allowed to use any\
    \ loops. I should also not use any regex. I am not allowed to use any string methods.\
    \ I am not allowed to use any regex. I am not allowed to use any loops. I should\
    \ also not use any regex. I am not allowed to use any string methods. I am not\
    \ allowed to use any regex. I am not allowed to use any loops. I should also not\
    \ use any regex. I am not allowed to use any string methods. I am not allowed\
    \ to use any regex. I am not allowed to use any loops. I should also not use any\
    \ regex. I am not allowed to use any string methods. I am not allowed to use any\
    \ regex. I am not allowed to use any loops. I should also not use any regex. I\
    \ am not allowed to use any string methods. I am not allowed to use any regex.\
    \ I am not allowed to use any loops. I should also not use any regex. I am not\
    \ allowed to use any string methods. I am not allowed to use any regex. I am not\
    \ allowed to use any loops. I should also not use any regex. I am not allowed\
    \ to use any string methods. I am not allowed to use any regex. I am not allowed\
    \ to use any loops. I should also not use any regex. I am not allowed to use any\
    \ string methods. I am not allowed to use any regex. I am not allowed to use any\
    \ loops. I should also not use any regex. I am not allowed to use any string methods.\
    \ I am not allowed to use any regex. I am not allowed to use any loops. I should\
    \ also not use any regex. I am not allowed to use any string methods. I am not\
    \ allowed to use any regex. I am not allowed to use any loops. I should also not\
    \ use any regex. I am not allowed to use any string methods. I am not allowed\
    \ to use any regex. I am not allowed to use any loops. I should also not use any\
    \ regex. I am not allowed to use any string methods. I am not allowed to use any\
    \ regex. I am not allowed to use any loops. I should also not use any regex. I\
    \ am not allowed to use any string methods. I am not allowed to use any regex.\
    \ I am not allowed to use any loops. I should also not use any regex. ", "  result\
    \ = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |char|\n\
    \      if char.match(/[aeiou]/)\n        result << word if word.split(\"\").count(char)\
    \ == n\n      end\n    end\n  end\n  result\nend", "  s.split(\" \").select {\
    \ |word| word.count(n) == n }\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  s.split(\" \").each do |word|\n    puts word if word.count(n).zero?\n  end\n\
    end", "  s.split(\" \").select { |word| word.chars.count == n }.map(&:strip)\n\
    end", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each\
    \ do |char|\n      if char.match(/[aeiou]/)\n        if result.length >= n\n \
    \         break\n        else\n          result << word\n        end\n      end\n\
    \    end\n  end\n  result\nend", "  result = []\n  s.split(\" \").each do |word|\n\
    \    word.split(\"\").each do |letter|\n      if letter == \"a\" or letter ==\
    \ \"e\" or letter == \"i\" or letter == \"o\" or letter == \"u\" or letter ==\
    \ \"y\"\n        result << word\n      end\n    end\n  end\n  result\nend", " \
    \ result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |char|\n\
    \      if char == char.downcase\n        result << word if word.split(\"\").count(char)\
    \ == n\n      end\n    end\n  end\n  result\nend", "  s.split(\" \").each do |word|\n\
    \    puts word if word.count(n).to_i == n\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any built in functions.\
    \ I did try to use .count but I am not sure how to implement it into my code.\n\
    <|/ c |>\n<| c |>\nI added a solution using `.count`\n<|/ c |>\n<| c |>\nThanks\
    \ so much! I appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  result\
    \ = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.to_s.size == n\n        result << word\n      end\n    end\n\
    \  end\n  result\nend", "  s.split(\" \").each do |word|\n    if word.scan(/[aeiou]/).length\
    \ == n\n      puts word\n    end\n  end\nend", "  result = []\n  s.split(\" \"\
    ).each do |word|\n    if word.split(\"\").count(n) == n\n      result << word\n\
    \    end\n  end\n  result\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  s.split(\" \").each do |word|\n    puts word if word.count(n)\
    \ == n\n  end\nend", "  \n  # TODO: Write your code here\n  return []\nend", " \
    \ s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\" \"\
    ).select { |word| word.count(n) == n }\nend", "  s.split(\" \").select { |word|\
    \ word.count(n) == n }\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  result = []\n \
    \ s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n     \
    \ if letter.match(/[aeiou]/)\n        if result.empty?\n          result << word\n\
    \        else\n          result.each do |word|\n            if word.include?(letter)\n\
    \              break\n            end\n          end\n        end\n      end\n\
    \    end\n  end\n  result\nend", "  s.split(\" \").each do |word|\n    word.split(\"\
    \").each do |letter|\n      if letter.match(/[aeiou]/)\n        puts word\n  \
    \    end\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you\
    \ for taking the time to write this out. I'm going to try this out and see how\
    \ it works. I appreciate it.\n<|/ c |>\n<| c |>\nI ran your code, and it worked\
    \ perfectly. Thank you so much!\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  \nend", "  \n  # Your code\
    \ here\n  \nend\n</cell>\n<cell>", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  result = []\n  s.split(\" \").each do |word|\n    if word.count(n)\
    \ == n\n      result << word\n    end\n  end\n  result\nend", "  result = []\n\
    \  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n    \
    \  if letter.downcase == letter.upcase\n        result << word\n      end\n  \
    \  end\n  end\n  result\nend", "  result = []\n  s.split(\" \").each do |word|\n\
    \    word.split(\"\").each do |letter|\n      if letter.match(/[aeiou]/)\n   \
    \     if result.length >= n\n          break\n        else\n          result <<\
    \ word\n        end\n      end\n    end\n  end\n  result\nend", "  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      if letter.to_i\
    \ == n\n        puts word\n      end\n    end\n  end\nend", "  result = []\n \
    \ s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n     \
    \ if letter.match(/[aeiou]/)\n        if result.length == n\n          result\
    \ << word\n        end\n      end\n    end\n  end\n  result\nend", "  s.split(\"\
    \ \").select { |w| w.count(n) == n }\nend", "  \n  # TODO: Write your code here\n\
    \  \nend", "  s.split(\" \").select { |w| w.count(n) == n }\nend", "  result =\
    \ []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter == \"a\"..\"z\"\n        result << word if word.count(letter)\
    \ == n\n      end\n    end\n  end\n  result\nend", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    if word.split(\" \").length == n\n      result << word\n\
    \    end\n  end\n  return result\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like your use of\
    \ `.count` here, but I wonder if there is a way to do this without using `.count`?\
    \ I suspect that `s.split(\" \").select { |word| word.count(n) == n }` could be\
    \ replaced with `s.split(\" \").select { |word| word.count(n) == n }.reject(&:empty?)`,\
    \ but I'm not sure.\n<|/ c |>\n<| c |>\nYes, that would work. I was thinking about\
    \ using `count` but decided against it because I thought it would be more complicated\
    \ than necessary. `count` would also require a loop to count the letters while\
    \ `split` would only require a loop to split the string. Since `split` would have\
    \ to loop anyway, I decided to go with `count` instead. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm new to Ruby, so I appreciate\
    \ your help. I understand how it works, but I'm still not understanding how it\
    \ works. I understand that `s.split(\" \").select { |word| word.count(n) == n\
    \ }` would return an array with all the words that contain exactly n consonants,\
    \ but I don't understand how it works. I understand that `word.count(n) == n`\
    \ would return true or false based on how many consonants are in the word, but\
    \ I don't understand how it works. Can you explain how it works?\n<|/ c |>\n<|\
    \ c |>\n`word.count(n) == n` would return true or false based on how many consonants\
    \ are in the word. `word.count(n) == n` would return true or false based on how\
    \ many consonants are in the word. `word.count(n) == n` would return true or false\
    \ based on how many consonants are in the word. `word.count(n) == n` would return\
    \ true or false based on how many consonants are in the word. `word.count(n) ==\
    \ n` would return true or false based on how many consonants are in the word.\
    \ `word.count(n) == n` would return true or false based on how many consonants\
    \ are in the word. `word.count(n) == n` would return true or false based on how\
    \ many consonants are in the word. `word.count(n) == n` would return true or false\
    \ based on how many consonants are in the word. `word.count(n) == n` would return\
    \ true or false based on how many con", "  s.split(\" \").each do |word|\n   \
    \ if word.include?(\"aeiou\")\n      puts word\n    end\n  end\nend", "  result\
    \ = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      result << letter if word.count(letter) == n\n    end\n  end\n  result\n\
    end", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").select { |word|\
    \ word.count(n) == n }\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThanks for your answer! I\
    \ appreciate it! I understand what you are saying but I am still confused on how\
    \ to implement it. Could you please give me an example of how I would implement\
    \ it? I understand that I am supposed to use .select but I am not sure how to\
    \ implement it.\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope that\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your help! I appreciate it! I understand\
    \ what you are saying but I am still confused on how to implement it. Could you\
    \ please give me an example of how I would implement it? I understand that I am\
    \ supposed to use .select but I am not sure how to implement it.\n<|/ c |>\n<|\
    \ c |>\nI added an example to my answer. Hope that helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your help! I appreciate it! I understand what you are saying but I\
    \ am still confused on how to implement it. Could you please give me an example\
    \ of how I would implement it? I understand that I am supposed to use .select\
    \ but I am not sure how to implement it.\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").select\
    \ { |word| word.count(n) == n }\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend\n</code>\n<|/ a tags=ruby,string,arrays |>\n<| c |>\nThis doesn't\
    \ work if the string contains multiple spaces.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. I've updated my answer to account for multiple spaces.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Can you please explain what this line\
    \ is doing? `s.split(\" \").select { |word| word.count(n) == n }`\n<|/ c |>\n\
    <| c |>\n`s.split(\" \").select` splits the string into an array of words. `word.count(n)`\
    \ counts the number of occurrences of `n` in the word and `==` checks if the count\
    \ is equal to `n`.\n<|/ c |>\n<| c |>\nThanks. I understand it now.\n<|/ c |>\n\
    <| a tags=ruby,string,arrays |>\n<code>", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend",
  "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.match(/[aeiou]/)\n        if result.empty? || result.length <\
    \ n\n          result << word\n        end\n      end\n    end\n  end\n  result\n\
    end", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for the detailed explanation. I was able to implement the\
    \ code and it works perfectly. Thanks again!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  result = []\n  i = 0\n  while i < s.length\n    if s.chars.count\
    \ { |c| c == s.chars[i] } == n\n      result << s.chars[i]\n      i += 1\n   \
    \ end\n    i += 1\n  end\n  result\nend", "  result = []\n  s.split(\" \").each\
    \ do |word|\n    word.split(\"\").each do |letter|\n      if letter.match(/[aeiou]/)\n\
    \        result.push(word)\n      end\n    end\n  end\n  result\nend", "  s.split(\"\
    \ \").select { |word| word.chars.count == n }.map(&:strip)\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").select { |word|\
    \ word.count(n) == n }\nend", "  s.split(\" \").map { |word| word.split(\"\").select\
    \ { |c| c == \"c\" || c == \"C\" || c == \"d\" || c == \"D\" || c == \"h\" ||\
    \ c == \"H\" || c == \"l\" || c == \"L\" || c == \"o\" || c == \"O\" || c == \"\
    r\" || c == \"R\" || c == \"s\" || c == \"S\" || c == \"t\" || c == \"T\" || c\
    \ == \"w\" || c == \"W\" }.count >= n }.flatten\nend", "  s.split(\" \").select\
    \ { |word| word.chars.uniq.size == n }\nend", "  s.split(\" \").select { |word|\
    \ word.count(n) == n }\nend", "  s.split(\" \").select { |word| word.chars.count\
    \ == n }\nend", "  s.split(\" \").map do |word|\n    word.split(\"\").select do\
    \ |char|\n      char.match(/[aeiou]/i).size == n\n    end\n  end\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  s.split(\" \").select { |word|\
    \ word.count(n) == n }\nend", "  s.split(\" \").each do |word|\n    if word.include?(\"\
    aeiou\")\n      puts word\n    end\n  end\nend", "  s.split(\" \").map do |word|\n\
    \    word.split(\"\").select do |letter|\n      letter.match(/[aeiou]/)\n    end.size\
    \ == n\n  end\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| a tags=ruby,regex |>\n\
    <code>", "  s.split(\" \").select { |word| word.count(n) == n }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
