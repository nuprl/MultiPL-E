name: HumanEval_19_sort_numbers
language: ruby
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  numbers.split.sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split.sort.join('\
    \ ')\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split.sort.join\n\
    end\n</code>\n<|/ a tags=ruby,sorting,arrays |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split.sort.join('\
    \ ')\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split.sort.join(' ')\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(' ')\n  numbers.map! { |n| n.to_i }\n\
    \  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\" \"\
    ).sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort!\n  numbers.join(\" \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers = numbers.split(' ')\n  numbers.map! {\
    \ |n| n.to_i }\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split.sort.join('\
    \ ')\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ruby,string |>\n<code>", "  numbers.split.sort.join(' ')\nend",
  "  numbers.split(\" \").sort_by { |n| n.to_i }.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=ruby,sorting,arrays |>\n<| c |>\nThis doesn't work for me. `sort_by` doesn't\
    \ seem to exist in Ruby 1.8.7. `sort_by` does exist in Ruby 1.9.\n<|/ c |>\n<|\
    \ c |>\n`sort_by` was introduced in Ruby 1.9. `sort_by!` was introduced in Ruby\
    \ 1.8.7. `sort_by` is also available on Ruby 1.8.7 and 1.9.\n<|/ c |>\n<| c |>\n\
    Ah, I see. Thanks for clarifying. I was confused because I thought `sort_by` was\
    \ a method on `Array`, but it's actually a method on `Enumerable`.\n<|/ c |>\n\
    <| a |>\n<code>", "  numbers = numbers.split(' ')\n  numbers.map! { |n| n.to_i\
    \ }\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort_by { |n| n.to_i }.join(\" \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nI like your solution, but I prefer `sort_by` over `sort` because\
    \ `sort_by` returns an array.\n<|/ c |>\n<| c |>\nI agree with you, `sort_by`\
    \ returns an array, but I prefer `sort` because `sort_by` returns an array. `sort`\
    \ returns a `nil` if the array is empty and `sort_by` returns an empty array if\
    \ the array is empty.\n<|/ c |>\n<| c |>\n`sort_by` returns an array, not `nil`.\
    \  `sort` returns `nil` if the array is empty.\n<|/ c |>\n<| c |>\n`sort_by` returns\
    \ an array, not `nil`. `sort` returns `nil` if the array is empty.\n<|/ c |>\n\
    <| c |>\n`sort_by` returns an array, not `nil`. `sort` returns `nil` if the array\
    \ is empty.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>",
  "  numbers = numbers.split(' ')\n  numbers.map! { |n| n.to_i }\n  numbers.sort!\n\
    \  numbers.join(' ')\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your\
    \ answer, but this doesn't really answer the question. Your code doesn't sort\
    \ the numbers, it just replaces them with their sorted versions. I asked how to\
    \ sort the numbers, not how to replace them with their sorted versions.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to include a solution that sorts the numbers.\
    \ I hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  numbers = numbers.split('\
    \ ')\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort_by { |x| x.to_i }.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", " \
    \ numbers.split(\" \").sort_by { |n| n.to_i }.join\nend\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this one. Very concise and easy to understand.\n<|/ c |>\n\
    <| c |>\nI like this one too, but I find it more confusing than `sort_by`.\n<|/\
    \ c |>\n<| c |>\nI like it, but I find it more confusing than `sort_by`.\n<|/\
    \ c |>\n<| c |>\nI like it, but I find it more confusing than `sort_by`.\n<|/\
    \ c |>\n<| c |>\nI like it, but I find it more confusing than `sort_by`.\n<|/\
    \ c |>\n<| a tags=ruby,sorting |>\n<code>", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.split(' ')\n  numbers.map! { |n| n.to_i }\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", " \
    \ numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort_by\
    \ { |n| n.to_i }.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\n\
    end", "  numbers.split.sort.join\nend", "  numbers.split(\" \").sort.join(\" \"\
    )\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n  numbers.join(' ')\n\
    end", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split('\
    \ ')\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split.sort.join\nend", "  numbers = numbers.split('\
    \ ')\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(' ')\n  numbers.map! { |n| n.to_i }\n\
    \  numbers.sort!\n  numbers.join(' ')\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| c |>\nI like this solution. Although it would be nice to have it return\
    \ a string instead of an array.\n<|/ c |>\n<| c |>\nI added a version that returns\
    \ a string\n<|/ c |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  numbers =\
    \ numbers.split(' ')\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers =\
    \ numbers.split(' ')\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort!\n  numbers.split(\"\
    \ \").join(\" \")\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers('one two three four five six seven eight nine')` returns\
    \ `'one two three four five six seven eight nine'`.\n<|/ c |>\n<| c |>\n: I tested\
    \ it before posting. It works for me in Ruby 1.9.3. What version of Ruby are you\
    \ using?\n<|/ c |>\n<| c |>\n: I tested it again and it works for me in Ruby 1.9.3.\
    \ What version of Ruby are you using?\n<|/ c |>\n<| c |>\n: I tested it again\
    \ and it works for me in Ruby 1.9.3. What version of Ruby are you using?\n<|/\
    \ c |>\n<| c |>\n: I tested it again and it works for me in Ruby 1.9.3. What version\
    \ of Ruby are you using?\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  numbers.split.sort.join\n\
    end", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(' ')\n  numbers.map! { |n| n.to_i }\n\
    \  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split('\
    \ ')\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort_by { |n| n.to_i }.join\nend\n</code>\n\
    <|/ a tags=ruby,sorting,arrays |>\n<| a dscore=0 |>\n<code>", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \"\
    )\nend", "  numbers = numbers.split(' ')\n  numbers.map! { |n| n.to_i }\n  numbers.sort!\n\
    \  numbers.join(' ')\nend\n</code>\n<|/ a tags=ruby,sorting |>\n<| a dscore=0\
    \ |>\n<code>", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend", " \
    \ numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split.sort.join\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(\" \").sort_by { |n| n.to_i }.join\n\
    end", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| a |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers\
    \ = numbers.split(' ')\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort_by { |n| n.to_i }.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort!\n  numbers.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split.sort.join(' ')\n\
    end", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI like this solution, but I wonder if there's a way to do it without\
    \ having to import a module?\n<|/ c |>\n<| c |>\n: Nope, there's no way to do\
    \ it without importing a module.  Ruby doesn't have a built-in `sort` method.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't require importing a module.\n\
    <|/ c |>\n<| a |>\n<code>", "  numbers = numbers.split(' ')\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", " \
    \ numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split('\
    \ ')\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort!\n  numbers.split(\" \").join(\" \")\n\
    end\n</code>\n<|/ a tags=ruby,sorting,arrays |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>", "  numbers = numbers.split(' ')\n  numbers.map! { |n| n.to_i }\n\
    \  numbers.sort!\n  numbers.join(' ')\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if you have a number like \"one two three\"\n<|/ c |>\n<| c |>\nI added\
    \ a version that works with numbers like \"one two three\"\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(' ')\n\
    \  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split.sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\n\
    end", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend\n</code>\n<|/\
    \ a tags=ruby,sorting |>\n<| a dscore=0 |>\n<code>", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split.sort.join('\
    \ ')\nend", "  numbers.split.sort.join\nend", "  numbers = numbers.split(' ')\n\
    \  numbers.map! do |number|\n    number.to_i\n  end\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", " \
    \ numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split.sort.join\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split.sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort!\n  numbers.gsub!(/[^0-9]/,\
    \ \"\")\n  numbers\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split.sort.join\n\
    end", "  numbers = numbers.split(' ')\n  numbers.map! { |n| n.to_i }\n  numbers.sort!\n\
    \  numbers.join(' ')\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort_by { |n| n.to_i }.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split('\
    \ ')\n  numbers.map! do |number|\n    number.to_i\n  end\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
