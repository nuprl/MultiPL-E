name: HumanEval_36_fizz_buzz
language: ruby
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n\
  # 2\n# >>> fizz_buzz(79)\n# 3\ndef fizz_buzz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n\
  \    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n \
  \   assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n\
  \    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n\
  \    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n\
  \    assert_equal(8026, candidate.call(100000))\n  end\nend\n"
completions: ["  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n\
    \      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n  \
    \  if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n  \
    \    count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  return\
    \ count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n\
    \ > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 ==\
    \ 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  return count\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis\
    \ doesn't work. `fizz_buzz(78)` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n\
    Yes, I missed that case. Thanks for pointing it out. I've updated my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", " \
    \ count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution. One thing I noticed is that\
    \ it returns 0 for fizz buzz numbers that are divisible by both 11 and 13. Is\
    \ there a way to fix that?\n<|/ c |>\n<| c |>\nI added an alternative solution\
    \ that doesn't require any loops.\n<|/ c |>\n<| a |>\n<code>", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n\
    \  end\n  count\nend\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I\
    \ wonder if there is a way to do it without using an explicit loop?\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't use an explicit loop\n<|/ c |>\n<| c\
    \ |>\nI like your solution, but I wonder if there is a way to do it without using\
    \ an explicit loop?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use an\
    \ explicit loop\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to do it without using an explicit loop?\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n \
    \     n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n  \
    \  if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n  \
    \    count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    \
    \  n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThis doesn't work. `fizz_buzz(50)` returns `0` instead of `2`.\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<| c |>\nThis\
    \ still doesn't work. `fizz_buzz(50)` returns `0` instead of `2`.\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<| c |>\nThis\
    \ still doesn't work. `fizz_buzz(50)` returns `0` instead of `2`.\n<|/ c |>\n\
    <| a tags=ruby |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n\
    \      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n  \
    \    n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  count = 0\n  while\
    \ n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13\
    \ == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  return count\nend", "  count = 0\n \
    \ while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n\
    \  end\n  count\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", " \
    \ count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  return count\nend",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    elsif n % 7 == 0\n\
    \      count += 1\n      n /= 7\n    end\n  end\n  count\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\"\
    )\n    end\n  end\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n   \
    \   count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n     \
    \ n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/\
    \ a tags=ruby,fizzbuzz |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to do it without using an explicit loop?\n<|/ c |>\n<| c |>\nI added\
    \ a solution without an explicit loop\n<|/ c |>\n<| c |>\nI added a solution without\
    \ an explicit loop\n<|/ c |>\n<| c |>\nI added a solution without an explicit\
    \ loop\n<|/ c |>\n<| c |>\nI added a solution without an explicit loop\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n    n /= 11\n    if n % 13 == 0\n      count += 1\n   \
    \ n /= 13\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n\
    \      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nI like your solution, but I wonder if it could be\
    \ done without an explicit loop. Maybe something like `n.to_s.chars.map { |c|\
    \ c.to_i }.inject(:+).to_i`.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder\
    \ if it could be done without an explicit loop. Maybe something like `n.to_s.chars.map\
    \ { |c| c.to_i }.inject(:+).to_i`.\n<|/ c |>\n<| c |>\n: Yes, it can be done without\
    \ an explicit loop. I'll post an answer in a minute.\n<|/ c |>\n<| c |>\n: I added\
    \ an answer that does it without an explicit loop.\n<|/ c |>\n<| a tags=ruby |>\n\
    Here's a solution that doesn't use an explicit loop:\n<code>", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n    elsif n % 13 == 0\n      count += 1\n    n /= 10\n  end\n  count\n\
    end", "  count = 0\n  while n > 0\n    count += 1\n    n /= 10\n  end\n  count\n\
    end", "  count = 0\n  while n > 0\n    count += n % 11 == 0\n    n /= 11\n   \
    \ count += n % 13 == 0\n    n /= 13\n  end\n  return count\nend", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n\
    \  end\n  return count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n\
    \      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n  \
    \    n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", " \
    \ count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain me the code you wrote? I didn't understand\
    \ it.\n<|/ c |>\n<| c |>\nI added some comments. I hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Can you please explain me the code you wrote?\
    \ I didn't understand it.\n<|/ c |>\n<| c |>\nI added some comments. I hope it\
    \ helps.\n<|/ c |>\n<| a |>\n<code>", "  count = 0\n  while n > 0\n    if n %\
    \ 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count\
    \ += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  return count\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your answer! I understand\
    \ how this works, but I do not understand how it works. I understand that `fizz_buzz(50)`\
    \ returns `0`, but how does `fizz_buzz(78)` return `2`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_buzz(79)`\
    \ returns `3`, but how does `fizz_buzz(79)` return `3`? I understand that `fizz_bu",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  return count\nend", "  count = 0\n  while n > 0\n    count\
    \ += n % 11 == 0\n    n /= 11\n    count += n % 13 == 0\n    n /= 13\n  end\n\
    \  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz(78)` - it returns `0`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the bug.\n<|/ c |>\n\
    <| a tags=ruby |>\n<code>", "  n.to_s.split(\"\").each_with_index.inject(0) do\
    \ |sum, (digit, index)|\n    if index == 0 || index == 1 || index == 2 || index\
    \ == 3 || index == 4 || index == 5 || index == 6 || index == 7 || index == 8\n\
    \      sum += digit == \"7\" ? 0 : digit == \"9\" ? 1 : 2\n    else\n      sum\
    \ += digit == \"7\" ? 1 : digit == \"9\" ? 2 : 3\n    end\n  end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  count = 0\n  while n > 0\n  \
    \  if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n  \
    \    count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  return\
    \ count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't work. `fizz_buzz(78)` returns `2`, not `3`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. `fizz_buzz(78)` returns `2`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. `fizz_buzz(78)` returns `2`, not `3`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `fizz_buzz(78)` returns `2`.\n<|/ c |>\n<| c |>\nIt does work. `fizz_buzz(78)`\
    \ returns `2`.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  count = 0\n  while n\
    \ > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 ==\
    \ 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n\
    \ > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 ==\
    \ 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  return count\nend", "  count = 0\n \
    \ while n > 0\n    if n % 11 == 0\n      count += 1\n    n /= 11\n    if n % 13\
    \ == 0\n      count += 1\n    n /= 13\n  end\n  count\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\"\
    )\n    elsif i.to_s.include?(\"11\")\n      puts i.to_s.count(\"11\")\n    elsif\
    \ i.to_s.include?(\"13\")\n      puts i.to_s.count(\"13\")\n    end\n  end\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to do it without having to use an if statement for every number in\
    \ the range. Something like `n.to_s.split(\"\").each do |i| i.to_s.include?(\"\
    7\") ? \"7\" : i.to_s.include?(\"11\") ? \"11\" : i.to_s.include?(\"13\") ? \"\
    13\" : nil end`\n<|/ c |>\n<| c |>\nI added a solution that doesn't use an if\
    \ statement for every number in the range.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do it without having to use an if statement\
    \ for every number in the range. Something like `n.to_s.split(\"\").each do |i|\
    \ i.to_s.include?(\"7\") ? \"7\" : i.to_s.include?(\"11\") ? \"11\" : i.to_s.include?(\"\
    13\") ? \"13\" : nil end`\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use an if statement for every number in the range.\n<|/ c |>\n<| a |>\n<code>",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", " \
    \ count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</cell>\n\
    <cell>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n \
    \   elsif n % 13 == 0\n      count += 1\n    elsif n % 7 == 0\n      count +=\
    \ 1\n    elsif n % 5 == 0\n      count += 1\n    elsif n % 3 == 0\n      count\
    \ += 1\n    elsif n % 1 == 0\n      count += 1\n    elsif n % 2 == 0\n      count\
    \ += 1\n    elsif n % 6 == 0\n      count += 1\n    elsif n % 10 == 0\n      count\
    \ += 1\n    elsif n % 4 == 0\n      count += 1\n    elsif n % 8 == 0\n      count\
    \ += 1\n    elsif n % 2 == 0\n      count += 1\n    elsif n % 1 == 0\n      count\
    \ += 1\n    elsif n % 7 == 0\n      count += 1\n    elsif n % 5 == 0\n      count\
    \ += 1\n    elsif n % 3 == 0\n      count += 1\n    elsif n % 1 == 0\n      count\
    \ += 1\n    elsif n % 6 == 0\n      count += 1\n    elsif n % 10 == 0\n      count\
    \ += 1\n    elsif n % 4 == 0\n      count += 1\n    elsif n % 8 == 0\n      count\
    \ += 1\n    elsif n % 2 == 0\n      count += 1\n    elsif n % 1 == 0\n      count\
    \ += 1\n    elsif n % 7 == 0\n      count += 1\n    elsif n % 5 == 0\n      count\
    \ += 1\n    elsif n % 3 == 0\n      count += 1\n    elsif n % 1 == 0\n      count\
    \ += 1\n    elsif n % 6 == 0\n      count += 1\n    elsif n % 10 == 0\n      count\
    \ += 1\n    elsif n % 4 == 0\n      count += 1\n    elsif n % 8 == 0\n      count\
    \ += 1\n    elsif n % 2 == 0\n      count += 1\n    elsif n % 1 == 0\n      count\
    \ += 1\n    elsif n % 7 == 0\n      count += 1\n    elsif n % 5 == 0\n      count\
    \ += 1\n    elsif n % 3 == 0\n      count += 1\n    elsif n % 1 == 0\n      count\
    \ += 1\n    elsif n % 6 == 0\n      count += 1\n    elsif n % 10 == 0\n      count\
    \ += 1\n    elsif n % 4 == 0\n      count += 1\n    elsif n % 8 == 0\n      count\
    \ += 1\n    elsif n % 2 == 0\n      count += 1\n    elsif n % 1 == 0\n      count\
    \ += 1\n    elsif n % 7 == 0\n      count += 1\n    elsif n % 5 == 0\n      count\
    \ += 1\n    elsif n % 3 == 0\n      count += 1\n    ", "  count = 0\n  while n\
    \ > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 ==\
    \ 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   elsif n % 7 == 0\n      count += 1\n      n /= 7\n    end\n  end\n  count\n\
    end", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    \
    \  n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n  \
    \  if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n  \
    \    count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  return\
    \ count\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| a tags=ruby,fizzbuzz |>\n\
    <code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n \
    \     n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n  \
    \  if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n  \
    \    count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\n\
    end\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nThis doesn't work for numbers\
    \ divisible by 11 or 13. For example, fizz_buzz(78) returns 2, but should be 3.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n  \
    \    count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n    \
    \  n /= 13\n    elsif n % 7 == 0\n      count += 1\n      n /= 7\n    end\n  end\n\
    \  return count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  return count\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much for this! I really appreciate it!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  return count\nend",
  "  n.to_s.split(\"\").each_with_index do |digit, index|\n    next if digit == \"\
    7\"\n    next if digit == \"9\"\n    next if digit == \"11\"\n    next if digit\
    \ == \"13\"\n    puts index if index % 11 == 0\n  end\nend", "  count = 0\n  while\
    \ n > 0\n    count += n % 11 == 0\n    n /= 11\n    count += n % 13 == 0\n   \
    \ n /= 13\n  end\n  return count\nend", "  count = 0\n  while n > 0\n    if n\
    \ % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count\
    \ += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    elsif n % 7 == 0\n\
    \      count += 1\n      n /= 7\n    end\n  end\n  count\nend", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n\
    \  end\n  count\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThanks so much! I appreciate your help.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. `fizz_buzz(-10)` returns `0` instead\
    \ of `-1`.\n<|/ c |>\n<| c |>\nIt does work for negative numbers. Try it yourself.\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it yourself.\n<|/ c |>\n<| c |>\nIt does\
    \ work for negative numbers. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work\
    \ for negative numbers. Try it yourself.\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a tags=ruby,fizzbuzz |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  count = 0\n\
    \  while n > 0\n    count += 1\n    if n % 11 == 0\n      n /= 11\n    elsif n\
    \ % 13 == 0\n      n /= 13\n    end\n  end\n  return count\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\n<code>", "  count = 0\n  while n > 0\n    n /= 10\n\
    \    count += 1\n  end\n  count\nend", "  n.to_s.split(\"\").each do |i|\n   \
    \ if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\n\
    end\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nThanks so much for the help!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n    n /= 11\n    if n % 13 == 0\n      count += 1\n\
    \    n /= 13\n  end\n  count\nend", "  n.to_s.split(\"\").each do |i|\n    if\
    \ i.to_i.modulo(11).zero? && i.to_i.modulo(13).zero?\n      puts i.to_i\n    end\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I understand\
    \ your solution and it works perfectly for my problem. I'm just wondering why\
    \ my code doesn't work. Thanks again!\n<|/ c |>\n<| c |>\nThe reason your original\
    \ code doesn't work is that `to_i` converts the string to a number, but `to_i`\
    \ doesn't convert it to a number until you try to do math with it. So `i.to_i.modulo(11)`\
    \ tries to convert `i` to a number, but `i` is already a number, so `to_i` doesn't\
    \ do anything. `i.to_i.modulo(11)` doesn't do anything because `i` is already\
    \ a number.\n<|/ c |>\n<| c |>\nThanks for your explanation! I understand it now.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    n -= n %\
    \ 11\n    count += 1\n    n /= 13\n  end\n  count\nend", "  count = 0\n  while\
    \ n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13\
    \ == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   elsif n % 7 == 0\n      count += 1\n      n /= 7\n    end\n  end\n  count\n\
    end", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    \
    \  n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n  \
    \  if n % 11 == 0\n      count += 1\n    elsif n % 13 == 0\n      count += 1\n\
    \    n /= 10\n  end\n  count\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c\
    \ |>\nI like your solution, but I believe it can be simplified a bit. `fizz_buzz(50)`\
    \ returns `0` instead of `2`.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n \
    \     count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n   \
    \   n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count =\
    \ 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n\
    \  end\n  count\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\nend", "  count = 0\n  while\
    \ n > 0\n    count += n % 11 == 0\n    n /= 11\n    count += n % 13 == 0\n   \
    \ n /= 13\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n\
    \      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,fizzbuzz\
    \ |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n\
    \ > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 ==\
    \ 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nThanks for your\
    \ answer! I appreciate it!\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", " \
    \ count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    n /= 11\n\
    \    if n % 13 == 0\n      count += 1\n    n /= 13\n  end\n  count\nend", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| a tags=ruby |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n\
    \      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n\
    \      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\"\
    )\n    end\n  end\nend", "  count = 0\n  while n > 0\n    count += 1\n    if n\
    \ % 11 == 0\n      count += 1\n    if n % 13 == 0\n      count += 1\n    n /=\
    \ 10\n  end\n  return count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  count = 0\n  while\
    \ n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13\
    \ == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nI like this solution.\
    \ One thing I noticed is that it only works with integers. I tried to modify it\
    \ to work with floats and it didn't work. Do you know why that is?\n<|/ c |>\n\
    <| c |>\nIt doesn't work with floats because floats aren't integers. Floats aren't\
    \ even integers. Floats aren't even integers. Floats aren't even integers. Floats\
    \ aren't even integers. Floats aren't even integers. Floats aren't even integers.\
    \ Floats aren't even integers. Floats aren't even integers. Floats aren't even\
    \ integers. Floats aren't even integers. Floats aren't even integers. Floats aren't\
    \ even integers. Floats aren't even integers. Floats aren't even integers. Floats\
    \ aren't even integers. Floats aren't even integers. Floats aren't even integers.\
    \ Floats aren't even integers. Floats aren't even integers. Floats aren't even\
    \ integers. Floats aren't even integers. Floats aren't even integers. Floats aren't\
    \ even integers. Floats aren't even integers. Floats aren't even integers. Floats\
    \ aren't even integers. Floats aren't even integers. Floats aren't even integers.\
    \ Floats aren't even integers. Floats aren't even integers. Floats aren't even\
    \ integers. Floats aren't even integers. Floats aren't even integers. Floats aren't\
    \ even integers. Floats aren't even integers. Floats aren't even integers. Floats\
    \ aren't even integers. Floats aren't even integers. Floats aren't even integers.\
    \ Floats aren't even integers. Floats aren't even integers. Floats aren't even\
    \ integers. Floats aren't even integers. Floats aren't even integers. Floats aren't\
    \ even integers. Floats aren't even integers. Floats aren't even integers. Floats\
    \ aren't even integers. Floats aren't even integers. Floats aren't even integers.\
    \ Floats aren't even integers. Floats aren't even integers. Floats aren't even\
    \ integers. Floats aren't even integers. Floats aren't even integers. Floats aren't\
    \ even integers. Floats aren't even integers. Floats aren't even integers. Floats\
    \ aren't even integers. Floats aren't even integers. Floats aren't even integers.\
    \ Floats aren't even integers. Floats aren't even integers. Floats aren't even\
    \ integers. ", "  count = 0\n  while n > 0\n    count += 1\n    n /= 10\n  end\n\
    \  return count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n    elsif n % 13 == 0\n\
    \      count += 1\n    n /= 10\n  end\n  return count\nend\n</cell>\n<cell>",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    n /= 11\n\
    \    if n % 13 == 0\n      count += 1\n    n /= 13\n  end\n  count\nend", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend\n</cell>\n<cell>", "  count = 0\n  while n > 0\n\
    \    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n\
    \      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    \
    \  n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend\n</cell>\n<cell>", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  while n > 0\n    count += 1\n    if n %\
    \ 11 == 0\n      count += 1\n    if n % 13 == 0\n      count += 1\n    n /= 10\n\
    \  end\n  return count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n\
    \      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n  \
    \    n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n\
    \      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like your solution, however it only works with integers.\
    \ I need a solution that works for any number. Thanks for your help though.\n\
    <|/ c |>\n<| c |>\nI added a solution that works for any number.\n<|/ c |>\n<|\
    \ c |>\nThanks so much! I appreciate it.\n<|/ c |>\n<| a tags=ruby,fizzbuzz,ruby-on-rails\
    \ |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz(50)`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `fizz_buzz(50)`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `fizz_buzz(50)`.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `fizz_buzz(50)`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `fizz_buzz(50)`.\n\
    <|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  count = 0\n  while n > 0\n \
    \   if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n \
    \     count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    count += n %\
    \ 11 == 0\n    n /= 11\n    count += n % 13 == 0\n    n /= 13\n  end\n  count\n\
    end", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    \
    \  n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nI like this solution, but I wonder if it can be done without using an explicit\
    \ `while` loop. Perhaps using a `for` loop?\n<|/ c |>\n<| c |>\nYes, you can do\
    \ it with a `for` loop. I'll post an answer in a minute.\n<|/ c |>\n<| a tags=ruby,fizzbuzz\
    \ |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n    elsif n % 13 == 0\n      count += 1\n    n /= 10\n  end\n  count\nend",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    n /= 11\n\
    \    if n % 13 == 0\n      count += 1\n    n /= 13\n  end\n  count\nend", "  count\
    \ = 0\n  while n > 0\n    count += 1\n    if n % 11 == 0\n      count += 1\n \
    \   if n % 13 == 0\n      count += 1\n    n /= 10\n  end\n  count\nend", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    elsif n % 7 == 0\n\
    \      count += 1\n      n /= 7\n    end\n  end\n  count\nend", "  count = 0\n\
    \  while n > 0\n    count += n % 11 == 0\n    n /= 11\n    count += n % 13 ==\
    \ 0\n    n /= 13\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n\
    \ % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count\
    \ += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    elsif n %\
    \ 13 == 0\n      count += 1\n    n /= 10\n  end\n  return count\nend", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,fizzbuzz\
    \ |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  return count\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n\
    \      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| a tags=ruby,fizzbuzz\
    \ |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend", "  n.to_s.split(\"\").each_with_index\
    \ do |digit, index|\n    next if digit == \"7\"\n    next if digit == \"9\"\n\
    \    next if digit == \"11\"\n    next if digit == \"13\"\n    puts \"#{index+1}\"\
    \ if index%3 == 0\n  end\nend", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n    n /= 11\n    if n % 13 == 0\n      count += 1\n   \
    \ n /= 13\n  end\n  return count\nend", "  count = 0\n  while n > 0\n    if n\
    \ % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count\
    \ += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  return count\nend", "  count = 0\n  while n > 0\n    if\
    \ n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count\
    \ += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n\
    </code>\n<|/ a |>\n<| a tags=ruby |>\n<code>", "  count = 0\n  while n > 0\n \
    \   if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n \
    \     count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\n\
    end\n</cell>\n<cell>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a\
    \ tags=ruby,fizzbuzz |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n >\
    \ 0\n    if n % 11 == 0\n      count += 1\n    n /= 11\n    if n % 13 == 0\n \
    \     count += 1\n    n /= 13\n  end\n  return count\nend", "  count = 0\n  while\
    \ n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13\
    \ == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n\
    \ > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 ==\
    \ 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| a tags=ruby,fizzbuzz |>\n\
    <code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n \
    \     n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThanks for the answer. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nThe code splits the string into an array of characters. Then\
    \ it iterates through each character and checks if it includes the digit 7. If\
    \ it does, it counts the number of 7's in the string. Finally it prints the number\
    \ of 7's in the string.\n<|/ c |>\n<| c |>\nThanks again. Can you please explain\
    \ how this works?\n<|/ c |>\n<| c |>\nThe code splits the string into an array\
    \ of characters. Then it iterates through each character and checks if it includes\
    \ the digit 7. If it does, it counts the number of 7's in the string. Finally\
    \ it prints the number of 7's in the string.\n<|/ c |>\n<| c |>\nThanks again.\
    \ Can you please explain how this works?\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", " \
    \ count = 0\n  while n > 0\n    count += n % 11 == 0\n    n /= 11\n    count +=\
    \ n % 13 == 0\n    n /= 13\n  end\n  count\nend", "  count = 0\n  while n > 0\n\
    \    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n\
    \      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  while n > 0\n    count += 1\n    if n % 11 == 0\n      count\
    \ += 1\n    if n % 13 == 0\n      count += 1\n    n /= 10\n  end\n  return count\n\
    end", "  count = 0\n  while n > 0\n    count += n % 11 == 0\n    n /= 11\n   \
    \ count += n % 13 == 0\n    n /= 13\n  end\n  count\nend\n</cell>\n<cell>", " \
    \ count = 0\n  while n > 0\n    n /= 10\n    count += 1\n  end\n  count\nend",
  "  count = 0\n  while n > 0\n    count += 1\n    if n % 11 == 0\n      count +=\
    \ 1\n    if n % 13 == 0\n      count += 1\n    n /= 10\n  end\n  count\nend\n\
    </code>\n<|/ a tags=ruby,fizzbuzz |>\n<| a tags=ruby,fizzbuzz |>\n<code>", " \
    \ count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    n -= 1\n\
    \    if n % 11 == 0\n      count += 1\n    elsif n % 13 == 0\n      count += 1\n\
    \    end\n  end\n  return count\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", " \
    \ n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"\
    10\") && i.to_s.include?(\"11\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"\
    10\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"\
    8\") && i.to_s.include?(\"9\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"9\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\")\n      puts i.to_s.count(\"8\")\n    elsif i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"11\")\n      puts i.to_s.count(\"\
    8\")\n    elsif i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"\
    10\")\n      puts i.to_s.count(\"8\")\n    elsif i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\")\n      puts i.to_s.count(\"8\")\n    elsif i.", "  count = 0\n  while n >\
    \ 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 ==\
    \ 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,fizzbuzz |>\n<code>",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| a tags=ruby |>\n<code>", "  n.to_s.split(\"\").each do\
    \ |digit|\n    digit = digit.to_i\n    if digit % 11 == 0 || digit % 13 == 0\n\
    \      puts digit\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n\
    <| a |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count\
    \ += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n\
    \    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n    n /= 11\n    if n % 13 == 0\n      count += 1\n   \
    \ n /= 13\n  end\n  count\nend", "  n.to_s.split(\"\").each do |i|\n    next if\
    \ i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n\
    \    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next\
    \ if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"\
    6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n\
    \    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n    next\
    \ if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"\
    3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n\
    \    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n    next\
    \ if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"\
    0\")\n    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n\
    \    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n    next\
    \ if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"\
    7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n\
    \    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next\
    \ if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"\
    4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n\
    \    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next\
    \ if i.to_s.include?(\"9\")\n    next if i.to_s.include?", "  count = 0\n  while\
    \ n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13\
    \ == 0\n      count += 1\n      n /= 13\n    elsif n % 7 == 0\n      count +=\
    \ 1\n      n /= 7\n    end\n  end\n  return count\nend\n</cell>\n<cell>", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n\
    \      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `fizz_buzz(78)` returns `3` when\
    \ it should be `2`.\n<|/ c |>\n<| c |>\n: Thanks for catching that. I've fixed\
    \ it.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder how it compares to\
    \ mine. My solution uses `while` loops and `if` statements, yours uses `until`\
    \ loops and `until` statements. I wonder which one is more efficient.\n<|/ c |>\n\
    <| c |>\n: I doubt that `until` loops are more efficient than `while` loops. `until`\
    \ loops are more efficient than `until` statements because they don't require\
    \ a jump back to the top of the loop. `until` statements require a jump back to\
    \ the top of the loop. `until` loops are more efficient than `while` loops because\
    \ they don't require a jump back to the top of the loop. `until` statements require\
    \ a jump back to the top of the loop. `until` loops are more efficient than `while`\
    \ loops because they don't require a jump back to the top of the loop. `until`\
    \ statements require a jump back to the top of the loop. `until` loops are more\
    \ efficient than `while` loops because they don't require a jump back to the top\
    \ of the loop. `until` statements require a jump back to the top of the loop.\
    \ `until` loops are more efficient than `while` loops because they don't require\
    \ a jump back to the top of the loop. `until` statements require a jump back to\
    \ the top of the loop. `until` loops are more efficient than `while` loops because\
    \ they don't require a jump back to the top of the loop. `until` statements require\
    \ a jump back to the top of the loop. `until` loops are more efficient than `while`\
    \ loops because they don't require a jump back to the top of the loop. `until`\
    \ statements require a jump back to the top of the loop. `until` loops are more\
    \ efficient than `while` loops because they don't require a jump back to the top\
    \ of the loop. `until` statements require a jump back to the top of the loop.\
    \ `until` loops are more efficient than `while` loops because they don't require ",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n    elsif n %\
    \ 13 == 0\n      count += 1\n    elsif n % 7 == 0\n      count += 1\n    n /=\
    \ 10\n  end\n  return count\nend", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  return count\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>", "  count = 0\n  while\
    \ n > 0\n    if n % 11 == 0\n      count += 1\n    n /= 11\n    if n % 13 == 0\n\
    \      count += 1\n    n /= 13\n  end\n  count\nend", "  count = 0\n  while n\
    \ > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 ==\
    \ 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n\
    \ > 0\n    count += 1\n    if n % 11 == 0\n      count += 1\n    if n % 13 ==\
    \ 0\n      count += 1\n    n /= 10\n  end\n  count\nend", "  count = 0\n  while\
    \ n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13\
    \ == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count +=\
    \ 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n \
    \   else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n\
    \ > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 ==\
    \ 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n\
    \  count\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for the answer!\
    \ I appreciate it!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  count = 0\n  while\
    \ n > 0\n    if n % 11 == 0\n      count += 1\n    elsif n % 13 == 0\n      count\
    \ += 1\n    n /= 10\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if\
    \ n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count\
    \ += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend",
  "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n\
    \    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -=\
    \ 1\n    end\n  end\n  count\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like\
    \ this solution, but I believe it can be simplified a bit. For example, `fizz_buzz(78)`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI agree, thanks for pointing\
    \ that out. I updated my answer to reflect that.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n \
    \     n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11 ==\
    \ 0\n      count += 1\n    elsif n % 13 == 0\n      count += 1\n    n /= 10\n\
    \  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    elsif n % 7 == 0\n      count\
    \ += 1\n      n /= 7\n    end\n  end\n  return count\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    count += n %\
    \ 11 == 0\n    n /= 11\n    count += n % 13 == 0\n    n /= 13\n  end\n  count\n\
    end\n</cell>\n<cell>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    if\
    \ n % 11 == 0\n      count += 1\n    n /= 11\n    if n % 13 == 0\n      count\
    \ += 1\n    n /= 13\n  end\n  count\nend", "  count = 0\n  while n > 0\n    count\
    \ += 1\n    if n % 11 == 0\n      count += 1\n    if n % 13 == 0\n      count\
    \ += 1\n    n /= 10\n  end\n  count\nend", "  count = 0\n  while n > 0\n    if\
    \ n % 11 == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count\
    \ += 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n\
    </code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nThis doesn't work for `fizz_buzz(50)`\
    \ which should return `0`.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out.\
    \ I've fixed the code accordingly.\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>",
  "  count = 0\n  while n > 0\n    count += 1\n    n /= 11\n    n /= 13\n  end\n \
    \ return count\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope that helps.\n<|/ c |>\n<| c |>\nThanks for the explanation.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope that helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  count\
    \ = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n  \
    \  elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n\
    \    end\n  end\n  count\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\n\
    `fizz_buzz(50)` returns `0` instead of `2`.\n<|/ c |>\n<| c |>\nThanks for catching\
    \ that. Fixed.\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n      n /= 11\n    elsif\
    \ n % 13 == 0\n      count += 1\n      n /= 13\n    else\n      n -= 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  while n > 0\n    if n % 11 == 0\n      count += 1\n    n /= 11\n    if n %\
    \ 13 == 0\n      count += 1\n    n /= 13\n  end\n  return count\nend\n</cell>\n\
    <cell>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n      count += 1\n \
    \     n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n /= 13\n    else\n\
    \      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n  while n > 0\n  \
    \  if n % 11 == 0\n      count += 1\n    n /= 11\n    if n % 13 == 0\n      count\
    \ += 1\n    n /= 13\n  end\n  return count\nend", "  count = 0\n  while n > 0\n\
    \    if n % 11 == 0\n      count += 1\n    n /= 11\n    if n % 13 == 0\n     \
    \ count += 1\n    n /= 13\n  end\n  count\nend", "  count = 0\n  while n > 0\n\
    \    n /= 11\n    count += 1\n    n /= 13\n    count += 1\n  end\n  return count\n\
    end\n</cell>\n<cell>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n    n /= 11\n    if n % 13 == 0\n      count += 1\n    n /= 13\n\
    \  end\n  count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_i\
    \ % 11 == 0 and i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\n`fizz_buzz(78)` returns `2` instead of `3`\n<|/ c\
    \ |>\n<| c |>\nThanks for catching that. Fixed.\n<|/ c |>\n<| a tags=ruby |>\n\
    <code>", "  count = 0\n  while n > 0\n    count += 1\n    if n % 11 == 0\n   \
    \   count += 1\n    if n % 13 == 0\n      count += 1\n    n /= 10\n  end\n  count\n\
    end\n</cell>\n<cell>", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  while n > 0\n    n /= 11\n    count += 1\n    n /= 13\n    count += 1\n  end\n\
    \  return count\nend", "  count = 0\n  while n > 0\n    if n % 11 == 0\n     \
    \ count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count += 1\n      n\
    \ /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for your answer! I really appreciate it! I understand\
    \ your code, but I still don't understand why it works. Could you please explain\
    \ it to me? Thanks!\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your explanation! I understand it now!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  while n > 0\n    if n % 11\
    \ == 0\n      count += 1\n      n /= 11\n    elsif n % 13 == 0\n      count +=\
    \ 1\n      n /= 13\n    else\n      n -= 1\n    end\n  end\n  count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
