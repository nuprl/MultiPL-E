name: HumanEval_47_median
language: ruby
prompt: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
  \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4,\
  \ 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5,\
  \ candidate.call([5]))\n    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7,\
  \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
completions: ["  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size\
    \ / 2)-1] : (l[l.size / 2] + l[l.size / 2 - 1]) / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size / 2)-1] : l[l.size / 2]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\nend", " \
    \ l.sort!\n  l = l.length if l.length < 3 else l[1..-1]\n  l.length / 2\nend",
  "  l.sort!\n  l.length!\n  l[l.length / 2]\nend", "  l.sort!\n  l = l[1..-1] if\
    \ l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l/=2 if l.length%2==0\n \
    \ l[(l.length-1)/2]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ % 2 == 0 ? l[l.size / 2] : (l[l.size / 2 - 1] + l[l.size / 2]) / 2\nend", " \
    \ l.sort!\n  l.length\n  l/2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size / 2\nend", "  l.sort!\n  l/=2 if l.length&1==0 \n  l[l.length/2-1]\n\
    end", "  l.sort!\n  l = l.length if l.length % 2 == 0 else l.length / 2\n  l.ceil\n\
    \  l\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l/=2 if l.length&1\n  l[l.length/2-1]\nend", "  l.sort!\n  l/=2 if l.length&1==0\
    \ else l.length\n  l[l.length/2].to_f\nend", "  l.sort!\n  l = l.size / 2\n  l\
    \ = (l[1..-1] + l[0..-2]) / 2\n  l\nend", "  l.sort!\n  l[l.length / 2]\nend",
  "  l.sort!\n  l[l.length / 2]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l[l.size / 2]\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length < 2 ? l[0] : (l[l.length / 2] + l[(l.length / 2) - 1]) / 2.0\nend",
  "  l.sort!\n  l/=2 if l.odd? else l.length\n  l[l.length/2-1]\nend", "  l.sort!\n\
    \  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2-1]\n\
    end", "  l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2].to_f\n\
    end", "  l.sort!\n  l = l / 2\n  l.sort!\n  l\nend", "  l.sort!\n  l[l.length\
    \ / 2]\nend", "  l.sort!\n  l/=2 if l.length&1==0 \n  l[l.length/2-1]\nend", " \
    \ l.sort!\n  l = l / 2\n  l.sort!\n  l\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n\
    \  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size\
    \ / 2).floor]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size /\
    \ 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size / 2)-1]\
    \ : l[l.size / 2]\nend", "  l.sort!\n  len = (l.length / 2).floor\n  len.times\
    \ { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len - 1).floor)\
    \ }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len.times { l.delete_at((len + 1).floor) }\n  len.times { l.delete_at((len\
    \ - 1).floor) }\n  len", "  l.sort!\n  l.length < 2 ? l[0] : (l.length / 2).floor\n\
    end", "  l.sort!\n  l = l.sort.reverse\n  l.length < 2 ? l[0] : (l.length / 2).floor\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l[l.length\
    \ / 2]\nend", "  l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2].to_f\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l / 2\n  l.sort!\n\
    \  l\nend", "  l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend", "  l.sort!\n\
    \  len = (l.length / 2).ceil\n  len.times { l.delete_at((len.floor + 1).floor)\
    \ }\n  len.times { l.delete_at((len.floor + 1).ceil) }\n  len.times { l.delete_at((len.ceil\
    \ + 1).floor) }\n  len.times { l.delete_at((len.ceil + 1).ceil) }\n  l.sort!\n\
    \  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).ceil) }\n  len.times { l.delete_at((len.ceil + 1).floor) }\n  len.times\
    \ { l.delete_at((len.ceil + 1).ceil) }\n  l.sort!\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).ceil) }\n  len.times\
    \ { l.delete_at((len.ceil + 1).floor) }\n  len.times { l.delete_at((len.ceil +\
    \ 1).ceil) }\n  l.sort!\n  len.times { l.delete_at((len.floor + 1).floor) }\n\
    \  len.times { l.delete_at((len.floor + 1).ceil) }\n  len.times { l.delete_at((len.ceil\
    \ + 1).floor) }\n  len.times { l.delete_at((len.ceil + 1).ceil) }\n  l.sort!\n\
    \  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).ceil) }\n  len.times { l.delete_at((len.ceil + 1).floor) }\n  len.times\
    \ { l.delete_at((len.ceil + 1).ceil) }\n  l.sort!\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).ceil) }\n  len.times\
    \ { l.delete_at((len.ceil + 1).floor) }\n  len.times { l.delete_at((len.ceil +\
    \ 1).ceil) }\n  l.sort!\n  len.times { l.delete_at((len.floor + 1).floor) }\n\
    \  len.times { ", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\n\
    end", "  l.sort!\n  l/=2 if l.length&1==0 # odd\n  l[l.length/2-1] if l.length&1==1\
    \ # even\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size\
    \ / 2)-1] : (l[l.size / 2] + l[l.size / 2 - 1]) / 2\nend", "  l.sort!\n  len =\
    \ (l.length / 2).ceil\n  len.times { |i| l[i] > l[len ? len - i : -1] and return\
    \ l[i] }\n  l[len ? len - 1 : -1]\nend", "  l.sort!\n  l/=2 if l.length&1==0 \n\
    \  l[l.length/2-1]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ % 2 == 0 ? l[(l.size / 2)-1] : (l[l.size / 2] + l[l.size / 2 - 1]) / 2\nend",
  "  l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l/=2 if l.length&1==0\n  l[l.length/2-1]\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0 \n  l[l.size / 2]\nend", "  l.sort!\n  l[l.length / 2]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l = l / 2\n  l.sort!\n  l\nend", "  l.sort!\n  l/=2 if l.length%2==0\n  l[l.length/2]\n\
    end", "  l.sort!\n  l.length < 2 ? l[0] : (l[l.length / 2] + l[(l.length / 2)\
    \ - 1]) / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size /\
    \ 2]\nend", "  l.sort!\n  len = (l.length / 2).floor\n  len.times { l.delete_at((l.length\
    \ / 2) - 1) }\n  len.times { l.delete_at((l.length / 2) + 1) }\n  l.length / 2\n\
    end", "  l.sort!\n  l = l / 2\n  l.sort!\n  l\nend", "  l.sort!\n  l.length!\n\
    \  if l.length % 2 == 0\n    l[(l.length / 2) - 1]\n  else\n    l[(l.length /\
    \ 2)]\n  end\nend", "  l.sort!\n  l[l.length / 2]\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend", "  l.sort!\n  l.length\n\
    \  l.length / 2\n  l[l.length / 2]\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l/=2 if l.length&1==0 then l.length>>1\
    \ else l.length/2\n  l[l.length/2-1]\nend", "  l.sort!\n  len = (l.length / 2).ceil\n\
    \  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times ", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length!\n  if l.length % 2 == 0\n    l.length / 2\n  else\n    (l.length\
    \ / 2) + 1\n  end\nend", "  l.sort!\n  l.length < 2 ? l[0] : (l.length / 2).floor\n\
    end", "  l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2-1]\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l/=2 if l.length&1\n  l[l.length/2-1]\nend", "  l.sort!\n  l/=2 if l.length%2==0\n\
    \  l[(l.length-1)/2]\nend", "  l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\n\
    end", "  l.sort!\n  l[l.length / 2]\nend", "  l.sort!\n  l = l.length if l.length\
    \ % 2 == 0 else l.length / 2\n  l.to_f / l\nend", "  l.sort!\n  l = l.sort.reverse\n\
    \  l.length / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ % 2 == 0 ? l[(l.size / 2)-1] : l[l.size / 2]\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l.length if l.length < 3 else l[1..-1]\n  l.length\
    \ / 2\nend", "  l.sort!\n  len = (l[-1]-l[0])/2\n  len.times { l.delete_at(l[0])\
    \ }\n  l[0]\nend", "  l.sort!\n  l/=2 if l.length&1==0 # even?\n  l[l.length/2-1]\n\
    end", "  l.sort!\n  l = l.sort\n  if l.length < 2\n    return l[0]\n  mid = l.length\
    \ / 2\n  if l.length % 2 == 0\n    return l[mid]\n  else\n    return (l[mid-1]\
    \ + l[mid]) / 2\nend", "  l.sort!\n  l/=2 if l.length%2==0\n  l[(l.length-1)/2]\n\
    end", "  l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend", "  l.sort!\n\
    \  l/=2 if l.length%2==0\n  l[l.length/2]\nend", "  l.sort!\n  l = l[1..-1] if\
    \ l.size % 2 == 0 \n  l[(l.size / 2).floor]\nend", "  l.sort!\n  l.length\n  l/2\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[(l.size / 2).floor]\n\
    end", "  l.sort!\n  l = l / 2\n  l.length\n  l.length == 1 ? l[0] : (l[l.length\
    \ / 2] + l[l.length / 2 - 1]) / 2\nend", "  l.sort!\n  len = (l.length / 2).ceil\n\
    \  len.times { |i| l[i] > l[len] ? len -= 1 : len }\n  len + 0.5\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l/=2 if\
    \ l.length&1==0 else l.length\n  l[l.length/2].to_f\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend", " \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[(l.size / 2).floor] + l[l.size\
    \ / 2]\nend", "  l.sort!\n  l = l / 2\n  l.sort!\n  l\nend", "  l.sort!\n  l/=2\
    \ if l.length&1\n  l[l.length/2-1]\nend", "  l.sort!\n  l[l.length / 2]\nend",
  "  l.sort!\n  len = (l.length / 2).floor\n  len.times { l.delete_at((len + 1).floor)\
    \ }\n  len.times { l.delete_at((len - 1).floor) }\n  len.times { l.delete_at((len\
    \ + 1).floor) }\n  len.times { l.delete_at((len - 1).floor) }\n  l.length == 0\
    \ ? l.first : l.first\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n\
    \  l.size / 2\nend", "  l.sort!\n  len = (l[0].length + l[1].length + l[2].length\
    \ + l[3].length + l[4].length).to_f\n  len.times { |i| l[i] = l[i].to_f }\n  len.to_f\
    \ / 4\nend", "  l.sort!\n  l.length == 0 ? nil : l[(l.length-1)/2]\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend", "  l.sort!\n\
    \  l[l.length / 2]\nend", "  l.sort!\n  l/=2 if l.length%2==0\n  l[l.length/2]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  len = (l.length / 2).ceil\n  len.times { |i| l[i] > l[len ? len - i : -1] and\
    \ return l[i] }\n  l[len ? len - 1 : 0]\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n\
    \  l.size / 2\nend", "  l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else\
    \ l.length/2\n  l[l.length/2]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2\
    \ == 0\n  l[(l.size / 2).floor]\nend", "  l.sort!\n  l = l[1..-1] if l.size %\
    \ 2 == 0\n  l.size / 2\nend", "  l.sort!\n  len = (l.length / 2).floor\n  len.times\
    \ do |i|\n    return l[i] if len > 1\n    l[i] = l[i] + l[i - 1] if len == 1\n\
    \  end\n  l[len / 2]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  l = l.length if l.length % 2 == 0 then l.length / 2\
    \ else l.length / 2 - 1\n  l.ceil\n  l[l/2]\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l.length if l.length\
    \ < 3 else l[1..-1]\n  l.length < 2 ? l.pop : l.length == 2 ? l.pop : (l.length\
    \ * 0.5 + l[l.length / 2]).to_f\nend", "  l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size/2-1]\nend", " \
    \ l.sort!\n  l/=2 if l.length%2==0\n  l[(l.length-1)/2]\nend", "  l.sort!\n  l.length!\n\
    \  if l.length % 2 == 0\n    l.length / 2\n  else\n    (l.length / 2) + 1\n  end\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\n\
    end", "  l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend", "  l.sort!\n\
    \  l/=2 if l.length&1\n  l[l.length/2-1]\nend", "  l.sort!\n  l = l.sort\n  l.length\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  len = (l.length / 2).floor\n  len.times { |i| l[i] > l[len ? len - i : -1]\
    \ and return l[i] }\n  l[len ? len - 1 : -1]\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0 \n  l[(l.size / 2).floor]\nend", "  l.sort!\n  l[l.length\
    \ / 2]\nend", "  l.sort!\n  l = l / 2\n  l.length\n  l.length == 1 ? l[0] : l[l.length\
    \ / 2]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l[l.length / 2]\nend", "  l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\n\
    end", "  l.sort!\n  l = l.length if l.length < 3 else 3\n  l.length\n  l = (l[1]+l[2]+l[3]).to_f\
    \ / 2\n  l\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l = l.length if l.length % 2 == 0 then l.length / 2 else l.length / 2 - 1\n\
    \  l[(l.length / 2) - 1]\nend", "  l.sort!\n  l/=2 if l.length%2==0\n  l[l.length/2]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l/=2 if l.odd?\n  l[-1]\nend", "  l.sort!\n  l = l / 2\n  l.sort!\n  l[-1]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l/=2 if l.length&1\n  l[l.length/2-1]\nend", "  l.sort!\n  l/=2 if l.length&1==0\
    \ then l.length>>1 else l.length/2\n  l[l.length/2]\nend", "  l.sort!\n  len =\
    \ (l.length / 2).ceil\n  len.times { |i| l[i] > l[len] ? l[i] = l[len] : l[i]\
    \ }\n  l[len]\nend", "  l.sort!\n  len = (l.length / 2).ceil\n  len.times do |i|\n\
    \    break if l[i] == l[len]\n    l[i] > l[len] ? len += 1 : len -= 1\n  end\n\
    \  l[len]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size /\
    \ 2).floor]\nend", "  l.sort!\n  l = l.length if l.length % 2 == 0 then l.length\
    \ / 2 else l.length / 2 - 1\n  l[l.length / 2]\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l[l.size / 2]\nend", "  l.sort!\n  l[l.length / 2]\nend", "  l.sort!\n\
    \  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n  l[l.length/2]\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).ceil]\nend", " \
    \ l.sort!\n  len = (l.length / 2).ceil\n  len.times { l.delete_at((len + 1).floor)\
    \ }\n  len.times { l.delete_at((len - 1).floor) }\n  l.length == 0 ? nil : l.first\n\
    end", "  l.sort!\n  l = l.length if l.length < 3 else l[1..-1]\n  l.length / 2\n\
    end", "  l.sort!\n  l = l / 2\n  l.sort!\n  l\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size % 2 == 0 ? l[(l.size/2).floor] : l[l.size/2]\nend", "  l.sort!\n\
    \  len = (l.length / 2).ceil\n  len.times { |i| l[i] > l[len] ? len -= 1 : len\
    \ }\n  len + 0.5\nend", "  l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else\
    \ l.length/2\n  l[l.length/2]\nend", "  l.sort!\n  len = (l.length / 2).ceil\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.", "  l.sort!\n  len = (l.length / 2).floor\n  len.times\
    \ { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len]\
    \ ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -=\
    \ 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times {\
    \ |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ?\
    \ len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1\
    \ }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i|\
    \ l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len\
    \ += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n\
    \  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i]\
    \ > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1\
    \ : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times\
    \ { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len]\
    \ ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -=\
    \ 1 }\n  len.times { |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times {\
    \ |i| l[i] > l[len] ? len += 1 : len -= 1 }\n  len.times { |i| l[i] > l[len] ?\
    \ len += ", "  l.sort!\n  l/=2 if l.length&1==0 then l.length>>1 else l.length/2\n\
    \  l[l.length/2-1]\nend", "  l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\n\
    end", "  l.sort!\n  len = (l[-1]-l[0])/2\n  len.times { l.delete_at(l[0]) }\n\
    \  l[0]\nend", "  l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend", "  l.sort!\n\
    \  len = (l.length / 2).floor\n  len.times { l.delete_at((len + 1).floor) }\n\
    \  len.times { l.delete_at((len - 1).floor) }\n  l.length\n  l.length == 0 ? nil\
    \ : l.first\nend", "  l.sort!\n  l/=2 if l.length&1\n  l[l.length/2-1]\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[l.size/2-1] : (l[l.size/2-1]\
    \ + l[l.size/2])/2\nend", "  l.sort!\n  l.length < 2 ? l[0] : (l[l.length / 2]\
    \ + l[(l.length / 2) - 1]) / 2.0\nend", "  l.sort!\n  l = l[1..-1] if l.size %\
    \ 2 == 0\n  l[(l.size / 2).ceil]\nend", "  l.sort!\n  l = l[1..-1] if l.size %\
    \ 2 == 0\n  l.size % 2 == 0 ? l[(l.size / 2)-1] : l[l.size / 2]\nend", "  l.sort!\n\
    \  l/=2 if l.length%2==0\n  l[l.length/2]\nend", "  l.sort!\n  l = l / 2\n  l.sort!\n\
    \  l[-1]\nend", "  l.sort!\n  l/=2 if l.length&1==0 else l.length\n  l[l.length/2]\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l/=2 if l.length&1==0\
    \ \n  l[l.length/2-1]\nend", "  l.sort!\n  l = l.length if l.length % 2 == 0 else\
    \ l.length / 2\n  l.ceil\n  l\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2\
    \ == 0 \n  l[l.size / 2]\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size / 2)-1] : (l[l.size\
    \ / 2], l[(l.size / 2)])[1]\nend", "  l.sort!\n  l = l.length if l.length < 3\
    \ else l[0..(l.length / 2)]\n  l.length / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size/2).floor] : ((l[l.size/2-1]\
    \ + l[l.size/2]) / 2).round\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  len = (l.length / 2).ceil\n  len.times do |i|\n   \
    \ if l[i] < l[len]\n      return l[i]\n    end\n  end\n  l[len]\nend", "  l.sort!\n\
    \  len = (l.length / 2).ceil\n  len.times { l.delete_at((len.floor - 1).floor)\
    \ }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor - 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor - 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor - 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ - 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ - 1).floor) }\n  len.times { l.delete_at((len.floor - 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor - 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor - 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ + 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor - 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ - 1).floor) }\n  len.times { l.delete_at((len.floor + 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times { l.delete_at((len.floor\
    \ - 1).floor) }\n  len.times { l.delete_at((len.floor - 1).floor) }\n  len.times\
    \ { l.delete_at((len.floor + 1).floor) }\n  len.times ", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length\n  l[(l.length\
    \ / 2).floor]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
