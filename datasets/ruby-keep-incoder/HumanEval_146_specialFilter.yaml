name: HumanEval_146_specialFilter
language: ruby
prompt: "# Write a function that takes an array of numbers as input and returns \n\
  # the number of elements in the array that are greater than 10 and both \n# first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# specialFilter([15,\
  \ -73, 14, -15]) => 1 \n# specialFilter([33, -2, -3, 45, 21, 109]) => 2\ndef specialFilter(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n\
  \    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5,\
  \ -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2,\
  \ candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43,\
  \ -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75,\
  \ 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n\
  \  end\nend\n"
completions: ["  count = 0\n  for i in nums\n    if i > 10 and i % 2 == 1 and i %\
    \ 2 != 0\n      count += 1\n    end\n  end\n  return count\nend", "  nums.count{|x|\
    \ x > 10 && x.odd? && x.odd? && x.odd? }\nend", "  nums.count{|x| x > 10 and x.odd?\
    \ and x.first % 2 == x.last % 2}\nend", "  count = 0\n  for i in nums\n    if\
    \ i > 10 and i % 2 == 1 and i % 2 != 0\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  nums.each do |num|\n    if num > 10 && num.to_s.chars.first(2).odd?\
    \ && num.to_s.chars.last(2).odd?\n      return num\n    end\n  end\n  0\nend",
  "  nums.inject(0) {|sum, num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 ==\
    \ 0 }\nend", "  nums.count { |x| x > 10 && x.odd? && x.odd? && x.odd? }\nend",
  "  nums.inject(0) do |sum, num|\n    if num > 10 && num % 2 == 1 && num % 2 == 0\n\
    \      sum += 1\n    end\n    sum\n  end\nend", "  count = 0\n  for i in nums\n\
    \    if i > 10 and i.odd? and i.odd?\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  nums.inject(0) { |sum, num| \n    sum += 1 if num > 10 && num\
    \ % 2 == 1 && num % 3 == 1\n    sum\n  }\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>", "  nums.inject(0) do |sum, num|\n    sum += 1 if num\
    \ > 10 && num % 1 == 0 && num % 2 == 1\n    sum\n  end\nend", "  nums.inject(0)\
    \ do |sum, num|\n    if num > 10 && num % 2 == 1 && num % 2 == 0\n      sum +=\
    \ num\n    end\n    sum\n  end\nend", "  nums.each do |num|\n    if num > 10 and\
    \ num.to_s.split('').first % 2 == 1 and num.to_s.split('').last % 2 == 1\n   \
    \   return num\n    end\n  end\nend", "  count = 0\n  nums.each do |num|\n   \
    \ if num > 10 && num.odd? && num.odd? && num.odd?\n      count += 1\n    end\n\
    \  end\n  count\nend", "  nums.each do |num|\n    if num > 10 && num.to_s.chars.first(2).odd?\
    \ && num.to_s.chars.last(2).odd?\n      return num\n    end\n  end\n  0\nend",
  "  nums.inject(0) { |sum, num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 ==\
    \ 1 }\nend", "  nums.inject(0) { |sum, num| sum + 1 if num > 10 && num % 2 ==\
    \ 1 && num % 2 == 0 }\nend", "  nums.count{|x| x > 10 && x.odd? && x.odd? && x.odd?}\n\
    end", "  nums.each do |num|\n    if num > 10 && num.to_s.split('').first % 2 ==\
    \ 1 && num.to_s.split('').last % 2 == 1\n      return num\n    end\n  end\nend",
  "  nums.count { |n| n > 10 && n % 2 == 0 && n % 1 == 1 }\nend", "  nums.inject(0)\
    \ { |sum, num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", " \
    \ nums.count { |x| x > 10 && x.odd? && x.odd? && x.odd? }\nend", "  nums.each\
    \ do |num|\n    if num > 10 && num.to_s.chars.first(2).odd? && num.to_s.chars.last(2).odd?\n\
    \      puts num\n    end\n  end\nend", "  nums.inject(0) { |sum, num| sum + 1\
    \ if num > 10 && num % 2 == 1 && num % 2 == 1 }\nend", "  nums.count { |x| x >\
    \ 10 && x.odd? && x.odd? && x.odd? }\nend", "  nums.inject(0) do |sum, num|\n\
    \    if num > 10\n      sum + 1 if num % 2 == 1 && num % 3 == 1\n    end\n  end\n\
    end", "  count = 0\n  nums.each do |num|\n    if num > 10 && num.odd? && num.odd?\
    \ && num.odd?\n      count += 1\n    end\n  end\n  count\nend", "  nums.count{|x|\
    \ x > 10 && x.odd? && x.odd?}\nend", "  count = 0\n  nums.each do |num|\n    if\
    \ num > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last % 2\
    \ == 1\n      count += 1\n    end\n  end\n  count\nend", "  nums.inject(0) { |sum,\
    \ num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  nums.inject(0)\
    \ do |sum, num|\n    if num > 10 && num % 2 == 1 && num % 2 == 0\n      sum +=\
    \ num\n    end\n    sum\n  end\nend", "  nums.inject(0) { |sum, num| \n    sum\
    \ += 1 if num > 10 and num % 2 == 1 and num % 2 == 0 \n    sum\n  }\nend", " \
    \ nums.count{ |n| n > 10 && n % 2 == 1 && n % 1 == 1 }\nend", "  nums.each do\
    \ |num|\n    if num > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last\
    \ % 2 == 1\n      puts num\n    end\n  end\nend", "  nums.inject(0) { |sum, num|\
    \ sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  count = 0\n\
    \  for i in nums\n    if i > 10 and i % 2 == 1 and i % 2 == 0\n      count +=\
    \ 1\n    end\n  end\n  return count\nend", "  nums.inject(0) do |sum, num|\n \
    \   sum += 1 if num > 10 and num % 1 == 0 and num % 2 == 1\n  end\nend", "  nums.count\
    \ { |x| x > 10 && x.odd? && x.to_s.chars.first(2).odd? }\nend", "  nums.inject(0)\
    \ do |sum, num|\n    if num > 10 && num % 2 == 1 && num % 2 == 0\n      sum +\
    \ 1\n    end\n  end\nend", "  nums.count { |n| n > 10 && n % 2 == 0 && n % 1 ==\
    \ 0 }\nend", "  nums.inject(0) { |sum, num| sum + 1 if num > 10 && num % 2 ==\
    \ 0 && num % 2 != 1 && num % 2 != 3 && num % 2 != 5 && num % 2 != 7 && num % 2\
    \ != 9 }\nend", "  nums.count { |x| x > 10 && x.odd? && x.odd? && x.odd? }\nend",
  "  count = 0\n  for i in nums\n    if i > 10 and nums.first % 2 == 1 and nums.last\
    \ % 2 == 1\n      count += 1\n    end\n  end\n  return count\nend", "  nums.each\
    \ do |num|\n    if num > 10\n      oddDigits = num.to_s.chars.map(&:to_i).select\
    \ { |x| x % 2 != 0 }\n      if oddDigits.first % 2 == 1 && oddDigits.last % 2\
    \ == 1\n        return num\n      end\n    end\n  end\nend", "  nums.inject(0)\
    \ do |sum, num|\n    if num > 10 && num % 2 == 1 && num % 2 == 0\n      sum +\
    \ 1\n    end\n  end\nend", "  count = 0\n  for i in nums\n    if i > 10 and nums.first\
    \ % 2 == 1 and nums.last % 2 == 1\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  nums.inject(0) { |sum, num| \n    sum += 1 if num > 10 && num\
    \ % 1 == 0 && num % 2 == 1\n    sum\n  }\nend", "  nums.each do |num|\n    if\
    \ num > 10 && num.odd? && num.odd? && num.odd?\n      return num\n    end\n  end\n\
    end", "  nums.inject(0) { |sum, num| sum + 1 if num > 10 && num % 2 == 1 && num\
    \ % 2 == 0 }\nend", "  nums.inject(0) do |sum, num|\n    if num > 10 && num.odd?\
    \ && num.odd?\n      sum += num\n    end\n    sum\n  end\nend", "  nums.each do\
    \ |num|\n    if num > 10 and num.odd? and num.odd?\n      puts \"#{num}\"\n  \
    \  end\n  end\nend", "  nums.count { |n| n > 10 && n % 2 == 1 && n % 1 == 1 }\n\
    end", "  nums.inject(0) { |sum, num| sum + 1 if num > 10 && num % 2 == 1 && num\
    \ % 2 == 1 }\nend", "  nums.inject(0) do |sum, num|\n    if num > 10 && num.to_s.chars.first(2).odd?\
    \ && num.to_s.chars.last(2).odd?\n      sum + 1\n    end\n  end\nend", "  nums.each\
    \ do |num|\n    if num > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last\
    \ % 2 == 1\n      puts num\n    end\n  end\nend", "  nums.each do |num|\n    if\
    \ num > 10 && num.to_s.chars.first(2).odd? && num.to_s.chars.last(2).odd?\n  \
    \    puts num\n    end\n  end\nend", "  nums.inject(0) { |sum, num| sum + 1 if\
    \ num > 10 && num % 2 == 1 && num % 2 == 1 }\nend", "  nums.inject(0) { |sum,\
    \ num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 1 }\nend", "  count =\
    \ 0\n  nums.each do |num|\n    if num > 10 && num.to_s.split('').first % 2 ==\
    \ 1 && num.to_s.split('').last % 2 == 1\n      count += 1\n    end\n  end\n  count\n\
    end", "  nums.count { |n| n > 10 && n % 2 == 0 && n % 1 == 0 }\nend", "  nums.inject(0)\
    \ do |sum, num|\n    sum += 1 if num > 10 and num % 2 == 0 and num % 2 != 0\n\
    \    sum\n  end\nend", "  nums.inject(0) do |sum, num|\n    if num > 10 && num\
    \ % 1 == 0 && num % 2 == 1\n      sum += num\n    end\n    sum\n  end\nend", " \
    \ nums.count { |x| x > 10 && x.odd? && x.odd? && x.odd? }\nend", "  nums.each\
    \ do |num|\n    if num > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last\
    \ % 2 == 1\n      return num\n    end\n  end\nend", "  nums.inject(0) do |sum,\
    \ num|\n    if num > 10\n      sum + 1\n    elsif num > 0 && num % 2 == 1 && num\
    \ % 10 == 1\n      sum + 1\n    end\n  end\nend", "  nums.each do |num|\n    if\
    \ num > 10 && num.to_s.chars.first(2).odd? && num.to_s.chars.last(2).odd?\n  \
    \    puts num\n    end\n  end\nend", "  nums.inject(0) { |sum, num| sum + 1 if\
    \ num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  nums.inject(0) { |sum,\
    \ num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  nums.count{|x|\
    \ x > 10 && x.odd? && x.odd? && x.odd?}\nend", "  nums.inject(0) { |sum, num|\
    \ sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  count = 0\n\
    \  for i in nums\n    if i > 10 and i % 2 == 1 and i % 2 != 0\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "  nums.count { |x| x > 10 && x.odd? && x.first\
    \ % 2 == 1 && x.last % 2 == 1 }\nend", "  nums.inject(0) do |sum, num|\n    if\
    \ num > 10\n      sum += 1 if num % 2 == 1 && num % 100 != 0\n    end\n    sum\n\
    \  end\nend", "  nums.each do |num|\n    if num > 10 && num.to_s.split('').first\
    \ % 2 == 1 && num.to_s.split('').last % 2 == 1\n      puts num\n    end\n  end\n\
    end", "  nums.count { |x| x > 10 && x.odd? && x.first % 2 == 1 && x.last % 2 ==\
    \ 1 }\nend", "  nums.count{|x| x > 10 && x.odd? && x.odd? && x.odd? }\nend", " \
    \ nums.each do |num|\n    if num > 10 && num.to_s.split('').first % 2 == 1 &&\
    \ num.to_s.split('').last % 2 == 1\n      return num\n    end\n  end\n  return\
    \ 0\nend", "  count = 0\n  for i in nums\n    if i > 10 && i.odd? && i.first %\
    \ 2 == 1 && i.last % 2 == 1\n      count += 1\n    end\n  end\n  count\nend",
  "  nums.count { |n| n > 10 && n.odd? && n.odd? && n.odd? }\nend", "  nums.each do\
    \ |num|\n    if num > 10 and num.odd? and num.odd?\n      puts \"#{num}\"\n  \
    \  end\n  end\nend", "  count = 0\n  for i in nums\n    if i > 10 and (i mod 2\
    \ != 0 and i mod 2 != 1)\n      count += 1\n    end\n  end\n  count\nend", " \
    \ count = 0\n  for i in nums\n    if i > 10 and i % 2 == 1 and i % 2 != 0\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  nums.count{|x| x > 10 && x.odd?\
    \ && x.odd? && x.odd? }\nend", "  nums.inject(0) { |sum, num| sum + 1 if num >\
    \ 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  nums.inject(0) {|sum, el| sum\
    \ + 1 if el > 10 && el % 2 == 1 && el % 2 == 0 }\nend", "  nums.each do |num|\n\
    \    if num > 10 && num.to_s.chars.first(2).odd? && num.to_s.chars.last(2).odd?\n\
    \      return num\n    end\n  end\nend", "  nums.each do |num|\n    if num > 10\n\
    \      oddFirst = num % 10\n      oddLast = num % 10\n      oddFirst = oddFirst\
    \ % 2 != 0\n      oddLast = oddLast % 2 != 0\n      oddFirst = oddFirst && oddLast\n\
    \      oddLast = oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n \
    \     oddLast = oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n  \
    \    oddLast = oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n   \
    \   oddLast = oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n    \
    \  oddLast = oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n     \
    \ oddLast = oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n      oddLast\
    \ = oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n      oddLast =\
    \ oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n      oddLast = oddFirst\
    \ && oddLast\n      oddFirst = oddFirst && oddLast\n      oddLast = oddFirst &&\
    \ oddLast\n      oddFirst = oddFirst && oddLast\n      oddLast = oddFirst && oddLast\n\
    \      oddFirst = oddFirst && oddLast\n      oddLast = oddFirst && oddLast\n \
    \     oddFirst = oddFirst && oddLast\n      oddLast = oddFirst && oddLast\n  \
    \    oddFirst = oddFirst && oddLast\n      oddLast = oddFirst && oddLast\n   \
    \   oddFirst = oddFirst && oddLast\n      oddLast = oddFirst && oddLast\n    \
    \  oddFirst = oddFirst && oddLast\n      oddLast = oddFirst && oddLast\n     \
    \ oddFirst = oddFirst && oddLast\n      oddLast = oddFirst && oddLast\n      oddFirst\
    \ = oddFirst && oddLast\n      oddLast = oddFirst && oddLast\n      oddFirst =\
    \ oddFirst && oddLast\n      oddLast = oddFirst && oddLast\n      oddFirst = oddFirst\
    \ && oddLast\n      oddLast = oddFirst && oddLast\n      oddFirst = oddFirst &&\
    \ oddLast\n      oddLast = oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n\
    \      oddLast = oddFirst && oddLast\n      oddFirst = oddFirst && oddLast\n \
    \     oddLast = oddFirst && oddLast\n      ", "  count = 0\n  for i in nums\n\
    \    if i > 10 and i % 2 != 0\n      count += 1\n    end\n  end\n  count\nend",
  "  nums.count{ |x| x > 10 && x.odd? && x.odd? && x.odd? }\nend", "  nums.inject(0)\
    \ { |sum, num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", " \
    \ nums.inject(0) do |sum, num|\n    sum + 1 if num > 10 && num % 2 == 0 && num\
    \ % 2 != 0 && num % 1 != 0\n  end\nend", "  nums.inject(0) {|sum, num| sum + 1\
    \ if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  nums.inject(0) { |sum,\
    \ num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  nums.each\
    \ do |num|\n    if num > 10 and num.to_s.chars.first(2).odd? and num.to_s.chars.last(2).odd?\n\
    \      return num\n    end\n  end\n  return nil\nend", "  nums.count{|x| x > 10\
    \ && x.odd? && x.odd? && x.odd?}\nend", "  count = 0\n  nums.each do |num|\n \
    \   if num > 10 && num % 2 == 1 && num % 2 == 0\n      count += 1\n    end\n \
    \ end\n  count\nend", "  count = 0\n  nums.each do |num|\n    if num > 10 && num.to_s.chars.first(2).odd?\
    \ && num.to_s.chars.last(2).odd?\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  for i in nums\n    if i > 10 && i.odd? && i.first % 2 ==\
    \ 1 && i.last % 2 == 1\n      count += 1\n    end\n  end\n  return count\nend",
  "  nums.each do |num|\n    if num > 10 and num.odd? and num.odd? and num.odd?\n\
    \      return nums.size\n    end\n  end\n  return 0\nend", "  nums.each do |num|\n\
    \    if num > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last\
    \ % 2 == 1\n      puts num\n    end\n  end\nend", "  nums.count{|x| x > 10 &&\
    \ x.odd? && x.odd? && x.odd? }\nend\n</cell>\n<cell>", "  count = 0\n  for i in\
    \ nums\n    if i > 10 and nums.first % 2 == 1 and nums.last % 2 == 1\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  nums.count{|x| x > 10 && x.odd?\
    \ && x.odd? && x.odd? }\nend", "  count = 0\n  for i in nums\n    if i > 10 and\
    \ i.odd? and i.first % 2 == 1 and i.last % 2 == 1\n      count += 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  for i in nums\n    if i > 10 and nums.first\
    \ % 2 == 1 and nums.last % 2 == 1\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  nums.each do |num|\n    if num > 10 and num.odd? and num.odd?\
    \ and num.odd?\n      puts \"#{num}\"\n    end\n  end\nend", "  nums.inject(0)\
    \ do |sum, num|\n    sum + 1 if num > 10 && num % 1 == 0 && num % 2 == 1\n  end\n\
    end", "  nums.each do |num|\n    if num > 10 and num.odd? and num.odd?\n     \
    \ puts num\n    end\n  end\nend", "  nums.count { |x| x > 10 && x.odd? && x.odd?\
    \ && x.odd? }\nend", "  nums.each do |num|\n    if num > 10 and num.odd? and num.odd?\
    \ and num.odd?\n      return nums.size\n    end\n  end\nend", "  nums.count{|x|\
    \ x > 10 && x.odd? && x.first % 2 == 1 && x.last % 2 == 1}\nend", "  count = 0\n\
    \  for i in nums\n    if i > 10 and i.odd? and i.odd?\n      count += 1\n    end\n\
    \  end\n  return count\nend", "  nums.each do |num|\n    if num > 10 && num.odd?\
    \ && num.odd? && num.odd?\n      puts num\n    end\n  end\nend", "  nums.inject(0)\
    \ {|sum, num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", " \
    \ nums.inject(0) { |sum, num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 ==\
    \ 1 }\nend", "  nums.each do |num|\n    if num > 10 and num.to_s.split('').first\
    \ % 2 == 1 and num.to_s.split('').last % 2 == 1\n      puts num\n    end\n  end\n\
    end", "  nums.inject(0) { |sum, el| el > 10 && el % 2 == 1 && el % 2 == 1 ? sum\
    \ + 1 : sum }\nend", "  nums.inject(0) do |sum, num|\n    sum += 1 if num > 10\
    \ && num % 2 == 1 && num % 2 == 0\n    sum\n  end\nend", "  nums.count { |num|\
    \ num > 10 && num.odd? && num.odd? && num.odd? }\nend", "  nums.count { |x| x\
    \ > 10 && x.odd? && x.to_s.chars.first(2).odd? }\nend", "  nums.each do |num|\n\
    \    if num > 10 && num.to_s.chars.first(2).odd? && num.to_s.chars.last(2).odd?\n\
    \      puts num\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't answer the question at all. You're just rewriting the same code in a\
    \ different way. Also, you don't need `num.to_s.chars.first(2).odd?` - `num.to_s.chars.first(2).odd?`\
    \ will work just fine.\n<|/ c |>\n<| c |>\nI agree with you. My answer was more\
    \ to show how it could be done with Ruby methods. I didn't want to rewrite the\
    \ code in the way the OP was doing it.\n<|/ c |>\n<| c |>\nI understand that,\
    \ but your answer doesn't answer the question at all. You're just rewriting the\
    \ same code in a different way. Also, you don't need `num.to_s.chars.first(2).odd?`\
    \ - `num.to_s.chars.first(2).odd?` will work just fine.\n<|/ c |>\n<| c |>\nI\
    \ agree with you. I just wanted to show how it could be done with Ruby methods.\
    \ I didn't want to rewrite the code in the way the OP was doing it.\n<|/ c |>\n\
    <| c |>\nI understand that, but your answer doesn't answer the question at all.\
    \ You're just rewriting the same code in a different way. Also, you don't need\
    \ `num.to_s.chars.first(2).odd?` - `num.to_s.chars.first(2).odd?` will work just\
    \ fine.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  nums.each do |num|\n    if num\
    \ > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last % 2 ==\
    \ 1\n      puts num\n    end\n  end\nend", "  nums.each do |num|\n    if num >\
    \ 10 and num.odd? and num.odd? and num.odd?\n      return nums.length\n    end\n\
    \  end\nend", "  nums.each do |num|\n    if num > 10 && num.odd? && num.odd? &&\
    \ num.odd?\n      return num\n    end\n  end\nend", "  nums.inject(0) do |sum,\
    \ num|\n    if num > 10 && num % 1 == 0 && num % 2 == 1\n      sum += num\n  \
    \  end\n    sum\n  end\nend", "  nums.inject(0) { |sum, num| sum + 1 if num >\
    \ 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  nums.count{ |n| n > 10 && n %\
    \ 2 == 0 && n % 1 == 0 }\nend", "  count = 0\n  for i in nums\n    if i > 10 and\
    \ nums.first % 2 == 1 and nums.last % 2 == 1\n      count += 1\n    end\n  end\n\
    \  count\nend", "  nums.count{|x| x > 10 && x.odd? && x.odd? && x.odd? }\nend",
  "  nums.inject(0) do |sum, num|\n    sum += 1 if num > 10 && num % 1 == 0 && num\
    \ % 2 == 1\n  end\nend", "  nums.count { |n| n > 10 && n.odd? && n.odd? && n.odd?\
    \ }\nend", "  nums.each do |num|\n    if num > 10 and num.to_s.split('').first\
    \ % 2 == 1 and num.to_s.split('').last % 2 == 1\n      return num\n    end\n \
    \ end\nend", "  nums.inject(0) do |sum, num|\n    if num > 10 && num % 1 == 0\
    \ && num % 2 == 1\n      sum + 1\n    end\n  end\nend", "  nums.inject(0) { |sum,\
    \ num| \n    sum += 1 if num > 10 && num % 2 == 0 && num % 2 != 0 && num % 1 !=\
    \ 0\n    sum\n  }\nend", "  nums.each do |num|\n    if num > 10 && num.to_s.split('').first\
    \ % 2 == 1 && num.to_s.split('').last % 2 == 1\n      puts \"#{num}\"\n    end\n\
    \  end\nend", "  nums.each do |num|\n    if num > 10 && num.odd? && num.odd? &&\
    \ num.odd?\n      puts \"#{num}\"\n    end\n  end\nend", "  count = 0\n  for i\
    \ in nums\n    if i > 10 and i.odd? and i.first % 2 == 1 and i.last % 2 == 1\n\
    \      count += 1\n    end\n  end\n  return count\nend", "  nums.each do |num|\n\
    \    if num > 10 && num.to_s.chars.first(2).odd? && num.to_s.chars.last(2).odd?\n\
    \      return num\n    end\n  end\n  return nil\nend", "  nums.inject(0) do |sum,\
    \ num|\n    sum + 1 if num > 10 && num % 1 == 0 && num % 2 == 1\n  end\nend",
  "  nums.inject(0) do |sum, num|\n    if num > 10 && num % 2 == 1 && num % 2 != 0\n\
    \      sum += num\n    end\n    sum\n  end\nend", "  nums.each do |num|\n    if\
    \ num > 10 and num.odd? and num.odd? and num.odd?\n      puts num\n    end\n \
    \ end\nend", "  nums.each do |num|\n    if num > 10 && num.to_s.split('').first\
    \ % 2 == 1 && num.to_s.split('').last % 2 == 1\n      puts num\n    end\n  end\n\
    end", "  count = 0\n  for i in nums\n    if i > 10 and i.odd? and i.first % 2\
    \ == 1 and i.last % 2 == 1\n      count += 1\n    end\n  end\n  count\nend", " \
    \ nums.each do |num|\n    if num > 10 and num.odd? and num.odd? and num.odd?\n\
    \      return nums.size\n    end\n  end\n  return 0\nend", "  count = 0\n  for\
    \ i in nums\n    if i > 10 && i.odd? && i.odd?\n      count += 1\n    end\n  end\n\
    \  count\nend", "  nums.each do |num|\n    if num > 10 && num.odd? && num.odd?\
    \ && num.odd?\n      return nums.length\n    end\n  end\nend", "  nums.count{|x|\
    \ x > 10 && x.odd? && x.odd? && x.odd? }\nend", "  nums.each do |num|\n    if\
    \ num > 10 && num.odd? && num.odd? && num.odd?\n      return nums.length\n   \
    \ end\n  end\nend", "  nums.inject(0) { |sum, num| sum + 1 if num > 10 && num\
    \ % 2 == 1 && num % 2 == 0 }\nend", "  nums.each do |num|\n    if num > 10 and\
    \ num.to_s.chars.first(2).odd? and num.to_s.chars.last(2).odd?\n      puts num\n\
    \    end\n  end\nend", "  nums.count { |x| x > 10 && x.odd? && x.odd? && x.odd?\
    \ }\nend", "  nums.count{ |x| x > 10 && x.odd? && x.first % 2 == x.last % 2 }\n\
    end", "  nums.each do |num|\n    if num > 10 && num.to_s.split('').first % 2 ==\
    \ 1 && num.to_s.split('').last % 2 == 1\n      puts num\n    end\n  end\nend",
  "  nums.each do |num|\n    if num > 10 and num.odd? and num.odd? and num.odd?\n\
    \      return nums.length\n    end\n  end\nend", "  nums.inject(0) { |sum, num|\
    \ sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 1 }\nend", "  nums.inject(0)\
    \ do |sum, num|\n    sum += 1 if num > 10 && num % 2 == 1 && num % 2 == 0\n  end\n\
    end", "  nums.count { |num| num > 10 && num.to_s.split(//).all? { |x| x.odd? }\
    \ }\nend", "  nums.each do |num|\n    if num > 10 && num.to_s.split('')[0].odd?\
    \ && num.to_s.split('')[-1].odd?\n      puts num\n    end\n  end\nend", "  count\
    \ = 0\n  nums.each do |num|\n    if num > 10 && num.to_s.split('').first % 2 ==\
    \ 1 && num.to_s.split('').last % 2 == 1\n      count += 1\n    end\n  end\n  count\n\
    end", "  nums.each do |num|\n    if num > 10 && num.to_s.split('').first % 2 ==\
    \ 1 && num.to_s.split('').last % 2 == 1\n      puts num\n    end\n  end\nend",
  "  nums.each do |num|\n    if num > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last\
    \ % 2 == 1\n      return num\n    end\n  end\nend", "  count = 0\n  nums.each\
    \ do |num|\n    if num > 10 && num.to_s.chars.first[1..-1].odd?\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "  nums.inject(0) do |sum, num|\n    if num\
    \ > 10 && num % 2 == 1 && num % 2 == 0\n      sum += num\n    end\n    sum\n \
    \ end\nend", "  nums.inject(0) { |sum, num| sum + 1 if num > 10 && num % 2 ==\
    \ 1 && num % 2 == 1 }\nend", "  nums.count{|x| x > 10 && x.odd? && x.odd? && x.odd?\
    \ }\nend", "  nums.count { |x| x > 10 && x.odd? && x.odd? && x.odd? }\nend", " \
    \ nums.count { |x| x > 10 && x.odd? && x.odd? && x.odd? }\nend", "  nums.inject(0)\
    \ { |sum, num| \n    if num > 10 && num.to_s.chars.first(2).odd? && num.to_s.chars.last(2).odd?\n\
    \      sum + 1\n    end \n  }\nend", "  nums.inject(0) { |sum, num| \n    if num\
    \ > 10 && num % 1 == 0 && num % 2 == 1\n      sum += 1 \n    end\n    sum\n  }\n\
    end", "  nums.inject(0) do |sum, num|\n    if num > 10 && num % 1 == 0 && num\
    \ % 2 == 1\n      sum + 1\n    end\n  end\nend", "  nums.inject(0) do |sum, num|\n\
    \    if num > 10\n      sum += 1 if num % 2 == 1 && num % 10 == 1 && num % 100\
    \ != 11\n    end\n    sum\n  end\nend", "  nums.each do |num|\n    if num > 10\
    \ && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last % 2 == 1\n \
    \     return num\n    end\n  end\nend", "  nums.each do |num|\n    if num > 10\
    \ and num.odd? and num.odd? and num.odd?\n      return nums.size\n    end\n  end\n\
    end", "  nums.each do |num|\n    if num > 10 && num.to_s.split('').first % 2 ==\
    \ 1 && num.to_s.split('').last % 2 == 1\n      puts num\n    end\n  end\nend",
  "  nums.each do |num|\n    if num > 10 and num.to_s.split('').first % 2 == 1 and\
    \ num.to_s.split('').last % 2 == 1\n      puts num\n    end\n  end\nend", "  nums.each\
    \ do |num|\n    if num > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last\
    \ % 2 == 1\n      return num\n    end\n  end\nend", "  count = 0\n  for i in nums\n\
    \    if i > 10 and i % 2 == 1 and i % 2 != 0\n      count += 1\n    end\n  end\n\
    \  return count\nend", "  nums.each do |num|\n    if num > 10 && num.odd? && num.odd?\
    \ && num.odd?\n      return nums.size\n    end\n  end\nend", "  nums.count { |x|\
    \ x > 10 && x.odd? && x.first % 2 == 1 && x.last % 2 == 1 }\nend", "  nums.count\
    \ { |x| x > 10 && x.odd? && x.first % 2 == 1 && x.last % 2 == 1 }\nend", "  nums.inject(0)\
    \ do |sum, num|\n    sum + 1 if num > 10 && num % 1 == 0 && num % 2 == 1\n  end\n\
    end", "  nums.each do |num|\n    if num > 10 && num.to_s.chars.first(2).odd? &&\
    \ num.to_s.chars.last(2).odd?\n      return num\n    end\n  end\n  return 0\n\
    end", "  nums.inject(0) { |sum, num| sum + 1 if num > 10 && num % 2 == 1 && num\
    \ % 2 == 0 }\nend", "  nums.each do |num|\n    if num > 10 and num.odd? and num.odd?\
    \ and num.odd?\n      return num\n    end\n  end\n  return 0\nend", "  nums.count\
    \ { |n| n > 10 && n % 2 == 0 && n % 1 == 1 }\nend", "  nums.each do |num|\n  \
    \  if num > 10 && num.to_s.split('')[0].odd? && num.to_s.split('')[-1].odd?\n\
    \      puts \"#{num}\"\n    end\n  end\nend", "  count = 0\n  for i in nums\n\
    \    if i > 10 and i.odd? and i.odd?\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  nums.count { |x| x > 10 && x.odd? && x.odd? && x.odd? }\nend",
  "  nums.inject(0) { |sum, num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 ==\
    \ 0 }\nend\n</cell>\n<cell>", "  nums.count { |x| x > 10 && x.odd? && x.first\
    \ % 2 == 1 && x.last % 2 == 1 }\nend", "  nums.count { |n| n > 10 && n % 2 ==\
    \ 0 && n % 1 == 1 }\nend", "  nums.each do |num|\n    if num > 10 and num.odd?\
    \ and num.odd? and num.odd?\n      puts num\n    end\n  end\nend", "  nums.each\
    \ do |num|\n    if num > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last\
    \ % 2 == 1\n      puts num\n    end\n  end\nend", "  nums.inject(0) { |sum, num|\
    \ sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", "  nums.inject(0)\
    \ { |sum, num| sum + 1 if num > 10 && num % 2 == 1 && num % 2 == 0 }\nend", " \
    \ nums.inject(0) { |sum, num| \n    if num > 10 && num % 2 == 1 && num % 2 ==\
    \ 0\n      sum += 1 \n    end\n    sum\n  }\nend", "  count = 0\n  for i in nums\n\
    \    if i > 10 and i.odd? and i.first % 2 == 1 and i.last % 2 == 1\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  nums.count{|n| n > 10 && n % 2 == 0\
    \ && n % 1 == 1}\nend", "  count = 0\n  nums.each do |num|\n    if num > 10 and\
    \ num.odd? and num.odd?\n      count += 1\n    end\n  end\n  count\nend", "  nums.inject(0)\
    \ do |sum, num|\n    if num > 10 && num % 2 == 1 && num % 2 == 0\n      sum +\
    \ 1\n    end\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
