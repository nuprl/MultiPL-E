name: HumanEval_152_compare
language: ruby
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\ndef\
  \ compare(game, guess)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
  \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
  \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3,\
  \ 5], [-1, 2, 3, 4]))\n  end\nend\n"
completions: ["  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n\
    \  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n    if guess\
    \ == game\n      result << 0\n    elsif guess > game\n      result << guess.length\n\
    \    elsif guess < game\n      result << guess.length + guess.length\n    end\n\
    \    i += 1\n  end\n  result\nend", "    score = 0\n    guesses = 0\n    guesses_correct\
    \ = 0\n    \n    game_size = len(game)\n    guess_size = len(guess)\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "  game.length == guess.length\n  game.length.times\
    \ do |i|\n    game[i] != guess[i] ? game[i] += guess[i] - game[i] : game[i] =\
    \ 0\n  end\n  game\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer. I am not allowed to use any loops. I should use only recursion.\n<|/\
    \ c |>\n<| c |>\nI added a recursive solution to my answer\n<|/ c |>\n<| c |>\n\
    Thank you for your answer. I am not allowed to use any loops. I should use only\
    \ recursion.\n<|/ c |>\n<| c |>\nI added a recursive solution to my answer\n<|/\
    \ c |>\n<| a tags=ruby,recursion |>\n<code>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game\
    \ = game[i]\n    if guess == game\n      result[i] = 0\n    else\n      result[i]\
    \ = abs(guess - game)\n    i += 1\n  end\n  result\nend", "  game.length == guess.length\n\
    \  game.each_with_index do |score, index|\n    guess[index] == score ? 0 : (guess[index]\
    \ - score)\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much\
    \ for your help. I really appreciate it. I will try this out and let you know\
    \ how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI ran your code, and it worked\
    \ perfectly. Thank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nYou're\
    \ welcome! If this answer solved your problem, please mark it as accepted (click\
    \ the check mark next to it). That way, others know that you've been (sufficiently)\
    \ helped.\n<|/ c |>\n<| c |>\nI did that. Thank you so much!\n<|/ c |>\n<| a |>\n\
    <code>", "    game = game.sort\n    guess = guess.sort\n    diff = []\n    i =\
    \ 0\n    while i < guess.length\n        diff = diff + [guess[i] - game[i]]\n\
    \        i = i + 1\n    return diff\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  game.length == guess.length\n  result = []\n  i = 0\n  while i < game.length\n\
    \    guess = guess[i]\n    diff = guess - game[i]\n    if diff != 0\n      result.push(diff)\n\
    \    i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>", "  game.length\
    \ == guess.length\n  game.each_with_index do |score, index|\n    guess[index]\
    \ == score ? 0 : (guess[index] - score)\n  end\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  for i in 0...guess.length\n    diff = guess[i]\
    \ - game[i]\n    if diff < 0\n      diff *= -1\n    result << diff\n  end\n  result\n\
    end", "  game = game.sort\n  guess = guess.sort\n  game.length == guess.length\n\
    \  result = []\n  i = 0\n  while i < game.length\n    if game[i] != guess[i]\n\
    \      result[i] = abs(game[i] - guess[i])\n      i += 1\n    else\n      result[i]\
    \ = 0\n    end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    if guess[i] == game[i]\n\
    \      i += 1\n    else\n      result[i] = abs(guess[i] - game[i])\n      i +=\
    \ 1\n    end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  for i in 0...game.length\n    if game[i] == guess[i]\n     \
    \ result.push(0)\n    else\n      result.push(abs(game[i] - guess[i]))\n    end\n\
    \  end\n  return result\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n      result.push(0)\n\
    \    else\n      result.push(abs(game[i] - guess[i]))\n    end\n    i += 1\n \
    \ end\n  result\nend\n</cell>\n<code language=julia-1.5>", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    diff\
    \ = guess[i] - game[i]\n    if diff != 0\n      result.push(diff)\n    i += 1\n\
    \  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ and guess[j] == game[i]\n      j += 1\n    result.push(j - i)\n    i += 1\n\
    \  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  for i in 0...guess.length\n    diff = guess[i] - game[i]\n    if diff\
    \ < 0\n      diff *= -1\n    result.push(diff)\n  end\n  return result\nend\n\
    </cell>\n<code language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game\
    \ = game[i]\n    if guess == game\n      result.push(0)\n      i += 1\n    elsif\
    \ guess < game\n      result.push(abs(guess - game))\n      i += 1\n    else\n\
    \      result.push(abs(guess - game))\n      i += 1\n    end\n  end\n  result\n\
    end\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n\
    \  game.length == guess.length\n  result = []\n  i = 0\n  while i < game.length\n\
    \    diff = game[i] - guess[i]\n    if diff != 0\n      result.push(diff)\n  \
    \  end\n    i += 1\n  end\n  result\nend", "    game = game.sort\n    guess =\
    \ guess.sort\n    diff = []\n    i = 0\n    while i < guess.length\n        diff\
    \ = diff + [guess[i] - game[i]]\n        i += 1\n    return diff\nend", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    j = i\n    while j < guess.length and guess[j] == game[i]\n      j += 1\n\
    \    if j == guess.length\n      result << 0\n    else\n      result << (guess[j]\
    \ - game[i])\n    end\n    i += 1\n  end\n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  game.each_with_index do |score, index|\n\
    \    guess[index] == score ? result[index] = 0 : result[index] = abs(guess[index]\
    \ - score)\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    I like your solution, but I believe that `game` and `guess` should be `Array`\
    \ instead of `Array` of `Array`\n<|/ c |>\n<| c |>\nYes, I agree. I've edited\
    \ my answer to reflect that.\n<|/ c |>\n<| c |>\nThanks for the answer! I like\
    \ it a lot, but I'm having trouble understanding how it works. Could you explain\
    \ how it works? I'm new to Ruby, and I'm having a hard time understanding how\
    \ it works.\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for the explanation! I understand it now!\n<|/ c |>\n\
    <| a tags=ruby,arrays |>\n<code>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ && game[j] == guess[i]\n      j += 1\n    result.push(j - i)\n    i += 1\n \
    \ end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n\
    \  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n      i += 1\n\
    \    else \n      result.push(guess[i] - game[i])\n      i += 1\n  end\n  result\n\
    end\n</cell>\n<code language=julia-1.0>", "  game.length == guess.length\n  game.length.times\
    \ do |i|\n    game[i] != guess[i] ? game[i] += guess[i] - game[i] : game[i] =\
    \ 0\n  end\n  game\nend", "  game.length == guess.length\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? 0 : (guess[index] - score)\n\
    \  end\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I believe that\
    \ `guess[index] == score ? 0 : (guess[index] - score)` can be simplified to `guess[index]\
    \ - score`.\n<|/ c |>\n<| c |>\nYes, I agree. Thanks for pointing that out. I've\
    \ edited my answer to reflect that.\n<|/ c |>\n<| a dscore=1 |>\nI believe that\
    \ your solution can be simplified to:\n<code>", "  game = game.sort\n  guess =\
    \ guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if game[i]\
    \ == guess[i]\n      result[i] = 0\n      i += 1\n    elsif game[i] > guess[i]\n\
    \      result[i] = game[i] - guess[i]\n      i += 1\n    else\n      result[i]\
    \ = guess[i] - game[i]\n      i += 1\n  end\n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  game.length == guess.length\n  result = []\n  i = 0\n\
    \  while i < game.length\n    diff = game[i] - guess[i]\n    if diff != 0\n  \
    \    result[i] = diff\n      i += 1\n    else\n      result[i] = 0\n    end\n\
    \  end\n  result\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] == guess[i]\n      i += 1\n    else\n      result.push(guess[i]\
    \ - game[i])\n      i += 1\n    end\n  end\n  return result\nend\n</cell>\n<code\
    \ language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  game.each_with_index do |score, index|\n    guess = guess[index]\n   \
    \ if guess == score\n      result << 0\n    elsif guess > score\n      result\
    \ << abs(guess - score)\n    else\n      result << abs(score - guess)\n    end\n\
    \  end\n  result\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I did\
    \ some testing and it seems that your solution is more efficient than mine. My\
    \ solution took about 1.5 seconds to run while yours took about 0.3 seconds. I\
    \ guess this is because you used the each_with_index method which I didn't know\
    \ about. Thanks again!\n<|/ c |>\n<| c |>\nYes, `each_with_index` is very useful.\
    \ `each_with_index` iterates over an array and passes the current index and the\
    \ current element to the block. `index` is the current index and `score` is the\
    \ current element. `each_with_index` also takes care of incrementing the index\
    \ for you. `each_with_index` also takes care of decrementing the index for you.\
    \ `index` starts at `0` and increments by 1 for each element in the array. `score`\
    \ starts at `0` and increments by 1 for each element in the array. `index` starts\
    \ at `0` and decrements by 1 for each element in the array. `score` starts at\
    \ `0` and decrements by 1 for each element in the array. `index` starts at `1`\
    \ and increments by 1 for each element in the array. `score` starts at `1` and\
    \ increments by 1 for each element in the array. `index` starts at `1` and decrements\
    \ by 1 for each element in the array. `score` starts at `1` and decrements by\
    \ 1 for each element in the array. `index` starts at `2` and increments by 1 for\
    \ each element in the array. `score` starts at `2` and increments by 1 for each\
    \ element in the array. `index` starts at `2` and decrements by 1 for each element\
    \ in the array. `score` starts at `2` and decrements by 1 for each element in\
    \ the array.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n<|/\
    \ c |>\n<| c |>\nThanks again! I really appreciate your help and explanation!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    game = game.sort\n    guess = guess.sort\n\
    \    diff = []\n    i = 0\n    j = game.length\n    while i < j\n        if game[i]\
    \ < guess[i]\n            diff[i] = 0\n            i += 1\n        else\n    \
    \        diff[i] = game[i] - guess[i]\n            i += 1\n            j += 1\n\
    \        end\n    end\n    return diff\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  game.length == guess.length\n  game.length == guess.length\n  i = 0\n  j =\
    \ 0\n  result = []\n  while i < game.length && j < guess.length\n    if game[i]\
    \ < guess[j]\n      i += 1\n    elsif game[i] > guess[j]\n      j += 1\n    else\n\
    \      result[i] = game[i] - guess[j]\n      i += 1\n      j += 1\n    end\n \
    \ end\n  result\nend\n</cell>\n<code language=julia-1.5>", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess\
    \ = guess[i]\n    game = game[i]\n    if guess == game\n      result << 0\n  \
    \  elsif guess < game\n      result << guess.length - game.length\n    elsif guess\
    \ > game\n      result << guess - game.length\n    end\n    i += 1\n  end\n  result\n\
    end", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while\
    \ i < guess.length\n    guess = guess[i]\n    game = game[i]\n    if guess ==\
    \ game\n      result.push(0)\n      i += 1\n    elsif guess > game\n      result.push(guess.length\
    \ - game.length)\n      i += 1\n    elsif guess < game\n      result.push(game.length\
    \ - guess.length)\n      i += 1\n    end\n  end\n  result\nend", "    game = game.sort\n\
    \    guess = guess.sort\n    game.length == guess.length\n    differences = []\n\
    \    i = 0\n    while i < game.length\n        difference = guess[i] - game[i]\n\
    \        if difference < 0\n            difference = difference * -1\n       \
    \ differences.push(difference)\n        i += 1\n    differences.sort\n    return\
    \ differences\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n\
    \  game.length.times do |i|\n    guess.length.times do |j|\n      guess[j] ==\
    \ game[i] ? result[j] << 0 : result[j] << abs(guess[j] - game[i])\n    end\n \
    \ end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n\
    \  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n      i += 1\n\
    \    else\n      result.push(abs(game[i] - guess[i]))\n      i += 1\n    end\n\
    \  end\n  result\nend", "    game = game.to_a\n    guess = guess.to_a\n    guesses\
    \ = guess.size\n    scores = []\n    \n    # Your code here\n    \n    return\
    \ scores\nend\n</cell>\n<code language=julia-1.5>", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if game[i]\
    \ == guess[i]\n      i += 1\n    else \n      result[i] = abs(game[i] - guess[i])\n\
    \      i += 1\n  end\n  return result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    if game[i] != guess[i]\n\
    \      result.push(abs(game[i] - guess[i]))\n      i += 1\n    else\n      result.push(0)\n\
    \    end\n  end\n  result\nend\n</cell>\n<code language=julia-1.5>", "  game =\
    \ game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] == guess[i]\n      i += 1\n    else\n      result[i] = abs(game[i]\
    \ - guess[i])\n      i += 1\n    end\n  end\n  result\nend", "  game.length ==\
    \ guess.length\n  game.each_with_index do |score, index|\n    guess[index] ==\
    \ score ? 0 : (guess[index] - score)\n  end\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  game.length == guess.length\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.", "  game = game.sort\n  guess = guess.sort\n  \n \
    \ result = []\n  \n  game.length.times do |i|\n    guess.length.times do |j|\n\
    \      guess[j] == game[i] ? result[j] ||= 0 : result[j] ||= guess[j] - game[i]\n\
    \    end\n  end\n  \n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  game.length == guess.length\n  result = []\n  i = 0\n  while i < game.length\n\
    \    if game[i] == guess[i]\n      result[i] = 0\n      i += 1\n    elsif game[i]\
    \ > guess[i]\n      result[i] = game[i] - guess[i]\n      i += 1\n    else\n \
    \     result[i] = guess[i] - game[i]\n      i += 1\n  end\n  result\nend", " \
    \ game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i <\
    \ guess.length\n    guess = guess[i]\n    game = game[i]\n    if guess == game\n\
    \      result << 0\n    else\n      result << (guess - game).abs\n    end\n  \
    \  i += 1\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game\
    \ = game[i]\n    if guess == game\n      result.push(0)\n      i += 1\n    elsif\
    \ guess > game\n      result.push(guess.length - game.length)\n      i += 1\n\
    \    elsif guess < game\n      result.push(game.length - guess.length)\n     \
    \ i += 1\n    end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  guesses = 0...guess.length\n  score = 0...game.length\n  for i in 0...game.length\n\
    \    if game[i] == guess[i]\n      score[i] = 0\n    else\n      score[i] = abs(game[i]\
    \ - guess[i])\n    end\n  end\n  score\nend\n</cell>\n<code language=julia-1.0>",
  "  game.length == guess.length\n  game.each_with_index do |score, index|\n    guess[index]\
    \ == score ? 0 : (guess[index] - score)\n  end\nend", "    game = game.to_a\n\
    \    guess = guess.to_a\n    diff = []\n    game.each_with_index do |score, index|\n\
    \        diff = diff + [abs(guess[index] - score)]\n    end\n    diff\nend", " \
    \ game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? result[index] = 0\n         \
    \                  : result[index] = abs(guess[index] - score)\n  end\n  result\n\
    end", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while\
    \ i < guess.length\n    guess = guess[i]\n    game = game[i]\n    if guess ==\
    \ game\n      result[i] = 0\n    else\n      result[i] = abs(guess - game)\n \
    \   end\n    i += 1\n  end\n  return result\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  \n  game_size = game.size\n  guess_size = guess.size\n  \n \
    \ result = []\n  \n  for i in 0...game_size\n    \n    if game[i] == guess[i]\n\
    \      result[i] = 0\n      \n    elsif game[i] > guess[i]\n      result[i] =\
    \ game[i] - guess[i]\n      \n    elsif game[i] < guess[i]\n      result[i] =\
    \ guess[i] - game[i]\n      \n    else\n      result[i] = 0\n    end\n    \n \
    \ end\n  \n  return result\nend", "    game = game.to_a\n    guess = guess.to_a\n\
    \    \n    game_size = game.size\n    guess_size = guess.size\n    \n    differences\
    \ = []\n    \n    i = 0\n    while i < game_size\n        difference = abs(game[i]\
    \ - guess[i])\n        differences.push(difference)\n        i += 1\n    end\n\
    \    \n    return differences\nend", "  game = game.to_a\n  guess = guess.to_a\n\
    \  result = []\n  for i in 0...game.size\n    diff = game[i] - guess[i]\n    if\
    \ diff != 0\n      result << diff\n    else\n      result << 0\n    end\n  end\n\
    \  result\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i\
    \ = 0\n  while i < guess.length\n    if game[i] != guess[i]\n      break\n   \
    \ i += 1\n  result[i] = game[i] - guess[i]\n  while i < guess.length\n    if game[i]\
    \ != guess[i]\n      result[i] = result[i] - abs(game[i] - guess[i])\n      break\n\
    \    i += 1\n  result\nend\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  for i in 0...guess.length\n    diff =\
    \ guess[i] - game[i]\n    if diff < 0\n      diff *= -1\n    result[i] = diff\n\
    \  end\n  return result\nend", "  game = game.sort\n  guess = guess.sort\n  \n\
    \  game.length == guess.length\n  \n  result = []\n  \n  i = 0\n  while i < game.length\n\
    \    \n    guess = guess[i]\n    \n    if guess == game[i]\n      result[i] =\
    \ 0\n      i += 1\n      \n    elsif guess > game[i]\n      result[i] = guess\
    \ - game[i]\n      i += 1\n      \n    elsif guess < game[i]\n      result[i]\
    \ = game[i] - guess\n      i += 1\n      \n    elsif guess == game[i] and guess\
    \ != 0\n      result[i] = 0\n      i += 1\n      \n    elsif guess == game[i]\
    \ and guess == 0\n      result[i] = 0\n      i += 1\n      \n    elsif guess ==\
    \ game[i] and guess != 0 and guess != game[i]\n      result[i] = abs(guess - game[i])\n\
    \      i += 1\n      \n    elsif guess != game[i] and guess != 0\n      result[i]\
    \ = abs(guess - game[i])\n      i += 1\n      \n    elsif guess != game[i] and\
    \ guess == 0\n      result[i] = abs(guess - game[i])\n      i += 1\n      \n \
    \   elsif guess != game[i] and guess != 0 and guess != game[i]\n      result[i]\
    \ = abs(guess - game[i])\n      i += 1\n      \n    elsif guess == game[i] and\
    \ guess == game[i]\n      result[i] = 0\n      i += 1\n      \n    elsif guess\
    \ == game[i] and guess != game[i]\n      result[i] = abs(guess - game[i])\n  \
    \    i += 1\n      \n    elsif guess != game[i] and guess == game[i]\n      result[i]\
    \ = abs(guess - game[i])\n      i += 1\n      \n    elsif guess != game[i] and\
    \ guess != game[i]\n      result[i] = abs(guess - game[i])\n      i += 1\n   \
    \   \n    elsif guess == game[i] and guess != game[i] and guess != 0\n      result[i]\
    \ = abs(guess - game[i])\n      i += 1\n      \n    elsif guess == game[i] and\
    \ guess == 0\n      result[i] = abs(guess - game[i])\n      i += 1\n      \n \
    \   elsif guess == game[i] and guess != game[i] and guess != 0\n      result[i]\
    \ = abs(guess - game[i])\n      i += 1\n      \n    elsif guess == game[i] and\
    \ guess != 0\n      result[i] = abs(guess - game[i])\n      i += 1\n      \n \
    \   elsif guess != game[i] and guess == game[i] and guess ", "    game = game.sort!\n\
    \    guess = guess.sort!\n    \n    i = 0\n    guesses = []\n    scores = []\n\
    \    \n    while i < guess.length\n        guesses.push(guess[i])\n        scores.push(game[i])\n\
    \        i += 1\n    end\n    \n    i = 0\n    score = 0\n    \n    while i <\
    \ guess.length\n        score += abs(guess[i] - scores[i])\n        i += 1\n \
    \   end\n    \n    guesses.reverse!\n    scores.reverse!\n    \n    guesses.zip(scores).map\
    \ { |g,s| g - s }\nend\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess\
    \ = guess[i]\n    game = game[i]\n    if guess == game\n      result.push(0)\n\
    \    else\n      result.push(abs(guess - game))\n    end\n    i += 1\n  end\n\
    \  return result\nend", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  i = 0\n  while i < guess.length\n    if game[i] != guess[i]\n      result[i]\
    \ = abs(game[i] - guess[i])\n      i += 1\n    else\n      result[i] = 0\n   \
    \ end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n      result.push(0)\n\
    \      i += 1\n    else\n      result.push(abs(game[i] - guess[i]))\n      i +=\
    \ 1\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  for i in 0...game.size\n    if game[i] == guess[i]\n      result.push(0)\n\
    \    else\n      result.push(abs(game[i] - guess[i]))\n    end\n  end\n  result\n\
    end", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  j =\
    \ 0\n  while i < game.length and j < guess.length\n    if game[i] == guess[j]\n\
    \      i += 1\n      j += 1\n      result << 0\n    elsif game[i] > guess[j]\n\
    \      i += 1\n      j += 1\n      result << game[i] - guess[j]\n    else\n  \
    \    j += 1\n      result << guess[j] - game[i]\n    end\n  end\n  result\nend",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    guess = guess[index]\n    guess = guess.to_i\n    diff\
    \ = guess - score\n    result.push(diff) if diff != 0\n  end\n  result\nend\n\
    </cell>\n<code language=julia-1.5>", "    game = game.to_a\n    guess = guess.to_a\n\
    \    guesses = guess.size\n    scores = game.size\n    differences = []\n    \n\
    \    # Iterate through each guess and compare it to the score\n    guesses.times\
    \ do |i|\n        differences[i] = game[i] - guess[i]\n    end\n    \n    # If\
    \ the difference is 0, then the guess was correct\n    differences.each do |difference|\n\
    \        if difference == 0\n            differences[i] = 0\n        else\n  \
    \          differences[i] = difference\n        end\n    end\n    \n    # Return\
    \ the array of differences\n    differences\nend\n</cell>\n<code language=julia-1.5>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] == guess[i]\n      result.push(0)\n      i += 1\n    else\n  \
    \    result.push(abs(game[i] - guess[i]))\n      i += 1\n  end\n  result\nend",
  "  game = game.to_a\n  guess = guess.to_a\n  guesses = guess.size\n  scores = []\n\
    \  i = 0\n  while i < guesses\n    score = 0\n    j = i\n    while j < guesses\n\
    \      if game[j] == guess[i]\n        score += game[j]\n        j += 1\n    \
    \  else\n        score += game[j] - guess[i]\n        j += 1\n    end\n    scores\
    \ << score\n    i += 1\n  end\n  scores.each_with_index do |score, i|\n    if\
    \ score == 0\n      scores[i] = 0\n    else\n      scores[i] = score - game[i]\n\
    \    end\n  end\n  scores\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    I like your solution, but I believe it would be better to use a `while` loop to\
    \ iterate over the `guesses` array rather than a `for` loop. Also, I think it\
    \ would be better to use a `while` loop rather than a `for` loop to iterate over\
    \ the `game` array. Finally, I think it would be better to use a `while` loop\
    \ rather than a `for` loop to iterate over the `guesses` array. Lastly, I think\
    \ it would be better to use a `while` loop rather than a `for` loop to iterate\
    \ over the `scores` array. Lastly, I think it would be better to use a `while`\
    \ loop rather than a `for` loop to iterate over the `scores` array. Lastly, I\
    \ think it would be better to use a `while` loop rather than a `for` loop to iterate\
    \ over the `scores` array. Lastly, I think it would be better to use a `while`\
    \ loop rather than a `for` loop to iterate over the `scores` array. Lastly, I\
    \ think it would be better to use a `while` loop rather than a `for` loop to iterate\
    \ over the `scores` array. Lastly, I think it would be better to use a `while`\
    \ loop rather than a `for` loop to iterate over the `scores` array. Lastly, I\
    \ think it would be better to use a `while` loop rather than a `for` loop to iterate\
    \ over the `scores` array. Lastly, I think it would be better to use a `while`\
    \ loop rather than a `for` loop to iterate over the `scores` array. Lastly, I\
    \ think it would be better to use a `while` loop rather than a `for` loop to iterate\
    \ over the `scores` array. Lastly, I think it would be better to use a `while`\
    \ loop rather than a `for` loop to iterate over the `scores` array. Lastly, I\
    \ think it would be better to use a `while` loop rather than a `for` loop to iterate\
    \ over the `scores` array. Lastly, I think it would be better", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    diff\
    \ = guess[i] - game[i]\n    if diff == 0\n      result.push(0)\n    else\n   \
    \   result.push(diff)\n    end\n    i += 1\n  end\n  return result\nend", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    diff = guess[i] - game[i]\n    if diff != 0\n      result.push(diff)\n  \
    \  end\n    i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] == guess[i]\n      i += 1\n    else \n      result[i] = abs(game[i]\
    \ - guess[i])\n      i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  game.length == guess.length\n  game.each_with_index do |score, index|\n    guess[index]\
    \ == score ? 0 : (guess[index] - score)\n  end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work. Try it out with compare([1,2,3,4,5,1],[1,2,3,4,2,-2]).\n\
    <|/ c |>\n<| c |>\nIt does work, try it out with my example. My example is just\
    \ an example to show how it works, not an actual solution to the problem. My example\
    \ is also not very efficient, since it iterates over every element in the array.\
    \ My example is also not very elegant, since it uses ternary operators. My example\
    \ is also not very readable. My example is also not very clear, since it uses\
    \ unnecessary variables. My example is also not very idiomatic, since it uses\
    \ `each_with_index`, which is not idiomatic in Ruby.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean now. My example was just an example to show how it works, not\
    \ an actual solution to the problem. My example is also not very efficient, since\
    \ it iterates over every element in the array. My example is also not very elegant,\
    \ since it uses ternary operators. My example is also not very readable. My example\
    \ is also not very clear, since it uses unnecessary variables. My example is also\
    \ not very idiomatic, since it uses `each_with_index`, which is not idiomatic\
    \ in Ruby.\n<|/ c |>\n<| c |>\nI see what you mean now. My example was just an\
    \ example to show how it works, not an actual solution to the problem. My example\
    \ is also not very efficient, since it iterates over every element in the array.\
    \ My example is also not very elegant, since it uses ternary operators. My example\
    \ is also not very readable. My example is also not very clear, since it uses\
    \ unnecessary variables. My example is also not very idiomatic, since it uses\
    \ `each_with_index`, which is not idiomatic in Ruby.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  game.length == guess.length\n  game.length.times do |i|\n  \
    \  game[i] != guess[i] ? game[i] += guess[i] - game[i] : game[i] = 0\n  end\n\
    \  game\nend", "    game = game.sort\n    guess = guess.sort\n    \n    i = 0\n\
    \    j = 0\n    \n    score = 0\n    \n    while i < game.size && j < guess.size\n\
    \        if game[i] < guess[j]\n            score += abs(game[i] - guess[j])\n\
    \            i += 1\n        else\n            score += abs(guess[j] - game[i])\n\
    \            j += 1\n    end\n    \n    score\nend\n</cell>\n<code language=julia-1.5>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] == guess[i]\n      i += 1\n    else\n      result[i] = abs(game[i]\
    \ - guess[i])\n      i += 1\n    end\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  game = game.sort\n  guess = guess.sort\n  \n  result = []\n  \n  game.length.times\
    \ do |i|\n    guess.length.times do |j|\n      \n      next if game[i] != guess[j]\n\
    \      \n      result[j] ||= game[i] - guess[j]\n    end\n  end\n  \n  result\n\
    end", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while\
    \ i < guess.length\n    j = i\n    while j < guess.length and guess[j] == game[i]\n\
    \      j += 1\n    i += 1\n    if j == guess.length\n      result << 0\n    else\n\
    \      result << (guess[j] - game[i])\n    end\n  end\n  result\nend\n</cell>\n\
    <code language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n  differences\
    \ = []\n  game.length.times do |i|\n    difference = guess[i] - game[i]\n    differences.push(difference)\
    \ if difference != 0\n  end\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse!\n  differences.compact!\n\
    \  differences.uniq!\n  differences.sort!\n  differences.reverse", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j\
    \ = i\n    while j < guess.length and guess[j] == game[i]\n      j += 1\n    result.push(j\
    \ - i)\n    i += 1\n  end\n  result\nend", "    game = game.sort\n    guess =\
    \ guess.sort\n    guesses = Array.new(guess.length)\n    score = 0\n    i = 0\n\
    \    guesses.each do |guess|\n        guesses[i] = game[i] - guess\n        i\
    \ += 1\n    end\n    guesses.each do |guess|\n        if guess == 0\n        \
    \    score += 0\n        else\n            score += Math.abs guess - game[i]\n\
    \        end\n        i += 1\n    end\n    return score\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for the response! I appreciate it. I tried the code you\
    \ posted and it didn't work. I tried it again and I got this error: \"undefined\
    \ method `sort' for [1,2,3,4,5,1]:Array\"\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that works with your test cases. I tested it on ruby 2.4.1\n\
    <|/ c |>\n<| c |>\nThank you so much! I really appreciate it! I really appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem! I hope it helps you out!\n<|/ c |>\n<| a\
    \ tags=ruby,arrays |>\n<code>", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n      i\
    \ += 1\n    else\n      result[i] = abs(game[i] - guess[i])\n      i += 1\n  \
    \  end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ && game[j] == guess[i]\n      j += 1\n    result.push(j - i)\n    i = j\n  end\n\
    \  result\nend", "  game = game.sort\n  guess = guess.sort\n  game.length == guess.length\n\
    \  result = []\n  i = 0\n  while i < game.length\n    diff = game[i] - guess[i]\n\
    \    if diff != 0\n      result[i] = diff\n      i += 1\n    else\n      result[i]\
    \ = 0\n      i += 1\n    end\n  end\n  result\nend", "  game = game.to_a\n  guess\
    \ = guess.to_a\n  result = []\n  game.each_with_index do |score, index|\n    if\
    \ guess[index] == score\n      result << 0\n    else\n      result << (guess[index]\
    \ - score)\n    end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  j = 0\n  while i < game.length and j < guess.length\n\
    \    if game[i] == guess[j]\n      i += 1\n      j += 1\n      result << 0\n \
    \   elsif game[i] > guess[j]\n      i += 1\n      j += 1\n      result << game[i]\
    \ - guess[j]\n    else\n      i += 1\n      j += 1\n      result << guess[j] -\
    \ game[i]\n  end\n  result\nend", "    game = game.to_a\n    guess = guess.to_a\n\
    \    \n    differences = []\n    \n    game.each_with_index do |score, index|\n\
    \        difference = guess[index] - score\n        differences.push(difference)\
    \ if difference != 0\n    end\n    \n    differences.map { |difference| difference\
    \ * -1 }\nend\n</cell>\n<cell>", "  game.length == guess.length\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? 0 : (guess[index] - score)\n\
    \  end\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i =\
    \ 0\n  j = 0\n  while i < game.length and j < guess.length\n    if game[i] ==\
    \ guess[j]\n      i += 1\n      j += 1\n      result << 0\n    elsif game[i] >\
    \ guess[j]\n      i += 1\n      j += 1\n      result << game[i] - guess[j]\n \
    \   else\n      i += 1\n      j += 1\n      result << guess[j] - game[i]\n  end\n\
    \  result\nend\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  game.each_with_index do |score, index|\n    guess\
    \ = guess[index]\n    result.push(abs(guess - score))\n  end\n  result\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nI like your solution. Very concise. Thanks.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    diff = guess[i] - game[i]\n\
    \    if diff < 0\n      diff *= -1\n    result.push(diff)\n    i += 1\n  end\n\
    \  result\nend", "  game = game.sort\n  guess = guess.sort\n  game.length == guess.length\n\
    \  result = []\n  i = 0\n  while i < game.length\n    if game[i] == guess[i]\n\
    \      i += 1\n    else\n      result[i] = abs(game[i] - guess[i])\n      i +=\
    \ 1\n    end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    if game[i] != guess[i]\n\
    \      result[i] = abs(game[i] - guess[i])\n      i += 1\n    else\n      result[i]\
    \ = 0\n    end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ && game[j] == guess[i]\n      j += 1\n    if j == guess.length\n      result\
    \ << 0\n    else\n      result << (guess[i] - game[j]) \n    end\n    i += 1\n\
    \  end\n  result\nend\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n\
    \  guess = guess.sort\n  game.length == guess.length\n  result = []\n  i = 0\n\
    \  while i < game.length\n    diff = game[i] - guess[i]\n    if diff != 0\n  \
    \    result[i] = diff\n      i += 1\n    else\n      result[i] = 0\n      i +=\
    \ 1\n    end\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  j = 0\n  while\
    \ i < game.length and j < guess.length\n    if game[i] == guess[j]\n      i +=\
    \ 1\n      j += 1\n      result << 0\n    elsif game[i] > guess[j]\n      i +=\
    \ 1\n      j += 1\n      result << game[i] - guess[j]\n    else\n      i += 1\n\
    \      j += 1\n      result << guess[j] - game[i]\n  end\n  result\nend", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    diff = guess[i] - game[i]\n    if diff < 0\n      diff *= -1\n    result.push(diff)\n\
    \    i += 1\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n\
    \      i += 1\n      result << 0\n    else\n      result << abs(game[i] - guess[i])\n\
    \    end\n  end\n  result\nend", "  game = game.to_a\n  guess = guess.to_a\n \
    \ result = []\n  game.each_with_index do |score, index|\n    guess[index] == score\
    \ ? result[index] = 0\n    else result[index] = abs(guess[index] - score)\n  end\n\
    \  result\nend\n</cell>\n<cell>", "  game = game.to_a\n  guess = guess.to_a\n\
    \  result = []\n  game.each_with_index do |score, index|\n    guess[index] ==\
    \ score ? result[index] = 0 : result[index] = abs(guess[index] - score)\n  end\n\
    \  result\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I\
    \ tried to run your code and I got this error: `undefined method 'each_with_index'\
    \ for [1,2,3,4,5,1]:Array`\n<|/ c |>\n<| c |>\nI updated my answer. `each_with_index`\
    \ was introduced in Ruby 2.1.\n<|/ c |>\n<| c |>\nThanks again! I ran the code\
    \ again and I got this error: `undefined method 'to_a' for [1,2,3,4,5,1]:Array`\n\
    <|/ c |>\n<| c |>\nI updated my answer. `to_a` was introduced in Ruby 2.1.\n<|/\
    \ c |>\n<| c |>\nThanks again! I ran the code again and I got this error: `undefined\
    \ method 'to_a' for [1,2,3,4,5,1]:Array`\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  game = game.sort\n  guess = guess.sort\n  game.length == guess.length\n  difference\
    \ = Array.new\n  i = 0\n  while i < game.length\n    difference[i] = (game[i]\
    \ - guess[i]).abs\n    i += 1\n  end\n  difference\nend", "    game = game.sort\n\
    \    guess = guess.sort\n    diff = []\n    i = 0\n    while i < guess.length\n\
    \        if game[i] == guess[i]\n            diff[i] = 0\n        else\n     \
    \       diff[i] = abs(game[i] - guess[i])\n        i += 1\n    return diff\nend",
  "  game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    guess[index] ? result[index] = 0 : result[index] = score\
    \ - guess[index]\n  end\n  result\nend\n</cell>\n<cell>", "  game.length == guess.length\n\
    \  game.each_with_index do |score, index|\n    guess[index] == score ? 0 : (guess[index]\
    \ - score)\n  end\nend", "  game.length == guess.length\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? 0 : (guess[index] - score)\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your answer, but\
    \ this doesn't really answer the question. Your code doesn't really do anything\
    \ different than my code, and it still doesn't do what OP asked for. OP wants\
    \ to know how far off each guess was. Your code just returns the absolute difference\
    \ between the guess and the score.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. I'll edit my answer accordingly.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that does what OP asked for. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer! I appreciate it, but I still don't\
    \ understand how it works. I understand that your code is supposed to return the\
    \ difference between the guess and the score, but I don't understand how it works.\
    \ I understand that you're looping through the guesses and comparing each one\
    \ to the score, but I don't understand how that works. I understand that you're\
    \ looping through the scores and comparing each one to the guess, but I don't\
    \ understand how that works. I understand that you're looping through the scores\
    \ and comparing each one to the guess, but I don't understand how that works.\
    \ I understand that you're looping through the scores and comparing each one to\
    \ the guess, but I don't understand how that works. I understand that you're looping\
    \ through the scores and comparing each one to the guess, but I don't understand\
    \ how that works.\n<|/ c |>\n<| c |>\nI understand that you're looping through\
    \ the scores and comparing each one to the guess, but I don't understand how that\
    \ works. I understand that you're looping through the scores and comparing each\
    \ one to the guess, but I don't understand how that works. I understand that you're\
    \ looping through the scores and comparing each one to the guess, but I don't\
    \ understand how that works. I understand that you're looping through the scores\
    \ and comparing each one to the guess, but I don't understand how that works.\
    \ I understand that you're looping through the scores and comparing each one to\
    \ the guess, but I don't understand how that works. I understand that you're looping\
    \ through the scores and comparing each one to the guess, but I don't understand\
    \ how that works.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  game = game.sort\n\
    \  guess = guess.sort\n  guesses = guess.size\n  games = game.size\n  result =\
    \ []\n  for i in 0...games\n    diff = game[i] - guess[i]\n    if diff < 0\n \
    \     diff *= -1\n      result[i] = diff\n    elsif diff == 0\n      result[i]\
    \ = 0\n    else\n      result[i] = diff\n    end\n  end\n  result\nend\n</cell>\n\
    <code language=julia-1.5>", "    game = game.sort\n    guess = guess.sort\n  \
    \  game.length == guess.length\n    guess = guess.each_with_index.map { |g,i|\
    \ [g, i] }\n    guess = guess.each_with_index.map { |g,i| [g, i] }\n    guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n    guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n    guess = guess.each_with_index.map { |g,i| [g, i] }\n \
    \   guess = guess.each_with_index.map { |g,i| [g, i] }\n    guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n    guess = guess.each_with_index.map { |g,i| [g, i] }\n \
    \   guess = guess.each_with_index.map { |g,i| [g, i] }\n    guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n    guess = guess.each_with_index.map { |g,i| [g, i] }\n \
    \   guess = guess.each_with_index.map { |g,i| [g, i] }\n    guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n    guess = guess.each_with_index.map { |g,i| [g, i] }\n \
    \   guess = guess.each_with_index.map { |g,i| [g, i] }\n    guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n    guess = guess.each_with_index.map { |g,i| [g, i] }\n \
    \   guess = guess.each_with_index.map { |g,i| [g, i] }\n    guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n    guess = guess.each_with_index.map { |g,i| [g, i] }\n \
    \   guess = guess.each_with_index.map { |g,i| [g, i] }\n    guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n    guess = guess.each_with_index.map { |g,i| [g, i] }\n \
    \   guess = guess.each_with_index.", "  game = game.sort\n  guess = guess.sort\n\
    \  guesses = guess.size\n  score = 0\n  result = []\n  for i in 0...guesses\n\
    \    if game[i] == guess[i]\n      score += 0\n    else\n      score += abs(game[i]\
    \ - guess[i])\n    end\n  end\n  result = [score]\n  for i in 0...guesses\n  \
    \  if game[i] != guess[i]\n      result[i] = abs(game[i] - guess[i])\n    end\n\
    \  end\n  result\nend\n</cell>\n<code language=julia-1.5>", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess\
    \ = guess[i]\n    game = game[i]\n    if guess == game\n      result << 0\n  \
    \  elsif guess > game\n      result << guess.length - game.length\n    elsif guess\
    \ < game\n      result << game.length - guess.length\n    elsif guess == game\n\
    \      result << 0\n    else\n      result << guess.length - game.length\n   \
    \ end\n    i += 1\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  game.each_with_index do |score, index|\n    guess = guess[index]\n\
    \    diff = guess - score\n    result << diff if diff != 0\n  end\n  result\n\
    end\n</cell>\n<cell>", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n\
    \  game.each_with_index do |score, index|\n    guess[index] == score ? result[index]\
    \ = 0\n    else result[index] = abs(guess[index] - score)\n  end\n  result\nend\n\
    </cell>\n<cell>", "  game = game.sort\n  guess = guess.sort\n  \n  result = []\n\
    \  \n  i = 0\n  while i < guess.length\n    \n    guess = guess[i]\n    \n   \
    \ j = i\n    while j < guess.length and guess[j] == game[j]\n      j += 1\n  \
    \  \n    if j == guess.length\n      result[i] = 0\n      i += 1\n      \n   \
    \ else \n      result[i] = abs(guess[j] - game[j])\n      i += 1\n      \n  end\n\
    \  \n  return result\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n\
    \    if guess == game\n      result[i] = 0\n    else\n      result[i] = abs(guess\
    \ - game)\n    end\n    i += 1\n  end\n  return result\nend", "  game.length ==\
    \ guess.length\n  game.each_with_index do |score, index|\n    guess[index] ==\
    \ score ? 0 : (guess[index] - score)\n  end\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j = i\n\
    \    while j < guess.length && game[j] == guess[i]\n      j += 1\n    result.push(j\
    \ - i)\n    i += 1\n  end\n  result\nend", "  game = game.to_a\n  guess = guess.to_a\n\
    \  result = []\n  game.length == guess.length\n  game.length.times do |i|\n  \
    \  result.push(game[i] - guess[i])\n  end\n  result\nend", "  game = game.to_a\n\
    \  guess = guess.to_a\n  result = []\n  game.each_with_index do |score, index|\n\
    \    if guess[index] == score\n      result << 0\n    else\n      result << (guess[index]\
    \ - score)\n    end\n  end\n  result\nend\n</cell>\n<code language=julia-0.6>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    j = i\n    while j < guess.length && guess[j] == game[j]\n      j += 1\n\
    \    if j - i > 1\n      result[i] = j - i\n      i += 1\n    else \n      result[i]\
    \ = 0\n      i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if guess[i] == game[i]\n      result.push(0)\n    else\n      result.push(abs(guess[i]\
    \ - game[i]))\n    end\n    i += 1\n  end\n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess\
    \ = guess[i]\n    game = game[i]\n    i += 1\n    if guess == game\n      result\
    \ << 0\n    else\n      result << (guess - game).abs\n    end\n  end\n  result\n\
    end", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while\
    \ i < guess.length\n    j = i\n    while j < guess.length and guess[j] == game[i]\n\
    \      j += 1\n    guess = guess[0...j]\n    game = game[0...j]\n    result.push(j\
    \ - i)\n    i = j\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  game.length == guess.length\n  guess = guess.each_with_index.map { |g,i| [g,\
    \ i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.",
  "  game.length == guess.length\n  game.each_with_index do |score, index|\n    guess[index]\
    \ == score ? 0 : (guess[index] - score)\n  end\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess =\
    \ guess[i]\n    game = game[i]\n    i += 1\n    if guess == game\n      result\
    \ << 0\n    elsif guess > game\n      result << guess - game\n    else\n     \
    \ result << game - guess\n    end\n  end\n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess\
    \ = guess[i]\n    game = game[i]\n    if guess == game\n      result.push(0)\n\
    \      i += 1\n    elsif guess > game\n      result.push(guess.length - game.length)\n\
    \      i += 1\n    elsif guess < game\n      result.push(game.length - guess.length)\n\
    \      i += 1\n    end\n  end\n  result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    # Your code here\n    \n    return game\n    ", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if\
    \ game[i] == guess[i]\n      result[i] = 0\n      i += 1\n    else\n      result[i]\
    \ = abs(game[i] - guess[i])\n      i += 1\n  end\n  return result\nend", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    guess = guess[i]\n    game = game[i]\n    if guess == game\n      result\
    \ << 0\n    else\n      result << (guess - game)\n    end\n    i += 1\n  end\n\
    \  result\nend\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  game.each_with_index do |score, index|\n    guess[index]\
    \ == score ? result[index] = 0 : result[index] = score - guess[index]\n  end\n\
    \  result\nend\n</cell>\n<code language=julia-1.5>", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  j = 0\n  while i < game.length and j\
    \ < guess.length\n    if game[i] < guess[j]\n      result.push 0\n      i += 1\n\
    \    elsif game[i] > guess[j]\n      result.push game[i] - guess[j]\n      j +=\
    \ 1\n    else\n      result.push game[i] - guess[j]\n      i += 1\n      j +=\
    \ 1\n    end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  game.each_with_index do |score, index|\n    guess = guess[index]\n\
    \    if guess == score\n      result << 0\n    elsif guess > score\n      result\
    \ << guess - score\n    else\n      result << abs(guess - score)\n    end\n  end\n\
    \  result\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I actually\
    \ tried this but for some reason it didn't work. I tried it again and it worked\
    \ so I must have had a typo somewhere. Thanks again!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  game = game.sort\n  guess = guess.sort\n  \n  result = []\n\
    \  \n  i = 0\n  j = 0\n  \n  while i < game.length and j < guess.length\n    if\
    \ game[i] < guess[j]\n      i += 1\n    elsif game[i] > guess[j]\n      j += 1\n\
    \    else\n      result[i] = game[i] - guess[j]\n      i += 1\n      j += 1\n\
    \    end\n  end\n  \n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    diff = guess[i] - game[i]\n\
    \    if diff != 0\n      result.push(diff)\n    end\n    i += 1\n  end\n  result\n\
    end\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    diff = guess[i] - game[i]\n\
    \    if diff == 0\n      result.push(0)\n    else\n      result.push(diff)\n \
    \   end\n    i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    guess = guess[i]\n    game = game[i]\n    if guess == game\n      result[i]\
    \ = 0\n    else\n      result[i] = abs(guess - game)\n    end\n    i += 1\n  end\n\
    \  return result\nend", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ and guess[j] == game[i]\n      j += 1\n    result.push(j - i)\n    i += 1\n\
    \  end\n  result\nend", "  game.length == guess.length\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? 0 : (guess[index] - score)\n\
    \  end\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i =\
    \ 0\n  j = 0\n  while i < game.length and j < guess.length\n    if game[i] ==\
    \ guess[j]\n      i += 1\n      j += 1\n      result << 0\n    elsif game[i] >\
    \ guess[j]\n      i += 1\n      j += 1\n      result << game[i] - guess[j]\n \
    \   else\n      i += 1\n      j += 1\n      result << guess[j] - game[i]\n   \
    \ end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  for i in 0...game.size\n    diff = game[i] - guess[i]\n    if diff !=\
    \ 0\n      result[i] = diff\n    else\n      result[i] = 0\n    end\n  end\n \
    \ result\nend", "  game = game.sort\n  guess = guess.sort\n  game.length == guess.length\n\
    \  game.length == guess.length\n  guess = guess.map { |x| x.to_i }\n  guess =\
    \ guess.map { |x| x.abs }\n  guess = guess.map { |x| x.min }\n  guess = guess.map\
    \ { |x| x.max }\n  guess = guess.map { |x| x.to_i }\n  guess = guess.map { |x|\
    \ x.abs }\n  guess = guess.map { |x| x.min }\n  guess = guess.map { |x| x.max\
    \ }\n  guess = guess.map { |x| x.to_i }\n  guess = guess.map { |x| x.abs }\n \
    \ guess = guess.map { |x| x.min }\n  guess = guess.map { |x| x.max }\n  guess\
    \ = guess.map { |x| x.to_i }\n  guess = guess.map { |x| x.abs }\n  guess = guess.map\
    \ { |x| x.min }\n  guess = guess.map { |x| x.max }\n  guess = guess.map { |x|\
    \ x.to_i }\n  guess = guess.map { |x| x.abs }\n  guess = guess.map { |x| x.min\
    \ }\n  guess = guess.map { |x| x.max }\n  guess = guess.map { |x| x.to_i }\n \
    \ guess = guess.map { |x| x.abs }\n  guess = guess.map { |x| x.min }\n  guess\
    \ = guess.map { |x| x.max }\n  guess = guess.map { |x| x.to_i }\n  guess = guess.map\
    \ { |x| x.abs }\n  guess = guess.map { |x| x.min }\n  guess = guess.map { |x|\
    \ x.max }\n  guess = guess.map { |x| x.to_i }\n  guess = guess.map { |x| x.abs\
    \ }\n  guess = guess.map { |x| x.min }\n  guess = guess.map { |x| x.max }\n  guess\
    \ = guess.map { |x| x.to_i }\n  guess = guess.map ", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  j = 0\n  while i < game.length and j\
    \ < guess.length\n    if game[i] == guess[j]\n      i += 1\n      j += 1\n   \
    \   result << 0\n    elsif game[i] > guess[j]\n      j += 1\n      result << game[i]\
    \ - guess[j]\n    else\n      i += 1\n      j += 1\n      result << game[i] -\
    \ guess[j]\n    end\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ and guess[j] == game[i]\n      j += 1\n    if j == guess.length\n      result\
    \ << 0\n    else\n      result << (guess[j] - game[i])\n    end\n    i += 1\n\
    \  end\n  result\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate the effort\
    \ you put into your answer, but this doesn't really answer the question. While\
    \ I appreciate your effort, this doesn't really answer the question either. As\
    \ I stated in my question, I am not looking for someone to solve the problem for\
    \ me, but to help me understand why my code doesn't work. Your answer doesn't\
    \ really help with that.\n<|/ c |>\n<| c |>\nI appreciate your effort, but this\
    \ doesn't really answer the question. As I stated in my question, I am not looking\
    \ for someone to solve the problem for me, but to help me understand why my code\
    \ doesn't work. Your answer doesn't really help with that.\n<|/ c |>\n<| c |>\n\
    I appreciate your effort, but this doesn't really answer the question. As I stated\
    \ in my question, I am not looking for someone to solve the problem for me, but\
    \ to help me understand why my code doesn't work. Your answer doesn't really help\
    \ with that.\n<|/ c |>\n<| c |>\nI appreciate your effort, but this doesn't really\
    \ answer the question. As I stated in my question, I am not looking for someone\
    \ to solve the problem for me, but to help me understand why my code doesn't work.\
    \ Your answer doesn't really help with that.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your effort, but this doesn't really answer the question. As I stated in my\
    \ question, I am not looking for someone to solve the problem for me, but to help\
    \ me understand why my code doesn't work. Your answer doesn't really help with\
    \ that.\n<|/ c |>\n<| a dscore=1 |>\nI believe that your problem is that you are\
    \ comparing each element of the guess and game arrays to each other element of\
    \ the guess and game arrays. \n<code>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    diff = guess[i] - game[i]\n\
    \    if diff < 0\n      diff *= -1\n    result.push(diff)\n    i += 1\n  end\n\
    \  result\nend\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n  guess\
    \ = guess.sort\n  game.length == guess.length\n  result = []\n  for i in 0...game.length\n\
    \    if game[i] == guess[i]\n      result << 0\n    else\n      result << abs(game[i]\
    \ - guess[i])\n    end\n  end\n  result\nend", "  game.length == guess.length\n\
    \  game.each_with_index do |score, index|\n    guess[index] == score ? 0 : (guess[index]\
    \ - score)\n  end\nend", "  game = game.to_a\n  guess = guess.to_a\n  result =\
    \ []\n  game.each_with_index do |score, index|\n    if guess[index] == score\n\
    \      result << 0\n    else\n      result << (guess[index] - score)\n    end\n\
    \  end\n  result\nend", "  game.length == guess.length\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? 0 : (guess[index] - score)\n\
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for the answer. I\
    \ am not allowed to use any additional methods. I only have to implement the compare\
    \ method and I am not allowed to use any additional variables.\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to include a solution that does not use additional variables.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThank you for the answer. I tried it and\
    \ it works. However, I do not understand how it works. I understand that we are\
    \ comparing the scores and guesses and if the score is equal we return 0, otherwise\
    \ we return the difference between the score and the guess. But how does it work?\
    \ I do not understand how it compares the scores and guesses. I understand that\
    \ we are comparing the scores and guesses and if the score is equal we return\
    \ 0, otherwise we return the difference between the score and the guess. But how\
    \ does it work? I do not understand how it compares the scores and guesses. I\
    \ understand that we are comparing the scores and guesses and if the score is\
    \ equal we return 0, otherwise we return the difference between the score and\
    \ the guess. But how does it work? I do not understand how it compares the scores\
    \ and guesses. I understand that we are comparing the scores and guesses and if\
    \ the score is equal we return 0, otherwise we return the difference between the\
    \ score and the guess. But how does it work? I do not understand how it compares\
    \ the scores and guesses. I understand that we are comparing the scores and guesses\
    \ and if the score is equal we return 0, otherwise we return the difference between\
    \ the score and the guess. But how does it work? I do not understand how it compares\
    \ the scores and guesses. I understand that we are comparing the scores and guesses\
    \ and if the score is equal we return 0, otherwise we return the difference between\
    \ the score and the guess. But how does it work? I do not understand how it compares\
    \ the scores and guesses. I understand that we are comparing the scores and guesses\
    \ and if the score is equal we return 0, otherwise we return the difference between\
    \ the score and the guess. But how does it work? I do not understand how it compares\
    \ the scores and guesses. I understand that we are comparing the scores and guesses\
    \ and if the score is equal we return 0, otherwise we return the difference between\
    \ the score and the guess. But how does it work? I do not understand how it compares\
    \ the scores and guesses. I understand that we are comparing the scores and guesses\
    \ and if the score is ", "  game = game.to_a\n  guess = guess.to_a\n  result =\
    \ []\n  game.each_with_index do |score, index|\n    guess[index] == score ? result[index]\
    \ = 0 : result[index] = score - guess[index]\n  end\n  result\nend\n</cell>\n\
    <code language=julia-0.5>", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  for i in 0...game.length\n    if game[i] == guess[i]\n      result.push(0)\n\
    \    else\n      result.push(abs(game[i] - guess[i]))\n    end\n  end\n  result\n\
    end\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n\
    \  game.length == guess.length\n  result = []\n  i = 0\n  while i < game.length\n\
    \    diff = game[i] - guess[i]\n    if diff != 0\n      result.push(diff)\n  \
    \  i += 1\n  end\n  result\nend", "    game = game.to_a\n    guess = guess.to_a\n\
    \    \n    game = game.sort\n    guess = guess.sort\n    \n    game = game.each_with_index.map\
    \ { |e,i| [e, i] }\n    guess = guess.each_with_index.map { |e,i| [e, i] }\n \
    \   \n    game = game.zip(guess)\n    game = game.map { |e,g| e[1]-g }\n    \n\
    \    game = game.map { |e| e[0] if e[0] > 0 }\n    game = game.map { |e| e[0]\
    \ if e[0] < 0 }\n    \n    game = game.map { |e| e[0] if e[0] == 0 }\n    game\
    \ = game.map { |e| e[0] if e[0] == 1 }\n    \n    game = game.map { |e| e[0] if\
    \ e[0] == 2 }\n    game = game.map { |e| e[0] if e[0] == 3 }\n    \n    game =\
    \ game.map { |e| e[0] if e[0] == 4 }\n    game = game.map { |e| e[0] if e[0] ==\
    \ 5 }\n    \n    game = game.map { |e| e[0] if e[0] == 6 }\n    game = game.map\
    \ { |e| e[0] if e[0] == 7 }\n    \n    game = game.map { |e| e[0] if e[0] == 8\
    \ }\n    game = game.map { |e| e[0] if e[0] == 9 }\n    \n    game = game.map\
    \ { |e| e[0] if e[0] == 10 }\n    game = game.map { |e| e[0] if e[0] == 11 }\n\
    \    \n    game = game.map { |e| e[0] if e[0] == 12 }\n    game = game.map { |e|\
    \ e[0] if e[0] == 13 }\n    \n    game = game.map { |e| e[0] if e[0] == 14 }\n\
    \    game = game.map { |e| e[0] if e[0] == 15 }\n    \n    game = game.map { |e|\
    \ e[0] if e[0] == 16 }\n    game = game.map { |e| e[0] if e[0] == 17 }\n    \n\
    \    game = game.map { |e| e[0] if e[0] == 18 }\n    game = game.map { |e| e[0]\
    \ if e[0] == 19 }\n    \n    game = game.map { |e| e[0] if e", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  game.each_with_index do |score, index|\n\
    \    guess = guess[index]\n    guess = guess.abs if guess == 0\n    result.push(abs(guess\
    \ - score))\n  end\n  result\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer. Your solution works perfectly for me. I am still trying to\
    \ understand how it works. I understand that `game` and `guess` should be arrays\
    \ of equal length. `game` has all the scores and `guess` has all the guesses.\
    \ But how does `game.each_with_index` work? How does it know to iterate through\
    \ each score and guess at the same time? I understand that `game` is sorted, but\
    \ how does it know to iterate through each score and guess at the same time?\n\
    <|/ c |>\n<| c |>\n`game` and `guess` are not arrays of equal length. `game` is\
    \ an array of scores and `guess` is an array of guesses. `game.each_with_index`\
    \ iterates through `game` at the same time as `guess`. `game` is sorted, but `guess`\
    \ is not.\n<|/ c |>\n<| c |>\nI understand that `game` and `guess` are not arrays\
    \ of equal length. `game` is an array of scores and `guess` is an array of guesses.\
    \ `game.each_with_index` iterates through `game` at the same time as `guess`.\
    \ `game` is sorted, but `guess` is not. My question is, how does `game.each_with_index`\
    \ know to iterate through `game` at the same time as `guess`? How does it know\
    \ to iterate through each score and guess at the same time?\n<|/ c |>\n<| c |>\n\
    `game` is an array of scores and `guess` is an array of guesses. `game.each_with_index`\
    \ iterates through `game` at the same time as `guess`. `game` is sorted, but `guess`\
    \ is not. My question is, how does `game.each_with_index` know to iterate through\
    \ `game` at the same time as `guess`? How does it know to iterate through each\
    \ score and guess at the same time?\n<|/ c |>\n<| c |>\n`game` is an array of\
    \ scores and `guess` is an array of guesses. `game.each_with_index` iterates through\
    \ `game` at the same time as `guess`. `game` is sorted, but `guess` is not. My\
    \ question is, how does `game.each_with_index` know to iterate through `game`\
    \ at the same time as `guess`", "  game = game.sort\n  guess = guess.sort\n  \n\
    \  game.length == guess.length\n  \n  result = []\n  \n  i = 0\n  while i < game.length\n\
    \    \n    j = i\n    \n    while j < game.length && game[j] == guess[i]\n   \
    \   j += 1\n    \n    if j == game.length\n      result[i] = 0\n      i += 1\n\
    \      \n    elsif game[j] == guess[i]\n      result[i] = 0\n      i += 1\n  \
    \    \n    elsif game[j] > guess[i]\n      result[i] = game[j] - guess[i]\n  \
    \    i += 1\n      \n    elsif game[j] < guess[i]\n      result[i] = guess[i]\
    \ - game[j]\n      i += 1\n    end\n  end\n  \n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j\
    \ = i\n    while j < guess.length and guess[j] == game[i]\n      j += 1\n    if\
    \ j == guess.length\n      result << 0\n    else\n      result << guess[j] - game[i]\n\
    \    end\n    i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  game.length.times do\
    \ |i|\n    guess.length.times do |j|\n      result[j] ||= 0\n      result[j] +=\
    \ game[j] == guess[j] ? 0 : game[j] - guess[j]\n    end\n  end\n  result\nend\n\
    </code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI like your solution, however it\
    \ fails for `compare([1,2,3,4,5,1],[1,2,3,4,2,-2])` which should return `[0,0,0,0,3,3]`\
    \ but returns `[4,4,1,0,0,6]`\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for\
    \ pointing it out. Now it returns `[0,0,0,0,3,3]` as expected.\n<|/ c |>\n<| a\
    \ |>\n<code>", "  game = game.sort\n  guess = guess.sort\n  game.length == guess.length\n\
    \  result = []\n  for i in 0...game.length\n    diff = game[i] - guess[i]\n  \
    \  if diff != 0\n      result[i] = diff\n    else\n      result[i] = 0\n    end\n\
    \  end\n  result\nend\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n\
    \  guess = guess.sort\n  game.length == guess.length\n  game.length == guess.length\n\
    \  i = 0\n  j = 0\n  result = []\n  while i < game.length and j < guess.length\n\
    \    if game[i] < guess[j]\n      i += 1\n    elsif game[i] > guess[j]\n     \
    \ j += 1\n    else\n      result.push game[i] - guess[j]\n      i += 1\n     \
    \ j += 1\n    end\n  end\n  result\nend", "  game.length == guess.length\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? 0 : (guess[index] - score)\n\
    \  end\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i =\
    \ 0\n  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n    if\
    \ guess == game\n      result.push(0)\n    else\n      result.push(abs(guess -\
    \ game))\n    end\n    i += 1\n  end\n  result\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess =\
    \ guess[i]\n    game = game[i]\n    if guess == game\n      result.push(0)\n \
    \   else\n      result.push(abs(guess - game))\n    end\n    i += 1\n  end\n \
    \ return result\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n\
    \  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n\
    \    if guess == game\n      result.push(0)\n      i += 1\n    elsif guess > game\n\
    \      result.push(guess.length - game.length)\n      i += 1\n    elsif guess\
    \ < game\n      result.push(game.length - guess.length)\n      i += 1\n    end\n\
    \  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n\
    \    if guess == game\n      result[i] = 0\n    else\n      result[i] = abs(guess\
    \ - game)\n    end\n    i += 1\n  end\n  return result\nend\n</cell>\n<code language=julia-1.0>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if guess[i] == game[i]\n      i += 1\n      next\n    else\n      result[i]\
    \ = abs(guess[i] - game[i])\n      i += 1\n    end\n  end\n  result\nend\n</cell>\n\
    <code language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  game.each_with_index do |score, index|\n    guess = guess[index]\n \
    \   guess = guess.abs if guess == 0\n    result.push(guess - score)\n  end\n \
    \ result\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i\
    \ = 0\n  while i < guess.length\n    j = i\n    while j < guess.length and guess[j]\
    \ == game[j]\n      j += 1\n    if j == guess.length\n      result << 0\n    else\n\
    \      result << guess[j] - game[j]\n    end\n    i += 1\n  end\n  result\nend\n\
    </cell>\n<code language=julia-1.5>", "  game.length == guess.length\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? 0 : (guess[index] - score)\n\
    \  end\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i =\
    \ 0\n  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n    if\
    \ guess == game\n      result[i] = 0\n    else\n      result[i] = abs(guess -\
    \ game)\n    end\n    i += 1\n  end\n  return result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  game.length.times do |i|\n    guess.length.times\
    \ do |j|\n      result[j] += game[i] - guess[j]\n    end\n  end\n  result\nend\n\
    </cell>\n<cell>", "  game = game.sort\n  guess = guess.sort\n  result = []\n \
    \ game.each_with_index do |score, index|\n    guess = guess[index]\n    guess\
    \ = guess.abs if guess == 0\n    result.push(abs(guess - score))\n  end\n  result\n\
    end", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while\
    \ i < guess.length\n    if game[i] == guess[i]\n      i += 1\n      next\n   \
    \ else\n      result[i] = abs(game[i] - guess[i])\n      i += 1\n    end\n  end\n\
    \  result\nend", "  game = game.sort\n  guess = guess.sort\n  game.length == guess.length\n\
    \  result = []\n  i = 0\n  while i < game.length\n    diff = game[i] - guess[i]\n\
    \    if diff != 0\n      result[i] = diff\n      i += 1\n    else\n      result[i]\
    \ = 0\n      i += 1\n    end\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    guess = guess[i]\n    game = game[i]\n    if guess == game\n      result[i]\
    \ = 0\n    else\n      result[i] = abs(guess - game)\n    end\n    i += 1\n  end\n\
    \  return result\nend", "  game = game.sort\n  guess = guess.sort\n  game.length\
    \ == guess.length\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] == guess[i]\n      i += 1\n    else\n      result[i] = abs(game[i]\
    \ - guess[i])\n      i += 1\n    end\n  end\n  result\nend\n</cell>\n<code language=julia-1.5>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  j = 0\n  while\
    \ i < game.length and j < guess.length\n    if game[i] == guess[j]\n      i +=\
    \ 1\n      j += 1\n      result << 0\n    elsif game[i] > guess[j]\n      j +=\
    \ 1\n      result << game[i] - guess[j]\n    else\n      i += 1\n      result\
    \ << guess[j] - game[i]\n    end\n  end\n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  for i in 0...guess.length\n    diff =\
    \ guess[i] - game[i]\n    if diff < 0\n      diff *= -1\n      result[i] = diff\n\
    \    else\n      result[i] = 0\n    end\n  end\n  return result\nend\n</cell>\n\
    <code language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n      i\
    \ += 1\n      result << 0\n    else\n      result << (game[i] - guess[i]).abs\n\
    \      i += 1\n    end\n  end\n  result\nend", "  game = game.sort\n  guess =\
    \ guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if game[i]\
    \ == guess[i]\n      result[i] = 0\n      i += 1\n    else \n      result[i] =\
    \ game[i] - guess[i]\n      i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] == guess[i]\n      result[i] = 0\n      i += 1\n    else \n  \
    \    result[i] = game[i] - guess[i]\n      i += 1\n  end\n  result\nend\n</cell>\n\
    <code language=julia-1.0>", "  game = game.to_a\n  guess = guess.to_a\n  result\
    \ = []\n  game.each_with_index do |score, index|\n    guess[index] ? result[index]\
    \ = 0 : result[index] = score - guess[index]\n  end\n  result\nend", "  game =\
    \ game.sort\n  guess = guess.sort\n  result = []\n  for i in 0...guess.length\n\
    \    diff = guess[i] - game[i]\n    if diff < 0\n      diff *= -1\n    result\
    \ << diff\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if guess[i] == game[i]\n      i += 1\n    else\n      result[i] = abs(guess[i]\
    \ - game[i])\n      i += 1\n    end\n  end\n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if\
    \ game[i] != guess[i]\n      result.push(guess[i] - game[i])\n      i += 1\n \
    \   else\n      result.push(0)\n    end\n  end\n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    diff\
    \ = guess[i] - game[i]\n    if diff < 0\n      diff *= -1\n    result.push(diff)\n\
    \    i += 1\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game\
    \ = game[i]\n    if guess == game\n      result.push(0)\n    else\n      result.push(abs(guess\
    \ - game))\n    end\n    i += 1\n  end\n  result\nend", "    game = game.to_a\n\
    \    guess = guess.to_a\n    \n    guesses = guess.size\n    scores = game.size\n\
    \    \n    diffs = []\n    \n    i = 0\n    while i < guesses\n        diff =\
    \ 0\n        \n        j = i\n        while j < guesses\n            if game[j]\
    \ == guess[i]\n                diff += 1\n            j += 1\n        \n     \
    \   diffs << diff\n        i += 1\n    end\n    \n    diffs.map { |diff| diff\
    \ > 0 ? diff : -diff }\nend\n</cell>\n<code language=julia-1.0>", "    game =\
    \ game.sort\n    guess = guess.sort\n    guesses = []\n    scores = []\n    i\
    \ = 0\n    j = 0\n    while i < game.length and j < guess.length\n        if game[i]\
    \ < guess[j]\n            scores << 0\n            i += 1\n        else\n    \
    \        scores << game[i] - guess[j]\n            j += 1\n        end\n    end\n\
    \    guesses = guess[0...j]\n    scores = scores[1...game.length]\n    return\
    \ scores\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    guess = guess[index]\n    guess = -guess if guess < 0\n\
    \    result.push(abs(guess - score))\n  end\n  result\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your help and I understand your code. My question\
    \ was more about how to approach the problem and what would be the best way to\
    \ approach it. I'm still a beginner so I appreciate your help.\n<|/ c |>\n<| c\
    \ |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? result[index] = 0 : result[index]\
    \ = abs(guess[index] - score)\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThank you for your answer. Your code works perfectly for me. I am still\
    \ trying to understand how it works. I understand that each_with_index iterates\
    \ through each element in the array and assigns the index to each element. I am\
    \ also aware that each_with_index returns the original array. I am also aware\
    \ that each_with_index passes the index to the block. I am also aware that each_with_index\
    \ returns the original array. I am also aware that each_with_index passes the\
    \ index to the block. I am also aware that each_with_index returns the original\
    \ array. I am also aware that each_with_index passes the index to the block. I\
    \ am also aware that each_with_index returns the original array. I am also aware\
    \ that each_with_index passes the index to the block. I am also aware that each_with_index\
    \ returns the original array. I am also aware that each_with_index passes the\
    \ index to the block. I am also aware that each_with_index returns the original\
    \ array. I am also aware that each_with_index passes the index to the block. I\
    \ am also aware that each_with_index returns the original array. I am also aware\
    \ that each_with_index passes the index to the block. I am also aware that each_with_index\
    \ returns the original array. I am also aware that each_with_index passes the\
    \ index to the block. I am also aware that each_with_index returns the original\
    \ array. I am also aware that each_with_index passes the index to the block. I\
    \ am also aware that each_with_index returns the original array. I am also aware\
    \ that each_with_index passes the index to the block. I am also aware that each_with_index\
    \ returns the original array. I am also aware that each_with_index passes the\
    \ index to the block. I am also aware that each_with_index returns the original\
    \ array. I am also aware that each_with_index passes the index to the block. I\
    \ am also aware that each_with_index returns the original array. I am also aware\
    \ that each_with_index passes the index to the block. I am also aware that each_with_index\
    \ returns the original array. I am also aware that each_with_index passes the\
    \ index to the block. I am also aware that each_with_index returns the original\
    \ array. I am also aware that each_with_index passes the index to the block. I\
    \ am also aware that each_with_index ", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n\
    \      result.push(0)\n      i += 1\n    else \n      result.push(abs(game[i]\
    \ - guess[i]))\n      i += 1\n  end\n  return result\nend", "    game = game.to_a\n\
    \    guess = guess.to_a\n    game.length == guess.length\n    game.length.times\
    \ do |i|\n        game[i] < guess[i] ? game[i] += guess[i] : game[i] -= guess[i]\n\
    \    end\n    game\nend\n</cell>\n<code language=julia-0.6>", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j\
    \ = i\n    while j < guess.length\n      guess = guess[j]\n      if guess == game[i]\n\
    \        result[i] = 0\n      else\n        result[i] = abs(guess - game[i])\n\
    \      end\n      j += 1\n    end\n    i += 1\n  end\n  return result\nend", " \
    \ game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i <\
    \ guess.length\n    guess = guess[i]\n    game = game[i]\n    if guess == game\n\
    \      result.push(0)\n    else\n      result.push(abs(guess - game))\n    end\n\
    \    i += 1\n  end\n  result\nend", "  game = game.to_a\n  guess = guess.to_a\n\
    \  result = []\n  game.each_with_index do |score, index|\n    if guess[index]\
    \ == score\n      result << 0\n    else\n      result << (guess[index] - score)\n\
    \    end\n  end\n  result\nend\n</cell>\n<cell>", "    game = game.sort\n    guess\
    \ = guess.sort\n    \n    i = 0\n    j = 0\n    \n    score = 0\n    \n    while\
    \ i < game.length and j < guess.length\n        if game[i] == guess[j]\n     \
    \       score += 0\n            i += 1\n            j += 1\n        else \n  \
    \          score += game[i] - guess[j]\n            i += 1\n            j += 1\n\
    \    end\n    \n    i = 0\n    j = 0\n    \n    guesses = []\n    \n    while\
    \ i < game.length and j < guess.length\n        if game[i] == guess[j]\n     \
    \       guesses << 0\n            i += 1\n            j += 1\n        else \n\
    \            guesses << abs(game[i] - guess[j])\n            i += 1\n        \
    \    j += 1\n    end\n    \n    return guesses\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if game[i]\
    \ == guess[i]\n      i += 1\n    else\n      result[i] = abs(game[i] - guess[i])\n\
    \      i += 1\n    end\n  end\n  return result\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  game.length == guess.length\n  game.length.times do |i|\n  \
    \  guess[i].nil? ? guess[i] = 0 : guess[i] = guess[i] - game[i]\n  end\n  guess.each_with_index\
    \ do |g,i|\n    guess[i].nil? ? guess[i] = 0 : guess[i] = abs(g - guess[i])\n\
    \  end\n  guess\nend", "  game = game.sort\n  guess = guess.sort\n  \n  result\
    \ = []\n  \n  game_index = 0\n  guess_index = 0\n  \n  while game_index < game.size\
    \ and guess_index < guess.size\n    if game[game_index] == guess[guess_index]\n\
    \      game_index += 1\n      guess_index += 1\n      result << 0\n    else\n\
    \      result << (game[game_index] - guess[guess_index])\n      game_index +=\
    \ 1\n      guess_index += 1\n    end\n  end\n  \n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  for i in 0...game.size\n    diff = game[i]\
    \ - guess[i]\n    if diff != 0\n      result.push(diff)\n    end\n  end\n  return\
    \ result\nend\n</cell>\n<code language=julia-1.0>", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if game[i]\
    \ != guess[i]\n      result[i] = abs(game[i] - guess[i])\n      i += 1\n    else\n\
    \      result[i] = 0\n    end\n  end\n  result\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if game[i]\
    \ == guess[i]\n      i += 1\n    else \n      result[i] = abs(game[i] - guess[i])\n\
    \      i += 1\n  end\n  return result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n\
    \      result.push(0)\n    else\n      result.push(abs(game[i] - guess[i]))\n\
    \    end\n    i += 1\n  end\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
