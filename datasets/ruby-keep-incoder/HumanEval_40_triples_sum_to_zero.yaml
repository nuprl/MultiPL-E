name: HumanEval_40_triples_sum_to_zero
language: ruby
prompt: "# triples_sum_to_zero takes a list of integers as an input.\n# it returns\
  \ True if there are three distinct elements in the list that\n# sum to zero, and\
  \ False otherwise.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n# True\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> triples_sum_to_zero([2,\
  \ 4, -5, 3, 9, 7])\n# True\n# >>> triples_sum_to_zero([1])\n# False\ndef triples_sum_to_zero(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triples_sum_to_zero\n\
  \    candidate = method(:triples_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
  \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, 5, -1]))\n    assert_equal(true,\
  \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
  \ 3, 7]))\n    assert_equal(false, candidate.call([1, 2, 5, 7]))\n    assert_equal(true,\
  \ candidate.call([2, 4, -5, 3, 9, 7]))\n    assert_equal(false, candidate.call([1]))\n\
  \    assert_equal(false, candidate.call([1, 3, 5, -100]))\n    assert_equal(false,\
  \ candidate.call([100, 3, 5, -100]))\n  end\nend\n"
completions: ["  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3\n  l.all? { |x| x == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\n  l.all? { |x| x == 0 }\nend", "  l.sort!\n  return l.length == 3 && l[0]\
    \ + l[1] + l[2] == 0\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all?\
    \ { |x| x == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n\
    \  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and el == sum + el\n  end\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x|\
    \ x == 0 }\nend", "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.size == 3\n\
    end", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\n  l.all? { |x| x == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n\
    \  l.all? { |x| x == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n\
    \    sum and el == sum - el\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum,x|\n    sum && sum + x == 0\n  end\nend", "  l.sort!\n  l.each_cons(3).all?\
    \ { |a,b,c| a + b + c == 0 }\nend", "  l.sort!\n  l.each_cons(3).all? { |a,b,c|\
    \ a+b+c == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n\
    \  l.uniq!\n  l.length == 3\n  l.all? { |x| x == 0 }\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum, e|\n    sum and (e == 0 || e == -sum)\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum + x ==\
    \ 0) or (sum + x == -sum)\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n\
    end", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum + x ==\
    \ 0)\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x| x ==\
    \ 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (el\
    \ == sum + el)\n  end\nend", "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.length\
    \ == 3\nend", "  l.sort!\n  return l.inject(true) do |sum, e|\n    sum and (e\
    \ == 0 || e == -sum)\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,\
    \ e|\n    sum and (e == 0 || e == -sum)\n  end\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3\n  l.all? { |x| x.zero? }\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, e|\n    sum and (e == 0 || e == -sum)\n  end\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum, el|\n    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n\
    \  return l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum && el == sum + el\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum, e|\n    sum and (e == 0 || e == -sum)\n  end\nend",
  "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum + x == 0) or false\n\
    \  end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3\n  l.all? { |x| x == 0 }\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (el == sum + el)\n  end\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x|\
    \ x == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n  l.all? { |i| i ==\
    \ 0 || i == l[0] + l[1] + l[2] }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n\
    end", "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum, el|\n    sum and el > 0 and sum + el == 0 \n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am\
    \ not allowed to use any built-in functions. I should also not use any loops.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any loops.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any built-in functions.\
    \ I should also not use any loops.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't use any loops.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any built-in functions. I should also not use any loops.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  l.sort!\n  l.uniq!\n  l.length == 3\nend",
  "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum + el == 0)\n\
    \  end\nend", "  l.sort!\n  l.each_cons(3).all? { |a,b,c| a + b + c == 0 }\nend",
  "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (el == sum - el)\n\
    \  end\nend", "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.length == 3 &&\
    \ l.uniq.all?\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum\
    \ and (sum + el) == 0 or (sum + el) == el\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0) or (sum + x == -sum)\n  end\nend", " \
    \ l.sort!\n  l.uniq!\n  l.length == 3\n  l.all? { |x| x == 0 }\nend", "  l.sort!\n\
    \  return l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.uniq!\n  l.sort!\n\
    \  l.each_cons(3).all? { |a,b,c| a + b + c == 0 }\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3 and l.all? { |x| x == 0 }\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el == 0)\n  end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, but I wonder how it compares to mine. My\
    \ solution has O(n^2) complexity and yours has O(n). Maybe mine is better in some\
    \ cases, but I wonder how it compares to mine.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to my solution to explain why I like it better.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to my solution to explain why I like it better.\n<|/ c |>\n<| c |>\n\
    I added a comment to my solution to explain why I like it better.\n<|/ c |>\n\
    <| c |>\nI added a comment to my solution to explain why I like it better.\n<|/\
    \ c |>\n<| a |>\n<code>", "  l.uniq!\n  l.sort!\n  l.uniq!\n  l.length == 3\n\
    \  l.all? { |x| x == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend",
  "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.sort!\n \
    \ return l.inject(true) do |result, x|\n    result && x == 3\n  end\nend", " \
    \ l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x| x == 0 }\nend", "  l.sort!\n\
    \  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  return l.inject(true) do |sum,\
    \ el|\n    sum and (sum + el) == 0 \n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, e|\n    sum and (e == 0 || e == -sum)\n  end\nend", "  l.sort!\n  return\
    \ l.inject(true) do |result, x|\n    result && x == 3\n  end\nend", "  l.sort!\n\
    \  l.uniq!\n  l.length == 3 and l.all? { |x| x == 0 }\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum,x|\n    sum and (sum + x == 0) or (sum + x == -sum)\n\
    \  end\nend", "  l.sort!\n  l.each_cons(3).any? { |a,b,c| a+b+c == 0 }\nend",
  "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum + el == 0)\n\
    \  end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  return\
    \ l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x) == 0 or (sum + x) == -x\n  end\nend", "  l.sort!\n\
    \  return l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  return\
    \ l.inject(:+) == 0 && l.length == 3\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el) == 0 or (sum + el) == -1\n  end\nend",
  "  l.sort!\n  return l.length == 3 && l.inject(:+) == 0 && l.uniq.size == 3\nend",
  "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum + x == 0) or (sum\
    \ + x == -sum)\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all?\
    \ { |x| x == 0 }\nend", "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.size\
    \ == 3\nend", "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.size == 3\nend",
  "  l.sort!\n  return l.inject(true) do |result, x|\n    result && x == 3 - result.last\
    \ || false\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x|\
    \ x == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and\
    \ (sum + x == 0) or false\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\
    \ and l[0] == l[1] and l[1] == l[2]\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  return\
    \ l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum\
    \ + el == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum, e|\n \
    \   sum and (e == 0 or e + sum == 0)\n  end\nend", "  l.sort!\n  return l.inject(:+)\
    \ == 0 && l.uniq.length == 3\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0) or (sum + x == -sum)\n  end\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum,x|\n    sum and (sum + x == 0) or (sum + x == -sum)\n\
    \  end\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum\
    \ + el) == 0 or (sum + el) == -1\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x| x == 0 ||\
    \ x == -x }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum, e|\n    sum and (e == 0 || e == -sum)\n  end\n\
    end", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x| x == 0 }\n\
    end", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x| x == 0 }\n\
    end", "  l.sort!\n  l.each_cons(3).any? { |a,b,c| a + b + c == 0 }\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum, el|\n    sum and (el == sum + el)\n  end\nend",
  "  l.sort!\n  l.each_cons(3) do |triple|\n    return false if triple.inject(:+)\
    \ != 0\n  end\n  true\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n\
    \    sum and (el == sum + el)\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x| x == 0 }\n\
    end", "  l.sort!\n  l.uniq!\n  l.length == 3 and l.all? { |x| x == 0 }\nend",
  "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum + el == 0)\n\
    \  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum\
    \ + x == 0) or (sum + x == -x)\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n\
    <| c |>\n`l = [-1, 1, -2, 2, -3, 3, -4, 4]` returns `true` for `l` but `false`\
    \ for `[1, 1, -2, 2, -3, 3, -4, 4]`.\n<|/ c |>\n<| c |>\n: Yes, that's true. I've\
    \ added a fix for that case.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to do it without sorting the array. Sorting is an expensive\
    \ operation for large arrays. I wonder if there is a way to do it without sorting\
    \ the array and without using inject.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that doesn't sort the array.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ sort the array, but doesn't use inject.\n<|/ c |>\n<| a tags=ruby,arrays |>\n\
    <code>", "  l.sort!\n  return l.inject(true) do |result, i|\n    result && l[i\
    \ - 1] + l[i] + l[i + 1] == 0\n  end\nend", "  l.sort!\n  return l.length == 3\
    \ && l[0] + l[1] + l[2] == 0\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend",
  "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.length == 3\nend", "  l.sort!\n\
    \  l.uniq!\n  l.length == 3\n  l.all? { |x| x.zero? }\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum,x|\n    sum and (sum + x == 0) or (sum + x == -x)\n \
    \ end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n  l[0] == l[1] and l[1] ==\
    \ l[2] and l[2] == 0\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n\
    \  return l.inject(true) do |result, x|\n    result && x == 0\n  end\nend", " \
    \ l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum + x == 0) or (sum\
    \ + x == -sum)\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n\
    \    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3\nend", "  l.sort!\n  l.each_cons(3).any? { |a,b,c| a+b+c == 0\
    \ }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n  l.all? { |x| x == 0 }\nend",
  "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum + x == 0) or (sum\
    \ + x == -sum)\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n  l.all?\
    \ { |x| x == 0 }\nend", "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.size\
    \ == 3\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum\
    \ + x == 0) or (sum + x == -sum)\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=ruby |>\n<code>", "  l.sort!\n  return l.inject(true) do |sum, el|\n  \
    \  sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length ==\
    \ 3\n  l.all? { |x| x == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length ==\
    \ 3\n  l.all? { |x| x == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and\
    \ l.all? { |x| x == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", " \
    \ l.sort!\n  return l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.sort!\n\
    \  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and\
    \ l.all? { |x| x == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0) or (sum + x == -x)\n  end\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3 and l[0] == l[1] and l[1] == l[2]\nend", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3\n  l.all? { |x| x.zero? }\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\nend", "  l.sort!\n  return l.length == 3 && l.inject(:+) == 0 && l.uniq.size\
    \ == 3\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum, el|\n    sum and el == sum + el\n  end\nend", "  l.sort!\n\
    \  return l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.sort!\n  return l.inject(true)\
    \ do |result, x|\n    result && x == 3\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0) or (sum + x == -sum)\n  end\nend", " \
    \ l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (el + el + el) ==\
    \ sum\n  end\nend", "  l.sort!\n  l.each_cons(3).all? { |a,b,c| a + b + c == 0\
    \ }\nend", "  l.sort!\n  return l.length == 3 && l.all? { |x| x == 0 || x == -x\
    \ }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n  l.all? { |x| x.zero? }\n\
    end", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0) or (sum + x == -sum)\n  end\nend", " \
    \ l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum + el == 0)\n\
    \  end\nend", "  l.sort!\n  return l.inject(:+) == 0 && l.uniq.length == 3\nend",
  "  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n \
    \ l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n\
    \  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n\
    \  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n\
    \  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n\
    \  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n\
    \  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n\
    \  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n\
    \  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n\
    \  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n\
    \  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n\
    \  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n\
    \  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n\
    \  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n\
    \  l.uniq!\n  l.sort!\n  l.uniq!\n  l.sort!\n  l.", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el) == 0 \n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like the `inject` solution, but I wonder if there is a way to\
    \ do it without `inject`?\n<|/ c |>\n<| c |>\nI added a solution without `inject`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  l.sort!\n  return l.inject(true) do |sum,\
    \ el|\n    sum and (el == sum + el)\n  end\nend", "  l.sort!\n  l.each_with_index\
    \ do |x, i|\n    next if i == 0\n    next if l[i-1] == x\n    next if l[i-2] ==\
    \ x\n    next if l[i-3] == x\n    return false if i == l.length-1\n  end\n  return\
    \ true\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n  l.all? { |x| x == 0 }\n\
    end", "  l.sort!\n  return l.inject(:+) == 0 && l.length == 3\nend", "  l.sort!\n\
    \  return l.inject(:+) == 0 && l.uniq.length == 3\nend", "  l.sort!\n  l.each_cons(3).all?\
    \ { |a,b,c| a + b + c == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3 and\
    \ l.all? { |x| x == 0 || x == -x }\nend", "  l.sort!\n  l.each_cons(3).any? {\
    \ |a,b,c| a+b+c == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", " \
    \ l.sort!\n  return l.inject(:+) == 0 && l.uniq.size == 3\nend", "  l.sort!\n\
    \  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  return l.inject(true) do |sum,\
    \ el|\n    sum && el > 0 && sum + el == 0 \n  end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this solution, but I wonder if it can be made more efficient.\n\
    <|/ c |>\n<| c |>\nI doubt it can be made more efficient. Sorting is a O(n log\
    \ n) operation, so this algorithm is O(n log n). Even if you could do it in O(n),\
    \ it would be O(n^2) because of the sort.\n<|/ c |>\n<| c |>\nI agree with you\
    \ that sorting is O(n log n), but sorting is O(n) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on average. Sorting n numbers\
    \ is O(n^2) on average. Sorting n numbers is O(n^2) on ", "  l.sort!\n  l.uniq!\n\
    \  l.length == 3\n  l.all? { |x| x == 0 }\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\nend", "  l.sort!\n  l.each_cons(3).all? { |x, y, z| x + y + z == 0 }\n\
    end", "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  l.uniq!\n  l.length\
    \ == 3\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum && sum +\
    \ x == 0\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length == 3\n  l.reduce(:+)==0\n\
    end", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum + el\
    \ == 0)\n  end\nend", "  l.sort!\n  l.each_cons(3) do |a, b|\n    return false\
    \ if b == 0 || a + b > 0\n  end\n  true\nend", "  l.sort!\n  l.each_cons(3).all?\
    \ { |a,b,c| a + b + c == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum,\
    \ e|\n    sum and (e == 0 || e == -sum)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (el + el + el) == 0\n  end\nend", "  l.sort!\n  l.each_cons(3).any?\
    \ { |a,b,c| a+b+c == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0) or (sum + x == -sum)\n  end\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum, el|\n    sum and (el == sum + el)\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum, el|\n    sum and (el == sum + el)\n  end\nend",
  "  l.sort!\n  l.uniq!\n  l.length == 3\nend", "  l.sort!\n  l.each_cons(3).any?\
    \ { |a,b,c| a+b+c == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n\
    \    sum and el == sum + el\n  end\nend", "  l.sort!\n  l.each_cons(3).any? {\
    \ |a,b,c| a + b + c == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  l.uniq!\n  l.length ==\
    \ 3\n  l.all? { |x| x == 0 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
