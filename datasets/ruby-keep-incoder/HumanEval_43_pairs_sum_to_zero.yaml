name: HumanEval_43_pairs_sum_to_zero
language: ruby
prompt: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True\
  \ if there are two distinct elements in the list that\n# sum to zero, and False\
  \ otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
  \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
  \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
  \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5,\
  \ 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
  \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
  \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n\
  \    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n"
completions: ["  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum - x == 0)\n\
    \  end\nend", "  l.sort!\n  return l.inject(true) do |result, (i, j)|\n    result\
    \ && j == 0 || (i != j && j + i == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |result, (i, j)|\n    result && j == 0 || !result\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |acc, x|\n    acc && x[0] == x[1]\n  end\nend", " \
    \ l.sort!\n  l.inject(true) do |sum, el|\n    sum and (sum - el == 0)\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum - x) ==\
    \ 0\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and\
    \ (sum - x) == 0\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum\
    \ && sum + x == 0\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum && sum + x == 0\n  end\nend", "  l.sort!\n  l.inject(true) { |sum,x|\
    \ sum && sum + x == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum and (sum - x) == 0\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n  return l.inject(true) do\
    \ |result, (i, j)|\n    result && j == 0 || (i != j && j + result == 0)\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum - x) ==\
    \ 0\n  end\nend", "  l.sort!\n  l.each_cons(2) do |a,b|\n    return false if b\
    \ < 0\n    return false if b > 0\n    return false if a + b == 0\n  end\n  true\n\
    end", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum - x ==\
    \ 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and\
    \ (el == sum + el)\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n   \
    \ sum and (sum - x == 0)\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c\
    \ |>\nI like this solution, but I wonder if it can be made more efficient by avoiding\
    \ sorting.\n<|/ c |>\n<| c |>\nI agree with you. Sorting is O(n log n), but we\
    \ can avoid it by using a hash table to keep track of which elements have already\
    \ been seen. I'll add an answer with that approach.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  l.sort!\n  return l.inject(true) do |result, (i, j)|\n    result\
    \ && j == 0 && !(j == i + 1)\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum,x|\n    sum and (sum - x == 0)\n  end\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a, b|\n    return false if b < 0\n    return false if b > 0\n    return\
    \ false if a + b == 0\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |a,b|\n\
    \    return false if b < 0\n    return false if b > 0\n    return false if a +\
    \ b == 0\n  end\n  true\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum and (sum + x != 0)\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and el == el - sum\n  end\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum,x|\n    sum and (sum + x) == 0 \n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |result, pair|\n    result and pair.reduce(:+) ==\
    \ 0\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI like this solution,\
    \ though it does require a little more memory than my solution. I'll have to test\
    \ it out to see if it really matters.\n<|/ c |>\n<| c |>\nI tested this out and\
    \ it seems to work well. Thanks!\n<|/ c |>\n<| c |>\nI tested this out and it\
    \ seems to work well. Thanks!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  l.sort!\n\
    \  return l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\nend", " \
    \ l.sort!\n  return l.inject(true) do |result, pair|\n    result && pair[1] ==\
    \ 0\n  end\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x == 0 }\n\
    end", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum-x == 0)\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |result, pair|\n    result and pair.reduce(:+)\
    \ == 0\n  end\nend", "  l.sort!\n  l.each_cons(2) do |a,b|\n    return false if\
    \ b < 0\n    return false if b > 0\n    return false if a + b == 0\n  end\n  true\n\
    end", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum && sum + x == 0\n\
    \  end\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum && el\
    \ == 0 && (sum = false)\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  l.inject(true) { |sum,x|\
    \ sum && sum + x == 0 }\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum\
    \ and (sum + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum && sum + x == 0\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n\
    \    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |result, pair|\n    result && pair.reduce(:+) == 0\n  end\nend", "  l.sort!\n\
    \  l.inject(true) do |sum,x|\n    sum and (sum - x) == 0\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |result, pair|\n    result and pair.reduce(:+) ==\
    \ 0\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum && sum + x\
    \ == 0\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum\
    \ - x) == 0\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n   \
    \ sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do\
    \ |sum,x|\n    sum and (sum - x == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  return\
    \ l.inject(true) do |result, pair|\n    result && pair[0] == pair[1]\n  end\n\
    end", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum-x == 0)\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum-x == 0)\n\
    \  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum && sum +\
    \ x == 0\n  end\nend", "  l.sort!\n  return l.inject(true) do |result, item|\n\
    \    result && item == 0\n  end\nend", "  l.sort!\n  return l.inject(true) do\
    \ |result, pair|\n    result && pair.reduce(:+) == 0\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |result, pair|\n    result && pair[0] == pair[1]\n\
    \  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum\
    \ + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |acc, x|\n  \
    \  acc && x[0] == x[1]\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum && sum + x == 0\n  end\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n\
    \    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum - el == 0)\n  end\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a,b|\n    return false if b < 0\n    return false if b > 0\n    return false\
    \ if a + b == 0\n  end\n  true\nend", "  l.sort!\n  return l.inject(true) do |result,\
    \ pair|\n    result and pair[0] == pair[1]\n  end\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |result, pair|\n    result && pair.reduce(:+) == 0\n\
    \  end\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend",
  "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum && el > 0 && sum + el\
    \ == 0 \n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI like your\
    \ solution, but I wonder why you chose to sort before you sum. Sorting will change\
    \ the order of the elements in the array. Why not just sum them up and then sort\
    \ them again?\n<|/ c |>\n<| c |>\nI chose to sort before I sum because I wanted\
    \ to avoid the O(n^2) time complexity of sorting the array multiple times. I chose\
    \ to sort first because I wanted to avoid the O(n^2) time complexity of summing\
    \ the array multiple times.\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation.\
    \ I was wondering why you chose to sort before you sum.\n<|/ c |>\n<| c |>\nI\
    \ chose to sort first because I wanted to avoid the O(n^2) time complexity of\
    \ summing the array multiple times.\n<|/ c |>\n<| a |>\n<code>", "  l.sort!\n\
    \  l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\nend", "  l.sort!\n\
    \  l.inject(true) do |sum, el|\n    sum and (sum - el == 0)\n  end\nend", "  l.sort!\n\
    \  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n  return l.inject(true) do\
    \ |result, pair|\n    result && pair.reduce(:+) == 0\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum,x|\n    sum and (sum - x == 0)\n  end\nend",
  "  l.sort!\n  l.inject(true) { |sum, el| sum && el == 0 ? false : sum }\nend", " \
    \ l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum + x == 0)\n  end\nend",
  "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum - x == 0)\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum - x ==\
    \ 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and\
    \ (sum - x == 0)\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum\
    \ && sum + x == 0\n  end\nend", "  l.sort!\n  l.each_cons(2) do |x,y|\n    return\
    \ false if x == y\n    return true if x == 0 && y == 0\n  end\n  true\nend", " \
    \ l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum + x) % 2 == 0\n  end\n\
    end", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\n\
    end", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |acc, x|\n    acc && x[0] == x[1]\n\
    \  end\nend", "  l.sort!\n  return l.inject(true) do |acc, x|\n    acc && x[1]\
    \ == 0 && x[0] == 0\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,\
    \ el|\n    sum and (el == sum + 1) or (el == sum - 1)\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum,x|\n    sum and (sum - x == 0)\n  end\nend",
  "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\n\
    end", "  l.sort!\n  l.inject(true) do |sum,i|\n    sum and (sum - l[i]) == 0\n\
    \  end\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend",
  "  l.sort!\n  return l.inject(true) do |result, i|\n    result && l[i+1] - l[i]\
    \ == 0\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum-x\
    \ == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |result, pair|\n\
    \    result and pair.reduce(:+) == 0\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum, el|\n    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  return\
    \ l.inject(true) do |result, (i, j)|\n    result && j == 0 || !result && j > 0\
    \ && j % i != 0\n  end\nend", "  l.sort!\n  l.inject(true) { |sum, el| sum &&\
    \ el == 0 }\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n    sum && sum +\
    \ el == 0 && return false\n    sum + el\n  end\n  true\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum,x|\n    sum and (sum + x == 0)\n  end\nend",
  "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |result, pair|\n    result && pair.reduce(:+)\
    \ == 0\n  end\nend", "  l.sort!\n  l.inject(true) { |sum, el| sum && el == 0 ||\
    \ sum }\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum\
    \ - el == 0)\n  end\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm |>\n<| c |>\n\
    I like your solution, but I wonder how it compares to other solutions posted so\
    \ far.\n<|/ c |>\n<| c |>\nI added a benchmark comparison to my answer.\n<|/ c\
    \ |>\n<| c |>\nI like your solution, but I wonder how it compares to other solutions\
    \ posted so far.\n<|/ c |>\n<| c |>\nI added a benchmark comparison to my answer.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I wonder how it compares to other\
    \ solutions posted so far.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "  l.sort!\n\
    \  l.inject(true) do |sum,x|\n    sum and (sum-x == 0)\n  end\nend", "  l.sort!\n\
    \  l.inject(true) do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n\
    \  l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\nend", "  l.sort!\n\
    \  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |result, (el1, el2)|\n    result && el1 + el2 == 0\n\
    \  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum\
    \ + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n   \
    \ sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do\
    \ |result, pair|\n    result && pair.reduce(:+) == 0\n  end\nend", "  l.sort!\n\
    \  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum, el|\n    sum && el == l[-el-1]\n  end\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis code doesn't work. Try it out with [1,1,1]. You'll get false instead\
    \ of true.\n<|/ c |>\n<| c |>\n: It works for me in Ruby 1.8.7 and 1.9.2. What\
    \ version are you using?\n<|/ c |>\n<| c |>\n: I tested with Ruby 1.8.7 and 1.9.2\
    \ on Windows. I didn't test on Linux.\n<|/ c |>\n<| c |>\n: I tested with Ruby\
    \ 1.8.7 and 1.9.2 on Windows. I didn't test on Linux.\n<|/ c |>\n<| c |>\n: I\
    \ tested with Ruby 1.8.7 and 1.9.2 on Windows. I didn't test on Linux.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>", "  l.sort!\n  return l.inject(true) do |result,\
    \ (i, j)|\n    result && j == 0 || (i != j && j == l.sum - i)\n  end\nend", " \
    \ l.sort!\n  l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\nend",
  "  l.sort!\n  l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\nend", " \
    \ l.sort!\n  return l.inject(true) do |result, (i, j)|\n    result && i == j\n\
    \  end\nend", "  l.sort!\n  l.inject(true) { |sum, el| sum && el == 0 }\nend",
  "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum + x != 0)\n  end\nend",
  "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum - x == 0)\n  end\n\
    end", "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n\
    \  l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\nend", "  l.sort!\n\
    \  l.inject(true) do |sum,x|\n    sum and (sum + x != 0)\n  end\nend", "  l.sort!\n\
    \  l.each_cons(2) do |a,b|\n    return false if b < 0\n    return false if b >\
    \ 0\n    return false if a + b == 0\n  end\n  true\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |result, (i, j)|\n    result && j + i == 0\n  end\n\
    end", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum-x == 0)\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum && el == 0 ||\
    \ sum\n  end\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n    sum && el ==\
    \ 0 && sum\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n  \
    \  sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do\
    \ |result, (i, j)|\n    result && j == 0 || (i != j && j == l.last)\n  end\nend",
  "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum - x == 0)\n  end\nend",
  "  l.sort!\n  l.inject(true) do |sum, el|\n    sum and (sum + el == 0)\n  end\n\
    end\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n`l = [1, 3, -2, 1]` returns\
    \ `nil` instead of `true`.\n<|/ c |>\n<| c |>\n`l = [1, 3, -2, 1]` returns `nil`\
    \ instead of `true`.\n<|/ c |>\n<| c |>\n`l = [1, 3, -2, 1]` returns `nil` instead\
    \ of `true`.\n<|/ c |>\n<| c |>\n`l = [1, 3, -2, 1]` returns `nil` instead of\
    \ `true`.\n<|/ c |>\n<| c |>\n`l = [1, 3, -2, 1]` returns `nil` instead of `true`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum && sum + x == 0\n  end\nend", "  l.sort!\n  return l.inject(true) do\
    \ |result, pair|\n    result && pair.reduce(:+) == 0\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |result, (i, j)|\n    result && j == 0 || !result\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work if\
    \ there are duplicates in the array. For example, `[1,1,1]` returns `true` instead\
    \ of `false`.\n<|/ c |>\n<| c |>\n, thanks for pointing that out. I've updated\
    \ the answer to account for duplicates.\n<|/ c |>\n<| a |>\n<code>", "  l.sort!\n\
    \  return l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\nend", " \
    \ l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum - x == 0)\n  end\n\
    end", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and (sum + x ==\
    \ 0)\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to make it more efficient by avoiding sorting.\n\
    <|/ c |>\n<| c |>\n: I doubt it.  Sorting is a O(n log n) operation, so it's going\
    \ to be pretty slow on large lists.  If you're going to be doing this a lot, you\
    \ might want to consider using a different data structure like a hash instead\
    \ of an array.\n<|/ c |>\n<| c |>\n: I added a solution that avoids sorting.\n\
    <|/ c |>\n<| c |>\n: I added a solution that avoids sorting.\n<|/ c |>\n<| c |>\n\
    : I added a solution that avoids sorting.\n<|/ c |>\n<| a tags=ruby,arrays |>\n\
    <code>", "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum +\
    \ el == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |result, pair|\n\
    \    result && pair[0] == pair[1]\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |result, item|\n    result && item == 0\n  end\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a,b|\n    return false if a-b == 0\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a,b|\n    return false if a-b == 0\n  end\n  true\nend", "  l.sort!\n  return\
    \ l.inject(true) do |result, pair|\n    result && pair.reduce(:+) == 0\n  end\n\
    end", "  l.sort!\n  l.each_cons(2) do |a,b|\n    return false if a+b == 0\n  end\n\
    \  true\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum && sum + x ==\
    \ 0\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum +\
    \ x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n   \
    \ sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do\
    \ |result, pair|\n    result and pair[0] == pair[1]\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum,x|\n    sum and (sum - x) == 0\n  end\nend",
  "  l.sort!\n  return l.inject(true) do |sum, el|\n    sum and (sum - el == 0)\n\
    \  end\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n    sum && el != 0 &&\
    \ el != -el && sum + el == 0 \n  end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if there are multiple zeros in the list. For example, `[0,0,0]` returns\
    \ `true`, but `[0,0,0]` should return `false`.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. I updated my answer to account for that case.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are multiple zeros in the list. For example,\
    \ `[0,0,0]` returns `true`, but `[0,0,0]` should return `false`.\n<|/ c |>\n<|\
    \ a tags=ruby |>\n<code>", "  l.sort!\n  return l.inject(true) do |sum, el|\n\
    \    sum and (el == 0 or sum + el == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum - x) == 0\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and el == el - sum\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum, el|\n    sum and (sum - el == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum - x == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum - x == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum - x == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum, item| sum && item == 0 }\nend", "  l.sort!\n  l.inject(true) { |sum,x|\
    \ sum && sum + x == 0 }\nend", "  l.sort!\n  return l.inject(true) do |result,\
    \ pair|\n    result && pair.reduce(:+) == 0\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n\
    \    sum and (sum + x != 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |result, pair|\n    result and pair[0] == pair[1]\n  end\nend", "  l.sort!\n\
    \  l.inject(true) do |sum,x|\n    sum and (sum + x) == 0 \n  end\nend\n</code>\n\
    <|/ a tags=ruby,arrays,algorithm |>\n<| c |>\nThis doesn't work if you have a\
    \ negative number in the array. For example, `[2,-3,-4,5]` returns `true` but\
    \ `[2,-3,-4,-5]` returns `false`.\n<|/ c |>\n<| c |>\nGood catch. I've updated\
    \ the answer to account for negative numbers.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a negative number in the array. For example, `[2,-3,-4,5]`\
    \ returns `true` but `[2,-3,-4,-5]` returns `false`.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've updated the answer to account for negative numbers.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have a negative number in the array.\
    \ For example, `[2,-3,-4,5]` returns `true` but `[2,-3,-4,-5]` returns `false`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "  l.sort!\n  return l.inject(true) do |sum,x|\n\
    \    sum and (sum - x == 0)\n  end\nend", "  l.sort!\n  l.inject(true) { |acc,\
    \ x| acc && x==0 && acc.last }\nend", "  l.sort!\n  l.each_cons(2) do |a,b|\n\
    \    return false if b < 0\n    return false if b > 0\n    return false if a +\
    \ b == 0\n  end\n  true\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum && sum\
    \ + x == 0 }\nend", "  l.sort!\n  return l.inject(true) do |result, (i, j)|\n\
    \    result && j + i == 0\n  end\nend", "  l.sort!\n  l.inject(true) { |sum, el|\
    \ sum && el == 0 }\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n   \
    \ sum and (sum - x) == 0\n  end\nend", "  l.sort!\n  return l.inject(true) do\
    \ |result, pair|\n    result && pair[0] == pair[1]\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum,x|\n    sum and (sum - x == 0)\n  end\nend",
  "  l.sort!\n  return l.inject(true) do |acc, x|\n    acc && x[0] == 0 && x[1] !=\
    \ 0\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum,x|\n    sum and\
    \ (sum - x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true) do |sum, el|\n\
    \    sum and (sum + el == 0)\n  end\nend", "  l.sort!\n  l.inject(true) do |sum,\
    \ el|\n    sum and (sum - el == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum && sum + x == 0\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x != 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and el == 0 or (sum and sum - el == 0)\n  end\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nI like the `inject` solution, but I wonder\
    \ if there is a way to avoid the sort.\n<|/ c |>\n<| c |>\nI wonder if there is\
    \ a way to avoid the sort.\n<|/ c |>\n<| c |>\nI wonder if there is a way to avoid\
    \ the sort.\n<|/ c |>\n<| c |>\nI wonder if there is a way to avoid the sort.\n\
    <|/ c |>\n<| c |>\nI wonder if there is a way to avoid the sort.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>", "  l.sort!\n  return l.inject(true) do |result, pair|\n\
    \    result and pair[0] == pair[1]\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum - x) == 0\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |result, pair|\n    result && pair[1] == 0\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum - x) == 0\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ do |result, pair|\n    result && pair.reduce(:+) == 0\n  end\nend", "  l.sort!\n\
    \  l.inject(true) do |sum, el|\n    sum and (sum - el == 0)\n  end\nend", "  l.sort!\n\
    \  return l.inject(true) do |sum, el|\n    sum and (el == sum + el)\n  end\nend",
  "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum - x == 0)\n  end\nend",
  "  l.sort!\n  return l.inject(true) do |result, (i, j)|\n    result && j == 0 ||\
    \ (i != j && j + i == 0)\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
