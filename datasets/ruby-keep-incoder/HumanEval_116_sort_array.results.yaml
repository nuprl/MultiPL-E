name: HumanEval_116_sort_array
language: ruby
results:
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e == 0\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0qqtl64\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0qqtl64.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.17 tests/s, 220.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppq5ox0g6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppq5ox0g6.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.06 tests/s, 224.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3znesbli\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3znesbli.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.22 tests/s, 216.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdjq8p64q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdjq8p64q.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.98 tests/s, 221.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf0jiztpu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf0jiztpu.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.013205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.73 tests/s, 75.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |e| e > 0 ? e\
    \ : -e }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9sbhno54\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9sbhno54.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.006172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.02 tests/s, 162.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdwftt9hq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdwftt9hq.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.78 tests/s, 216.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhvij7ly\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhvij7ly.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.62 tests/s, 181.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp90i5lri\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp90i5lri.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004545 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.02 tests/s, 220.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6valgt12\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6valgt12.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.73 tests/s, 216.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc6cimms0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc6cimms0.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004535 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.51 tests/s, 220.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |val, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzpo079im\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzpo079im.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.16 tests/s, 223.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd95ravi_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd95ravi_.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004694 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.04 tests/s, 213.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpprzf8omp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpprzf8omp.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.02 tests/s, 223.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |val, i|\n    arr[i] = 0 if val == 0\n    arr[i] = 1 if val == 1\n    arr[i]\
    \ = val if val > 0\n  end\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1_2teqj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1_2teqj.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.22 tests/s, 213.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp871fjowp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp871fjowp.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004603 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.25 tests/s, 217.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = x if x.zero?\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_uigbud\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_uigbud.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.70 tests/s, 210.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15g205_a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15g205_a.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.013873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.08 tests/s, 72.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e == 0\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpje6rhssa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpje6rhssa.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.31 tests/s, 216.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv391shc6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv391shc6.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.118625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    8.43 tests/s, 8.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0crdqaq4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0crdqaq4.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.44 tests/s, 218.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7x11sf0o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7x11sf0o.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004389 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.84 tests/s, 227.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7dv6fz6m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7dv6fz6m.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.50 tests/s, 226.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppll81aoa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppll81aoa.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.12 tests/s, 222.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvk5d59ow\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvk5d59ow.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.00 tests/s, 204.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7l4pb3aa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7l4pb3aa.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.12 tests/s, 216.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpggpfch6j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpggpfch6j.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.019771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    50.58 tests/s, 50.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjym_8a8u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjym_8a8u.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.0045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.22 tests/s, 222.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmdpo9zy0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmdpo9zy0.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.67 tests/s, 222.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zuq1rtj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zuq1rtj.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004742 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.88 tests/s, 210.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |e| e > 0 ? e\
    \ : -e }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxgefw_5i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxgefw_5i.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.018556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.89 tests/s, 53.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = [x, i] if arr[i].nonzero?\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zfo6jwx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zfo6jwx.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[[1, 0], [2, 1], [3, 2], [4, 3], [5, 4]]>\n\ndiff:\n? [[1, 0], [2,\
    \ 1], [3, 2], [4, 3], [5, 4]]\n===============================================================================\n\
    \nFinished in 0.005138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.63 tests/s, 194.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2ba0xhn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2ba0xhn.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.78 tests/s, 228.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi1d0llkf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi1d0llkf.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.99 tests/s, 228.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpldotwgga\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpldotwgga.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.69 tests/s, 193.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8v2o7ogi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8v2o7ogi.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.27 tests/s, 224.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.sort!\n  arr\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhcdj3ec\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhcdj3ec.rb:17:in\
    \ `test_sort_array'\n     14: class TestHumanEval < Test::Unit::TestCase\n   \
    \  15:   def test_sort_array\n     16:     candidate = method(:sort_array)\n \
    \ => 17:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     18:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     19:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     20:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.15 tests/s, 188.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqas67m3y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqas67m3y.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.15 tests/s, 219.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyxjkh16j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyxjkh16j.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.32 tests/s, 224.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjouax_7j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjouax_7j.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.014552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.72 tests/s, 68.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi9pku2k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi9pku2k.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.97 tests/s, 177.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw77f3n5k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw77f3n5k.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.98 tests/s, 215.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wft0k_b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wft0k_b.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.17 tests/s, 220.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpymumensz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpymumensz.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.15 tests/s, 219.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_1n002h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_1n002h.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.27 tests/s, 214.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7g6dm2tq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7g6dm2tq.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.006154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.50 tests/s, 162.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |i| i.to_s(2)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5,\
    \ -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3],\
    \ candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaq2y_skx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaq2y_skx.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.039427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.36 tests/s, 25.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ux38wvh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ux38wvh.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.021613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.27 tests/s, 46.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ 0 : x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7sx1nwd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7sx1nwd.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[0, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2,    4, 3, 5]\n?  0     3,     \
    \    \n?  ?     +++   ---  \n===============================================================================\n\
    \nFinished in 0.004423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.09 tests/s, 226.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp09h6zxyx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp09h6zxyx.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.16 tests/s, 224.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa5i3qu1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa5i3qu1.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.01 tests/s, 219.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl_0zwn2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl_0zwn2.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.021687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.11 tests/s, 46.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.sort!\n  arr\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdahx770\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdahx770.rb:17:in\
    \ `test_sort_array'\n     14: class TestHumanEval < Test::Unit::TestCase\n   \
    \  15:   def test_sort_array\n     16:     candidate = method(:sort_array)\n \
    \ => 17:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     18:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     19:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     20:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.25 tests/s, 229.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfw4k8et8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfw4k8et8.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.011137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.79 tests/s, 89.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjbuurdhr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjbuurdhr.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.93 tests/s, 219.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    if x > 0\n      arr[i] = x\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmxzj_h2w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmxzj_h2w.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.57 tests/s, 179.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |e| [e, arr.count(e)]\
    \ }.sort_by { |e| e[1] }.map { |e| e[0] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwnd9eln8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwnd9eln8.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.06023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    16.60 tests/s, 16.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = [x, i] if x > 0\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqx_98_q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqx_98_q.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[[1, 0], [2, 1], [3, 2], [4, 3], [5, 4]]>\n\ndiff:\n? [[1, 0], [2,\
    \ 1], [3, 2], [4, 3], [5, 4]]\n===============================================================================\n\
    \nFinished in 0.011548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.60 tests/s, 86.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb502imtp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb502imtp.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.023702 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.19 tests/s, 42.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkh1np9zt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkh1np9zt.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.93 tests/s, 219.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwlol9wmm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwlol9wmm.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.41 tests/s, 228.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjr30jtdz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjr30jtdz.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.98 tests/s, 215.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjibki4t6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjibki4t6.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.78 tests/s, 221.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e > 0 && (arr.length - i) > 1\n      arr[i], arr[i+1] = arr[i+1],\
    \ arr[i]\n    end\n  end\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobfzbx26\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobfzbx26.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[2, 3, 4, 5, 1]>\n\ndiff:\n? [1, 2,    4, 3, 5]\n?        3,    5\
    \  1 \n?  ---   +++   ?  ? \n===============================================================================\n\
    \nFinished in 0.007388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.35 tests/s, 135.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckh26mrc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckh26mrc.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.19 tests/s, 190.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzg0wats8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzg0wats8.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.01 tests/s, 218.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkx4u6v1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkx4u6v1.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.04 tests/s, 214.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyyw0g56o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyyw0g56o.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.24 tests/s, 215.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e > 0 && (arr.length - i) > 1\n      arr[i], arr[i+1] = arr[i+1],\
    \ arr[i]\n    end\n  end\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphahzjrk9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphahzjrk9.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[2, 3, 4, 5, 1]>\n\ndiff:\n? [1, 2,    4, 3, 5]\n?        3,    5\
    \  1 \n?  ---   +++   ?  ? \n===============================================================================\n\
    \nFinished in 0.004586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.05 tests/s, 218.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.to_s(2)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5,\
    \ -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3],\
    \ candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm67wmy_h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm67wmy_h.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.42 tests/s, 211.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6c0gd0t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6c0gd0t.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.25 tests/s, 218.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3o2kx7p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3o2kx7p.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.01 tests/s, 215.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e == 0\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_b37fcil\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_b37fcil.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.012578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.50 tests/s, 79.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkojhevo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkojhevo.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.37 tests/s, 224.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |i| i.to_s(2)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5,\
    \ -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3],\
    \ candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmdxt6yf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmdxt6yf.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.83 tests/s, 221.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4twyulre\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4twyulre.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.015255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.55 tests/s, 65.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6w40ic4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6w40ic4.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.72 tests/s, 202.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnppl5akq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnppl5akq.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.012163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.22 tests/s, 82.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tgadi2e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tgadi2e.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.006475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.44 tests/s, 154.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppprnkus3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppprnkus3.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.73 tests/s, 216.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.to_s(2)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5,\
    \ -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3],\
    \ candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_pe_ibiv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_pe_ibiv.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004815 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.68 tests/s, 207.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = x if x.zero?\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxcm4cm8t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxcm4cm8t.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.014614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.43 tests/s, 68.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswi0r3r9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswi0r3r9.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.010123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.78 tests/s, 98.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89q69vdg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89q69vdg.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.48 tests/s, 218.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo10ij6sz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo10ij6sz.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.83 tests/s, 221.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfq6lxnni\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfq6lxnni.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.017766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.29 tests/s, 56.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqrj33xk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqrj33xk.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.98 tests/s, 221.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.to_s(2)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5,\
    \ -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3],\
    \ candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof5jo0lp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof5jo0lp.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.73 tests/s, 216.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptjj93kq2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptjj93kq2.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.72 tests/s, 213.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37nekuex\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37nekuex.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.32 tests/s, 227.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb47gadwr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb47gadwr.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.02 tests/s, 225.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |val, i|\n    arr[i] = val if val > 0\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0fr30ui\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0fr30ui.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.09 tests/s, 214.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6xz_cl4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6xz_cl4.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.00 tests/s, 196.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmq8ugtws\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmq8ugtws.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004545 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.02 tests/s, 220.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e.zero?\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7bipex4d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7bipex4d.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.78 tests/s, 225.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p42s4nk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p42s4nk.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.63 tests/s, 225.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjng46vku\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjng46vku.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.84 tests/s, 225.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfs79g0kh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfs79g0kh.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.020044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.89 tests/s, 49.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e == 0\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_nlnnsqd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_nlnnsqd.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.99 tests/s, 228.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = x if x.to_s.length <= 1\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnaivv215\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnaivv215.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.57 tests/s, 222.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcfvkoppy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcfvkoppy.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004483 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.06 tests/s, 223.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp155njeat\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp155njeat.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.38 tests/s, 209.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzeda_g70\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzeda_g70.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.76 tests/s, 226.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = x if x.to_s(2).count('1').zero?\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv26p_re6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv26p_re6.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.53 tests/s, 218.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj459ht8x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj459ht8x.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.51 tests/s, 105.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmzmnoc26\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmzmnoc26.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004768 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.73 tests/s, 209.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg17b2m_0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg17b2m_0.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.78 tests/s, 228.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprag376_g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprag376_g.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.34 tests/s, 207.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp823kqczk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp823kqczk.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.22 tests/s, 214.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiqcq6s9_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiqcq6s9_.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.02572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.88 tests/s, 38.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt6zkwoyg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt6zkwoyg.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.84 tests/s, 215.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |i| i if i.zero?\
    \ }.sort!\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1z1mo8_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1z1mo8_.rb:17:in\
    \ `test_sort_array'\n     14: class TestHumanEval < Test::Unit::TestCase\n   \
    \  15:   def test_sort_array\n     16:     candidate = method(:sort_array)\n \
    \ => 17:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     18:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     19:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     20:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.68 tests/s, 219.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1scaw7dw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1scaw7dw.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.008802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.61 tests/s, 113.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15d180ws\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15d180ws.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.62 tests/s, 182.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbbm01f_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbbm01f_.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.006223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.69 tests/s, 160.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |val, i|\n    arr[i] = 0 if val == 0\n    arr[i] = 1 if val == 1\n  end\n  arr\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg4b39uc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg4b39uc.rb:20:in\
    \ `test_sort_array'\n     17: class TestHumanEval < Test::Unit::TestCase\n   \
    \  18:   def test_sort_array\n     19:     candidate = method(:sort_array)\n \
    \ => 20:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     21:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     22:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     23:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.010712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.35 tests/s, 93.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusn1ilx4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusn1ilx4.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.84 tests/s, 225.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9owv2zfe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9owv2zfe.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.006534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.05 tests/s, 153.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = 0 if arr[i] == 0\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptrwqp_pt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptrwqp_pt.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.36 tests/s, 229.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpickuo5y3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpickuo5y3.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.007296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.06 tests/s, 137.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t4l176h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t4l176h.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.022418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.61 tests/s, 44.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazqvy26b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazqvy26b.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.52 tests/s, 174.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx1o50cgq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx1o50cgq.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.67 tests/s, 186.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    if x > 0\n      arr[i] = x\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp83x84mhb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp83x84mhb.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.42 tests/s, 192.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv0938jpk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv0938jpk.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.010805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.55 tests/s, 92.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.nonzero? ? x.to_i : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr0zlpyob\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr0zlpyob.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.78 tests/s, 225.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmn89ifd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmn89ifd.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.12 tests/s, 220.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e > 0 then\n      arr[i] = e - 1\n    end\n  end\n  arr\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1s43ey92\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1s43ey92.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[0, 1, 2, 3, 4]>\n\ndiff:\n? [   1, 2, 4, 3, 5]\n?  0,           \
    \  4 \n?  +++      ---   ? \n===============================================================================\n\
    \nFinished in 0.0058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.41 tests/s, 172.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphdi3b90c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphdi3b90c.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.97 tests/s, 222.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.nonzero? ? x.abs : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdhyr_k5f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdhyr_k5f.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.19 tests/s, 211.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78w34he9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78w34he9.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.006476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.42 tests/s, 154.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1zhkc9k_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1zhkc9k_.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004925 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.05 tests/s, 203.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbfbq8_gg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbfbq8_gg.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.15 tests/s, 215.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpep5u6l2b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpep5u6l2b.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.011802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.73 tests/s, 84.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp564wemu1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp564wemu1.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.049526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    20.19 tests/s, 20.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |val, i|\n    arr[i] = 0 if val == 0\n    arr[i] = val if arr[i] == 1\n  end\n\
    \  arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_pjs4_3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_pjs4_3.rb:20:in\
    \ `test_sort_array'\n     17: class TestHumanEval < Test::Unit::TestCase\n   \
    \  18:   def test_sort_array\n     19:     candidate = method(:sort_array)\n \
    \ => 20:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     21:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     22:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     23:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.78 tests/s, 221.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmidbd2qg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmidbd2qg.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.006423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.69 tests/s, 155.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    if x > 0\n      arr[i] = x\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkjph8ltm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkjph8ltm.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.018206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.93 tests/s, 54.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    if x==0\n      arr[i] = -1\n    else\n      arr[i] = x\n    end\n\
    \  end\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp740t_bbp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp740t_bbp.rb:23:in\
    \ `test_sort_array'\n     20: class TestHumanEval < Test::Unit::TestCase\n   \
    \  21:   def test_sort_array\n     22:     candidate = method(:sort_array)\n \
    \ => 23:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     24:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     25:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     26:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.96 tests/s, 223.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_gwb_jk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_gwb_jk.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004455 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.47 tests/s, 224.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |i| i if i.to_s.length\
    \ <= 2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmkfhxbno\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmkfhxbno.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.70 tests/s, 220.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqpt9rdj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqpt9rdj.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.96 tests/s, 217.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvrpgwxdp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvrpgwxdp.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.68 tests/s, 214.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = x if x.zero?\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3uskfyi9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3uskfyi9.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.58 tests/s, 217.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |i| i.to_s(2)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5,\
    \ -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3],\
    \ candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9tucod2v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9tucod2v.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004768 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.73 tests/s, 209.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp877ydehu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp877ydehu.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.0049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.08 tests/s, 204.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |val, index|\n    arr[index] = val if val > 0\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaum13r6i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaum13r6i.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.02364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.30 tests/s, 42.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyzlfq53x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyzlfq53x.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.93 tests/s, 219.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.sort!\n  arr\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe5tj8gh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe5tj8gh.rb:17:in\
    \ `test_sort_array'\n     14: class TestHumanEval < Test::Unit::TestCase\n   \
    \  15:   def test_sort_array\n     16:     candidate = method(:sort_array)\n \
    \ => 17:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     18:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     19:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     20:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009843 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.60 tests/s, 101.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkns1vwh_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkns1vwh_.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004594 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.68 tests/s, 217.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    arr[i] = 0 if arr[i] == 0\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5sa8qnp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5sa8qnp.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.12 tests/s, 185.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.nonzero? ? x.to_i : x.to_s }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8f_3mash\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8f_3mash.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.12 tests/s, 200.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptbosf0la\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptbosf0la.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.32 tests/s, 224.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpec48g9jw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpec48g9jw.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.19 tests/s, 226.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppzg1egze\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppzg1egze.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004908 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.75 tests/s, 203.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = x if x.zero?\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpupwylfv2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpupwylfv2.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.98 tests/s, 221.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9uygndtb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9uygndtb.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.23 tests/s, 206.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2c_9etvy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2c_9etvy.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.82 tests/s, 209.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzj3bjcq7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzj3bjcq7.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005571 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.50 tests/s, 179.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_ohcbsb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_ohcbsb.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.01947 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.36 tests/s, 51.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    arr[i] = 0 if arr[i] == 0\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyae8cye\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyae8cye.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.76 tests/s, 187.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42t14aq3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42t14aq3.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.037502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.67 tests/s, 26.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo26siqn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo26siqn.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.01 tests/s, 215.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf8p6a1a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf8p6a1a.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.97 tests/s, 219.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7sie7tqy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7sie7tqy.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.61 tests/s, 201.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9wrm3y_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9wrm3y_.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.81 tests/s, 213.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = x if x.zero?\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpod3d0jfg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpod3d0jfg.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004574 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.63 tests/s, 218.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e == 0\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjywlhsl8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjywlhsl8.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004829 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.08 tests/s, 207.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e == 0\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmnnk0b2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmnnk0b2.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004795 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.55 tests/s, 208.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyy94g0zj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyy94g0zj.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.06296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    15.88 tests/s, 15.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67zyec31\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67zyec31.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.08 tests/s, 213.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr3l5ulwu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr3l5ulwu.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.78 tests/s, 221.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5wkubbi0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5wkubbi0.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.10 tests/s, 211.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9h41ledp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9h41ledp.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.34 tests/s, 221.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwvyyvun\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwvyyvun.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.29 tests/s, 204.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf0ww7c8z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf0ww7c8z.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.22 tests/s, 224.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpg2nwxg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpg2nwxg.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.17 tests/s, 207.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t19qp99\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t19qp99.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.21 tests/s, 203.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfj_egh4_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfj_egh4_.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.006283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.16 tests/s, 159.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95hz_mkd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95hz_mkd.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.17 tests/s, 225.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoi6nyc1d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoi6nyc1d.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.95 tests/s, 211.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpua7d24s5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpua7d24s5.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.006985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.16 tests/s, 143.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpez6mkf_v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpez6mkf_v.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.10424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    9.59 tests/s, 9.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa97jhn1k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa97jhn1k.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.37 tests/s, 222.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9oxv40t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9oxv40t.rb:15:in\
    \ `test_sort_array'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_sort_array\n     14:     candidate = method(:sort_array)\n \
    \ => 15:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     16:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     17:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     18:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.05 tests/s, 218.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32x8tjux\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32x8tjux.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.10 tests/s, 198.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_q3t7bir\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_q3t7bir.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.005883 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.98 tests/s, 169.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppc7ufq2z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppc7ufq2z.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.010269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.38 tests/s, 97.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5lt0av7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5lt0av7.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004708 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.40 tests/s, 212.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    arr[i] = 0 if e == 0\n  end\n  arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate =\
    \ method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5,\
    \ 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4,\
    \ -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
    \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
    \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp99v2orgi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp99v2orgi.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.61 tests/s, 223.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = 0 if arr[i] == 0\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx5j3quv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx5j3quv.rb:19:in\
    \ `test_sort_array'\n     16: class TestHumanEval < Test::Unit::TestCase\n   \
    \  17:   def test_sort_array\n     18:     candidate = method(:sort_array)\n \
    \ => 19:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     20:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     21:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     22:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.54 tests/s, 216.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkqppxem\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkqppxem.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004702 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.68 tests/s, 212.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x == 1 ?\
    \ x.to_s : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpho440ktm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpho440ktm.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", 2, 3, 4, 5]>\n\ndiff:\n? [\"1\", 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.007713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.65 tests/s, 129.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e == 0\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_tisli5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_tisli5.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.50 tests/s, 216.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnabw22tc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnabw22tc.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[\"1\", \"10\", \"11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   ,\
    \ 4   , 3    , 5    ]\n?  \" \"  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?\
    \  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.008708 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.84 tests/s, 114.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map { |x| x.zero? ?\
    \ x : x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiouiklk2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiouiklk2.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004752 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.44 tests/s, 210.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3gfiu19\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3gfiu19.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.80 tests/s, 220.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e == 0\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelb4mvom\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelb4mvom.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.89 tests/s, 225.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5f5sffwy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5f5sffwy.rb:16:in\
    \ `test_sort_array'\n     13: class TestHumanEval < Test::Unit::TestCase\n   \
    \  14:   def test_sort_array\n     15:     candidate = method(:sort_array)\n \
    \ => 16:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     17:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     18:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     19:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.12 tests/s, 239.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index do\
    \ |e, i|\n    if e == 0\n      arr[i] = e\n    end\n  end\n  arr\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvuygbhgx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvuygbhgx.rb:21:in\
    \ `test_sort_array'\n     18: class TestHumanEval < Test::Unit::TestCase\n   \
    \  19:   def test_sort_array\n     20:     candidate = method(:sort_array)\n \
    \ => 21:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \     22:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     23:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     24:     assert_equal([], candidate.call([]))\n<[1, 2, 4, 3, 5]> expected\
    \ but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.004264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.52 tests/s, 234.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
