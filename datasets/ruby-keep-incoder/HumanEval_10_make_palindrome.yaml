name: HumanEval_10_make_palindrome
language: ruby
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome('')\n# ''\n# >>> make_palindrome('cat')\n\
  # 'catac'\n# >>> make_palindrome('cata')\n# 'catac'\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  string = string.dup\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length", "  string.length.times do |i|\n    string.slice!(0, i)\n\
    \    break if string.length <= 1\n    string.slice!(0, i)\n    break if string.length\
    \ <= 1\n  end\n  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(longest.last).last)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(longest.last).last)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.rindex))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest\nend", "  string.gsub(/(?<=^|\\\
    s)\\B/, '').gsub(/(?<=\\s)\\B/, '').gsub(/(?<=^|\\s)\\B/, '').gsub(/(?<=\\s)\\\
    B/, '')\nend", "  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.last))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.down", "  string\
    \ = string.dup\n  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,", "  max_length = find_max_length(string)\n\
    \  postfix = find_postfix_of_palindrome(string, max_length)\n  prefix = find_prefix_of_palindrome(string,\
    \ max_length)\n  string = \"#{prefix}#{postfix}\"\n  string\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest\nend", "  string.reverse\n  string.sub!(/[^a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/, '')\n  string.sub!(/[a-z]/,\
    \ '')\n  string.sub", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string).reverse)\n\
    \  longest\nend", "  string.reverse\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string\nend", "  longest = find_longest_palindrome(string)\n\
    \  middle = find_middle_palindrome(longest)\n  middle = middle.reverse\n  middle\
    \ = middle + longest\n  middle = middle.reverse\n  middle = middle + string\n\
    \  middle = middle.reverse\n  middle = middle + longest\n  middle = middle.reverse\n\
    \  middle = middle + string\n  middle = middle.reverse\n  middle = middle + longest\n\
    \  middle = middle.reverse\n  middle = middle + string\n  middle = middle.reverse\n\
    \  middle = middle + longest\n  middle = middle.reverse\n  middle = middle + string\n\
    \  middle = middle.reverse\n  middle = middle + longest\n  middle = middle.reverse\n\
    \  middle = middle + string\n  middle = middle.reverse\n  middle = middle + longest\n\
    \  middle = middle.reverse\n  middle = middle + string\n  middle = middle.reverse\n\
    \  middle = middle + longest\n  middle = middle.reverse\n  middle = middle + string\n\
    \  middle = middle.reverse\n  middle = middle + longest\n  middle = middle.reverse\n\
    \  middle = middle + string\n  middle = middle.reverse\n  middle = middle + longest\n\
    \  middle = middle.reverse\n  middle = middle + string\n  middle = middle.reverse\n\
    \  middle = middle + longest\n  middle = middle.reverse\n  middle = middle + string\n\
    \  middle = middle.reverse\n  middle = middle + longest\n  middle = middle.reverse\n\
    \  middle = middle + string\n  middle = middle.reverse\n  middle = middle + longest\n\
    \  middle = middle.reverse\n  middle = middle + string\n  middle = middle.reverse\n\
    \  middle = middle + longest\n  middle = middle.reverse\n  middle = middle + string\n\
    \  middle = middle.reverse\n  middle = middle + longest\n  middle = middle.reverse\n\
    \  middle = middle + string\n  middle = middle.reverse\n  middle = middle + longest\n\
    \  middle = middle.reverse\n  middle = middle + string\n  middle = middle.reverse\n\
    \  middle = middle + longest\n  middle = middle.reverse\n  middle = middle + string\n\
    \  middle = middle.reverse\n  middle = middle + longest\n  middle = middle.reverse\n\
    \  middle = middle + string\n  middle = middle.reverse\n  middle = middle + longest\n\
    \  middle = middle.reverse\n  middle = middle + string\n  middle = middle.reverse\n\
    \  middle = middle + longest\n  middle = middle.reverse", "  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest += string.reverse(longest.size)\n\
    \  longest\nend", "  string = string.dup\n  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string[longest.length..-1]\n  longest = longest + string[0..longest.length-1].reverse\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_prefix_palindrome(string,\
    \ longest.last))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.down", "  max_length = 0\n  max_length_postfix = -1\n\
    \  max_length_prefix = -1\n  max_length_suffix = -1\n  i = 0\n  while i < string.length\n\
    \    j = i\n    while j < string.length\n      k = j\n      while k < string.length\n\
    \        max_length = max_length if max_length > string.length - k else string.length\
    \ - k\n        max_length_postfix = max_length_postfix if max_length_postfix >\
    \ string.length - k else string.length - k\n        max_length_prefix = max_length_prefix\
    \ if max_length_prefix > string.length - k else string.length - k\n        max_length_suffix\
    \ = max_length_suffix if max_length_suffix > string.length - k else string.length\
    \ - k\n        k = k + 1\n      j = j + 1\n    i = i + 1\n  max_length = max_length\
    \ if max_length > max_length_postfix else max_length_postfix\n  max_length = max_length\
    \ if max_length > max_length_prefix else max_length_prefix\n  max_length = max_length\
    \ if max_length > max_length_suffix else max_length_suffix\n  max_length = max_length\
    \ if max_length > 0 else string.length\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else string.length\n\
    \  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else string.length\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else string.length\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else string.length\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else string.length\n\
    \  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else string.length\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else string.length\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else string.length\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else string.length\n\
    \  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else string.length", "  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n\
    \  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/, '')\
    \ unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/,\
    \ '') unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n\
    \  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/, '')\
    \ unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/,\
    \ '') unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n\
    \  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/, '')\
    \ unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/,\
    \ '') unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n\
    \  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/, '')\
    \ unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/,\
    \ '') unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n\
    \  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/, '')\
    \ unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/,\
    \ '') unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n\
    \  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/, '')\
    \ unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?\n  string.gsub!(/[^a-z]/,\
    \ '') unless string.empty?\n  string.gsub!(/[^a-z]/, '') unless string.empty?",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.end))\n\
    \  longest.prepend(string.slice(longest.end,string.length))\n  return longest.to_s\n\
    end", "  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.", "  max_length = 0\n  max_length_postfix = []\n  max_length_prefix_postfix\
    \ = []\n  max_length_prefix_postfix_reverse = []\n  max_length_prefix_postfix_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse =\
    \ []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = []\n  max_length_prefix_postfix_reverse_reverse_reverse_reverse_re", "  string\
    \ = string.dup\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.reverse!\n  string\nend", "  max_length = 0\n  max_length_postfix_length\
    \ = 0\n  max_length_prefix_length = 0\n  max_length_prefix_postfix_length = 0\n\
    \  max_length_prefix_postfix_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length =\
    \ 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_",
  "  longest = find_longest_palindrome(string)\n  middle = longest / 2\n  middle =\
    \ middle * 2\n  middle = middle + 1\n  middle = middle - 1\n  middle = middle\
    \ + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n \
    \ middle = middle + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle\
    \ = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n  middle = middle\
    \ + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n \
    \ middle = middle + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle\
    \ = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n  middle = middle\
    \ + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n \
    \ middle = middle + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle\
    \ = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n  middle = middle\
    \ + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n \
    \ middle = middle + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle\
    \ = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n  middle = middle\
    \ + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n \
    \ middle = middle + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle\
    \ = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n  middle = middle\
    \ + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n \
    \ middle = middle + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle\
    \ = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n  middle = middle\
    \ + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n \
    \ middle = middle + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle\
    \ = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n  middle = middle\
    \ + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle = middle - 1\n \
    \ middle = middle + 1\n  middle = middle - 1\n  middle = middle + 1\n  middle\
    \ = middle - 1\n  middle = middle ", "  string.downcase!\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '') unless string =~ /[a-z]/\n  string.gsub!(/[a-z]/,\
    \ '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~\
    \ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/,\
    \ '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~\
    \ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/,\
    \ '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~\
    \ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/,\
    \ '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~\
    \ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/,\
    \ '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~\
    \ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/,\
    \ '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~\
    \ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/,\
    \ '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~\
    \ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/,\
    \ '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~\
    \ /[^a-z]/\n  string.gsub!(/[a-z]/, '') unless string =~ /[^a-z]/\n  string.gsub!(/[a-z]/,\
    \ '') unless string =~ /[^a-z]/\n  ", "  string.length.times do |i|\n    string.slice!(0..i).reverse!\n\
    \  end\n  string\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_prefix_palindrome(string,\
    \ longest.last))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(string.rjust(longest.size,\
    \ string[0]))\n  longest\nend", "  string = string.dup\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/",
  "  string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice", "  max_length\
    \ = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length = 0\n  max_length_prefix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length =\
    \ 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_",
  "  string = string.dup\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/) {\
    \ |s| s.reverse }\n  string\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest.prepend(string.downcase)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest\nend", "  string = string.dup\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string", "  max_length\
    \ = 0\n  max_length_postfix = -1\n  max_length_prefix = -1\n  max_length_suffix\
    \ = -1\n  max_length_prefix_postfix = -1\n  max_length_suffix_postfix = -1\n \
    \ max_length_prefix_reverse = -1\n  max_length_suffix_reverse = -1\n  max_length_prefix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse = -1\n  max_length_prefix_postfix_reverse\
    \ = -1\n  max_length_suffix_postfix_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse = -1\n  max_length_prefix_postfix_reverse_reverse\
    \ = -1\n  max_length_postfix_reverse_reverse", "  max_length = find_max_length(string)\n\
    \  postfix = find_postfix_of_palindrome(string, max_length)\n  prefix = string[0,\
    \ max_length]\n  reversed_prefix = reverse(string)\n  reversed_postfix = reverse(string)\n\
    \  reversed_prefix = reversed_prefix[0, max_length]\n  reversed_postfix = reversed_postfix[0,\
    \ max_length]\n  result = prefix + reversed_prefix + postfix + reversed_postfix\n\
    \  result\nend", "  string.length.times do |i|\n    string.slice!(0, i)\n    string.slice!(-i,\
    \ i)\n    break if string.chars.sort.join.to_s == string.chars.reverse.join.to_s\n\
    \  end\n  string\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest << string.reverse.sub(longest, \"\")\n  longest.downcase!\n  longest\n\
    end", "  string = string.dup\n  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest << string.reverse.sub(longest, longest)\n  longest\n\
    end", "  string = string.dup\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.", "  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }", "  longest =\
    \ find_longest_palindrome(string)\n  prefix = string[0,longest]\n  suffix = string[longest,string.length]\n\
    \  reversed_prefix = reverse(string,0,longest)\n  reversed_suffix = reverse(string,longest,string.length)\n\
    \  result = prefix + reversed_prefix + reversed_suffix + suffix\n  return result\n\
    end", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.down", "  string\
    \ = string.downcase\n  longest = find_longest_palindrome(string, 0)\n  longest.downcase!\n\
    \  longest << string.reverse\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_prefix_palindrome(string, longest.last))\n  longest\n\
    end", "  longest = find_longest_palindrome(string)\n  middle = find_middle_palindrome(string)\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = middle + longest + string[middle.length..-1]\n  middle = middle.reverse\n\
    \  middle = ", "  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }", "  longest = find_longest_palindrome(string)\n  longest\
    \ += string.reverse(longest)\n  longest\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/",
  "  max_length = 0\n  max_length_postfix = []\n  max_length_postfix_reverse = []\n\
    \  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index =\
    \ 0\n  i = 0\n  while i < string.length\n    max_length = max_length if max_length\
    \ > string.length \n    max_length_postfix = string[0..i].split(//).reverse\n\
    \    max_length_postfix_reverse = string[0..i].split(//).reverse\n    max_length_postfix_reverse_index\
    \ = 0\n    max_length_postfix_reverse_index = 0\n    while max_length_postfix_reverse_index\
    \ < max_length_postfix.length\n      if max_length_postfix_reverse[max_length_postfix_reverse_index]\
    \ != max_length_postfix[max_length_postfix_reverse_index]\n        max_length_postfix_reverse_index\
    \ += 1\n      else\n        break\n    end\n    i += 1\n  end\n  max_length_postfix_reverse.join\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(longest.last).last)\n  longest\nend",
  "  string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.reverse!\n\
    \  string\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest\nend", "  max_length = 0\n  max_length_postfix = []\n  max_length_postfix_reverse\
    \ = []\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  i = 0\n  while i < string.length\n    max_length_postfix.push string[i]\n\
    \    i += 1\n  end\n  max_length_postfix.push string.length\n  max_length_postfix.reverse!\n\
    \  max_length_postfix.each do |i|\n    max_length_postfix_reverse_index += 1\n\
    \    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse_index\
    \ += 1\n    max_length_postfix_reverse_index += 1\n    max_length_postfix_reverse",
  "  max_length = 0\n  max_length_postfix = nil\n  max_length_postfix_reverse = nil\n\
    \  string.split(//).each do |char|\n    max_length = max_length if max_length\
    \ < char.length\n    max_length_postfix = char if char == char.reverse\n    max_length_postfix_reverse\
    \ = char.reverse\n  end\n  max_length_postfix.concat(max_length_postfix_reverse)\n\
    end", "  string.gsub(/[^a-z]/i, '').gsub(/[a-z]/i) { |s| s.reverse }.gsub(/[a-z]/i)\
    \ { |s| s.reverse }.gsub(/[a-z]/i) { |s| s.reverse }\nend", "  max_length = 0\n\
    \  max_length_postfix = []\n  max_length_prefix_postfix = []\n  max_length_prefix_postfix_reverse\
    \ = []\n  max_length_prefix_postfix_reverse.reverse!\n  max_length_postfix.push\
    \ string\n  max_length_prefix_postfix.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length_prefix_postfix_reverse.push string\n  max_length_prefix_postfix_reverse.push\
    \ string\n  max_length", "  string = string.dup\n  string.gsub!(/[^a-z]/, '')\n\
    \  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] }\n  string.gsub!(/[a-z]/) {\
    \ |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string\nend", "  string = string.dup\n\
    \  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/", "  string.downcase!\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...", "  longest = find_longest_postfix_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.rindex))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest = longest + reverse(string[longest.length..-1],\
    \ longest)\n  longest\nend", "  max_length = 0\n  max_length_postfix = []\n  max_length_postfix_reverse\
    \ = []\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index2\
    \ = 0\n  max_length_postfix_reverse_index3 = 0\n  max_length_postfix_reverse_index4\
    \ = 0\n  max_length_postfix_reverse_index5 = 0\n  max_length_postfix_reverse_index6\
    \ = 0\n  max_length_postfix_reverse_index7 = 0\n  max_length_postfix_reverse_index8\
    \ = 0\n  max_length_postfix_reverse_index9 = 0\n  max_length_postfix_reverse_index10\
    \ = 0\n  max_length_postfix_reverse_index11 = 0\n  max_length_postfix_reverse_index12\
    \ = 0\n  max_length_postfix_reverse_index13 = 0\n  max_length_postfix_reverse_index14\
    \ = 0\n  max_length_postfix_reverse_index15 = 0\n  max_length_postfix_reverse_index16\
    \ = 0\n  max_length_postfix_reverse_index17 = 0\n  max_length_postfix_reverse_index18\
    \ = 0\n  max_length_postfix_reverse_index19 = 0\n  max_length_postfix_reverse_index20\
    \ = 0\n  max_length_postfix_reverse_index21 = 0\n  max_length_postfix_reverse_index22\
    \ = 0\n  max_length_postfix_reverse_index23 = 0\n  max_length_postfix_reverse_index24\
    \ = 0\n  max_length_postfix_reverse_index25 = 0\n  max_length_postfix_reverse_index26\
    \ = 0\n  max_length_postfix_reverse_index27 = 0\n  max_length_postfix_reverse_index28\
    \ = 0\n  max_length_postfix_reverse_index29 = 0\n  max_length_postfix_reverse_index30\
    \ = 0\n  max_length_postfix_reverse_index31 = 0\n  max_length_postfix_reverse_index32\
    \ = 0\n  max_length_postfix_reverse_index33 = 0\n  max_length_postfix_reverse_index34\
    \ = 0\n  max_length_postfix_reverse_index35 = 0\n  max_length_postfix_reverse_index36\
    \ = 0\n  max_length_postfix_reverse_index37 = 0\n  max_length_postfix_reverse_index38\
    \ = 0\n  max_length_postfix_reverse_index39 = 0\n  max_length_postfix_reverse_index40\
    \ = 0\n  max_length_postfix_reverse_index41 = 0\n  max_length_postfix_reverse_index42\
    \ = 0\n  max_length_postfix_reverse_index43 = 0\n  max_length_postfix_reverse_index44\
    \ = 0\n  max_length_postfix_reverse_index45 = 0\n  max_length_postfix_reverse_index46\
    \ = 0\n  max_length_postfix_reverse_index47 = 0\n  max_length_postfix_reverse_index48\
    \ = 0\n  max_length_postfix_reverse_index49 = 0\n  max_length_", "  string.reverse\n\
    \  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!", "  longest = find_longest_palindrome(string)\n\
    \  longest += string.reverse(longest[0 .. longest.length-1])\n  longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n\
    \  longest.prepend(longest.downcase)\n  longest.prepend(longest.upcase)\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest.prepend(longest.down", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.", "  string.reverse\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/,\
    \ '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\\
    1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n\
    \  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/,\
    \ '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\\
    1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n\
    \  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/,\
    \ '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\\
    1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n\
    \  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/,\
    \ '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\\
    1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n\
    \  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/,\
    \ '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\\
    1\\1')\n  string.sub!(/([a-z])/, '\\1\\1')\n  string.sub!(/([a-z])/, '\\1\\",
  "  string = string.dup\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/) {\
    \ |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.", "  max_length = 0\n  max_length_postfix\
    \ = []\n  max_length_postfix_reverse = []\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index2 = 0\n  max_length_postfix_reverse_index3\
    \ = 0\n  max_length_postfix_reverse_index4 = 0\n  max_length_postfix_reverse_index5\
    \ = 0\n  max_length_postfix_reverse_index6 = 0\n  max_length_postfix_reverse_index7\
    \ = 0\n  max_length_postfix_reverse_index8 = 0\n  max_length_postfix_reverse_index9\
    \ = 0\n  max_length_postfix_reverse_index10 = 0\n  max_length_postfix_reverse_index11\
    \ = 0\n  max_length_postfix_reverse_index12 = 0\n  max_length_postfix_reverse_index13\
    \ = 0\n  max_length_postfix_reverse_index14 = 0\n  max_length_postfix_reverse_index15\
    \ = 0\n  max_length_postfix_reverse_index16 = 0\n  max_length_postfix_reverse_index17\
    \ = 0\n  max_length_postfix_reverse_index18 = 0\n  max_length_postfix_reverse_index19\
    \ = 0\n  max_length_postfix_reverse_index20 = 0\n  max_length_postfix_reverse_index21\
    \ = 0\n  max_length_postfix_reverse_index22 = 0\n  max_length_postfix_reverse_index23\
    \ = 0\n  max_length_postfix_reverse_index24 = 0\n  max_length_postfix_reverse_index25\
    \ = 0\n  max_length_postfix_reverse_index26 = 0\n  max_length_postfix_reverse_index27\
    \ = 0\n  max_length_postfix_reverse_index28 = 0\n  max_length_postfix_reverse_index29\
    \ = 0\n  max_length_postfix_reverse_index30 = 0\n  max_length_postfix_reverse_index31\
    \ = 0\n  max_length_postfix_reverse_index32 = 0\n  max_length_postfix_reverse_index33\
    \ = 0\n  max_length_postfix_reverse_index34 = 0\n  max_length_postfix_reverse_index35\
    \ = 0\n  max_length_postfix_reverse_index36 = 0\n  max_length_postfix_reverse_index37\
    \ = 0\n  max_length_postfix_reverse_index38 = 0\n  max_length_postfix_reverse_index39\
    \ = 0\n  max_length_postfix_reverse_index40 = 0\n  max_length_postfix_reverse_index41\
    \ = 0\n  max_length_postfix_reverse_index42 = 0\n  max_length_postfix_reverse_index43\
    \ = 0\n  max_length_postfix_reverse_index44 = 0\n  max_length_postfix_reverse_index45\
    \ = 0\n  max_length_postfix_reverse_index46 = 0\n  max_length_postfix_reverse_index47\
    \ = 0\n  max_length_postfix_reverse_index48 = 0\n  max_length_postfix_reverse_index49\
    \ = 0\n  max_length_", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.rjust(longest.length))\n\
    \  longest\nend", "  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }", "  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(/(\\\
    W)/) { $1.reverse }\n  string.gsub(/(\\W)/) { $1.reverse }\n  string.gsub(", " \
    \ string = string.dup\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.reverse!\n  string\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_prefix_palindrome(string, longest.last))\n  longest\n\
    end", "  max_length = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length\
    \ = 0\n  max_length_prefix_postfix_length = 0\n  max_length_prefix_postfix_length_length\
    \ = 0\n  max_length_postfix_length_length = 0\n  max_length_prefix_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(string.rjust(longest.length))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest\nend", "  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[a-z]/i,\
    \ '')", "  string = string.dup\n  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0,\
    \ longest.length)\n  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n\
    \  string.slice!(0, longest.length)\n  string.slice!(0, longest.length)\n  ",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  middle = find_middle_palindrome(string)\n\
    \  middle = middle[1..-1] if middle.size > 1 \n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..-1] if middle.size > 1\n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..-1] if middle.size > 1\n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..-1] if middle.size > 1\n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..-1] if middle.size > 1\n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..-1] if middle.size > 1\n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..-1] if middle.size > 1\n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..-1] if middle.size > 1\n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..-1] if middle.size > 1\n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..-1] if middle.size > 1\n  middle = middle + string[1..-1]\
    \ if middle.size > 1\n  middle = middle + string[1..-1] if middle.size > 1\n \
    \ middle = middle + string[1..", "  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string.reverse(longest[0 .. longest.length-1])\n  longest\n\
    end", "  string = string.dup\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.", "  string = string.dup\n\
    \  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice", "  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[a-z]/i, '#')\n  string.gsub!(/#[a-z]/i, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/,\
    \ '#')\n  string.gsub!(/#/, '#')\n  string.gsub!(/#/, '#')", "  string.gsub(/[^a-z]/i,\
    \ '').downcase.gsub(/[^a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(", "  string = string.dup\n \
    \ string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string\nend",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest\nend", "  max_length = 0\n  max_length_postfix = []\n  max_length_postfix_reverse\
    \ = []\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index2\
    \ = 0\n  max_length_postfix_reverse_index3 = 0\n  max_length_postfix_reverse_index4\
    \ = 0\n  max_length_postfix_reverse_index5 = 0\n  max_length_postfix_reverse_index6\
    \ = 0\n  max_length_postfix_reverse_index7 = 0\n  max_length_postfix_reverse_index8\
    \ = 0\n  max_length_postfix_reverse_index9 = 0\n  max_length_postfix_reverse_index10\
    \ = 0\n  max_length_postfix_reverse_index11 = 0\n  max_length_postfix_reverse_index12\
    \ = 0\n  max_length_postfix_reverse_index13 = 0\n  max_length_postfix_reverse_index14\
    \ = 0\n  max_length_postfix_reverse_index15 = 0\n  max_length_postfix_reverse_index16\
    \ = 0\n  max_length_postfix_reverse_index17 = 0\n  max_length_postfix_reverse_index18\
    \ = 0\n  max_length_postfix_reverse_index19 = 0\n  max_length_postfix_reverse_index20\
    \ = 0\n  max_length_postfix_reverse_index21 = 0\n  max_length_postfix_reverse_index22\
    \ = 0\n  max_length_postfix_reverse_index23 = 0\n  max_length_postfix_reverse_index24\
    \ = 0\n  max_length_postfix_reverse_index25 = 0\n  max_length_postfix_reverse_index26\
    \ = 0\n  max_length_postfix_reverse_index27 = 0\n  max_length_postfix_reverse_index28\
    \ = 0\n  max_length_postfix_reverse_index29 = 0\n  max_length_postfix_reverse_index30\
    \ = 0\n  max_length_postfix_reverse_index31 = 0\n  max_length_postfix_reverse_index32\
    \ = 0\n  max_length_postfix_reverse_index33 = 0\n  max_length_postfix_reverse_index34\
    \ = 0\n  max_length_postfix_reverse_index35 = 0\n  max_length_postfix_reverse_index36\
    \ = 0\n  max_length_postfix_reverse_index37 = 0\n  max_length_postfix_reverse_index38\
    \ = 0\n  max_length_postfix_reverse_index39 = 0\n  max_length_postfix_reverse_index40\
    \ = 0\n  max_length_postfix_reverse_index41 = 0\n  max_length_postfix_reverse_index42\
    \ = 0\n  max_length_postfix_reverse_index43 = 0\n  max_length_postfix_reverse_index44\
    \ = 0\n  max_length_postfix_reverse_index45 = 0\n  max_length_postfix_reverse_index46\
    \ = 0\n  max_length_postfix_reverse_index47 = 0\n  max_length_postfix_reverse_index48\
    \ = 0\n  max_length_postfix_reverse_index49 = 0\n  max_length_", "  max_length\
    \ = 0\n  max_length_postfix = []\n  max_length_postfix_reverse = []\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  i = 0\n  while i < string.length\n\
    \    max_length = max_length if max_length > string.length \n    max_length_postfix\
    \ = string[i..-1]\n    max_length_postfix_reverse = string[0...i] + string[i..-1]\n\
    \    max_length_postfix_reverse_index = max_length_postfix_reverse_index if max_length_postfix_reverse_index\
    \ > i \n    i += 1\n  end\n  return max_length_postfix_reverse\nend\n</code>\n\
    <|/ a tags=ruby,string,palindrome |>\n<| a dscore=0 |>\n<code>", "  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest\nend", "  string.gsub(/[^a-z]/i,\
    \ '').gsub(/(?<=\\A)[a-z]/i, '').gsub(/(?<=\\z)[a-z]/i, '').gsub(/(?<=\\Z)[a-z]/i,\
    \ '').reverse\nend", "  string = string.dup\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    break if string.length <= 1\n  end\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  string\
    \ = string.dup\n  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/", "  string.gsub!(/[^a-z]/, '')\n\
    \  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n\
    \  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n\
    \  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n\
    \  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n\
    \  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n\
    \  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.downcase!\n  string.", "  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string[longest.length..-1].reverse\n  longest\nend", " \
    \ longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.last))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(longest.last).last)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.end))\n\
    \  longest.prepend(string.slice(longest.end,string.length))\n  return longest.to_s\n\
    end", "  string = string.dup\n  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string.dup.reverse))\n\
    \  longest\nend", "  string.length.times do |i|\n    string.slice!(0, i)\n   \
    \ string.slice!(-i, i)\n    break if string == string.reverse\n  end\n  string\n\
    end", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.rjust(longest.length))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest\nend", "  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/", "  string.length.times do |i|\n    string.slice!(0,\
    \ i)\n    break if string.slice!(0, i) == string.reverse\n  end\n  string\nend",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(string).reverse)\n  longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(find_prefix_palindrome(string,\
    \ longest))\n  longest\nend", "  string = string.dup\n  longest = 0\n  longest\
    \ = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest =\
    \ 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n\
    \  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n \
    \ longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest\
    \ = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest =\
    \ 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n\
    \  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n \
    \ longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest\
    \ = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest =\
    \ 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n\
    \  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n \
    \ longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest\
    \ = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest =\
    \ 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n\
    \  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n \
    \ longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest\
    \ = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest =\
    \ 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n\
    \  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n \
    \ longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest\
    \ = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest =\
    \ 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n\
    \  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n \
    \ longest = 0\n  longest = 0\n  longest = 0\n  longest = 0\n  longest = 0", " \
    \ string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.gsub(/[^a-z]/i, '').downcase!\n  string.gsub(/[^a-z]/i, '').downcase!\n\
    \  string.", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  ", "  string = string.dup\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length", "  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n \
    \ string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.", "  max_length = 0\n  max_length_postfix\
    \ = nil\n  max_length_postfix_reverse = nil\n  string.split(\"\").each do |char|\n\
    \    max_length = max_length if max_length > char.length\n    max_length_postfix\
    \ = char if char == char.reverse\n    max_length_postfix_reverse = char.reverse\n\
    \  end\n  max_length_postfix.concat(max_length_postfix_reverse)\nend", "  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, ''.downcase)\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(find_prefix_palindrome(string,\
    \ longest.last))\n  longest\nend", "  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.",
  "  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-zA-Z0-9]/, '')\n  string.downcase!\n  string.gsub!(/[^a-zA-Z",
  "  string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.reverse!\n\
    \  string\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(string.downcase)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest\nend", "  string.downcase!\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(longest.last).last)\n\
    \  longest\nend", "  string.gsub(/[^a-z]/i, '').gsub(/[a-z]/i) do |char|\n   \
    \ char == char.reverse\n  end\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(longest.last).last)\n  longest\nend",
  "  max_length = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length =\
    \ 0\n  max_length_prefix_postfix_length = 0\n  max_length_prefix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_length = 0\n\
    \  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length =\
    \ 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_",
  "  max_length = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length =\
    \ 0\n  max_length_prefix_postfix_length = 0\n  max_length_prefix_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length = 0\n\
    \  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_",
  "  string = string.downcase\n  length = string.length\n  max_length = length\n \
    \ while length > 0\n    max_length = length\n    length = length - 1\n    string\
    \ = string.chop\n    length = length - 1\n  end\n  max_length = max_length - 1\n\
    \  while max_length > 0\n    max_length = max_length - 1\n    string = string\
    \ + string.reverse\n  end\n  string = string + string.reverse\n  return string\n\
    end", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  max_length = 0\n  max_length_postfix_length\
    \ = 0\n  max_length_prefix_length = 0\n  max_length_prefix_postfix_length = 0\n\
    \  max_length_prefix_postfix_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length =\
    \ 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.upcase)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.rjust(longest.length))\n  longest\nend", "  max_length\
    \ = 0\n  max_length_postfix = nil\n  max_length_prefix = nil\n  max_length_suffix\
    \ = nil\n  max_length_prefix_postfix = nil\n  max_length_prefix_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix = nil\n  max_length_postfix\
    \ = nil\n  max_length_prefix = nil\n  max_length_prefix_postfix = nil\n  max_length_prefix_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix = nil\n  max_length_postfix\
    \ = nil\n  max_length_prefix = nil\n  max_length_prefix_postfix = nil\n  max_length_prefix_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix = nil\n  max_length_postfix\
    \ = nil\n  max_length_prefix = nil\n  max_length_prefix_postfix = nil\n  max_length_prefix_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix = nil\n  max_length_postfix\
    \ = nil\n  max_length_prefix = nil\n  max_length_prefix_postfix = nil\n  max_length_prefix_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix = nil\n  max_length_postfix\
    \ = nil\n  max_length_prefix = nil\n  max_length_prefix_postfix = nil\n  max_length_prefix_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix = nil\n  max_length_post",
  "  longest = find_longest_palindrome(string)\n  longest = longest + reverse(string[longest.length..-1],\
    \ longest)\n  longest\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length", "  string.gsub(/[^a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/i,\
    \ '').gsub(/[a-z]/i, '').gsub(/[a-z]/i, '').gsub(/[a-z]/", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    string.slice!(-i, i)\n  end\n  string\n\
    end", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(", "  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/(.)(.*)/)\
    \ { $1 + $2 }\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest.prepend(string.downcase)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest\nend", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(longest.last).last)\n\
    \  longest\nend", "  max_length = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length\
    \ = 0\n  max_length_prefix_postfix_length = 0\n  max_length_prefix_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length = 0\n\
    \  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_",
  "  longest = find_longest_palindrome(string)\n  result = string + reverse(string[longest.begin..-1],\
    \ longest.end)\n  result\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.rindex))\n  longest\nend", "  longest\
    \ = find_longest_postfix_palindrome(string)\n  prefix = string[0,longest]\n  suffix\
    \ = string[longest,string.length]\n  reversed_prefix = prefix.reverse\n  reversed_suffix\
    \ = suffix.reverse\n  new_string = prefix + reversed_prefix + reversed_suffix\
    \ + suffix\n  new_string\nend", "  string.downcase!\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s|\
    \ s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }", "  longest =\
    \ find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest\nend", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    string.slice!(0, i)\n  end\n  string\n\
    end", "  string = string.dup\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string).reverse)\n\
    \  return longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(string.downcase)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest\nend", "  string.length.times do |i|\n    string.slice!(0, i)\n   \
    \ string.slice!(-i, i)\n  end\n  string.reverse!\n  string\nend", "  string.length.times\
    \ do |i|\n    string = string.gsub(/./, i)\n    break if string.gsub(/./, i)\n\
    \  end\n  string.reverse\nend", "  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub!(/[^a-z", "  string.reverse\n  string.slice!(0, string.rindex(string))\n\
    \  string\nend", "  string.length.times do |i|\n    string.slice!(0..i).reverse!\n\
    \  end\n  string\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `make_palindrome('abba')`.\n<|/ c |>\n<| c |>\n: I see what you\
    \ mean. Fixed.\n<|/ c |>\n<| c |>\nThis doesn't work either. Try it with `make_palindrome('abba')`.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. Fixed.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work either. Try it with `make_palindrome('abba')`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.end))\n\
    \  longest.prepend(string.slice(longest.end))\n  return longest.to_s\nend", " \
    \ string = string.dup\n  string.gsub!(/[^a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i,\
    \ '')\n  string.gsub!(/[a-z]+/i, '')\n  string.gsub!(/[a-z]+/i, '')\n", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    string.slice!(0, i)\n  end\n  string.reverse!\n\
    \  string\nend", "  longest = find_longest_palindrome(string)\n  reversed = reverse(string[longest.length..-1])\n\
    \  string.insert(longest.length, reversed)\n  string\nend", "  string = string.dup\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a$/i,\
    \ 'z')\n  string.gsub!(/z$/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a$/i, 'z')\n  string.gsub!(/z$/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a$/i, 'z')\n  string.gsub!(/z$/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a$/i,\
    \ 'z')\n  string.gsub!(/z$/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a$/i, 'z')\n  string.gsub!(/z$/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a$/i, 'z')\n  string.gsub!(/z$/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a$/i,\
    \ 'z')\n  string.gsub!(/z$/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a$/i, 'z')\n  string.gsub!(/z$/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a$/i, 'z')\n  string.gsub!(/z$/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a$/i,\
    \ 'z')\n  string.gsub!(/z$/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(",
  "  max_length = 0\n  max_length_postfix = []\n  max_length_postfix_reverse = []\n\
    \  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index2 =\
    \ 0\n  max_length_postfix_reverse_index3 = 0\n  max_length_postfix_reverse_index4\
    \ = 0\n  max_length_postfix_reverse_index5 = 0\n  max_length_postfix_reverse_index6\
    \ = 0\n  max_length_postfix_reverse_index7 = 0\n  max_length_postfix_reverse_index8\
    \ = 0\n  max_length_postfix_reverse_index9 = 0\n  max_length_postfix_reverse_index10\
    \ = 0\n  max_length_postfix_reverse_index11 = 0\n  max_length_postfix_reverse_index12\
    \ = 0\n  max_length_postfix_reverse_index13 = 0\n  max_length_postfix_reverse_index14\
    \ = 0\n  max_length_postfix_reverse_index15 = 0\n  max_length_postfix_reverse_index16\
    \ = 0\n  max_length_postfix_reverse_index17 = 0\n  max_length_postfix_reverse_index18\
    \ = 0\n  max_length_postfix_reverse_index19 = 0\n  max_length_postfix_reverse_index20\
    \ = 0\n  max_length_postfix_reverse_index21 = 0\n  max_length_postfix_reverse_index22\
    \ = 0\n  max_length_postfix_reverse_index23 = 0\n  max_length_postfix_reverse_index24\
    \ = 0\n  max_length_postfix_reverse_index25 = 0\n  max_length_postfix_reverse_index26\
    \ = 0\n  max_length_postfix_reverse_index27 = 0\n  max_length_postfix_reverse_index28\
    \ = 0\n  max_length_postfix_reverse_index29 = 0\n  max_length_postfix_reverse_index30\
    \ = 0\n  max_length_postfix_reverse_index31 = 0\n  max_length_postfix_reverse_index32\
    \ = 0\n  max_length_postfix_reverse_index33 = 0\n  max_length_postfix_reverse_index34\
    \ = 0\n  max_length_postfix_reverse_index35 = 0\n  max_length_postfix_reverse_index36\
    \ = 0\n  max_length_postfix_reverse_index37 = 0\n  max_length_postfix_reverse_index38\
    \ = 0\n  max_length_postfix_reverse_index39 = 0\n  max_length_postfix_reverse_index40\
    \ = 0\n  max_length_postfix_reverse_index41 = 0\n  max_length_postfix_reverse_index42\
    \ = 0\n  max_length_postfix_reverse_index43 = 0\n  max_length_postfix_reverse_index44\
    \ = 0\n  max_length_postfix_reverse_index45 = 0\n  max_length_postfix_reverse_index46\
    \ = 0\n  max_length_postfix_reverse_index47 = 0\n  max_length_postfix_reverse_index48\
    \ = 0\n  max_length_postfix_reverse_index49 = 0\n  max_length_", "  string = string.dup\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n  string.gsub!(/[a-z]/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]/) { |s| s.reverse }\n", "  string =\
    \ string.dup\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.reverse!\n  string\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest\nend", "  string.downcase!\n\
    \  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[^a-z]/,\
    \ '')\n  string.gsub!(/[^a-z]/, '')\n", "  string = string.dup\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(string).reverse)\n  longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(string.rjust(longest.length))\n\
    \  longest\nend", "  max_length = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length\
    \ = 0\n  max_length_prefix_postfix_length = 0\n  max_length_prefix_postfix_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_",
  "  string = string.dup\n  string.gsub!(/[^a-z]/, '')\n  string.gsub!(/[a-z]/) {\
    \ |s| s[0...s.length/2] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n \
    \ string.gsub!(/[a-z]/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]/", "  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i,\
    \ '') unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n\
    \  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i, '')\
    \ unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i,\
    \ '') unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n\
    \  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i, '')\
    \ unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i,\
    \ '') unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n\
    \  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i, '')\
    \ unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i,\
    \ '') unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n\
    \  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i, '')\
    \ unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i,\
    \ '') unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n\
    \  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i, '')\
    \ unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i,\
    \ '') unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty?\n\
    \  string.gsub!(/[a-z]/i, '') unless string.empty?\n  string.gsub!(/[a-z]/i, '')\
    \ unless string.empty?\n  string.gsub!(/[a-z]/i, '') unless string.empty"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
