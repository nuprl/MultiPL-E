name: HumanEval_22_filter_integers
language: ruby
prompt: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
  \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2, 3]\n\
  def filter_integers(values)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
  \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n   \
  \ assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\n\
  end\n"
completions: ["  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select! { |v| v.is_a?(Integer) }\n  values\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select! { |value| value.is_a?(Integer)\
    \ }\n  values\nend", "  values.select! { |v| v.is_a?(Integer) }\n  values\nend",
  "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\nend",
  "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select { |v|\
    \ v.is_a?(Integer) }\nend", "  values.select! { |v| v.is_a?(Integer) }\n  values\n\
    end", "  values.select! {|v| v.is_a?(Integer) }\n  values\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |v| v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\nend",
  "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select { |v|\
    \ v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", " \
    \ values.select { |value| value.is_a?(Integer) }\nend", "  values.select! { |value|\
    \ value.is_a?(Integer) }\n  values\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.each\
    \ do |value|\n    if value.is_a? Integer\n      yield value\n    end\n  end\n\
    end", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select! { |v| v.is_a?(Integer)\
    \ }\n  values\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select!\
    \ { |v| v.is_a?(Integer) }\n  values\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\n\
    end", "  values.select! { |value| value.is_a?(Integer) }\n  values\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select!\
    \ { |v| v.is_a?(Integer) }\n  values\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.each do |value|\n    if value.is_a? Integer\n      yield\
    \ value\n    end\n  end\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.each do |value|\n    next if value.is_a?(Numeric)\n    next\
    \ if value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if value.is_a?(TrueClass)\
    \ || value.is_a?(FalseClass)\n    next if value.is_a?(BigDecimal)\n    next if\
    \ value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if value.is_a?(BigInteger)\n\
    \    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n    next if value.is_a?(Range)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::File)\n\
    \    next if value.is_a?(IO::NullStream)\n    next if value.is_a?(IO::Stream)\n\
    \    next if value.is_a?(IO::BufferedStream)\n    next if value.is_a?(IO::UnsupportedStream)\n\
    \    next if value.is_a?(IO::Pipe)\n    next if value.is_a?(IO::NullFile)\n  \
    \  next if value.is_a?(IO::Pipe::File)\n    next if value.is_a?(IO::Pipe::NullFile)\n\
    \    next if value.is_a?(IO::Pipe::Pipe)\n    next if value.is_a?(IO::Pipe::NullPipe)\n\
    \    next if value.is_a?(IO::Pipe::Stream)\n    next if value.is_a?(IO::Pipe::BufferedStream)\n\
    \    next if value.is_a?(IO::Pipe::UnsupportedStream)\n    next if value.is_a?(IO::Pipe::PipeInput)\n\
    \    next if value.is_a?(IO::Pipe::PipeOutput)\n    next if value.is_a?(IO::Pipe::PipeError)\n\
    \    next if value.is_a?(IO::Pipe::PipeInput::File)\n    next if value.is_a?(IO::Pipe::PipeInput::NullFile)\n\
    \    next if value.is_a?(IO::Pipe::PipeInput::Stream)\n    next if value.is_a?(IO::Pipe::PipeInput::BufferedStream)\n\
    \    next if value.is_a?", "  values.select { |value| value.is_a?(Integer) }\n\
    end", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select { |v|\
    \ v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", " \
    \ values.each do |value|\n    next if value.is_a?(Numeric)\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(TrueClass) || value.is_a?(FalseClass)\n\
    \    next if value.nil?\n    next if value.respond_to?(:to_int)\n    raise TypeError,\
    \ \"#{value.class} can't be converted to integer\"\n  end\n  values\nend", " \
    \ values.select { |value| value.is_a?(Integer) }\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\nend",
  "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.each\
    \ do |value|\n    next if value.is_a?(Numeric)\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(TrueClass) || value.is_a?(FalseClass)\n\
    \    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Float)\n    next\
    \ if value.is_a?(Fixnum)\n    next if value.is_a?(BigInteger)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Range)\n    next if value.is_a?(IO)\n\
    \    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n    next if\
    \ value.is_a?(StringIO)\n    next if value.is_a?(IO::MemoryStream)\n    next if\
    \ value.is_a?(IO::MemoryFile)\n    next if value.is_a?(IO::Unsupported)\n    next\
    \ if value.is_a?(IO::NotADirectoryError)\n    next if value.is_a?(IO::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile)\n    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile)\n    next\
    \ if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n    next\
    \ if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if ", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\n\
    end", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\n\
    end", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select!\
    \ { |v| v.is_a?(Integer) }\n  values\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select!\
    \ {|v| v.is_a?(Integer) }\n  values\nend", "  values.select! {|v| v.is_a?(Integer)\
    \ }\n  values\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select!\
    \ { |value| value.is_a?(Integer) }\n  values\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.each do |value|\n    next\
    \ if value.is_a?(Numeric)\n    next if value.is_a?(String)\n    next if value.is_a?(Symbol)\n\
    \    next if value.is_a?(TrueClass) || value.is_a?(FalseClass)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Range)\n    next if value.is_a?(IO)\
    \ || value.is_a?(StringIO)\n    next if value.is_a?(File)\n    next if value.is_a?(Process)\n\
    \    next if value.is_a?(Thread)\n    next if value.is_a?(Generator)\n    next\
    \ if value.is_a?(IO::WaitReadable)\n    next if value.is_a?(IO::WaitWritable)\n\
    \    next if value.is_a?(IO::WaitHandle)\n    next if value.is_a?(IO::Pipe)\n\
    \    next if value.is_a?(IO::Pipe::Reader)\n    next if value.is_a?(IO::Pipe::Writer)\n\
    \    next if value.is_a?(IO::Pipe::Error)\n    next if value.is_a?(IO::Dir)\n\
    \    next if value.is_a?(IO::File)\n    next if value.is_a?(IO::Dir::Iterator)\n\
    \    next if value.is_a?(IO::Dir::File)\n    next if value.is_a?(IO::Dir::Symlink)\n\
    \    next if value.is_a?(IO::Dir::RmDir)\n    next if value.is_a?(IO::Dir::Touch)\n\
    \    next if value.is_a?(IO::Dir::NoWrite)\n    next if value.is_a?(IO::Dir::NoRead)\n\
    \    next if value.is_a?(IO::Dir::NoWriteDir)\n    next if value.is_a?(IO::Dir::NoWriteFile)\n\
    \    next if value.is_a?(IO::Dir::NoWriteSymlink)\n    next if value.is_a?(IO::Dir::NoWriteLink)\n\
    \    next if value.is_a?(IO::Dir::NoWriteDirSymlink)\n    next if value.is_a?(IO::Dir::NoWriteFileSymlink)\n\
    \    next if value.is_a?(IO::Dir::NoWriteLinkSymlink)\n    ", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\n\
    end", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\n\
    end", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select!{|v| v.is_a?(Integer)\
    \ }\n  values\nend", "  values.select { |value| value.is_a?(Integer) }\nend",
  "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\nend",
  "  values.select { |v| v.is_a?(Integer) }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
