name: HumanEval_118_get_closest_vowel
language: ruby
prompt: "# You are given a word. Your task is to find the closest vowel that stands\
  \ between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# get_closest_vowel(\"yogurt\") ==>\
  \ \"u\"\n# get_closest_vowel(\"FULL\") ==> \"U\"\n# get_closest_vowel(\"quick\"\
  ) ==> \"\"\n# get_closest_vowel(\"ab\") ==> \"\"\ndef get_closest_vowel(word)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n\
  \    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"\
  yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\
  \", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n\
  \    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"\
  bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\
  \", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"\
  ))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"\
  Above\"))\n  end\nend\n"
completions: ["  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n\
    \    word = word.split(vowel).last\n  end\n  word\nend", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  consonants = word.split(//).reverse.map\
    \ { |char| char.downcase }\n  consonants.each do |consonant|\n    vowels.each\
    \ do |vowel|\n      if consonant.include?(vowel)\n        vowel_found = true\n\
    \        break\n      end\n    end\n    if vowel_found\n      break\n    end\n\
    \  end\n  vowel_found ? vowels.first : \"\"\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=ruby,string |>\n<code>", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  vowel_found = false\n  vowel_positions = []\n  vowel_position = 0\n  \n\
    \  word.each_char do |char|\n    if vowels.include?(char)\n      vowel_found =\
    \ true\n      vowel_positions << vowel_position\n      vowel_position = word.index(char)\
    \ + 1\n    end\n  end\n  \n  if vowel_found\n    vowel_positions.each do |position|\n\
    \      if position > vowel_position\n        vowel_position = position\n     \
    \ end\n    end\n    \n    vowels[vowel_position]\n  else\n    \"\"\n  end\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word\
    \ = word.split(vowel).last\n  end\n  word\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index != -1 && index != word.length - 1\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word.split(\"\").reverse.each do |letter|\n    if letter == \"a\"\n\
    \      return \"a\"\n    elsif letter == \"e\"\n      return \"e\"\n    elsif\
    \ letter == \"i\"\n      return \"i\"\n    elsif letter == \"o\"\n      return\
    \ \"o\"\n    elsif letter == \"u\"\n      return \"u\"\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    index = word.index(vowel)\n    if index != -1 && index != word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n    if\
    \ vowel_pos > 0\n      vowel_pos = vowel_pos - 1\n      break if vowel_pos < 0\n\
    \      break if vowel_pos == word.length\n      break if word[vowel_pos].downcase\
    \ == vowel.downcase\n    end\n  end\n  word[vowel_pos]\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_start = nil\n\
    \  vowel_end = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end =\
    \ nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found\
    \ = false\n  vowel_start = nil\n  ", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel", "  vowels = %w(a e i o u)\n  consonants = %w(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z)\n  word.downcase!\n  word.split(\"\
    \").each do |letter|\n    vowels.each do |vowel|\n      if letter == vowel\n \
    \       return vowel\n      end\n    end\n    consonants.each do |consonant|\n\
    \      if letter == consonant\n        return consonant\n      end\n    end\n\
    \  end\n  \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").length\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_counter = 0\n \
    \ vowel_found = \"\"\n  vowel_positions = []\n  vowel_positions_sorted = []\n\
    \  vowel_positions_sorted = vowel_positions.sort\n  vowel_positions_sorted.reverse!\n\
    \  vowel_positions.reverse!\n  vowel_positions.each do |position|\n    vowel_counter\
    \ += 1\n    if vowel_counter > 1\n      break\n    end\n    if vowel_counter >\
    \ word.count(\"a\") + word.count(\"e\") + word.count(\"i\") + word.count(\"o\"\
    ) + word.count(\"u\") + word.count(\"y\")\n      vowel_found = \"a\"\n      break\n\
    \    end\n    if word.index(vowels[vowel_counter - 1], position) == position\n\
    \      vowel_found = \"a\"\n      break\n    end\n  end\n  return vowel_found\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos > 0 && vowel_pos\
    \ < word.length - 1\n      return vowel if word[vowel_pos + 1] == vowel\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    vowel_pos = word.index(vowel)\n    if vowel_pos > 0\n      vowel_pos_right\
    \ = vowel_pos + 1\n      vowel_pos_left = word.index(vowel, vowel_pos_right +\
    \ 1)\n      if vowel_pos_left > 0 && vowel_pos_right > 0\n        return vowel\
    \ if vowel_pos_left < vowel_pos_right\n      end\n    end\n  end\n  return \"\"\
    \nend", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.scan(/[#{vowels.join('|')}]/).each\
    \ do |vowel|\n    vowel.upcase!\n    break if vowels.index(vowel) == word.index(vowel)\n\
    \  end\n  word.upcase!\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[AEIOUY]/).count\n\
    \  vowels_count += word.scan(/[aeiouyg]/).count\n  vowels_count += word.scan(/[AEIOUYG]/).count\n\
    \  vowels_count += word.scan(/[aeiouygh]/).count\n  vowels_count += word.scan(/[AEIOUYGH]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghk]/).count\n  vowels_count += word.scan(/[AEIOUYGHK]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkj]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJ]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjl]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJL]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmn]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMN]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmno]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNO]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmnop]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNOP]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmnopr]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNOPR]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmnoprs]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNOPRS]/).count\n\
    \  vowels_count += word.scan(/[aeiouy", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 1\n  vowels_count += word.scan(/[aeiou]/).count - 2\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 3\n  vowels_count += word.scan(/[aeiou]/).count - 4\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 5\n  vowels_count += word.scan(/[aeiou]/).count - 6\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 7\n  vowels_count += word.scan(/[aeiou]/).count - 8\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 9\n  vowels_count += word.scan(/[aeiou]/).count - 10\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 11\n  vowels_count += word.scan(/[aeiou]/).count - 12\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 13\n  vowels_count += word.scan(/[aeiou]/).count - 14\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 15\n  vowels_count += word.scan(/[aeiou]/).count - 16\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 17\n  vowels_count += word.scan(/[aeiou]/).count - 18\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 19\n  vowels_count += word.scan(/[aeiou]/).count - 20\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 21\n  vowels_count += word.scan(/[aeiou]/).count - 22\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 23\n  vowels_count += word.scan(/[aeiou]/).count - 24\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 25\n  vowels_count += word.scan(/[aeiou]/).count - 26\n  vowels_count += word.scan(/[aeiou]/).count\
    \ - 27", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n\
    \    if word.include?(vowel)\n      word = word.split(vowel).last\n      break\n\
    \    end\n  end\n  return word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count -=\
    \ word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"\
    i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -= word.count(\"u\"\
    )\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"E\")\n\
    \  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\")\n  vowels_count\
    \ += word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count -=\
    \ word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -= word.count(\"\
    u\")\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"E\"\
    )\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\")\n\
    \  vowels_count += word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count\
    \ -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -=\
    \ word.count(\"u\")\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"\
    E\")\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\"\
    )\n  vowels_count += word.count(\"U\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n\
    \  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count\
    \ -= word.count(\"u\")\n  vowels_count += word.count(\"A\")\n  vowels_count +=\
    \ word.count(\"E\")\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"\
    O\")\n  vowels_count += word.count(\"U\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"a\")\n", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != nil && index > 0\n\
    \      vowel_start = index\n      break\n    end\n  end\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index != nil && index < word.length\n \
    \     vowel_end = index\n      break\n    end\n  end\n  if vowel_start != nil\
    \ && vowel_end != nil\n    vowel_start = vowel_start - 1\n    vowel_end = vowel_end\
    \ + 1\n    vowel = word[vowel_start, vowel_end]\n    if vowel.downcase == \"a\"\
    \n      return \"a\"\n    elsif vowel.downcase == \"e\"\n      return \"e\"\n\
    \    elsif vowel.downcase == \"i\"\n      return \"i\"\n    elsif vowel.downcase\
    \ == \"o\"\n      return \"o\"\n    elsif vowel.downcase == \"u\"\n      return\
    \ \"u\"\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n     \
    \ return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    if word.include?(vowel)\n      return vowel\n \
    \   end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[AEIOUY]/).count\n\
    \  vowels_count += word.scan(/[aeiouyg]/).count\n  vowels_count += word.scan(/[AEIOUYG]/).count\n\
    \  vowels_count += word.scan(/[aeiouygh]/).count\n  vowels_count += word.scan(/[AEIOUYGH]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghk]/).count\n  vowels_count += word.scan(/[AEIOUYGHK]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkj]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJ]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjl]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJL]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmn]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMN]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmno]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNO]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmnop]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNOP]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmnopr]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNOPR]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmnoprs]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNOPRS]/).count\n\
    \  vowels_count += word.scan(/[aeiouy", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count -=\
    \ word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"\
    i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -= word.count(\"u\"\
    )\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"E\")\n\
    \  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\")\n  vowels_count\
    \ += word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count -=\
    \ word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -= word.count(\"\
    u\")\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"E\"\
    )\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\")\n\
    \  vowels_count += word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOU]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[aeiouAEIOU]/).count\n  vowels_count += word.scan(/[AEIOUaeiouAEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiouAEIOUaeiouAEIOU]/).count\n  vowels_count +=\
    \ word.scan(/[AEIOUaeiouAEIOUaeiouAEIOU]/).count\n  vowels_count += word.scan(/[aeiouAEIOUaeiouAEIOUaeiouAEIOU]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]/).count\n\
    \  vowels_", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_positions\
    \ = []\n  vowel_positions.push word.rindex(\"a\")\n  vowel_positions.push word.rindex(\"\
    e\")\n  vowel_positions.push word.rindex(\"i\")\n  vowel_positions.push word.rindex(\"\
    o\")\n  vowel_positions.push word.rindex(\"u\")\n  \n  vowel_positions.each do\
    \ |position|\n    if position < word.length\n      vowel = word[position]\n  \
    \    break if vowels.include? vowel\n    end\n  end\n  \n  return vowel\nend",
  "  vowels = %w{a e i o u}\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0 && vowel_pos < word.length - 1\n      vowel_pos_right =\
    \ word.length - vowel_pos - 1\n      consonant_pos = vowel_pos_right - 1\n   \
    \   consonant_pos_right = word.length - consonant_pos - 1\n      consonant_pos_left\
    \ = consonant_pos_right - 1\n      consonant_pos_left = consonant_pos_left + 1\n\
    \      consonant_pos_right = consonant_pos_right + 1\n      consonant_pos_left\
    \ = consonant_pos_left + 1\n      consonant_pos_right = consonant_pos_right +\
    \ 1\n      consonant_pos_left = consonant_pos_left + 1\n      consonant_pos_right\
    \ = consonant_pos_right + 1\n      consonant_pos_left = consonant_pos_left + 1\n\
    \      consonant_pos_right = consonant_pos_right + 1\n      consonant_pos_left\
    \ = consonant_pos_left + 1\n      consonant_pos_right = consonant_pos_right +\
    \ 1\n      consonant_pos_left = consonant_pos_left + 1\n      consonant_pos_right\
    \ = consonant_pos_right + 1\n      consonant_pos_left = consonant_pos_left + 1\n\
    \      consonant_pos_right = consonant_pos_right + 1\n      consonant_pos_left\
    \ = consonant_pos_left + 1\n      consonant_pos_right = consonant_pos_right +\
    \ 1\n      consonant_pos_left = consonant_pos_left + 1\n      consonant_pos_right\
    \ = consonant_pos_right + 1\n      consonant_pos_left = consonant_pos_left + 1\n\
    \      consonant_pos_right = consonant_pos_right + 1\n      consonant_pos_left\
    \ = consonant_pos_left + 1\n      consonant_pos_right = consonant_pos_right +\
    \ 1\n      consonant_pos_left = consonant_pos_left + 1\n      consonant_pos_right\
    \ = consonant_pos_right + 1\n      consonant_pos_left = consonant_pos_left + 1\n\
    \      consonant_pos_right = consonant_pos_right + 1\n      consonant_pos_left\
    \ = consonant_pos_left + 1\n      consonant_pos_right = consonant_pos_right +\
    \ 1\n      consonant_pos_left = consonant_pos_left + 1\n      consonant_pos_right\
    \ = consonant_pos_right + 1\n      consonant_pos_left = consonant_pos_left + 1\n\
    \      consonant_pos_right = consonant_pos_right + 1\n", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count\
    \ -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -=\
    \ word.count(\"u\")\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"\
    E\")\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\"\
    )\n  vowels_count += word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n\
    \  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count\
    \ -= word.count(\"u\")\n  vowels_count += word.count(\"A\")", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  consonants.each\
    \ do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n  word.split(\"\
    \").each do |letter|\n    if letter == \"a\" || letter == \"e\" || letter == \"\
    i\" || letter == \"o\" || letter == \"u\"\n      return letter\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.split(vowel).last\n  end\n  word\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.downcase\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  consonants.each\
    \ do |c|\n    vowels.each do |v|\n      if word.include?(v)\n        return v\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n \
    \ vowels.each do |vowel|\n    if word.include?(vowel)\n      return vowel\n  \
    \  end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  vowel_found = false\n  vowel_positions = []\n  vowel_positions_sorted\
    \ = []\n  vowel_positions_sorted.push(0)\n  vowel_positions_sorted.push(word.length-1)\n\
    \  while !vowel_found && vowel_positions_sorted.length > 0\n    vowel_position\
    \ = vowel_positions_sorted.shift()\n    vowel_found = true\n    vowel_positions.unshift(vowel_position)\n\
    \    word.each_char.with_index do |char, index|\n      if vowels.include?(char)\n\
    \        vowel_positions_sorted.unshift(index)\n      end\n    end\n  end\n  return\
    \ vowel_positions.include?(word.length) ? \"\" : vowels[vowel_positions.index{|x|\
    \ x < word.length}]\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \ vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -=\
    \ word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"\
    U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\"\
    )\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n\
    \  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")", " \
    \ vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  vowel_position = word.index(vowel)\n    if vowel_position > 0 && vowel_position\
    \ < word.length - 1\n      vowel_position = vowel_position + 1\n      break if\
    \ vowel_position == word.length - 1\n    end\n  end\n  return \"\" if vowel_position\
    \ == -1\n  return vowels[vowel_position] if vowel_position > 0 && vowel_position\
    \ < word.length - 1\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if\
    \ word.include?(vowel)\n      return vowel\n    end\n  end\n  return \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    vowel_pos\
    \ = word.index(vowel)\n    if vowel_pos > 0 \n      vowel_pos = word.index(vowel,\
    \ vowel_pos+1)\n    end\n    if vowel_pos < word.length-1\n      return vowel\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowel_positions = []\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_position",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if\
    \ word.include?(vowel)\n      return vowel\n    end\n  end\n  return \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    index\
    \ = word.index(vowel)\n    if index != nil\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_start_index = nil\n\
    \  vowel_end_index = nil\n  vowel_start_index = word.rindex(vowels.last)\n  vowel_end_index\
    \ = word.rindex(vowels.first)\n  vowel_start = word[vowel_start_index..-1]\n \
    \ vowel_end = word[vowel_end_index..-1]\n  vowel_found = vowels.include?(vowel_start)\n\
    \  vowel_found = vowel_found && vowels.include?(vowel_end)\n  vowel_found = vowel_found\
    \ && vowel_start != vowel_end\n  return vowel_found ? vowel_start : \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word\
    \ = word.split(vowel).last\n  end\n  word\nend", "  vowels = %w(a e i o u)\n \
    \ word.downcase!\n  word.each_char.with_index do |char, index|\n    if vowels.include?(char)\
    \ && index != word.length - 1\n      return char\n    end\n  end\n  \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if\
    \ word.include?(vowel)\n      return vowel\n    end\n  end\n  return \"\"\nend",
  "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowel_consonant_pairs\
    \ = word.split(//)\n  vowel_consonant_pairs.each do |pair|\n    vowel = vowels.find\
    \ { |vowel| vowel.downcase == pair[0].downcase }\n    consonant = consonants.find\
    \ { |consonant| consonant.downcase == pair[1].downcase }\n    return vowel if\
    \ vowel && consonant\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n  word\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0\n      vowel_pos = vowel_pos - 1\n      break if vowel_pos\
    \ < 0\n      break if word[vowel_pos].downcase == vowel.downcase\n    end\n  end\n\
    \  return \"\" if vowel_pos == 0\n  word[vowel_pos]\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nThis doesn't work if you have a word like \"abacus\" where you\
    \ want the vowel between \"a\" and \"c\"\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have a word like \"abacus\" where you want the vowel between \"a\" and\
    \ \"c\"\n<|/ c |>\n<| c |>\nThis doesn't work if you have a word like \"abacus\"\
    \ where you want the vowel between \"a\" and \"c\"\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a word like \"abacus\" where you want the vowel between \"\
    a\" and \"c\"\n<|/ c |>\n<| c |>\nThis doesn't work if you have a word like \"\
    abacus\" where you want the vowel between \"a\" and \"c\"\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.scan(/[aeiou]/).count\n  vowels_count.times do |i|\n    vowel = vowels.find\
    \ { |vowel| vowels.index(vowel) == i }\n    return vowel if vowel\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[AEIOU]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[AEIOU]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[AEIOU]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[AEIOU]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[AEIOU]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[AEIOU]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[AEIOU]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").length\nend", "  vowels = %w(a e\
    \ i o u)\n  consonants = %w(a e i o u)\n  consonants.each do |c|\n    vowels.each\
    \ do |v|\n      if word.include?(v)\n        return v\n      end\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first.to_s\n\
    \  end\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos\
    \ = word.index(vowel)\n    vowel_pos_right = vowel_pos + 1\n    vowel_pos_left\
    \ = vowel_pos - 1\n    vowel_pos_right_end = word.index(vowel, vowel_pos_right)\n\
    \    vowel_pos_left_end = word.index(vowel, vowel_pos_left)\n    \n    if vowel_pos_right\
    \ > -1 && vowel_pos_right_end > -1 && vowel_pos_left > -1 && vowel_pos_left_end\
    \ > -1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  ", "  vowels = %w{a e i o u}\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\nend",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word.downcase!\n  word.gsub(/[^aeiou]/, \"\").empty? ? \"\"\
    \ : vowels.find { |vowel| word.index(vowel) }\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI believe this solution would fail for \"yogurt\" since it returns \"\
    u\" instead of \"y\".\n<|/ c |>\n<| c |>\nYes, you are right. I've updated my\
    \ answer. Thanks.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  vowels = %w(a e i\
    \ o u)\n  consonants = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char) && index > 0 && consonants.include?(word[index\
    \ - 1])\n      return char\n    end\n  end\n  \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      vowel_index = word.index(vowel)\n      vowel_right = word[vowel_index..-1]\n\
    \      vowel_right_index = vowel_right.index(vowel)\n      vowel_right_index_with_vowel\
    \ = vowel_right_index + 1\n      if vowel_right_index_with_vowel < vowel_index\n\
    \        return vowel\n      elsif vowel_right_index_with_vowel > vowel_index\n\
    \        return \"\"\n      end\n    end\n  end\n  return \"\"\nend", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n \
    \   if index != -1 && index != word.length - 1\n      return vowel\n    end\n\
    \  end\n  \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[AEIOUY]/).count\n\
    \  vowels_count += word.scan(/[aeiouyg]/).count\n  vowels_count += word.scan(/[AEIOUYG]/).count\n\
    \  vowels_count += word.scan(/[aeiouygh]/).count\n  vowels_count += word.scan(/[AEIOUYGH]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghk]/).count\n  vowels_count += word.scan(/[AEIOUYGHK]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkj]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJ]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjl]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJL]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmn]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMN]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmno]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNO]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmnop]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNOP]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmnopr]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNOPR]/).count\n\
    \  vowels_count += word.scan(/[aeiouyghkjlmnoprs]/).count\n  vowels_count += word.scan(/[AEIOUYGHKJLMNOPRS]/).count\n\
    \  vowels_count += word.scan(/[aeiouy", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.split(vowel).last\n  end\n  word\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work if you have a word like\
    \ \"abacus\" because it will return \"a\" instead of \"u\".\n<|/ c |>\n<| c |>\n\
    I thought the question was about finding the closest vowel from the right side\
    \ of the word. Anyway, I added a solution that works with that assumption.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\"\
    )\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n \
    \ word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\"\
    )\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n \
    \ word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if\
    \ the word is \"aardvark\"\n<|/ c |>\n<| c |>\nIt doesn't work because `%w(a e\
    \ i o u)` contains `a` and `e` which are not in the word `aardvark`\n<|/ c |>\n\
    <| c |>\nI see what you mean. Thanks for pointing that out. I've updated my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  vowels = %w(a e i o u)\n  consonants =\
    \ %w(a e i o u)\n  vowels.each do |vowel|\n    word.split(vowel).last.split(consonants.first).first.upcase\n\
    \  end\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word.scan(vowel).each do |consonant|\n      word.scan(consonant).each\
    \ do |consonant_right|\n        return vowel if consonant_right == consonant\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    if index != -1 && index != word.length - 1\n      return vowel\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  vowels.each do |vowel|\n    if word.include?(vowel)\n      return vowel\n \
    \   end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"]\n  vowels.each do |vowel|\n    index = word.index(vowel)\n    if index\
    \ != nil\n      break\n    end\n  end\n  if index != nil\n    word.slice!(0, index)\n\
    \    word.slice!(index + 1, word.length)\n  end\n  return word\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/u).count\n\
    \  vowels_count += word.scan(/[aeiouy]/u).count\n  vowels_count += word.scan(/[aeiou]/y).count\n\
    \  vowels_count += word.scan(/[aeiouy]/y).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/u).count\n\
    \  vowels_count += word.scan(/[aeiouy]/u).count\n  vowels_count += word.scan(/[aeiou]/y).count\n\
    \  vowels_count += word.scan(/[aeiouy]/y).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/u).count\n\
    \  vowels_count += word.scan(/[aeiouy]/u).count\n  vowels_count += word.scan(/[aeiou]/y).count\n\
    \  vowels_count += word.scan(/[aeiouy]/y).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/u).count\n\
    \  vowels_count += word.scan(/[aeiouy]/u).count\n  vowels_count += word.scan(/[aeiou]/y).count\n\
    \  vowels_count += word.scan(/[aeiouy]/y).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/u).count\n\
    \  vowels_", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count =\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count -=\
    \ word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"\
    o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"A\"\
    )\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n\
    \  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count\
    \ -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -=\
    \ word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"\
    A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\"\
    )\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w{a e\
    \ i o u}\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count.times\
    \ do |i|\n    vowels_index = word.index(vowels[i])\n    vowels_index_right = word.rindex(vowels[i])\n\
    \    if vowels_index_right != nil\n      vowels_index_right += vowels_count -\
    \ 1\n      break if vowels_index_right < vowels_index\n    end\n  end\n  vowels[vowels_index]\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0 && vowel_pos < word.length - 1\n      consonant_pos = vowel_pos\
    \ + 1\n      consonant_pos = consonant_pos > word.length - 1 ? word.length - 1\
    \ : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > 1 ? 1 : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > 1 ? 1 : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > 1 ? 1 : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > 1 ? 1 : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > 1 ? 1 : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > 1 ? 1 : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > 1 ? 1 : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > 1 ? 1 : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > 1 ? 1 : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > 1 ? 1 : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > 1 ? 1 : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > 1 ? 1 : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > 1 ? 1 : con", "  vowels = %w(a e i o u)\n\
    \  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n    word.scan(vowel).each\
    \ do |letter|\n      consonants.each do |consonant|\n        if letter == consonant\n\
    \          return vowel\n        end\n      end\n    end\n  end\n  \"\"\nend",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  \n  word.downcase!\n  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n  word.downcase!\n\
    \  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  \n  word.downcase!\n  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n  word.downcase!\n\
    \  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  \n  word.downcase!\n  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n  word.downcase!\n\
    \  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  \n  word.downcase!\n  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n  word.downcase!\n\
    \  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  \n  word.downcase!\n  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n  word.downcase!\n\
    \  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  \n  word.downcase!\n  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n  word.downcase!\n\
    \  word.gsub!(/[^a-z]/, \"\")\n  \n  vowels.each do |vowel|\n", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.split(vowel).last\n  end\n  word\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n\
    \  vowels_count -= 1 if word.start_with?(\"y\") else 0\n  vowels_count -= 1 if\
    \ word.end_with?(\"y\") else 0\n  vowels_count -= 1 if word.start_with?(\"a\"\
    ) else 0\n  vowels_count -= 1 if word.end_with?(\"a\") else 0\n  vowels_count\
    \ -= 1 if word.start_with?(\"e\") else 0\n  vowels_count -= 1 if word.end_with?(\"\
    e\") else 0\n  vowels_count -= 1 if word.start_with?(\"i\") else 0\n  vowels_count\
    \ -= 1 if word.end_with?(\"i\") else 0\n  vowels_count -= 1 if word.start_with?(\"\
    o\") else 0\n  vowels_count -= 1 if word.end_with?(\"o\") else 0\n  vowels_count\
    \ -= 1 if word.start_with?(\"u\") else 0\n  vowels_count -= 1 if word.end_with?(\"\
    u\") else 0\n  vowels_count -= 1 if word.start_with?(\"f\") else 0\n  vowels_count\
    \ -= 1 if word.end_with?(\"f\") else 0\n  vowels_count -= 1 if word.start_with?(\"\
    l\") else 0\n  vowels_count -= 1 if word.end_with?(\"l\") else 0\n  vowels_count\
    \ -= 1 if word.start_with?(\"s\") else 0\n  vowels_count -= 1 if word.end_with?(\"\
    s\") else 0\n  vowels_count -= 1 if word.start_with?(\"t\") else 0\n  vowels_count\
    \ -= 1 if word.end_with?(\"t\") else 0\n  vowels_count -= 1 if word.start_with?(\"\
    d\") else 0\n  vowels_count -= 1 if word.end_with?(\"d\") else 0\n  vowels_count\
    \ -= 1 if word.start_with?(\"c\") else 0\n  vowels_count -= 1 if word.end_with?(\"\
    c\") else 0\n  vowels_count -= 1 if word.start_with?(\"p\") else 0\n  vowels_count\
    \ -= 1 if word.end_with?(\"p\") else 0\n  vowels_count -= 1 if word.start_with?(\"\
    f\") else 0\n  vowels_count -= 1 if word.end_with?(\"f\") else 0\n  vowels_count\
    \ -= 1 if word.start_with?(\"v\") else 0\n  vowels_count -= 1 if word.end_with?(\"\
    v\") else 0\n  vowels_count -= 1 if word.start_with?(\"b\") else 0\n  vowels_count\
    \ -= 1 if word.end_with?(\"b\") else 0\n  vowels_count ", "  vowels = %w(a e i\
    \ o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first\n\
    \  end\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos\
    \ = word.index(vowel)\n    if vowel_pos > 0 && vowel_pos < word.length - 1\n \
    \     vowel_pos_right = word.index(vowel, vowel_pos + 1)\n      if vowel_pos_right\
    \ > 0 && vowel_pos_right < word.length - 1\n        return vowel\n      end\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word.scan(/[#{vowel}]+/).each\
    \ do |letter|\n      consonants.each do |consonant|\n        if letter == consonant\n\
    \          return vowel\n        end\n      end\n    end\n  end\n  return \"\"\
    \nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word.scan(vowel).each do |consonant|\n      word.scan(consonant).each\
    \ do |consonant|\n        return vowel if word.index(consonant) < word.index(vowel)\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found = vowels.find\
    \ { |vowel| word.include?(vowel) }\n  if vowel_found\n    vowel_start = word.rindex(vowel_found)\n\
    \    vowel_end = word.rindex(vowel_found) + vowel_found.length\n    vowel_found\
    \ = word.slice(vowel_start, vowel_end)\n  end\n  vowel_found\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -=\
    \ word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"\
    U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\"\
    )\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n\
    \  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count\
    \ -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -=\
    \ word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").empty?\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  word = word.split(vowel).last\n  end\n  word.split(\"\").last\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't work if you have a word\
    \ like \"aardvark\"\n<|/ c |>\n<| c |>\nThis doesn't work if you have a word like\
    \ \"aardvark\"\n<|/ c |>\n<| c |>\nThis doesn't work if you have a word like \"\
    aardvark\"\n<|/ c |>\n<| c |>\nThis doesn't work if you have a word like \"aardvark\"\
    \n<|/ c |>\n<| c |>\nThis doesn't work if you have a word like \"aardvark\"\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"]\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found\
    \ = vowels.find { |vowel| word.include?(vowel) }\n  if vowel_found\n    vowel_start\
    \ = word.index(vowel_found)\n    vowel_end = word.index(vowel_found) + vowel_found.length\n\
    \    vowel_found = word.slice(vowel_start, vowel_end).downcase.include?(\"u\"\
    )\n  end\n  return vowel_found ? vowel_found : \"\"\nend", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n    if\
    \ vowel_pos > 0\n      vowel_pos_right = vowel_pos + 1\n      vowel_pos_left =\
    \ word.rindex(vowel, vowel_pos_right)\n      if vowel_pos_left > -1\n        return\
    \ vowel if vowel_pos_left < vowel_pos_right\n      end\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  consonants.each do |consonant|\n\
    \    word = word.gsub(consonant, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis does not work if you have\
    \ a word like \"abacus\" where it returns \"a\" instead of \"a\".\n<|/ c |>\n\
    <| c |>\nThis does not work if you have a word like \"abacus\" where it returns\
    \ \"a\" instead of \"a\".\n<|/ c |>\n<| c |>\nThis does not work if you have a\
    \ word like \"abacus\" where it returns \"a\" instead of \"a\".\n<|/ c |>\n<|\
    \ c |>\nThis does not work if you have a word like \"abacus\" where it returns\
    \ \"a\" instead of \"a\".\n<|/ c |>\n<| c |>\nThis does not work if you have a\
    \ word like \"abacus\" where it returns \"a\" instead of \"a\".\n<|/ c |>\n<|\
    \ a tags=ruby,string |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do\
    \ |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\
    \").length\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if\
    \ word.index(vowel) == word.rindex(vowel)\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  if word.include?(vowel)\n      return vowel\n    end\n  end\n  return \"\"\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  word.downcase!\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/",
  "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  consonants.each do |consonant|\n\
    \    word = word.gsub(consonant, \"\")\n  end\n  word.gsub(/[^aeiou]/, \"\").downcase\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n\
    \  vowel_positions = []\n  vowel_positions_sorted = []\n  vowel_positions_sorted.push(word.length)\n\
    \  while !vowel_found && vowel_positions_sorted.length > 0\n    vowel_position\
    \ = vowel_positions_sorted.shift()\n    vowel_found = false\n    word.each_char.with_index\
    \ do |char, index|\n      if vowels.include?(char)\n        vowel_found = true\n\
    \        vowel_positions.push(index)\n      end\n    end\n  end\n  vowel_positions.each\
    \ do |position|\n    vowel_positions_sorted.push(position)\n  end\n  vowel_positions_sorted.each\
    \ do |position|\n    if position > 0 && position < word.length\n      return word[position-1]\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word.split(vowel).last.split(consonants.first).first.to_s.downcase\
    \ \n  end \nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos\
    \ = word.index(vowel)\n    if vowel_pos > 0\n      vowel_pos = word.index(vowel,\
    \ vowel_pos + 1)\n      if vowel_pos > 0\n        return vowel\n      end\n  \
    \  end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  word.scan(/[#{vowels.join('|')}]/).each do |vowel|\n    vowel.upcase!\n   \
    \ return vowel if word.index(vowel, word.length - vowel.length) == 0\n  end\n\
    \  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos > 0\n      vowel_pos\
    \ = word.index(vowel, vowel_pos + 1)\n      if vowel_pos < word.length\n     \
    \   return vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    vowel_pos\
    \ = word.index(vowel)\n    if vowel_pos > 0 \n      vowel_pos = word.index(vowel,\
    \ vowel_pos + 1)\n      break if vowel_pos == word.length - 1\n    end\n  end\n\
    \  return vowel if vowel_pos > 0\n  return \"\"\nend", "  vowels = %w(a e i o\
    \ u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n    if index !=\
    \ -1 && index != word.length - 1\n      return vowel\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w(a\
    \ e i o u)\n  word.downcase!\n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    if index > 0 && index < word.length - 1\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos > 0 && vowel_pos\
    \ < word.length - 1\n      return vowel\n    end\n  end\n  return \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index > 0 && index < word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n\
    \  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").length == 0 ? \"\" : word.gsub(/[aeiou]/, \"\").downcase\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if the word is \"ab\" for example\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. I've updated my answer. Thanks for pointing\
    \ out.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos\
    \ > 0 \n      vowel_pos_right = vowel_pos + 1\n      vowel_pos_left = word.index(vowel,\
    \ vowel_pos_right)\n      if vowel_pos_left > 0 \n        vowel_pos_right = word.index(vowel,\
    \ vowel_pos_left) \n      end\n    end\n  end\nend", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").downcase\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").empty?\
    \ ? \"\" : word.gsub(/[aeiou]/, \"\").downcase\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| a dscore=0 |>\n<code>", "  vowels = %w(a e i o u)\n  consonants = %w(a\
    \ e i o u)\n  word.downcase!\n  word.each_char.with_index do |char, i|\n    if\
    \ vowels.include?(char) && consonants.include?(word[(i+1)..-1]) \n      return\
    \ char\n    end\n  end\n  return \"\"\nend\n</code>\n<|/ a tags=ruby,string |>\n\
    <| a tags=ruby,string |>\n<code>", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  vowel_counter = 0\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_length = nil\n  vowel_start_index = nil\n  vowel_end_index =\
    \ nil\n  vowel_length = word.length\n  vowel_start_index = 0\n  vowel_end_index\
    \ = vowel_length\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n\
    \  vowel_length = nil\n  vowel_start_index = 0\n  vowel_end_index = vowel_length\n\
    \  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_length\
    \ = nil\n  vowel_start_index = 0\n  vowel_end_index = vowel_length\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_length = nil\n  vowel_start_index\
    \ = 0\n  vowel_end_index = vowel_length\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_length = nil\n  vowel_start_index = 0\n  vowel_end_index\
    \ = vowel_length\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n\
    \  vowel_length = nil\n  vowel_start_index = 0\n  vowel_end_index = vowel_length\n\
    \  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_length\
    \ = nil\n  vowel_start_index = 0\n  vowel_end_index = vowel_length\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_length = nil\n  vowel_start_index\
    \ = 0\n  vowel_end_index = vowel_length\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_length = nil\n  vowel_start_index = 0\n  vowel_end_index\
    \ = vowel_length\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n\
    \  vowel_length = nil\n  vowel_start_index = 0\n  vowel_end_index = vowel_length\n\
    \  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_length\
    \ = nil\n  vowel_start_index = 0\n  vowel_end_index = vowel_length\n  vowel_found\
    \ = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_length = nil\n  vowel_start_index\
    \ = 0\n  vowel", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word.scan(vowel).each do |consonant|\n      word.scan(consonant).each\
    \ do |char|\n        if char == vowel\n          return char\n        end\n  \
    \    end\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\"\
    )\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.scan(/[aeiou]/).count\n  vowels_count.times do |i|\n    vowel = vowels.find\
    \ { |v| word.include?(v) }\n    return vowel if vowel\n  end\n  return \"\"\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel,\
    \ word.length-1) == word.length-1\n      return vowel\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word =\
    \ word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").length == 0 ? \"\
    \" : vowels.find { |vowel| word.gsub(vowel, \"\").length == word.length }\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    index\
    \ = word.index(vowel)\n    if index != -1 && index != word.length - 1\n      return\
    \ vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  word.each_char.with_index do |char, i|\n    if vowels.include?(char) && i >\
    \ 0 && i < word.length - 1\n      return char\n    end\n  end\n  \"\"\nend", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  ", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  vowel_counter = 0\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_start_index = nil\n  vowel_end_index = nil\n  vowel_start_index\
    \ = word.rindex(vowels.last)\n  vowel_end_index = word.rindex(vowels.first)\n\
    \  vowel_start = word[vowel_start_index..-1]\n  vowel_end = word[vowel_end_index..-1]\n\
    \  vowel_found = false\n  vowel_counter = 0\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_start_index = nil\n  vowel_end_index = nil\n\
    \  vowel_start_index = word.rindex(vowels.last)\n  vowel_end_index = word.rindex(vowels.first)\n\
    \  vowel_start = word[vowel_start_index..-1]\n  vowel_end = word[vowel_end_index..-1]\n\
    \  vowel_found = false\n  vowel_counter = 0\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_start_index = nil\n  vowel_end_index = nil\n\
    \  vowel_start_index = word.rindex(vowels.last)\n  vowel_end_index = word.rindex(vowels.first)\n\
    \  vowel_start = word[vowel_start_index..-1]\n  vowel_end = word[vowel_end_index..-1]\n\
    \  vowel_found = false\n  vowel_counter = 0\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_start_index = nil\n  vowel_end_index = nil\n\
    \  vowel_start_index = word.rindex(vowels.last)\n  vowel_end_index = word.rindex(vowels.first)\n\
    \  vowel_start = word[vowel_start_index..-1]\n  vowel_end = word[vowel_end_index..-1]\n\
    \  vowel_found = false\n  vowel_counter = 0\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_start_index = nil\n  vowel_end_index = nil\n\
    \  vowel_start_index = word.rindex(vowels.last)\n  vowel_end_index = word.rindex(vowels.first)\n\
    \  vowel_start = word[vowel_start_index..-1]\n  vowel_end = word[vowel_end_index..-1]\n\
    \  vowel_found = false\n  vowel_counter = 0\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  ", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n  word\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n\
    \    vowel_pos = word.index(vowel)\n    if vowel_pos > 0 && vowel_pos < word.length\
    \ - 1\n      vowel_pos_right = word[vowel_pos + 1]\n      vowel_pos_left = word[vowel_pos\
    \ - 1]\n      if vowel_pos_right == \"c\" || vowel_pos_right == \"C\" || vowel_pos_right\
    \ == \"d\" || vowel_pos_right == \"D\" || vowel_pos_right == \"f\" || vowel_pos_right\
    \ == \"F\" || vowel_pos_right == \"g\" || vowel_pos_right == \"G\" || vowel_pos_right\
    \ == \"h\" || vowel_pos_right == \"H\" || vowel_pos_right == \"j\" || vowel_pos_right\
    \ == \"J\" || vowel_pos_right == \"k\" || vowel_pos_right == \"K\" || vowel_pos_right\
    \ == \"l\" || vowel_pos_right == \"L\" || vowel_pos_right == \"m\" || vowel_pos_right\
    \ == \"M\" || vowel_pos_right == \"n\" || vowel_pos_right == \"N\" || vowel_pos_right\
    \ == \"p\" || vowel_pos_right == \"P\" || vowel_pos_right == \"q\" || vowel_pos_right\
    \ == \"Q\" || vowel_pos_right == \"r\" || vowel_pos_right == \"R\" || vowel_pos_right\
    \ == \"s\" || vowel_pos_right == \"S\" || vowel_pos_right == \"t\" || vowel_pos_right\
    \ == \"T\" || vowel_pos_right == \"v\" || vowel_pos_right == \"V\" || vowel_pos_right\
    \ == \"w\" || vowel_pos_right == \"W\" || vowel_pos_right == \"x\" || vowel_pos_right\
    \ == \"X\" || vowel_pos_right == \"z\" || vowel_pos_right == \"Z\"\n        return\
    \ vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found\
    \ = false\n  vowel_positions = []\n  vowel_position = 0\n  \n  word.downcase!\n\
    \  word.each_char do |char|\n    vowel_found = false\n    vowel_position = 0\n\
    \    vowels.each do |vowel|\n      if vowel == char\n        vowel_found = true\n\
    \        break\n      end\n    end\n    if vowel_found\n      vowel_positions\
    \ << vowel_position\n    end\n  end\n  \n  vowel_positions.each do |vowel_position|\n\
    \    vowel_position = vowel_position - 1\n    vowel_position = vowel_position\
    \ if vowel_position < 0\n    vowel_position = vowel_position if vowel_position\
    \ > 0\n    break if vowel_position == vowel_positions.size - 1\n  end\n  \n  if\
    \ vowel_positions.size > 0\n    vowel_positions.each do |vowel_position|\n   \
    \   vowel_position = vowel_position - 1\n      vowel_position = vowel_position\
    \ if vowel_position < 0\n      vowel_position = vowel_position if vowel_position\
    \ > 0\n      break if vowel_position == vowel_positions.size - 1\n    end\n  end\n\
    \  \n  if vowel_positions.size > 0\n    vowel_positions.each do |vowel_position|\n\
    \      vowel_position = vowel_position - 1\n      vowel_position = vowel_position\
    \ if vowel_position < 0\n      vowel_position = vowel_position if vowel_position\
    \ > 0\n      break if vowel_position == vowel_positions.size - 1\n    end\n  end\n\
    \  \n  if vowel_positions.size > 0\n    vowel_positions.each do |vowel_position|\n\
    \      vowel_position = vowel_position - 1\n      vowel_position = vowel_position\
    \ if vowel_position < 0\n      vowel_position = vowel_position if vowel_position\
    \ > 0\n      break if vowel_position == vowel_positions.size - 1\n    end\n  end\n\
    \  \n  if vowel_positions.size > 0\n    vowel_positions.each do |vowel_position|\n\
    \      vowel_position = vowel_position - 1\n      vowel_position = vowel_position\
    \ if vowel_position < 0\n      vowel_position = vowel_position if vowel_position\
    \ > 0\n      break if vowel_position == vowel_positions.size - 1\n    end\n  end\n\
    \  \n  if vowel_positions.size > 0\n    vowel_positions.each do |vowel_position|\n\
    \      vowel_position = vowel_position - 1\n      vowel", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n      return vowel\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AE", "  vowels = %w(a e i o u)\n  vowels.each do\
    \ |vowel|\n    if word.index(vowel)\n      return vowel\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word =\
    \ word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word.downcase!\n\
    \  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.g", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word =\
    \ word.downcase\n  word.each_char.with_index do |char, index|\n    if index ==\
    \ word.length - 1\n      return char if vowels.include?(char)\n    end\n  end\n\
    \  return \"\"\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't work if\
    \ you have a word like \"aardvark\"\n<|/ c |>\n<| c |>\nIt doesn't work if you\
    \ have a word like \"aardvark\"\n<|/ c |>\n<| c |>\nIt doesn't work if you have\
    \ a word like \"aardvark\"\n<|/ c |>\n<| c |>\nIt doesn't work if you have a word\
    \ like \"aardvark\"\n<|/ c |>\n<| c |>\nIt doesn't work if you have a word like\
    \ \"aardvark\"\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n    vowel_pos_right\
    \ = vowel_pos + 1\n    vowel_pos_left = word.rindex(vowel)\n    vowel_pos_left\
    \ = vowel_pos_left if vowel_pos_left > vowel_pos_right\n    vowel_pos_right =\
    \ vowel_pos_right if vowel_pos_left > vowel_pos_right\n    return vowel if vowel_pos_left\
    \ < vowel_pos_right\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n \
    \ vowels.each do |vowel|\n    if word.index(vowel) == word.rindex(vowel)\n   \
    \   return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  \n  consonants = \"bcdfghjklmnpqrstvwxyz\"\n  consonants.each\
    \ do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n  \n  word = word.downcase\n\
    \  \n  if word.include? \"a\"\n    word = word[1..-1]\n  elsif word.include? \"\
    e\"\n    word = word[1..-1]\n  elsif word.include? \"i\"\n    word = word[1..-1]\n\
    \  elsif word.include? \"o\"\n    word = word[1..-1]\n  elsif word.include? \"\
    u\"\n    word = word[1..-1]\n  end\n  \n  return word\nend", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0 and vowel_pos < word.length - 1\n      return vowel\n  \
    \  end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  vowel_found = false\n  vowel_positions = []\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length - 1\n  vowel_positions.push word.length -\
    \ 2\n  vowel_positions.push word.length - 3\n  vowel_positions.push word.length\
    \ - 4\n  vowel_positions.push word.length - 5\n  vowel_positions.push word.length\
    \ - 6\n  vowel_positions.push word.length - 7\n  vowel_positions.push word.length\
    \ - 8\n  vowel_positions.push word.length - 9\n  vowel_positions.push word.length\
    \ - 10\n  vowel_positions.push word.length - 11\n  vowel_positions.push word.length\
    \ - 12\n  vowel_positions.push word.length - 13\n  vowel_positions.push word.length\
    \ - 14\n  vowel_positions.push word.length - 15\n  vowel_positions.push word.length\
    \ - 16\n  vowel_positions.push word.length - 17\n  vowel_positions.push word.length\
    \ - 18\n  vowel_positions.push word.length - 19\n  vowel_positions.push word.length\
    \ - 20\n  vowel_positions.push word.length - 21\n  vowel_positions.push word.length\
    \ - 22\n  vowel_positions.push word.length - 23\n  vowel_positions.push word.length\
    \ - 24\n  vowel_positions.push word.length - 25\n  vowel_positions.push word.length\
    \ - 26\n  vowel_positions.push word.length - 27\n  vowel_positions.push word.length\
    \ - 28\n  vowel_positions.push word.length - 29\n  vowel_positions.push word.length\
    \ - 30\n  vowel_positions.push word.length - 31\n  vowel_positions.push word.length\
    \ - 32\n  vowel_positions.push word.length - 33\n  vowel_positions.push word.length\
    \ - 34\n  vowel_positions.push word.length - 35\n  vowel_positions.push word.length\
    \ - 36\n  vowel_positions.push word.length - 37\n  vowel_positions.push word.length\
    \ - 38\n  vowel_positions.push word.length - 39\n  vowel_positions.push word.length\
    \ - 40\n  vowel_positions.push word.length - 41\n  vowel_positions.push word.length\
    \ - 42\n  vowel_positions.push word.length - 43\n  vowel_positions.push ", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n   \
    \ index = word.index(vowel)\n    if index != nil\n      break if index > word.length-1\n\
    \      break if index == word.length-1\n      break if index == word.length-2\n\
    \      break if index == word.length-3\n      break if index == word.length-4\n\
    \      break if index == word.length-5\n      break if index == word.length-6\n\
    \      break if index == word.length-7\n      break if index == word.length-8\n\
    \      break if index == word.length-9\n      break if index == word.length-10\n\
    \      break if index == word.length-11\n      break if index == word.length-12\n\
    \      break if index == word.length-13\n      break if index == word.length-14\n\
    \      break if index == word.length-15\n      break if index == word.length-16\n\
    \      break if index == word.length-17\n      break if index == word.length-18\n\
    \      break if index == word.length-19\n      break if index == word.length-20\n\
    \      break if index == word.length-21\n      break if index == word.length-22\n\
    \      break if index == word.length-23\n      break if index == word.length-24\n\
    \      break if index == word.length-25\n      break if index == word.length-26\n\
    \      break if index == word.length-27\n      break if index == word.length-28\n\
    \      break if index == word.length-29\n      break if index == word.length-30\n\
    \      break if index == word.length-31\n      break if index == word.length-32\n\
    \      break if index == word.length-33\n      break if index == word.length-34\n\
    \      break if index == word.length-35\n      break if index == word.length-36\n\
    \      break if index == word.length-37\n      break if index == word.length-38\n\
    \      break if index == word.length-39\n      break if index == word.length-40\n\
    \      break if index == word.length-41\n      break if index == word.length-42\n\
    \      break if index == word.length-43\n      break if index == word.length-44\n\
    \      break if index == word.length-45\n      break if index == word.length-46\n\
    \      break if index == word.length-47\n      break if index == word.length-48\n\
    \      break if index == word.length-49\n      ", "  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.split(vowel).last\n  end\n  word\nend", "  vowels\
    \ = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index do |char, index|\n\
    \    vowels.each do |vowel|\n      if index == 0 || index == word.length - 1\n\
    \        return vowel if vowels.index(vowel) < vowels.index(char)\n      end\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word.gsub(/[aeiou]/, \"\").empty? ? \"\" : word.gsub(/[aeiou]/, \"\").downcase\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    vowel_pos_right = vowel_pos + 1\n    vowel_pos_left = vowel_pos - 1\n   \
    \ vowel_pos_right_end = word.index(vowel, vowel_pos_right)\n    vowel_pos_left_end\
    \ = word.index(vowel, vowel_pos_left)\n    vowel_pos_right_start = word.index(vowel,\
    \ vowel_pos_right - 1)\n    vowel_pos_left_start = word.index(vowel, vowel_pos_left\
    \ + 1)\n    \n    if vowel_pos_right > -1 && vowel_pos_right_end > -1\n      return\
    \ vowel if vowel_pos_right < vowel_pos_right_end && vowel_pos_right > vowel_pos_right_start\n\
    \    elsif vowel_pos_left > -1 && vowel_pos_left_end > -1\n      return vowel\
    \ if vowel_pos_left < vowel_pos_left_end && vowel_pos_left > vowel_pos_left_start\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n\
    \  return word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.scan(/[aeiou]/).count\n  vowels_count.times do |i|\n    vowels_count\
    \ = word.scan(/[aeiou]/).count\n    vowels_count.times do |j|\n      vowels_count\
    \ = word.scan(/[aeiou]/).count\n      vowels_count.times do |k|\n        vowels_count\
    \ = word.scan(/[aeiou]/).count\n        vowels_count.times do |l|\n          vowels_count\
    \ = word.scan(/[aeiou]/).count\n          vowels_count.times do |m|\n        \
    \    vowels_count = word.scan(/[aeiou]/).count\n            vowels_count.times\
    \ do |n|\n              vowels_count = word.scan(/[aeiou]/).count\n          \
    \    vowels_count.times do |o|\n                vowels_count = word.scan(/[aeiou]/).count\n\
    \                vowels_count.times do |p|\n                  vowels_count = word.scan(/[aeiou]/).count\n\
    \                  vowels_count.times do |q|\n                    vowels_count\
    \ = word.scan(/[aeiou]/).count\n                    vowels_count.times do |r|\n\
    \                      vowels_count = word.scan(/[aeiou]/).count\n           \
    \           vowels_count.times do |s|\n                        vowels_count =\
    \ word.scan(/[aeiou]/).count\n                        vowels_count.times do |t|\n\
    \                          vowels_count = word.scan(/[aeiou]/).count\n       \
    \                   vowels_count.times do |u|\n                            vowels_count\
    \ = word.scan(/[aeiou]/).count\n                            vowels_count.times\
    \ do |v|\n                              vowels_count = word.scan(/[aeiou]/).count\n\
    \                              vowels_count.times do |w|\n                   \
    \             vowels_count = word.scan(/[aeiou]/).count\n                    \
    \            vowels_count.times do |x|\n                                  vowels_count\
    \ = word.scan(/[aeiou]/).count\n                                  vowels_count.times\
    \ do |y|\n                                    vowels_count = word.scan(/[aeiou]/).count\n\
    \                                    vowels_count.times do |z|\n             \
    \                         vowels_count = word.scan(/[aeiou]/).count\n        \
    \                              vowels_count.times do |a|\n                   \
    \                     vowels_count = word.scan(/[aeiou]/).count\n            \
    \                            vowels_count.times do |b|\n                     \
    \                     vowels_count = word.scan(/[aeiou]/).count\n            \
    \                              vowels_count.times do |", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos\
    \ > 0 && vowel_pos < word.length - 1\n      return vowel if word[vowel_pos + 1]\
    \ == vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\"\
    )\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n      return\
    \ vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n     \
    \ vowel_pos = word.index(vowel)\n      vowel_pos_right = vowel_pos + 1\n     \
    \ vowel_pos_left = vowel_pos - 1\n      vowel_pos_right_upper = vowel_pos_right\
    \ + 1 \n      vowel_pos_left_upper = vowel_pos_left - 1\n      vowel_pos_right_lower\
    \ = vowel_pos_right - 1\n      vowel_pos_left_lower = vowel_pos_left + 1\n   \
    \   \n      consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"]\n      consonants.each do |consonant|\n        if word.include?(consonant)\n\
    \          consonant_pos = word.index(consonant)\n          consonant_pos_right\
    \ = consonant_pos + 1\n          consonant_pos_left = consonant_pos - 1\n    \
    \      consonant_pos_right_upper = consonant_pos_right + 1 \n          consonant_pos_left_upper\
    \ = consonant_pos_left - 1\n          consonant_pos_right_lower = consonant_pos_right\
    \ - 1\n          consonant_pos_left_lower = consonant_pos_left + 1\n         \
    \ \n          \n          if consonant_pos_right < vowel_pos_right_upper && consonant_pos_left\
    \ > vowel_pos_left_upper && consonant_pos_right < vowel_pos_right_lower && consonant_pos_left\
    \ > vowel_pos_left_lower\n            return consonant\n          end\n      \
    \  end\n      end\n    end\n  end\n  \n  return \"\"\nend", "  vowels = %w(a e\
    \ i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n    if\
    \ vowel_pos > 0 && vowel_pos < word.length - 1\n      return vowel if word[vowel_pos\
    \ + 1] == vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n  word.split(//).last\n\
    end", "  vowels = %w{a e i o u}\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.scan(/[#{vowels.join('|')}]/).each\
    \ do |vowel|\n    vowel = vowel.downcase\n    vowels.each do |v|\n      if vowel\
    \ == v\n        return v\n      end\n    end\n  end\n  \"\"\nend", "  vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word.gsub(/[aeiou]/, \"\").length\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| a dscore=0 |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work if the word\
    \ is `\"a\"`\n<|/ c |>\n<| c |>\nI didn't know that `gsub` would replace all occurrences.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't work if the word\
    \ is `\"a\"`\n<|/ c |>\n<| c |>\nI didn't know that `gsub` would replace all occurrences.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    vowel_pos\
    \ = word.index(vowel)\n    vowel_pos_right = vowel_pos + 1\n    vowel_pos_left\
    \ = vowel_pos - 1\n    vowel_pos_right_end = word.index(vowel, vowel_pos_right)\n\
    \    vowel_pos_left_end = word.index(vowel, vowel_pos_left)\n    if vowel_pos_right\
    \ < vowel_pos_right_end && vowel_pos_left > vowel_pos_left_end\n      return vowel\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first\n\
    \  end\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n\
    \  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count\
    \ -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -=\
    \ word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count\
    \ -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n\
    \  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count\
    \ -= word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n\
    \  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count\
    \ -= word.count(\"u\")\n  vowels_count -= word.count(\"A\")", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0 && vowel_pos < word.length - 1\n      consonant_pos = vowel_pos\
    \ + 1\n      consonant_pos = consonant_pos > word.length - 1 ? word.length - 1\
    \ : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > word.length - 1 ? word.length - 1 : consonant_pos\n\
    \      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos\
    \ = consonant_pos > word.length - 1 ? word.length - 1 : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > word.length - 1 ? word.length - 1 : consonant_pos\n      consonant_pos = consonant_pos\
    \ < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos > word.length -\
    \ 1 ? word.length - 1 : consonant_pos\n      consonant_pos = consonant_pos < 0\
    \ ? 0 : consonant_pos\n      consonant_pos = consonant_pos > word.length - 1 ?\
    \ word.length - 1 : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0\
    \ : consonant_pos\n      consonant_pos = consonant_pos > word.length - 1 ? word.length\
    \ - 1 : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > word.length - 1 ? word.length - 1 : consonant_pos\n\
    \      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos\
    \ = consonant_pos > word.length - 1 ? word.length - 1 : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > word.length - 1 ? word.length - 1 : consonant_pos\n      consonant_pos = consonant_pos\
    \ < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos > word.length -\
    \ 1 ? word.length - 1 : consonant_pos\n      consonant_pos = consonant_pos < 0\
    \ ? 0 : consonant_pos\n      consonant_pos = consonant_pos > word.length - 1 ?\
    \ word.length - 1 : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0\
    \ : consonant_pos\n      con", "  vowels = %w(a e i o u)\n  word.downcase!\n \
    \ word.scan(/[#{vowels.join('|')}]/).each do |vowel|\n    break if vowels.index(vowel)\
    \ == word.size - 1\n  end\n  vowel\nend", "  vowels = %w{a e i o u}\n  word.downcase!\n\
    \  word.chars.each do |char|\n    vowels.each do |vowel|\n      if vowel == char\n\
    \        return char\n      end\n    end\n  end\n  \"\"\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word.split(\"\").each do |letter|\n    if letter == \"a\"\n      return\
    \ \"a\"\n    elsif letter == \"e\"\n      return \"e\"\n    elsif letter == \"\
    i\"\n      return \"i\"\n    elsif letter == \"o\"\n      return \"o\"\n    elsif\
    \ letter == \"u\"\n      return \"u\"\n    end\n  end\n  return \"\"\nend", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n   \
    \ word = word.split(vowel).last\n  end\n  word.split(\"\").reverse.each do |letter|\n\
    \    if letter == \"a\"\n      return \"a\"\n    elsif letter == \"e\"\n     \
    \ return \"e\"\n    elsif letter == \"i\"\n      return \"i\"\n    elsif letter\
    \ == \"o\"\n      return \"o\"\n    elsif letter == \"u\"\n      return \"u\"\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").empty? ? \"\" : word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels =\
    \ %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_start\
    \ = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end\
    \ = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found\
    \ = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start\
    \ = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end\
    \ = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found\
    \ = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start\
    \ = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end\
    \ = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found\
    \ = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start\
    \ = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end\
    \ = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found\
    \ = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start\
    \ = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end\
    \ = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found\
    \ = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start\
    \ = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end\
    \ = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found\
    \ = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start\
    \ = 0\n  vowel_end = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end\
    \ = 0\n  vowel_found = false\n  vowel_start = 0\n  vowel_end = 0\n  vowel_found\
    \ = false\n  vowel_start = 0\n  ", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -=\
    \ word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"\
    U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\"\
    )\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n\
    \  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"A\")\n  vowels_count\
    \ += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n  vowels_count +=\
    \ word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  vowels_count += word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"\
    e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\"\
    )\n  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"A\")",
  "  vowels = %w(a e i o u)\n  word.split(\"\").each do |letter|\n    vowels.each\
    \ do |vowel|\n      if letter == vowel\n        return vowel\n      end\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index > 0 && index < word.length - 1\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n \
    \ word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found =\
    \ false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_start = word.rindex(\"\
    a\")\n  vowel_end = word.rindex(\"e\")\n  vowel_found = vowel_start != nil &&\
    \ vowel_end != nil\n  vowel_found = vowel_start != nil && vowel_end != nil &&\
    \ vowel_start < vowel_end\n  if vowel_found\n    vowel_start = vowel_start + 1\n\
    \    vowel_end = vowel_end + 1\n  end\n  vowel_found = vowel_start != nil && vowel_end\
    \ != nil && vowel_start < vowel_end\n  if vowel_found\n    vowel_start = vowel_start\
    \ + 1\n    vowel_end = vowel_end + 1\n  end\n  vowel_found = vowel_start != nil\
    \ && vowel_end != nil && vowel_start < vowel_end\n  if vowel_found\n    vowel_start\
    \ = vowel_start + 1\n    vowel_end = vowel_end + 1\n  end\n  vowel_found = vowel_start\
    \ != nil && vowel_end != nil && vowel_start < vowel_end\n  if vowel_found\n  \
    \  vowel_start = vowel_start + 1\n    vowel_end = vowel_end + 1\n  end\n  vowel_found\
    \ = vowel_start != nil && vowel_end != nil && vowel_start < vowel_end\n  if vowel_found\n\
    \    vowel_start = vowel_start + 1\n    vowel_end = vowel_end + 1\n  end\n  vowel_found\
    \ = vowel_start != nil && vowel_end != nil && vowel_start < vowel_end\n  if vowel_found\n\
    \    vowel_start = vowel_start + 1\n    vowel_end = vowel_end + 1\n  end\n  vowel_found\
    \ = vowel_start != nil && vowel_end != nil && vowel_start < vowel_end\n  if vowel_found\n\
    \    vowel_start = vowel_start + 1\n    vowel_end = vowel_end + 1\n  end\n  vowel_found\
    \ = vowel_start != nil && vowel_end != nil && vowel_start < vowel_end\n  if vowel_found\n\
    \    vowel_start = vowel_start + 1\n    vowel_end = vowel_end + 1\n  end\n  vowel_found\
    \ = vowel_start != nil && vowel_end != nil && vowel_start < vowel_end\n  if vowel_found\n\
    \    vowel_start = vowel_start + 1\n    vowel_end = vowel_end + 1\n  end\n  vowel_"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
