name: HumanEval_108_count_nums
language: ruby
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) == 1\n#\
  \ >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
  \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
  \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n\
  \    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
  \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
  \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
completions: ["  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -=\
    \ num.abs\n    end\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n\
    \    num = num.to_i\n    num = num.abs\n    num = num % 10\n    num = num > 0\
    \ ? num : -num\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n   \
    \ if num < 0\n      num *= -1\n      sign = -1\n    else\n      sign = 1\n   \
    \ end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n \
    \     digit = digit.abs\n      digit = digit + sign\n      digit = digit % 10\n\
    \      digit = digit == 0 ? 0 : digit\n      break if digit == 0\n    end\n  end\n\
    \  arr.count\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n      n -=\
    \ 1\n    end\n    n += n % 10\n  end\n  arr.count\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n\
    \  end\n  sum\nend", "  arr.each do |num|\n    if num < 0\n      num = -num\n\
    \      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      digit = digit.to_i\n      digit = sign * digit\n\
    \      sum += digit\n    end\n  end\n  sum\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d > 0 }.count\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    return num if num > 0\n    num = num.abs\n    num = num.to_i\n    num = num\
    \ - num % 10\n    return num if num > 0\n  end\n  0\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n\
    \  end\n  sum\nend", "  arr.each do |num|\n    num = num.to_i\n    sum = 0\n \
    \   while num > 0\n      sum += num % 10\n      num /= 10\n    end\n    if sum\
    \ > 0\n      puts \"#{sum}\"\n    end\n  end\nend", "  arr.each do |n|\n    if\
    \ n < 0\n      n += 10\n    end\n    n -= n % 10\n    n += n % 10\n  end\n  arr.count\n\
    end", "  arr.each do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n\
    \    break if n % 10 == 0\n    n -= 1\n  end\n  arr.count\nend", "  arr.each do\
    \ |n|\n    n.to_s.split('').select { |d| d > 0 }.count\n  end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like the idea of using negative numbers to represent\
    \ a negative sum, but I don't think this will work. For example, `count_nums([-1,\
    \ 11, -11])` returns `1`, but `count_nums([1, 1, 2])` returns `3`.\n<|/ c |>\n\
    <| c |>\nGood catch, thanks. I fixed the code by adding `if n < 0` before `n.to_s.split('').select\
    \ { |d| d > 0 }.count`.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to do it without using negative numbers. For example, `count_nums([1,\
    \ 1, 2])` returns `3`, but `count_nums([-1, 11, -11])` returns `1`.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't use negative numbers. I hope it helps.\n\
    <|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.each do |num|\n    if num\
    \ < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n\
    \  sum\nend", "  arr.each do |n|\n    n.to_s.split('').inject(0) do |sum, digit|\n\
    \      sum + digit.to_i\n    end\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d > 0 }.count\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    sum = 0\n    while num > 0\n      sum += num % 10\n      num /= 10\n    end\n\
    \    return sum if sum > 0\n  end\n  0\nend", "  arr.each do |num|\n    digits\
    \ = num.to_s.split(//).map(&:to_i)\n    digits.each do |digit|\n      next if\
    \ digit < 0\n      break if digit > 9\n      break if digit == 0\n      break\
    \ if digit == 9\n      break if digit == 10\n      break if digit == 11\n    \
    \  break if digit == 12\n      break if digit == 13\n      break if digit == 14\n\
    \      break if digit == 15\n      break if digit == 16\n      break if digit\
    \ == 17\n      break if digit == 18\n      break if digit == 19\n      break if\
    \ digit == 20\n      break if digit == 21\n      break if digit == 22\n      break\
    \ if digit == 23\n      break if digit == 24\n      break if digit == 25\n   \
    \   break if digit == 26\n      break if digit == 27\n      break if digit ==\
    \ 28\n      break if digit == 29\n      break if digit == 30\n      break if digit\
    \ == 31\n      break if digit == 32\n      break if digit == 33\n      break if\
    \ digit == 34\n      break if digit == 35\n      break if digit == 36\n      break\
    \ if digit == 37\n      break if digit == 38\n      break if digit == 39\n   \
    \   break if digit == 40\n      break if digit == 41\n      break if digit ==\
    \ 42\n      break if digit == 43\n      break if digit == 44\n      break if digit\
    \ == 45\n      break if digit == 46\n      break if digit == 47\n      break if\
    \ digit == 48\n      break if digit == 49\n      break if digit == 50\n      break\
    \ if digit == 51\n      break if digit == 52\n      break if digit == 53\n   \
    \   break if digit == 54\n      break if digit == 55\n      break if digit ==\
    \ 56\n      break if digit == 57\n      break if digit == 58\n      break if digit\
    \ == 59\n      break if digit == 60\n      break if digit == 61\n      break if\
    \ digit == 62\n      break if digit == 63\n      break if digit == 64\n      break\
    \ if digit == 65\n      break if digit == 66\n      break if digit == 67\n   \
    \   break if digit == 68\n      break if digit == 69\n      break if digit ==\
    \ 70\n      break if digit == 71\n      break if digit == 72\n      break if digit\
    \ == 73\n      break if digit == 74\n", "  arr.each do |num|\n    if num < 0\n\
    \      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\n\
    end", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n    n -= n % 10\n\
    \    n /= 10\n  end\n  arr.count\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    return num if num > 0\n    num = num.abs\n    num = num.to_i\n    return\
    \ num if num < 0\n  end\n  0\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d > 0 }.size\n  end\nend", "  arr.each do |num|\n    if num < 0\n    \
    \  num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n    else\n\
    \      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |digit|\n      digits -= digit\n    end\n    if digits.empty?\n      puts\
    \ \"#{num} has no digits\"\n    elsif digits.size == 1\n      puts \"#{num} has\
    \ 1 digit\"\n    elsif digits.size == 2\n      puts \"#{num} has 2 digits\"\n\
    \    elsif digits.size == 3\n      puts \"#{num} has 3 digits\"\n    elsif digits.size\
    \ == 4\n      puts \"#{num} has 4 digits\"\n    elsif digits.size == 5\n     \
    \ puts \"#{num} has 5 digits\"\n    elsif digits.size == 6\n      puts \"#{num}\
    \ has 6 digits\"\n    elsif digits.size == 7\n      puts \"#{num} has 7 digits\"\
    \n    elsif digits.size == 8\n      puts \"#{num} has 8 digits\"\n    elsif digits.size\
    \ == 9\n      puts \"#{num} has 9 digits\"\n    elsif digits.size == 10\n    \
    \  puts \"#{num} has 10 digits\"\n    elsif digits.size == 11\n      puts \"#{num}\
    \ has 11 digits\"\n    elsif digits.size == 12\n      puts \"#{num} has 12 digits\"\
    \n    elsif digits.size == 13\n      puts \"#{num} has 13 digits\"\n    elsif\
    \ digits.size == 14\n      puts \"#{num} has 14 digits\"\n    elsif digits.size\
    \ == 15\n      puts \"#{num} has 15 digits\"\n    elsif digits.size == 16\n  \
    \    puts \"#{num} has 16 digits\"\n    elsif digits.size == 17\n      puts \"\
    #{num} has 17 digits\"\n    elsif digits.size == 18\n      puts \"#{num} has 18\
    \ digits\"\n    elsif digits.size == 19\n      puts \"#{num} has 19 digits\"\n\
    \    elsif digits.size == 20\n      puts \"#{num} has 20 digits\"\n    elsif digits.size\
    \ == 21\n      puts \"#{num} has 21 digits\"\n    elsif digits.size == 22\n  \
    \    puts \"#{num} has 22 digits\"\n    elsif digits.size == 23\n      puts \"\
    #{num} has 23 digits\"\n    elsi", "  arr.each do |n|\n    if n < 0\n      n +=\
    \ 10\n      n -= 1\n    end\n    break if n == 0\n    n += 1 if n % 10 == 0\n\
    \  end\n  arr.reduce(:+)\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n\
    \      n -= 1\n    end\n    n += n % 10\n  end\n  arr.count\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n\
    \    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    return num if num > 0\n    num = num.abs\n    num = num.to_i\n    return\
    \ num if num < 0\n  end\n  0\nend", "  arr.each do |n|\n    if n < 0\n      n\
    \ += 10\n      n -= 1\n    end\n    break if n >= 10\n    n += n % 10\n  end\n\
    \  arr.count\nend", "  arr.each do |n|\n    digits = n.to_s.chars.map(&:to_i)\n\
    \    digits.each do |d|\n      next if d < 0\n      break if d > 9\n      break\
    \ if d > digits.length\n      break if d < digits.length\n      break if d < 0\n\
    \      break if d > digits.length\n      break if d < 0\n      break if d < 0\n\
    \      break if d < 0\n      break if d < 0\n      break if d < 0\n      break\
    \ if d < 0\n      break if d < 0\n      break if d < 0\n      break if d < 0\n\
    \      break if d < 0\n      break if d < 0\n      break if d < 0\n      break\
    \ if d < 0\n      break if d < 0\n      break if d < 0\n      break if d < 0\n\
    \      break if d < 0\n      break if d < 0\n      break if d < 0\n      break\
    \ if d < 0\n      break if d < 0\n      break if d < 0\n      break if d < 0\n\
    \      break if d < 0\n      break if d < 0\n      break if d < 0\n      break\
    \ if d < 0\n      break if d < 0\n      break if d < 0\n      break if d < 0\n\
    \      break if d < 0\n      break if d < 0\n      break if d < 0\n      break\
    \ if d < 0\n      break if d < 0\n      break if d < 0\n      break if d < 0\n\
    \      break if d < 0\n      break if d < 0\n      break if d < 0\n      break\
    \ if d < 0\n      break if d < 0\n      break if d < 0\n      break if d < 0\n\
    \      break if d < 0\n      break if d < 0\n      break if d < 0\n      break\
    \ if d < 0\n      break if d < 0\n      break if d < 0\n      break if d < 0\n\
    \      break if d < 0\n      break if d < 0\n      break if d < 0\n      break\
    \ if d < 0\n      break if d < 0\n      break if d < 0\n      break if d < 0\n\
    \      break if d < 0\n      break if d < 0\n      break if d < 0\n      break\
    \ if d < 0\n      break if d < ", "  arr.each do |num|\n    if num < 0\n     \
    \ num *= -1\n      digit = num.abs\n      digit = digit.divmod(10)\n      digit\
    \ = digit[1]\n      num *= 10 - digit\n    end\n    sum += num\n  end\n  sum\n\
    end\n</cell>\n<cell>\ncount_nums([-2, -1, 0, 1, 2])\n</cell>\n<cell>\ncount_nums([1,\
    \ 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\n\
    count_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n\
    </cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1,\
    \ 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\n\
    count_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n\
    </cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1,\
    \ 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\n\
    count_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n\
    </cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1,\
    \ 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\n\
    count_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n\
    </cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1,\
    \ 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\n\
    count_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n\
    </cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1,\
    \ 2, -3, 4, 5])\n</cell>\n<cell>\ncount_nums([1, 2, -3, 4, 5])\n</cell>\n<", " \
    \ arr.each do |num|\n    num = num.to_i\n    if num > 0\n      num.times { |i|\
    \ arr << i }\n      break\n    end\n    num = num.abs\n    num = num.to_i\n  \
    \  num = num % 10\n    arr << num\n  end\n  arr.count\nend", "  arr.each do |n|\n\
    \    n.to_s.split('').select { |d| d > 0 }.count\n  end\nend", "  arr.each do\
    \ |num|\n    num = num.to_i\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |digit|\n      next if digit < 0\n      break if digit == 0\n      break\
    \ if digit > 9\n      break if digit < 10\n      break if digit > 99\n      break\
    \ if digit < 100\n      break if digit > 999\n      break if digit < 1000\n  \
    \    break if digit > 9999\n      break if digit < 10000\n      break if digit\
    \ > 99999\n      break if digit < 100000\n      break if digit > 999999\n    \
    \  break if digit < 1000000\n      break if digit > 9999999\n      break if digit\
    \ < 10000000\n      break if digit > 999999999\n      break if digit < 100000000\n\
    \      break if digit > 99999999999\n      break if digit < 1000000000\n     \
    \ break if digit > 999999999999\n      break if digit < 10000000000\n      break\
    \ if digit > 999999999999999\n      break if digit < 1000000000000\n      break\
    \ if digit > 999999999999999999\n      break if digit < 1000000000000000\n   \
    \   break if digit > 999999999999999999999\n      break if digit < 10000000000000000\n\
    \      break if digit > 9999999999999999999998\n      break if digit < 100000000000000000\n\
    \      break if digit > 99999999999999999999987\n      break if digit < 1000000000000000000\n\
    \      break if digit > 9999999999999999999998765\n      break if digit < 10000000000000000000\n\
    \      break if digit > 999999999999999999999876543\n      break if digit < 100000000000000000000\n\
    \      break if digit > 99999999999999999999987654321\n      break if digit <\
    \ 1000000000000000000000\n      break if digit > 999999999999999999999876543210\n\
    \      break if digit < 10000000000000000000000\n      break if digit > 99999999999999999999987654321097\n\
    \      break if digit < 100000000000000000000000\n      break if digit > 9999999999999999999998765432109765\n\
    \      break if digit < 1000000000000000000000000\n      break if digit > 999999999999999999999876543210976554\n\
    \      break if digit < 10000000000000000000000000\n      break if digit > 9999999999999999999998765432109765547\n\
    \      break if digit < 100000000000000000000000000\n      break if digit > 999999999999999999999876543210976554789\n\
    \      break if digit < 1000000000000000000000000000\n      break if digit ",
  "  arr.each do |x|\n    if x > 0 then\n      sum += x\n      count += 1\n    end\n\
    \  end\n  count\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n\
    \      digit = num.abs\n      digit = digit.divmod(10)\n      digit = digit.first\
    \ if digit.first < 0\n      digit = digit.last\n      num -= digit\n    end\n\
    \    sum += num\n  end\n  sum\nend", "  arr.each do |n|\n    if n.is_a?(Integer)\n\
    \      n += n.abs\n    end\n    if n < 0\n      n += 10**n.abs\n    end\n  end\n\
    \  arr.count{|n| n >= 0}\nend", "  arr.each do |n|\n    digits = n.to_s.split(\"\
    \").map(&:to_i)\n    digits.each do |d|\n      next if d < 0\n      break if d\
    \ > 9\n      break if d > digits.length\n      break if d < digits.length\n  \
    \    break if d != digits.length\n      break if d != 0\n      break if d != 1\n\
    \      break if d != 2\n      break if d != 3\n      break if d != 4\n      break\
    \ if d != 5\n      break if d != 6\n      break if d != 7\n      break if d !=\
    \ 8\n      break if d != 9\n      break if d != 0\n      break if d != 1\n   \
    \   break if d != 2\n      break if d != 3\n      break if d != 4\n      break\
    \ if d != 5\n      break if d != 6\n      break if d != 7\n      break if d !=\
    \ 8\n      break if d != 9\n      break if d != 0\n      break if d != 1\n   \
    \   break if d != 2\n      break if d != 3\n      break if d != 4\n      break\
    \ if d != 5\n      break if d != 6\n      break if d != 7\n      break if d !=\
    \ 8\n      break if d != 9\n      break if d != 0\n      break if d != 1\n   \
    \   break if d != 2\n      break if d != 3\n      break if d != 4\n      break\
    \ if d != 5\n      break if d != 6\n      break if d != 7\n      break if d !=\
    \ 8\n      break if d != 9\n      break if d != 0\n      break if d != 1\n   \
    \   break if d != 2\n      break if d != 3\n      break if d != 4\n      break\
    \ if d != 5\n      break if d != 6\n      break if d != 7\n      break if d !=\
    \ 8\n      break if d != 9\n      break if d != 0\n      break if d != 1\n   \
    \   break if d != 2\n      break if d != 3\n      break if d != 4\n      break\
    \ if d != 5\n      break if d != 6\n      break if d != 7\n      break if d !=\
    \ 8\n      break if d != 9\n      break if d != 0\n      break if d != 1\n   \
    \   break if d != 2\n      break if d ", "  arr.each do |num|\n    if num < 0\n\
    \      num *= -1\n      digit = num.abs\n      num -= digit\n      num *= 10\n\
    \      digit /= 10\n      num -= digit\n    end\n    sum += num\n  end\n  sum\n\
    end", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum > 0\n      puts\
    \ \"#{x} has #{x.to_s.chars.map(&:to_i).sum} digits\"\n    end\n  end\nend", " \
    \ arr.each do |x|\n    x.to_s.split('').each do |y|\n      y == '-' ? -1 + y.to_i\
    \ : y.to_i\n    end\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |c| c =~ /^-?\\d+$/ }.size\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').each\
    \ do |d|\n      next if d.to_i < 0\n      break if d > 9\n      count += 1\n \
    \   end\n  end\n  count\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\n  sum\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution works\
    \ perfectly for the example I gave. However, when I try it on the actual problem\
    \ I get the following error: `undefined method `+' for nil:NilClass` on the line\
    \ `sum += digit`. Any idea why this might be?\n<|/ c |>\n<| c |>\nI updated my\
    \ answer to account for negative numbers. I tested it on the example you gave,\
    \ and it worked for me.\n<|/ c |>\n<| c |>\nThanks again! I actually figured out\
    \ what the problem was. I had to change `sum += digit` to `sum += digit * sign`.\
    \ Thanks again for your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n    break if n %\
    \ 10 == 0\n    n /= 10\n  end\n  arr.count\nend", "  arr.each do |n|\n    if n.is_a?\
    \ Integer\n      n += n.abs\n    end\n  end\n  arr.count{ |n| n > 0 }\nend", " \
    \ arr.each do |n|\n    n += 1 if n.to_s.chars.map(&:to_i).reduce(:+) > 0\n  end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like the idea of using chars to get\
    \ digits and then reduce to sum the digits. I like that it's more efficient than\
    \ using to_s.\n<|/ c |>\n<| c |>\nI like that it's more efficient than using to_s.\
    \ I like that it's more efficient than using to_s. I like that it's more efficient\
    \ than using to_s. I like that it's more efficient than using to_s. I like that\
    \ it's more efficient than using to_s. I like that it's more efficient than using\
    \ to_s. I like that it's more efficient than using to_s. I like that it's more\
    \ efficient than using to_s. I like that it's more efficient than using to_s.\
    \ I like that it's more efficient than using to_s. I like that it's more efficient\
    \ than using to_s. I like that it's more efficient than using to_s. I like that\
    \ it's more efficient than using to_s. I like that it's more efficient than using\
    \ to_s. I like that it's more efficient than using to_s. I like that it's more\
    \ efficient than using to_s. I like that it's more efficient than using to_s.\
    \ I like that it's more efficient than using to_s. I like that it's more efficient\
    \ than using to_s. I like that it's more efficient than using to_s. I like that\
    \ it's more efficient than using to_s. I like that it's more efficient than using\
    \ to_s. I like that it's more efficient than using to_s. I like that it's more\
    \ efficient than using to_s. I like that it's more efficient than using to_s.\
    \ I like that it's more efficient than using to_s. I like that it's more efficient\
    \ than using to_s. I like that it's more efficient than using to_s. I like that\
    \ it's more efficient than using to_s. I like that it's more efficient than using\
    \ to_s. I like that it's more efficient than using to_s. I like that it's more\
    \ efficient than using to_s. I like that it's more efficient than using to_s.\
    \ I like that it's more efficient than using to_s. I like that it's more efficient\
    \ than using to_s. I like that it's more efficient than using to_s. I like that\
    \ it's more efficient than using to_s. I like that it's more efficient than using\
    \ to_s. I like that it's more efficient than using to_s. I like that it's more\
    \ efficient than using to_s. I like that it's more efficient than using to_s.\
    \ I like that it's more efficient than using to_s. I like that it's more efficient\
    \ than ", "  arr.each do |num|\n    num = num.to_i\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      next if digit < 0\n      break if digit ==\
    \ 0\n      break if digit > 9\n      break if digit < 10\n      break if digit\
    \ > 99\n      break if digit < 100\n      break if digit > 999\n      break if\
    \ digit < 1000\n      break if digit > 9999\n      break if digit < 10000\n  \
    \    break if digit > 99999\n      break if digit < 100000\n      break if digit\
    \ > 999999\n      break if digit < 1000000\n      break if digit > 9999999\n \
    \     break if digit < 10000000\n      break if digit > 999999999\n      break\
    \ if digit < 100000000\n      break if digit > 99999999999\n      break if digit\
    \ < 1000000000\n      break if digit > 999999999000\n      break if digit < 10000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 100000000000\n\
    \      break if digit > 999999999999999\n      break if digit < 10000000000000\n\
    \      break if digit > 9999999999999999\n      break if digit < 100000000000000\n\
    \      break if digit > 9999999999999999999\n      break if digit < 10000000000000000\n\
    \      break if digit > 99999999999999999999\n      break if digit < 100000000000000000\n\
    \      break if digit > 99999999999999999999999\n      break if digit < 1000000000000000000\n\
    \      break if digit > 999999999999999999999999\n      break if digit < 10000000000000000000\n\
    \      break if digit > 999999999999999999999999999\n      break if digit < 100000000000000000000\n\
    \      break if digit > 9999999999999999999999999999\n      break if digit < 1000000000000000000000\n\
    \      break if digit > 9999999999999999999999999999999\n      break if digit\
    \ < 10000000000000000000000\n      break if digit > 99999999999999999999999999999999\n\
    \      break if digit < 100000000000000000000000\n      break if digit > 99999999999999999999999999999999999\n\
    \      break if digit < 1000000000000000000000000\n      break if digit > 999999999999999999999999999999999999\n\
    \      break if digit < 10000000000000000000000000\n      break if digit > 999999999999999999999999999999999999999\n\
    \      break if digit < 100000000000000000000000000\n      break if digit > 9999999999999999999999999999",
  "  arr.each do |num|\n    num = num.to_i\n    num = num.abs\n    num = num % 10\n\
    \    num = num > 0 ? num : -num\n    sum += num\n  end\n  sum\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n\
    \    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n    if num < 0\n  \
    \    num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\n\
    end", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n\
    \    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    digits > 0 ? digits * sign : digits\n  end\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| c |>\nThis doesn't work for negative numbers, e.g. `count_nums([-1, 11,\
    \ -11]) == 1` should be `-1`.\n<|/ c |>\n<| c |>\n: Good catch. I've updated the\
    \ answer to account for negative numbers.\n<|/ c |>\n<| a tags=ruby,arrays |>\n\
    <code>", "  arr.each do |n|\n    n.to_s.split('').select { |d| d > 0 }.size\n\
    \  end\nend", "  arr.each do |num|\n    if num < 0\n      num = -num\n      sign\
    \ = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      digit = digit.to_s\n      digit = digit.chars.map(&:to_i)\n\
    \      digit.each do |d|\n        if d > sign\n          digit = d - sign\n  \
    \        break\n        end\n      end\n      if digit > 0\n        break\n  \
    \    end\n    end\n    if digit > 0\n      break\n    end\n  end\n  arr.count(num)\n\
    end", "  arr.each do |n|\n    n.to_s.split('').inject(0) do |sum, digit|\n   \
    \   sum + digit.to_i\n    end\n  end\nend", "  arr.each do |n|\n    if n < 0\n\
    \      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n \
    \     n /= 10\n    end\n    return 0 if sum == 0\n  end\n  0\nend", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n    break if n >=\
    \ 10\n    n += n % 10\n  end\n  arr.count\nend", "  arr.each do |num|\n    if\
    \ num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n \
    \ end\n  sum\nend", "  arr.each do |num|\n    digits = num.to_s.split('').map(&:to_i)\n\
    \    digits.each do |digit|\n      next if digit < 0\n      break if digit ==\
    \ 0\n      break if digit > 9\n      break if digit < 10\n      break if digit\
    \ > 99\n      break if digit < 100\n      break if digit > 999\n      break if\
    \ digit < 1000\n      break if digit > 9999\n      break if digit < 10000\n  \
    \    break if digit > 99999\n      break if digit < 100000\n      break if digit\
    \ > 999999\n      break if digit < 1000000\n      break if digit > 9999999\n \
    \     break if digit < 10000000\n      break if digit > 999999999\n      break\
    \ if digit < 100000000\n      break if digit > 99999999999\n      break if digit\
    \ < 1000000000\n      break if digit > 999999999000\n      break if digit < 10000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 100000000000\n\
    \      break if digit > 999999999990000\n      break if digit < 10000000000000\n\
    \      break if digit > 9999999999900000\n      break if digit < 100000000000000\n\
    \      break if digit > 99999999999000000\n      break if digit < 1000000000000000\n\
    \      break if digit > 999999999990000000\n      break if digit < 10000000000000000\n\
    \      break if digit > 9999999999900000000\n      break if digit < 100000000000000000\n\
    \      break if digit > 99999999999000000000\n      break if digit < 100000000000000000\n\
    \      break if digit > 999999999990000000000\n      break if digit < 10000000000000000000\n\
    \      break if digit > 9999999999900000000000\n      break if digit < 10000000000000000000000\n\
    \      break if digit > 99999999999000000000000\n      break if digit < 100000000000000000000000\n\
    \      break if digit > 9999999999900000000000000\n      break if digit < 1000000000000000000000000\n\
    \      break if digit > 99999999999000000000000000\n      break if digit < 1000000000000000000\n\
    \      break if digit > 999999999990000000000000000\n      break if digit < 10000000000000000000\n\
    \      break if digit > 99999999999000000000000000000\n      break if digit <\
    \ 1000000000000000000000\n      break if digit > 9999999999900000000000000000000\n\
    \      break if digit < 100000000000000000000000\n      break if digit > 999999999990000000000000000000000\n\
    \      break if digit < 10000000000000000000000000\n      break if ", "  arr.each\
    \ do |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n\
    \    return num if num < 0\n  end\n  0\nend", "  arr.each do |x|\n    if x > 0\
    \ then\n      sum += x\n    end\n  end\n  sum\nend", "  arr.each do |num|\n  \
    \  num = num.to_i\n    return num if num > 0\n    num = num.abs\n    return num\
    \ if num < 0\n  end\n  0\nend", "  arr.each do |n|\n    if n.is_a? Integer\n \
    \     n += n.abs\n    end\n  end\n  arr.select { |n| n >= 0 }.size\nend", "  arr.each\
    \ do |n|\n    if n.is_a? Integer\n      n += n.abs\n    end\n  end\n  arr.count{\
    \ |n| n >= 0 }\nend", "  arr.each do |num|\n    if num < 0\n      num = -num\n\
    \    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each { |d| d > 0\
    \ ? num += 1 : num -= 1 }\n  end\n  arr.count\nend", "  arr.each do |n|\n    if\
    \ n.is_a?(Integer)\n      n += n.abs\n    end\n    n -= n % 10\n    n += 1 if\
    \ n >= 10\n  end\n  arr.count\nend", "  arr.each do |n|\n    if n < 0\n      n\
    \ += 10\n      n -= 1\n    end\n    n += n % 10\n  end\n  arr.count\nend", " \
    \ arr.each do |n|\n    n.to_s.split('').each do |d|\n      next if d.to_i < 0\n\
    \      break if d == '-'\n      break if d == '+'\n      break if d == '0'\n \
    \     break if d == '1'\n      break if d == '2'\n      break if d == '3'\n  \
    \    break if d == '4'\n      break if d == '5'\n      break if d == '6'\n   \
    \   break if d == '7'\n      break if d == '8'\n      break if d == '9'\n    \
    \  break if d == '-'\n      break if d == '+'\n      break if d == '0'\n     \
    \ break if d == '1'\n      break if d == '2'\n      break if d == '3'\n      break\
    \ if d == '4'\n      break if d == '5'\n      break if d == '6'\n      break if\
    \ d == '7'\n      break if d == '8'\n      break if d == '9'\n    end\n  end\n\
    \  arr.count\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n  \
    \    num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend", "  arr.each\
    \ do |n|\n    n.to_s.split('').select { |s| s.to_i > 0 }.size\n  end\nend", " \
    \ arr.each do |n|\n    n.to_s.split('').each do |digit|\n      next if digit ==\
    \ '-'\n      next if digit == '+'\n      sum += digit.to_i\n    end\n  end\n \
    \ sum\nend", "  arr.each do |num|\n    num = num.to_i\n    return num if num >\
    \ 0\n    num = num.abs\n    num = num.to_i\n    return num if num < 0\n  end\n\
    \  0\nend", "  arr.each do |n|\n    n.to_s.split('').select { |d| d > 0 }.size\n\
    \  end\nend", "  arr.each do |n|\n    if n.is_a?(Integer)\n      n += n.abs\n\
    \    end\n  end\n  arr.count(&:nonzero?)\nend", "  arr.each do |num|\n    num\
    \ = num.to_i\n    next if num < 0\n    digits = num.to_s.chars.map(&:to_i)\n \
    \   digits.reduce(:+).to_s.length\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d > 0 }.count\n  end\nend", "  arr.each do |num|\n    if num < 0\n   \
    \   num *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits\
    \ = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n      sum += digit\n\
    \    end\n  end\n  sum\nend", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum\
    \ > 0\n      puts \"#{x} has #{x.to_s.chars.map(&:to_i).sum} digits\"\n    end\n\
    \  end\nend", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).reduce(:+) >\
    \ 0 then\n      puts \"#{x} has a sum of digits > 0\"\n    end\n  end\nend", " \
    \ arr.each do |n|\n    n.to_s.split('').each do |c|\n      next if c.to_i < 0\n\
    \      break if c.to_i == 0\n      break if c.to_i > 9\n      break if c.to_i\
    \ >= 10\n      break if c.to_i <= 9\n      break if c.to_i <= 10\n      break\
    \ if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n\
    \      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i\
    \ >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break\
    \ if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n\
    \      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i\
    \ >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break\
    \ if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n\
    \      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i\
    \ >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break\
    \ if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n\
    \      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i\
    \ >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break\
    \ if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n\
    \      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i\
    \ >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break\
    \ if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n\
    \      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i\
    \ >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break\
    \ if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= 10\n\
    \      break if c.to_i >= 10\n      break if c.to_i >= 10\n      break if c.to_i\
    \ >= 10\n      break if c.to_i >= 10\n      break if c.to_i >= ", "  arr.each\
    \ do |x|\n    if x.to_s.chars.map(&:to_i).sum > 0\n      puts \"#{x} has #{x.to_s.chars.map(&:to_i).sum}\
    \ digits\"\n    end\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |s| s.to_i > 0 }.count\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |s| s.to_i > 0 }.count\n  end\nend", "  arr.each do |num|\n    if num < 0\n\
    \      num *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits\
    \ = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n      sum += digit\n\
    \    end\n  end\n  sum\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend", " \
    \ arr.each do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n    break\
    \ if n % 10 == 0\n    n /= 10\n  end\n  arr.count\nend", "  arr.each do |n|\n\
    \    n.to_s.split('').select { |d| d > 0 }.count\n  end\nend", "  arr.each do\
    \ |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n  \
    \    sum += n % 10\n      n /= 10\n    end\n    return 0 if sum == 0\n  end\n\
    \  0\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n      n -= 1\n  \
    \  end\n    n += n % 10\n  end\n  arr.count\nend", "  arr.each do |num|\n    num\
    \ = num.to_i\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n\
    \    sum += num\n  end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n      n\
    \ += 10\n      n -= 1\n    end\n    n += n % 10\n  end\n  arr.count\nend", " \
    \ arr.each do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n    break\
    \ if n % 10 == 0\n  end\n  arr.count\nend", "  arr.each do |num|\n    if num <\
    \ 0\n      num *= -1\n      digit = num.abs\n      digit = digit.divmod(10)\n\
    \      digit = digit[1] if digit[1]\n    else\n      digit = num.abs\n    end\n\
    \    if digit > 0\n      yield digit\n    end\n  end\nend", "  arr.each do |n|\n\
    \    if n < 0\n      n += 10\n      n -= 1\n    end\n    break if n >= 10\n  \
    \  n += n % 10\n  end\n  arr.count\nend", "  arr.each do |n|\n    n.to_s.split('').each\
    \ do |digit|\n      digit = digit.to_i\n      next if digit < 0\n      sum +=\
    \ digit\n    end\n  end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n     \
    \ n = -n\n    end\n    n.digits.each do |d|\n      break if d > 9\n    end\n \
    \   break if d > 9\n  end\n  arr.count\nend", "  arr.each do |num|\n    if num\
    \ < 0\n      num *= -1\n      digit = num.abs\n      num -= digit\n    end\n \
    \   sum += num\n  end\n  sum\nend", "  arr.each do |num|\n    if num < 0\n   \
    \   num *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits\
    \ = num.to_s.chars.map(&:to_i).reduce(:+)\n    digits = digits - sign * digits.abs\n\
    \    break if digits == 0\n  end\n  arr.size\nend\n</cell>\n<cell>\ncount_nums([-2,\
    \ -1, 0, 1, 2])\n</cell>\n<cell>\ncount_nums([-2, -1, 0, 1, -2, -1, 1, 2])\n</cell>\n\
    <cell>\ncount_nums([-2, -1, 0, 1, -2, -1, 1, -2, 0])\n</cell>\n<cell>\ncount_nums([-2,\
    \ -1, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2,\
    \ -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0,\
    \ 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1,\
    \ -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2,\
    \ -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0,\
    \ 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1,\
    \ -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2,\
    \ -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0,\
    \ 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1,\
    \ -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2,\
    \ -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0,\
    \ 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1,\
    \ -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2,\
    \ -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0,\
    \ 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1,\
    \ -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2,\
    \ -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0,\
    \ 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1,\
    \ -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2,\
    \ -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0, 1, -2, -1, 1, -2, 0,\
    \ 1, -2, -", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      digit\
    \ = num.abs\n      num -= digit\n    end\n    digit = num.abs\n    sum += digit\n\
    \  end\n  sum\nend", "  arr.each do |n|\n    next if n < 0\n    n.to_s.split('').count\
    \ { |d| d > 0 }\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend", " \
    \ arr.each do |n|\n    n.to_s.split('').select { |d| d > 0 }.count\n  end\nend",
  "  arr.each do |n|\n    n.to_s.split('').select { |d| d > 0 }.count\n  end\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't work if you have a negative\
    \ number with leading zeros, e.g. `count_nums([-1, 11, -11])` returns `2` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\nI didn't see that requirement in the question. I'll\
    \ update my answer accordingly.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require negative numbers with leading zeros.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n    else\n\
    \      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |digit|\n      digit = digit.to_i\n      sum += digit\n    end\n  end\n \
    \ sum\nend", "  arr.each do |n|\n    n.to_s.split('').select { |s| s > 0 }.count\n\
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much! I really appreciate\
    \ it. I was able to get it to work using your code. Thanks again!\n<|/ c |>\n\
    <| c |>\nYou're welcome. Feel free to upvote the answer if you found it helpful.\n\
    <|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails |>\n<code>", "  arr.each do |x|\n\
    \    x.to_s.split('').count { |y| y > 0 }\n  end\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      sign = -1\n    else\n      sign = 1\n\
    \    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n\
    \      sum += digit\n    end\n  end\n  sum\nend", "  arr.each do |n|\n    if n\
    \ < 0\n      n += 10\n      n -= 1\n    end\n    break if n % 10 == 0\n    n /=\
    \ 10\n  end\n  arr.count\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d > 0 }.size\n  end\nend", "  arr.each do |n|\n    if n < 0\n      n +=\
    \ 10\n      n -= 1\n    end\n    n += n % 10\n  end\n  arr.count\nend", "  arr.each\
    \ do |x|\n    if x.to_s.chars.map(&:to_i).sum > 0\n      puts \"#{x} has #{x.to_s.chars.map(&:to_i).sum}\
    \ digits\"\n    end\n  end\nend\ncount_nums(nums)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `nums = [-1, 11, -11]`\n<|/ c |>\n<| c\
    \ |>\nI added a comment to the question to clarify what I'm looking for.\n<|/\
    \ c |>\n<| c |>\nI added a comment to the question to clarify what I'm looking\
    \ for.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify what I'm\
    \ looking for.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ what I'm looking for.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      sign = -1\n    else\n      sign = 1\n\
    \    end\n    digits = num.to_s.chars.map(&:to_i).reduce(:+)\n    digits = digits.abs\
    \ if digits < 0\n    digits > 0 ? digits * sign : digits\n  end\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n    else\n     \
    \ sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i).reduce(:+)\n    digits\
    \ > 0 ? digits * sign : digits\n  end\nend", "  arr.each do |n|\n    if n < 0\n\
    \      n = -n\n    end\n    n.to_s.split('').each do |d|\n      if d.to_i > 0\n\
    \        sum += d.to_i\n      end\n    end\n  end\n  sum\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nI appreciate your help but I am not allowed to use any\
    \ loops or conditionals. I must use recursion.\n<|/ c |>\n<| c |>\nI updated my\
    \ answer to include a recursive solution. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad\
    \ I could help.\n<|/ c |>\n<| a |>\n<code>", "  arr.each do |n|\n    if n < 0\n\
    \      n += 10\n      n -= 1\n    end\n    break if n % 10 == 0\n    n += n %\
    \ 10\n  end\n  arr.count\nend", "  arr.each do |num|\n    num = num.to_i\n   \
    \ next if num < 0\n    digits = num.to_s.chars.map(&:to_i)\n    digits.reduce(0)\
    \ { |sum, digit| sum + digit }\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    if num < 0\n      num = -num\n      sign = -1\n    else\n      sign = 1\n\
    \    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n\
    \      digit = digit.to_i\n      digit = sign * digit\n      sum += digit\n  \
    \  end\n  end\n  sum\nend", "  arr.each do |n|\n    n.to_s.split('').select {\
    \ |s| s.to_i > 0 }.count\n  end\nend", "  arr.each do |n|\n    digits = n.to_s.split('')\n\
    \    digits.each do |d|\n      next if d.to_i < 0\n      break if d > 9\n    \
    \  break if d < 0\n      break if d > 9\n      break if d < 0\n      break if\
    \ d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n  \
    \    break if d > 9\n      break if d < 0\n      break if d > 9\n      break if\
    \ d < 0\n      break if d > 9\n      break if d < 0\n      break if d > 9\n  \
    \    break if d < 0\n      break if d > 9\n      break if d < 0\n      break if\
    \ d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n  \
    \    break if d > 9\n      break if d < 0\n      break if d > 9\n      break if\
    \ d < 0\n      break if d > 9\n      break if d < 0\n      break if d > 9\n  \
    \    break if d < 0\n      break if d > 9\n      break if d < 0\n      break if\
    \ d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n  \
    \    break if d > 9\n      break if d < 0\n      break if d > 9\n      break if\
    \ d < 0\n      break if d > 9\n      break if d < 0\n      break if d > 9\n  \
    \    break if d < 0\n      break if d > 9\n      break if d < 0\n      break if\
    \ d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n  \
    \    break if d > 9\n      break if d < 0\n      break if d > 9\n      break if\
    \ d < 0\n      break if d > 9\n      break if d < 0\n      break if d > 9\n  \
    \    break if d < 0\n      break if d > 9\n      break if d < 0\n      break if\
    \ d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n  \
    \    break if d > 9\n      break if d < 0\n      break if d > 9\n      break if\
    \ d < 0\n      break if d > ", "  arr.each do |n|\n    n.to_s.split('').inject(0)\
    \ do |sum, digit|\n      sum + digit.to_i\n    end\n  end\nend", "  arr.each do\
    \ |num|\n    digits = num.to_s.split(//).map(&:to_i)\n    digits.each do |digit|\n\
    \      next if digit < 0\n      break if digit == 0\n      break if digit > 9\n\
    \      break if digit < 10\n      break if digit % 10 == 0\n      break if digit\
    \ % 10 == 1 and digit != 1\n      break if digit % 10 == 2 and digit != 2\n  \
    \    break if digit % 10 == 3 and digit != 3\n      break if digit % 10 == 4 and\
    \ digit != 4\n      break if digit % 10 == 5 and digit != 5\n      break if digit\
    \ % 10 == 6 and digit != 6\n      break if digit % 10 == 7 and digit != 7\n  \
    \    break if digit % 10 == 8 and digit != 8\n      break if digit % 10 == 9 and\
    \ digit != 9\n      break\n    end\n    break\n  end\n  arr.count\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    count = 0\n    while num > 0\n      count\
    \ += 1\n      num -= 10\n    end\n    return count\n  end\nend", "  arr.each do\
    \ |n|\n    n.to_s.split('').each do |d|\n      next if d.to_i < 0\n      break\
    \ if d == '0'\n      break if d == '1'\n      break if d == '2'\n      break if\
    \ d == '3'\n      break if d == '4'\n      break if d == '5'\n      break if d\
    \ == '6'\n      break if d == '7'\n      break if d == '8'\n      break if d ==\
    \ '9'\n      break if d == '-'\n      break if d == '+'\n      break if d == '.'\n\
    \      break if d == 'e'\n      break if d == 'E'\n      break if d == '+'\n \
    \     break if d == '-'\n      break if d == '.'\n      break if d == 'e'\n  \
    \    break if d == 'E'\n      break if d == '+'\n      break if d == '-'\n   \
    \   break if d == '.'\n      break if d == 'e'\n      break if d == 'E'\n    \
    \  break if d == '+'\n      break if d == '-'\n      break if d == '.'\n     \
    \ break if d == 'e'\n      break if d == 'E'\n      break if d == '+'\n      break\
    \ if d == '-'\n      break if d == '.'\n      break if d == 'e'\n      break if\
    \ d == 'E'\n      break if d == '+'\n      break if d == '-'\n      break if d\
    \ == '.'\n      break if d == 'e'\n      break if d == 'E'\n      break if d ==\
    \ '+'\n      break if d == '-'\n      break if d == '.'\n      break if d == 'e'\n\
    \      break if d == 'E'\n      break if d == '+'\n      break if d == '-'\n \
    \     break if d == '.'\n      break if d == 'e'\n      break if d == 'E'\n  \
    \    break if d == '+'\n      break if d == '-'\n      break if d == '.'\n   \
    \   break if d == 'e'\n      break if d == 'E'\n      break if d == '+'\n    \
    \  break if d == '-'\n      break if d == '.'\n      break if d == 'e'\n     \
    \ break if d == 'E'\n      break if d == '+'\n      break if d == '-'\n      break\
    \ if d == '.'\n      break if d == 'e'\n      break if d == 'E'\n      break if ",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n \
    \   end\n    sum += num\n  end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n\
    \      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n \
    \     n /= 10\n    end\n    return 0 if sum == 0\n  end\n  0\nend", "  arr.each\
    \ do |n|\n    n.to_s.split('').select { |s| s.to_i > 0 }.size\n  end\nend", " \
    \ arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n\
    \    end\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n    if num\
    \ < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n\
    \  sum\nend", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).reduce(:+) >\
    \ 0 \n      puts \"#{x} has a sum of digits > 0\"\n    end\n  end\nend", "  arr.each\
    \ do |n|\n    n += 1 if n.is_a?(Integer) && n.to_s.chars.map(&:to_i).reduce(:+)\
    \ > 0\n  end\n  arr.count\nend", "  arr.each do |num|\n    num = num.to_i\n  \
    \  num = num if num > 0\n    num = num if num < 10\n    num = num if num < -10\n\
    \    num = num if num < 0\n    num = num if num > -10\n    num = num if num >\
    \ -10\n    num = num if num > -10\n    num = num if num > -10\n    num = num if\
    \ num > -10\n    num = num if num > -10\n    num = num if num > -10\n    num =\
    \ num if num > -10\n    num = num if num > -10\n    num = num if num > -10\n \
    \   num = num if num > -10\n    num = num if num > -10\n    num = num if num >\
    \ -10\n    num = num if num > -10\n    num = num if num > -10\n    num = num if\
    \ num > -10\n    num = num if num > -10\n    num = num if num > -10\n    num =\
    \ num if num > -10\n    num = num if num > -10\n    num = num if num > -10\n \
    \   num = num if num > -10\n    num = num if num > -10\n    num = num if num >\
    \ -10\n    num = num if num > -10\n    num = num if num > -10\n    num = num if\
    \ num > -10\n    num = num if num > -10\n    num = num if num > -10\n    num =\
    \ num if num > -10\n    num = num if num > -10\n    num = num if num > -10\n \
    \   num = num if num > -10\n    num = num if num > -10\n    num = num if num >\
    \ -10\n    num = num if num > -10\n    num = num if num > -10\n    num = num if\
    \ num > -10\n    num = num if num > -10\n    num = num if num > -10\n    num =\
    \ num if num > -10\n    num = num if num > -10\n    num = num if num > -10\n \
    \   num = num if num > -10\n    num = num if num > -10\n    num = num if num >\
    \ -10\n    num = num if num > -10\n    num = num if num > -10\n    num = num if\
    \ num > -10\n    num = num if num > -10\n    num = num if num > -10\n    num =\
    \ num if num > -10\n    num = num if num > -10\n    num = num if num > -10\n \
    \   num = num if num > -10\n    num = num if num > -10\n    num = num if num >\
    \ -10\n    num = num if num > -10\n    num = num", "  arr.each do |num|\n    if\
    \ num < 0\n      num *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n\
    \    digits = num.to_s.chars.map(&:to_i).reduce(:+)\n    digits = digits > 0 ?\
    \ digits : -digits\n    digits = digits * sign\n    digits += 1 if digits > 0\n\
    \    digits += 1 if digits < 0\n    return digits if digits > 0\n  end\n  0\n\
    end", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num.abs\n\
    \    end\n    sum += num\n  end\n  sum\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d > 0 }.size\n  end\nend", "  arr.each do |num|\n    if num < 0\n    \
    \  num *= -1\n      digit = num.abs\n      num -= digit\n    else\n      digit\
    \ = num.abs\n    end\n    sum += digit\n  end\n  sum\nend", "  arr.each do |x|\n\
    \    if x.to_s.chars.map(&:to_i).reduce(:+) > 0 then\n      puts \"#{x} has #{x.to_s.chars.map(&:to_i).reduce(:+)}\"\
    \n    end\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n\
    \      num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n\
    \    break if num == 0\n    sum += num\n  end\n  sum\nend", "  arr.each do |n|\n\
    \    if n < 0\n      n += 10\n      n -= 1\n    end\n    break if n == 0\n   \
    \ n += 1 if n % 10 == 0\n  end\n  arr.size\nend", "  arr.each do |num|\n    if\
    \ num < 0\n      num *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n\
    \    digits = num.to_s.chars.map(&:to_i).reduce(:+)\n    digits = digits > 0 ?\
    \ digits : -digits\n    digits = digits * sign\n    puts \"#{num} has #{digits}\
    \ digits\"\n  end\nend", "  arr.each do |n|\n    if n.is_a? Integer\n      n +=\
    \ n.abs\n    end\n  end\n  arr.count{ |n| n >= 0 }\nend", "  arr.each do |n|\n\
    \    if n < 0\n      n += 10\n      n -= 1\n    end\n    break if n == 0\n   \
    \ n += 1 if n % 10 == 0\n  end\n  arr.reduce(0) do |sum, n|\n    sum + 1 if n\
    \ > 0\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n  \
    \    sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.split('')\n\
    \    digits.each do |digit|\n      digit = digit.to_i\n      digit = digit * sign\n\
    \      sum += digit\n    end\n  end\n  sum\nend", "  arr.each do |num|\n    if\
    \ num < 0\n      num = -num\n      sign = -1\n    else\n      sign = 1\n    end\n\
    \    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n      digit\
    \ = digit*sign\n      sum += digit\n    end\n  end\n  sum\nend", "  arr.each do\
    \ |n|\n    n.to_s.split('').select { |d| d > 0 }.count\n  end\nend", "  arr.each\
    \ do |num|\n    digits = num.to_s.chars.map(&:to_i).reduce(:+)\n    next if digits\
    \ < 0\n    digits > 0 ? num : num.abs\n  end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't seem to work. `count_nums([-1, 11, -11]) == 1` should be\
    \ `2`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account\
    \ for negative numbers.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `count_nums([-1,\
    \ 11, -11]) == 1` should be `2`.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ updated my answer to account for negative numbers.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  arr.each do |n|\n    n.to_s.split('').select { |d| d > 0 }.size\n\
    \  end\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n    n\
    \ += n % 10\n  end\n  arr.count\nend", "  arr.each do |n|\n    if n < 0\n    \
    \  n += 10\n      n -= 1\n    end\n    break if n >= 10\n    n += n % 10\n  end\n\
    \  arr.count\nend", "  arr.each do |n|\n    n.to_s.split('').select { |d| d >\
    \ 0 }.count\n  end\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n  \
    \    n -= 1\n    end\n    n += n % 10\n  end\n  arr.count\nend", "  arr.each do\
    \ |n|\n    if n.is_a?(Integer)\n      n += n.abs\n    end\n    break if n <= 0\n\
    \  end\n  arr.count\nend", "  arr.each do |num|\n    if num < 0\n      num *=\
    \ -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\n  sum\nend",
  "  arr.each do |n|\n    if n < 0\n      n += 100\n    end\n    break if n % 10 ==\
    \ 0\n    n += n % 10\n  end\n  arr.count\nend", "  arr.each do |n|\n    if n <\
    \ 0\n      n += 10\n    end\n    n += n % 10\n  end\n  arr.count{ |n| n > 0 }\n\
    end", "  arr.each do |num|\n    num = num.to_i\n    num = num if num > 0\n   \
    \ num = num if num < 10\n    num = num.to_s\n    num = num.chars.map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s\n   \
    \ num = num.chars.map(&:to_i).reduce(:+)\n    num = num if num > 0\n    num =\
    \ num if num < 10\n    num = num.to_s\n    num = num.chars.map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s\n   \
    \ num = num.chars.map(&:to_i).reduce(:+)\n    num = num if num > 0\n    num =\
    \ num if num < 10\n    num = num.to_s\n    num = num.chars.map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s\n   \
    \ num = num.chars.map(&:to_i).reduce(:+)\n    num = num if num > 0\n    num =\
    \ num if num < 10\n    num = num.to_s\n    num = num.chars.map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s\n   \
    \ num = num.chars.map(&:to_i).reduce(:+)\n    num = num if num > 0\n    num =\
    \ num if num < 10\n    num = num.to_s\n    num = num.chars.map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s\n   \
    \ num = num.chars.map(&:to_i).reduce(:+)\n    num = num if num > 0\n    num =\
    \ num if num < 10\n    num = num.to_s\n    num = num.chars.map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s\n   \
    \ num = num.chars.map(&:to_i).reduce(:+)\n    num = num if num > 0\n    num =\
    \ num if num < 10\n    num = num.to_s\n    num = num.chars.map(&:to_i).reduce(:+)\n\
    \    num = num if num", "  arr.each do |num|\n    if num < 0\n      num *= -1\n\
    \      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      digit = digit.to_i\n      digit = digit.to_s\
    \ + sign * digit\n      digit = digit.to_i\n      digit = digit.to_s + sign *\
    \ digit\n      digit = digit.to_i\n      digit = digit.to_s + sign * digit\n \
    \     digit = digit.to_i\n      digit = digit.to_s + sign * digit\n      digit\
    \ = digit.to_i\n      digit = digit.to_s + sign * digit\n      digit = digit.to_i\n\
    \      digit = digit.to_s + sign * digit\n      digit = digit.to_i\n      digit\
    \ = digit.to_s + sign * digit\n      digit = digit.to_i\n      digit = digit.to_s\
    \ + sign * digit\n      digit = digit.to_i\n      digit = digit.to_s + sign *\
    \ digit\n      digit = digit.to_i\n      digit = digit.to_s + sign * digit\n \
    \     digit = digit.to_i\n      digit = digit.to_s + sign * digit\n      digit\
    \ = digit.to_i\n      digit = digit.to_s + sign * digit\n      digit = digit.to_i\n\
    \      digit = digit.to_s + sign * digit\n      digit = digit.to_i\n      digit\
    \ = digit.to_s + sign * digit\n      digit = digit.to_i\n      digit = digit.to_s\
    \ + sign * digit\n      digit = digit.to_i\n      digit = digit.to_s + sign *\
    \ digit\n      digit = digit.to_i\n      digit = digit.to_s + sign * digit\n \
    \     digit = digit.to_i\n      digit = digit.to_s + sign * digit\n      digit\
    \ = digit.to_i\n      digit = digit.to_s + sign * digit\n      digit = digit.to_i\n\
    \      digit = digit.to_s + sign * digit\n      digit = digit.to_i\n      digit\
    \ = digit.to_s + sign * digit\n      digit = digit.to_i\n      digit = digit.to_s\
    \ + sign * digit\n      digit = digit.to_i\n      digit = digit.to_s + sign *\
    \ digit\n      digit = digit.to_i\n      digit = digit.to_s + sign * digit\n \
    \     digit = digit.to_i\n      digit = digit.to_s + sign * digit\n      digit\
    \ = digit.to_i\n      digit = digit.to_s + sign * digit\n      digit = digit.to_i\n\
    \      digit = digit.to_s + sign * digit\n      digit = ", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n\
    \  end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n      n\
    \ -= 1\n    end\n    break if n % 10 == 0\n    n += n % 10\n  end\n  arr.count\n\
    end", "  arr.each do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n\
    \    n += n % 10\n  end\n  arr.count\nend", "  arr.each do |n|\n    if n < 0\n\
    \      n += 10\n      n -= 1\n    end\n    n += n % 10\n  end\n  arr.count\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n    else\n\
    \      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    digits > 0 ? digits * sign : digits\n  end\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num = -num\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.reduce(0) { |sum, digit| sum + digit }\n  end\nend", "  arr.each do\
    \ |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n   \
    \ sum += num\n  end\n  sum\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d > 0 }.count\n  end\nend", "  arr.each do |n|\n    if n.is_a?(Integer)\n\
    \      n += n.abs\n    end\n    break if n < 0\n  end\n  arr.count\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n\
    \    return num if num < 0\n  end\n  0\nend", "  arr.each do |num|\n    if num\
    \ < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n\
    \  sum\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign\
    \ = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.reverse.split(//).map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n      if sum > 0\n        sum\
    \ += sign\n      end\n    end\n  end\n  sum\nend", "  arr.each do |n|\n    if\
    \ n < 0\n      n += 10\n      n -= 1\n    end\n    break if n == 0\n    n += 1\
    \ if n % 10 == 0\n  end\n  arr.size\nend", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum\
    \ > 0\n      puts \"#{x} has #{x.to_s.chars.map(&:to_i).sum} digits\"\n    end\n\
    \  end\nend\ncount_nums(arr)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for\
    \ your answer. Your code works well for positive numbers. But for negative numbers\
    \ it doesn't work. For example: count_nums([-1, 11, -11]) == 1 but count_nums([-1,\
    \ 11, -12, -13, -14]) == 3\n<|/ c |>\n<| c |>\nI edited my answer to include a\
    \ solution for negative numbers. I hope this helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code works well for positive numbers. But for negative\
    \ numbers it doesn't work. For example: count_nums([-1, 11, -11]) == 1 but count_nums([-1,\
    \ 11, -12, -13, -14]) == 3\n<|/ c |>\n<| c |>\nI edited my answer to include a\
    \ solution for negative numbers. I hope this helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code works well for positive numbers. But for negative\
    \ numbers it doesn't work. For example: count_nums([-1, 11, -11]) == 1 but count_nums([-1,\
    \ 11, -12, -13, -14]) == 3\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.each\
    \ do |n|\n    n.to_s.split('').select { |s| s > 0 }.count\n  end\nend", "  arr.each\
    \ do |n|\n    next if n < 0\n    digits = n.to_s.reverse.split(//).map(&:to_i)\n\
    \    digits.each do |d|\n      next if d < 0\n      break if d > 9\n      break\
    \ if d > digits[digits.length-1]\n      break if d < digits[digits.length-1]\n\
    \      break if d != digits[digits.length-1]\n      break if d != digits[digits.length-2]\n\
    \      break if d != digits[digits.length-3]\n      break if d != digits[digits.length-4]\n\
    \      break if d != digits[digits.length-5]\n      break if d != digits[digits.length-6]\n\
    \      break if d != digits[digits.length-7]\n      break if d != digits[digits.length-8]\n\
    \      break if d != digits[digits.length-9]\n      break if d != digits[digits.length-10]\n\
    \      break if d != digits[digits.length-11]\n      break if d != digits[digits.length-12]\n\
    \      break if d != digits[digits.length-13]\n      break if d != digits[digits.length-14]\n\
    \      break if d != digits[digits.length-15]\n      break if d != digits[digits.length-16]\n\
    \      break if d != digits[digits.length-17]\n      break if d != digits[digits.length-18]\n\
    \      break if d != digits[digits.length-19]\n      break if d != digits[digits.length-20]\n\
    \      break if d != digits[digits.length-21]\n      break if d != digits[digits.length-22]\n\
    \      break if d != digits[digits.length-23]\n      break if d != digits[digits.length-24]\n\
    \      break if d != digits[digits.length-25]\n      break if d != digits[digits.length-26]\n\
    \      break if d != digits[digits.length-27]\n      break if d != digits[digits.length-28]\n\
    \      break if d != digits[digits.length-29]\n      break if d != digits[digits.length-30]\n\
    \      break if d != digits[digits.length-31]\n      break if d != digits[digits.length-32]\n\
    \      break if d != digits[digits.length-33]\n      break if d != digits[digits.length-34]\n\
    \      break if d != digits[digits.length-35]\n      break if d != digits[digits.length",
  "  arr.each do |x|\n    if x > 0 then\n      sum += x\n      count += 1\n    end\n\
    \  end\n  count\nend", "  arr.each do |n|\n    n.to_s.split('').each do |d|\n\
    \      next if d.to_i < 0\n      break if d == '0'\n      break if d == '1'\n\
    \      break if d == '2'\n      break if d == '3'\n      break if d == '4'\n \
    \     break if d == '5'\n      break if d == '6'\n      break if d == '7'\n  \
    \    break if d == '8'\n      break if d == '9'\n      return n\n    end\n  end\n\
    \  0\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I am not\
    \ able to understand this line `n.to_s.split('').each do |d|`. What is `d` here?\n\
    <|/ c |>\n<| c |>\n`d` is each character of the string `n`. `n.to_s` converts\
    \ the number `n` to a string. `n.to_s.split('')` splits the string into an array\
    \ of characters. `n.to_s.split('').each do |d|` iterates over the characters in\
    \ the string and assigns them to `d`.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ I am still not able to understand this line `n.to_s.split('').each do |d|`.\
    \ What is `d` here?\n<|/ c |>\n<| c |>\n`n.to_s.split('')` splits the string into\
    \ an array of characters. `n.to_s.split('').each do |d|` iterates over the characters\
    \ in the string and assigns them to `d`.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ I am still not able to understand this line `n.to_s.split('').each do |d|`.\
    \ What is `d` here?\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n    n += n % 10\n\
    \  end\n  arr.count\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n \
    \   end\n    n -= n % 10\n    break if n == 0\n  end\n  arr.count\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n\
    \    return num if num < 0\n  end\n  0\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d > 0 }.size\n  end\nend", "  arr.each do |num|\n    if num < 0\n    \
    \  num *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits =\
    \ num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n      sum += digit\n\
    \    end\n  end\n  sum\nend\n</cell>\n<cell>\ncount_nums([-2, -1, 0, 1, 2])\n\
    </cell>\n<cell>\ncount_nums([-1, 11, -11])\n</cell>\n<cell>\ncount_nums([1, 1,\
    \ 2])\n</cell>\n<text>\nExercise: Write a function that takes an array of integers\
    \ and returns the number of elements which has a sum of digits > 0.", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 100\n    end\n    n += n % 10\n  end\n  arr.count\n\
    end", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n\
    \    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      digit = digit.to_i\n      sum += digit\n  \
    \  end\n  end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n      n = -n\n \
    \   end\n    n.to_s.split('').inject(0) do |sum, digit|\n      sum += digit.to_i\n\
    \    end\n  end\nend", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum\
    \ > 0\n      puts \"#{x} has #{x.to_s.chars.map(&:to_i).sum} digits\"\n    end\n\
    \  end\nend", "  arr.each do |n|\n    if n < 0\n      n += 10**(-n.abs.to_s.length)\n\
    \    end\n    n += 1 if n.digits.reduce(:+) > 0\n  end\n  arr.size\nend", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n\
    \      sum += n % 10\n      n /= 10\n    end\n    return sum if sum > 0\n  end\n\
    \  0\nend\n</cell>\n<cell>", "  arr.each do |n|\n    if n < 0\n      n += 10\n\
    \    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n \
    \   end\n    return sum if sum > 0\n  end\n  0\nend", "  arr.each do |n|\n   \
    \ if n < 0\n      n += 10\n      n -= 1\n    end\n    n += n % 10\n  end\n  arr.count\n\
    end", "  arr.each do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n\
    \    break if n % 10 == 0\n    n /= 10\n  end\n  arr.count\nend", "  arr.each\
    \ do |n|\n    n.to_s.split('').select { |d| d > 0 }.count\n  end\nend", "  arr.each\
    \ do |num|\n    digits = num.to_s.split('')\n    digits.each do |digit|\n    \
    \  digit = digit.to_i\n      next if digit < 0\n      break if digit == 0\n  \
    \    sum += digit\n    end\n  end\n  sum\nend", "  arr.each do |n|\n    if n <\
    \ 0\n      n = -n\n      sign = -1\n    else\n      sign = 1\n    end\n    digits\
    \ = n.to_s.chars.map(&:to_i)\n    digits.each do |d|\n      d += sign\n      break\
    \ if d > 9\n    end\n    break if digits.size == 0\n  end\n  arr.size\nend", " \
    \ arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n\
    \    end\n    break if num == 0\n    sum += num\n  end\n  sum\nend", "  arr.each\
    \ do |n|\n    n.to_s.split('').select { |s| s > 0 }.size\n  end\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n    else\n     \
    \ sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |digit|\n      digits -= digit\n    end\n    if digits > 0\n      puts \"\
    #{num} has #{digits} digit(s) with a sum of digits > 0\"\n    end\n  end\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      digit = num.abs\n \
    \     digit = digit % 10\n      num -= digit\n    end\n    sum += num\n  end\n\
    \  sum\nend", "  arr.each do |n|\n    n.to_s.split('').select { |d| d > 0 }.size\n\
    \  end\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign\
    \ = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    if digits > 0\n      digits_sum = digits.digits.reduce(:+)\n      if digits_sum\
    \ > 0\n        digits_sum -= sign\n      else\n        digits_sum += sign\n  \
    \    end\n      return digits_sum\n    end\n  end\n  0\nend", "  arr.each do |n|\n\
    \    n.to_s.split('').each do |d|\n      next if d.to_i < 0\n      break if d\
    \ == '9'\n      break if d == '0'\n      break if d == '1'\n      break if d ==\
    \ '2'\n      break if d == '3'\n      break if d == '4'\n      break if d == '5'\n\
    \      break if d == '6'\n      break if d == '7'\n      break if d == '8'\n \
    \     break if d == '9'\n      break if d == '0'\n      break if d == '1'\n  \
    \    break if d == '2'\n      break if d == '3'\n      break if d == '4'\n   \
    \   break if d == '5'\n      break if d == '6'\n      break if d == '7'\n    \
    \  break if d == '8'\n      break if d == '9'\n      break if d == '0'\n     \
    \ break if d == '1'\n      break if d == '2'\n      break if d == '3'\n      break\
    \ if d == '4'\n      break if d == '5'\n      break if d == '6'\n      break if\
    \ d == '7'\n      break if d == '8'\n      break if d == '9'\n      break if d\
    \ == '0'\n      break if d == '1'\n      break if d == '2'\n      break if d ==\
    \ '3'\n      break if d == '4'\n      break if d == '5'\n      break if d == '6'\n\
    \      break if d == '7'\n      break if d == '8'\n      break if d == '9'\n \
    \     break if d == '0'\n      break if d == '1'\n      break if d == '2'\n  \
    \    break if d == '3'\n      break if d == '4'\n      break if d == '5'\n   \
    \   break if d == '6'\n      break if d == '7'\n      break if d == '8'\n    \
    \  break if d == '9'\n      break if d == '0'\n      break if d == '1'\n     \
    \ break if d == '2'\n      break if d == '3'\n      break if d == '4'\n      break\
    \ if d == '5'\n      break if d == '6'\n      break if d == '7'\n      break if\
    \ d == '8'\n      break if d == '9'\n      break if d == '0'\n      break if d\
    \ == '1'\n      break if d == '2'\n      ", "  arr.each do |num|\n    num = num.to_i\n\
    \    return num if num > 0\n    num = num.abs\n    return num if num < 0\n  end\n\
    \  0\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
