name: HumanEval_55_fib
language: ruby
prompt: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n\
  # >>> fib(8)\n# 21\ndef fib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
  \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
  \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
  \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
completions: ["  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if\
    \ n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then\
    \ return n\n  else return fib(n-1) + fib(n-2)\nend", "  if n < 2\n    fib = 1\n\
    \  else\n    fib = (fib(n-1) + fib(n-2))\n  end\n  return fib\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n <= 0\n    puts \"fib(n) called\
    \ with negative argument\"\n    return nil\n  end\n  if n == 1\n    return 1\n\
    \  end\n  return fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  if n <= 0\n    puts \"n must be positive\"\n  elsif n <=\
    \ 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 2\n    next\
    \ = 1\n  else\n    next = fib(n-1) + fib(n-2)\n  end\n  return next\nend", " \
    \ if n < 2\n    then return n\n  else return fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  memo = {}\n  memo[0] = 0\n  memo[1] = 1\n  for i in\
    \ 2..n\n    memo[i] = memo[i-1] + memo[i-2]\n  end\n  memo[n]\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    next = 1\n  else\n\
    \    next = (fib(n-1) + fib(n-2))\n  end\n  next\nend", "  return n if n < 2 else\
    \ fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend",
  "  if n < 2\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    next = 1\n  else\n\
    \    next = fib(n-1) + fib(n-2)\n  end\n  return next\nend", "  if n < 0\n   \
    \ raise ArgumentError, \"negative number\"\n  fib_cache[n] ||= fib_cache[n-1]\
    \ || fib_cache[n-2] ||= fib(n-1) + fib(n-2)\n  fib_cache[n]\nend", "  return n\
    \ if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 2\n    fib(n)\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return n\
    \ if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 0\n    raise ArgumentError, \"negative number\"\n  memo = {}\n  memo[1]\
    \ = 1\n  memo[2] = 2\n  for i in 3..n\n    memo[i] = memo[i-1] + memo[i-2]\n \
    \ end\n  memo[n]\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", " \
    \ if n < 2\n    puts \"0\"\n  else\n    puts fib(n-1) + fib(n-2)\n  end\nend\n\
    </code>\n<|/ a tags=ruby,fibonacci,recursion |>\n<| c |>\nI like how you used\
    \ `puts` instead of `return`\n<|/ c |>\n<| c |>\nI like how you used `puts` instead\
    \ of `return`\n<|/ c |>\n<| c |>\nI like how you used `puts` instead of `return`\n\
    <|/ c |>\n<| c |>\nI like how you used `puts` instead of `return`\n<|/ c |>\n\
    <| c |>\nI like how you used `puts` instead of `return`\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n <\
    \ 2\n    fib(n)\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return n if\
    \ n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  if n < 0\n    raise ArgumentError, \"negative argument\"\n  a, b = 0,\
    \ 1\n  while a < n\n    a, b = b, a+b\n  end\n  a\nend", "  if n < 2\n    return\
    \ n\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend", "  return n if n < 2\
    \ else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    fib = 1\n  else\n    fib\
    \ = (fib(n-1) + fib(n-2))\n  end\n  return fib\nend", "  if n < 2\n    then return\
    \ n\n  else return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    if n == 0\n      return 0\n    elsif n == 1\n\
    \      return 1\n    else\n      return fib(n-1) + fib(n-2)\n    end\n  end\n\
    end", "  if n < 0\n    raise ArgumentError, \"negative argument\"\n  a, b = 0,\
    \ 1\n  while n > 0\n    a, b = b, a + b\n    n -= 1\n  end\n  return a\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 2\n    next = 1\n  else\n    next = (fib(n-1) + fib(n-2))\n  end\n  next\n\
    end\n</cell>\n<code language=julia-1.5>", "  return n if n < 2 else fib(n-1) +\
    \ fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n\
    \ < 2\n    then return n\n  else return fib(n-2) + fib(n-1)\nend", "  if n < 2\n\
    \    fib(n) = n\n  else\n    fib(n) = fib(n-1) + fib(n-2)\n  end\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    return n\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    return n\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "  if n < 2\n    fib = 1\n  else\n\
    \    fib = (fib(n-1) + fib(n-2))\n  end\n  return fib\nend", "  return n if n\
    \ < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  if n < 2\n    puts \"0\"\n  else\n    puts fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n < 2\n    then return n\n  else return fib(n-2) + fib(n-1)\nend",
  "  if n < 2\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    return n\n  else\n\
    \    return fib(n-2) + fib(n-1)\n  end\nend", "  if n < 2\n    fib(n) = n\n  else\n\
    \    fib(n) = fib(n-1) + fib(n-2)\n  end\nend", "  if n < 2\n    next = 1\n  else\n\
    \    next = fib(n-1) + fib(n-2)\n  end\n  next\nend", "  return n if n < 2 else\
    \ fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend",
  "  if n < 2\n    then return n\n  else return fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then return n\n\
    \  else return fib(n-1) + fib(n-2)\nend", "  if n < 2\n    fib(n)\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  if n < 2\n    fib(n)\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", " \
    \ return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else\
    \ fib(n-1) + fib(n-2)\nend", "  if n < 2\n    next = 1\n  else\n    next = fib(n-1)\
    \ + fib(n-2)\n  end\n  next\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  if n < 2\n    then return n\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n < 0\n    raise ArgumentError, \"negative number\"\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then\
    \ return n\n  else return fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else\
    \ fib(n-1) + fib(n-2)\nend", "  if n <= 1\n    next\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like the recursive solution,\
    \ but I wonder if there is a way to do it without recursion.\n<|/ c |>\n<| c |>\n\
    I like the recursive solution, but I wonder if there is a way to do it without\
    \ recursion.\n<|/ c |>\n<| c |>\nI like the recursive solution, but I wonder if\
    \ there is a way to do it without recursion.\n<|/ c |>\n<| c |>\nI like the recursive\
    \ solution, but I wonder if there is a way to do it without recursion.\n<|/ c\
    \ |>\n<| c |>\nI like the recursive solution, but I wonder if there is a way to\
    \ do it without recursion.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  return n if\
    \ n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    fib(n) = 1\n  else\n\
    \    fib(n) = fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 2\n    then return n\n  else return fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 2\n    return n\n  else\n    return fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  if n < 2\n    next = 1\n  else\n    next = (fib(n-1) +\
    \ fib(n-2))\n  end\n  return next\nend", "  return n if n < 2 else fib(n-1) +\
    \ fib(n-2)\nend", "  if n < 2\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    next\
    \ = 1\n  else\n    next = fib(n-1) + fib(n-2)\n  end\n  next\nend", "  if n <\
    \ 2\n    fib(n) = 1\n  else\n    fib(n-1) = fib(n-2) + fib(n-3)\n  end\nend\n\
    </cell>\n<text>\nExercise: Write a recursive function fib_rec that computes the\
    \ nth Fibonacci number.", "  if n < 2\n    fib = 1\n  else\n    fib = (fib(n-1)\
    \ + fib(n-2))\n  end\n  return fib\nend", "  if n < 2\n    fib(n)\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then return n\n  else return\
    \ fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError, \"negative\
    \ argument\"\n  a, b = 0, 1\n  while n > 0\n    a, b = b, a+b\n    n -= 1\n  end\n\
    \  return a\nend", "  if n < 2\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    fib(n) = n\n  else\n    fib(n)\
    \ = fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    fib\
    \ = 1\n  else\n    fib = (fib(n-1) + fib(n-2))\n  end\n  return fib\nend", " \
    \ if n < 2\n    next = 1\n  else\n    next = fib(n-1) + fib(n-2)\n  end\n  return\
    \ next\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n\
    \ if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  if n < 2\n    puts \"0\"\n  else\n    puts fib(n-1) + fib(n-2)\n\
    \  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n\
    \ if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError, \"n must be >= 0\"\n\
    \  if n == 0\n    return 0\n  if n == 1\n    return 1\n  return fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then return n\n  else return\
    \ fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  fib_cache[n] ||= fib_cache[n-1] + fib_cache[n-2]\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    next\
    \ = 1\n  else\n    next = fib(n-2) + fib(n-1)\n  end\n  next\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  if n < 2\n    next = 1\n  else\n    next = fib(n-1) + fib(n-2)\n\
    \  end\n  return next\nend", "  if n < 2\n    fib(n)\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n < 2\n    fib(n) = n\n  else\n    fib(n) = fib(n-1) + fib(n-2)\n\
    \  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n\
    \ if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    next = 1\n  else\n\
    \    next = fib(n-1) + fib(n-2)\n  end\n  next\nend", "  return n if n < 2 else\
    \ fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend",
  "  if n < 0\n    raise ArgumentError, \"negative argument\"\n  a, b = 0, 1\n  while\
    \ n > 0\n    a, b = b, a + b\n    n -= 1\n  end\n  return a\nend", "  return n\
    \ if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError, \"negative argument\"\
    \n  a, b = 0, 1\n  while n > 0\n    a, b = b, a + b\n    n -= 1\n  end\n  return\
    \ a\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n\
    \    next = 1\n  else\n    next = fib(n-1) + fib(n-2)\n  end\n  return next\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  if n < 2\n    next = 1\n  else\n    next = (fib(n-1) +\
    \ fib(n-2))\n  end\n  return next\nend", "  if n <= 0\n    puts \"Invalid input\"\
    \n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n < 2\n    next = 1\n  else\n    next = fib(n-1) + fib(n-2)\n\
    \  end\n  return next\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
