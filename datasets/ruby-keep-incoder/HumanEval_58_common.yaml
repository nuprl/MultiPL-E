name: HumanEval_58_common
language: ruby
prompt: "# Return sorted unique common elements for two lists.\n# >>> common([1, 4,\
  \ 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
  \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
  \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
  \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3,\
  \ 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
completions: ["  l1 = l1.sort\n  l2 = l2.sort\n  l1.length == l2.length ? l1.zip(l2).to_a\
    \ : l1[0...l1.length].zip(l2[0...l2.length]).to_a\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend",
  "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).to_a\nend", "  l1.zip(l2).select {\
    \ |e| e[0] == e[1] }.flatten\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1]\
    \ }\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n \
    \   end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\n\
    end", "  l1.zip(l2).to_a.sort.uniq\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1.zip(l2).map { |e| e[0] }.reject { |e| l2.include?(e)\
    \ }\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n \
    \   end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\n\
    end", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.each do |i|\n    l2.each do |j|\n\
    \      return i if i == j\n    end\n  end\n  nil\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a\nend",
  "  l1.zip(l2).select { |e| e[0] == e[1] }.flatten\nend", "  l1.zip(l2).find { |e1,\
    \ e2| e1 == e2 }\nend", "  l1.zip(l2).map { |e| e[0] }\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.zip(l2).map\
    \ { |x, y| x if x == y }\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).each do |a,\
    \ b|\n    return a if b == []\n    return a if a.first == b.first\n  end\n  nil\n\
    end", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).select { |x, y| x == y }.flatten\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", "  l1.each do |x|\n\
    \    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", " \
    \ l1 = l1.sort\n  l2 = l2.sort\n  l1.length == l2.length ? l1.zip(l2).select {\
    \ |e| e[0] == e[1] }.flatten : []\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.length\
    \ == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort : []\nend",
  "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).to_a.select { |e|\
    \ e[0] == e[1] }\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1 = l1.to_a\n\
    \  l2 = l2.to_a\n  l1.zip(l2).to_a.flatten.uniq.sort\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).select { |e| e[0] == e[1] }.flatten\nend",
  "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return x if x == y || l1[i] == l1[j] or l2[i] == l2[j]\n  \
    \  end\n  end\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\n\
    end", "  l1.zip(l2).map { |x, y| x if x == y }\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1.zip(l2).map { |e| e[0] }\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\n\
    end", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.sort.uniq\nend", "  l1\
    \ = l1.sort\n  l2 = l2.sort\n  l1.length == l2.length ? l1.zip(l2).select { |e|\
    \ e[0] == e[1] }.flatten.sort : []\nend", "  l1.each do |x|\n    l2.each do |y|\n\
    \      return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).to_a\n\
    end", "  l1.zip(l2).to_a.sort.uniq\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index do\
    \ |y, j|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1 = l1.to_a\n\
    \  l2 = l2.to_a\n  l1.zip(l2).to_a\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.each do |e|\n    l2.each do |f|\n      return\
    \ e if e == f\n    end\n  end\n  nil\nend", "  l1.each_with_index do |x, i|\n\
    \    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n\
    \      return x if x == y\n    end\n  end\n  nil\nend", "  l1 = l1.to_a\n  l2\
    \ = l2.to_a\n  l1.zip(l2).to_a.flatten.uniq\nend", "  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.sort.uniq\n\
    end", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.length == l2.length ? l1.zip(l2).select\
    \ { |e| e[0] == e[1] }.flatten.sort : []\nend", "  l1.zip(l2).to_a.select { |e|\
    \ e[0] == e[1] }.map(&:first)\nend", "  l1.zip(l2).map { |e| e[0] }\nend", " \
    \ l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq.sort\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x\
    \ == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n \
    \     return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.zip(l2).select { |e| e[0] == e[1] }.flatten\n\
    end", "  l1.zip(l2).to_a.sort.uniq\nend", "  l1.zip(l2).map { |e| e[0] }\nend",
  "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n\
    \  nil\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).each do |a, b|\n \
    \   return a if b == a\n    return b if b == a\n  end\n  nil\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\n\
    end", "  l1.zip(l2).find { |e| e[0] == e[1] }\nend", "  l1.zip(l2).map { |e| e[0]\
    \ }\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n \
    \   end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", "  l1 = l1.to_a\n\
    \  l2 = l2.to_a\n  l1.zip(l2).to_a.sort.uniq\nend", "  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).to_a & l2.to_a : nil\nend", "  l1.zip(l2).select\
    \ { |e1, e2| e1 == e2 }\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).each\
    \ do |a, b|\n    return a if a.eql?(b)\n  end\n  nil\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.length ==\
    \ l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort : []\nend",
  "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return x if x == y\n    end\n\
    \  end\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n\
    \    end\n  end\n  nil\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).to_a.combination(2).to_a\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.zip(l2).find { |e| e[0] == e[1]\
    \ }\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.flatten.uniq.sort\n\
    end", "  l1.zip(l2).find do |x, y|\n    x != y\n  end\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.zip(l2).select { |x, y| x ==\
    \ y }.map(&:first)\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).to_a.sort.uniq\n\
    end", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a\nend", "  l1 = l1.sort\n\
    \  l2 = l2.sort\n  l1.length == l2.length ? l1[1,..l1.length] == l2[1,..l2.length]\
    \ : nil\nend", "  l1.zip(l2).to_a.sort.uniq\nend", "  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\n\
    end", "  l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n    \
    \  return x if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).find\
    \ { |a,b| a == b }\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1 = l1.to_a\n\
    \  l2 = l2.to_a\n  l1.zip(l2).to_a.sort.uniq\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.length == l2.length ?\
    \ l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort : []\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\n\
    end", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).map { |a,b| a if a.eql?(b)\
    \ }\nend", "  l1.each do |i|\n    l2.each do |j|\n      return i if i == j\n \
    \   end\n  end\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", " \
    \ l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n      return\
    \ i if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).to_a.combination(2).select\
    \ { |x, y| x == y }.map(&:first)\nend", "  l1.zip(l2).to_a.select { |e| e[0] ==\
    \ e[1] }\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.sort\nend",
  "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.flatten.uniq\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\n\
    end", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).map { |e| e[0] }\nend", " \
    \ l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.flatten.uniq\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", " \
    \ l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return x if x == y || l1[i]\
    \ == l1[j] \n    end\n  end\n  nil\nend\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<| c |>\nI like this solution. Elegant and simple.\n<|/ c |>\n<| c |>\n\
    This solution does not work if l1 and l2 are different lengths.\n<|/ c |>\n<|\
    \ c |>\nThis solution does not work if l1 and l2 are different lengths.\n<|/ c\
    \ |>\n<| a dscore=4 |>\n<code>\nl1.zip(l2).select { |x, y| x == y }\n</code>\n\
    <|/ a tags=ruby,arrays,ruby-on-rails |>\n<| c |>\nThis solution does not work\
    \ if l1 and l2 are different lengths.\n<|/ c |>\n<| c |>\nThis solution does not\
    \ work if l1 and l2 are different lengths.\n<|/ c |>\n<| c |>\nThis solution does\
    \ not work if l1 and l2 are different lengths.\n<|/ c |>\n<| c |>\nThis solution\
    \ does not work if l1 and l2 are different lengths.\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\nl1.zip(l2).select { |x, y| x == y }\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<| c |>\nThis solution does not work if l1 and l2 are different lengths.\n\
    <|/ c |>\n<| c |>\nThis solution does not work if l1 and l2 are different lengths.\n\
    <|/ c |>\n<| c |>\nThis solution does not work if l1 and l2 are different lengths.\n\
    <|/ c |>\n<| c |>\nThis solution does not work if l1 and l2 are different lengths.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nl1.zip(l2).select { |x, y| x == y }\n</code>\n\
    <|/ a tags=ruby,arrays,ruby-on-rails |>\n<| c |>\nThis solution does not work\
    \ if l1 and l2 are different lengths.\n<|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<code>\nl1.zip(l2).select { |x, y| x == y }\n</code>\n<|/ a dscore=3 |>\n",
  "  l1.zip(l2).find do |a, b|\n    a == b\n  end\nend", "  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).to_a : l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.flatten.uniq.sort\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index do\
    \ |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).map { |e| e[0] }.reject { |e| l2.include?(e)\
    \ }\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n \
    \   end\n  end\n  nil\nend", "  l1.zip(l2).find do |e1, e2|\n    e1 == e2\n  end\n\
    end", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.length == l2.length ? l1.zip(l2).select\
    \ { |e| e[0] == e[1] }.flatten.sort : []\nend", "  l1.zip(l2).find do |a, b|\n\
    \    a.first == b.first\n  end\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.length\
    \ == l2.length ? l1.zip(l2).select { |x, y| x == y }.flatten : []\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.zip(l2).find { |x, y| x == y }\nend", "  l1\
    \ = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.sort.uniq\nend", "  l1.each do\
    \ |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\nend",
  "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n\
    \  nil\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a\nend", "  l1.zip(l2).select\
    \ { |e| e[0] == e[1] }.map(&:first)\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n \
    \ l1.zip(l2).to_a.sort.uniq\nend", "  l1.each do |x|\n    l2.each do |y|\n   \
    \   return x if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.sort.uniq.to_a\n\
    end", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).map { |x, y| x if x == y }\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", "  l1.zip(l2).find\
    \ { |e1, e2| e1 == e2 }\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).to_a.combination(2).select\
    \ { |x, y| x == y }.map(&:first)\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.zip(l2).find\
    \ { |x, y| x == y }\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.flatten.uniq\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a\n\
    end", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1 = l1.sort\n\
    \  l2 = l2.sort\n  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1]\
    \ }.flatten.sort : []\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.sort.uniq\n\
    end", "  l1.zip(l2).to_a.sort.uniq.to_a\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).each do |a, b|\n    return a if a.eql?(b)\n  end\n  nil\nend", " \
    \ l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n      return\
    \ x if x == y or l1.include?(y) or l2.include?(x)\n    end\n  end\nend", "  l1.zip(l2).find\
    \ { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend",
  "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", "  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).find\
    \ do |e1, e2|\n    e1 == e2\n  end\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1.zip(l2).to_a.sort.uniq.to_a\nend", "  l1 = l1.sort\n\
    \  l2 = l2.sort\n  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1]\
    \ }.flatten : []\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }\nend", "  l1 = l1.sort\n  l2 = l2.sort\n  l1.zip(l2).each\
    \ do |a,b|\n    return a if b == a\n    return b if a == b\n  end\n  return nil\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend", "  l1 = l1.sort\n\
    \  l2 = l2.sort\n  l1.length == l2.length ? l1.zip(l2).select { |x, y| x == y\
    \ }.flatten : []\nend", "  l1 = l1.to_a\n  l2 = l2.to_a\n  l1.zip(l2).to_a.flatten.uniq\n\
    end", "  l1.zip(l2).to_a.select { |e| e[0] == e[1] }.map(&:first)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
