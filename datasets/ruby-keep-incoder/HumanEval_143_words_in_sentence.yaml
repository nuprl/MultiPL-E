name: HumanEval_143_words_in_sentence
language: ruby
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# Input: sentence = \"This is a test\"\n# Output: \"is\"\n# Example\
  \ 2:\n# Input: sentence = \"lets go for swimming\"\n# Output: \"go for\"\n# Constraints:\n\
  # * 1 <= len(sentence) <= 100\n# * sentence contains only letters\ndef words_in_sentence(sentence)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n\
  \    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"\
  This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"\
  ))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available\
  \ here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"\
  ))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\
  \", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"\
  ))\n  end\nend\n"
completions: ["  sentence = sentence.split(\" \").sort\n  result = \"\"\n  for i in\
    \ 0..(sentence.length-1)\n    if sentence[i].to_s.length == 1 && sentence[i].to_s.to_i\
    \ == 1\n      result << sentence[i]\n    end\n  end\n  result\nend", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  words.each do |word|\n\
    \    word = word.downcase\n    word = word.gsub(/[^a-z]/, \"\")\n    word = word.gsub(/\\\
    s+/, \" \")\n    word = word.split(\" \").sort.join(\" \")\n    word = word.split(\"\
    \ \").map { |w| w.to_i }.inject(:*)\n    puts word\n  end\nend", "  sentence =\
    \ sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat\
    \ words.select { |word| is_prime?(word.length) }\n  new_words.concat words.select\
    \ { |word| !is_prime?(word.length) }\n  new_words.sort!\n  new_words.join(\" \"\
    )\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words\
    \ = []\n  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n\
    \    if word.length % 2 == 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % 2 != 0\n      word = word.gsub(/[^a-z]/, \"\")\n    end\n\
    \    if word.length % ", "  sentence = sentence.split(\" \").sort\n  sentence.length.prime?\n\
    \  sentence.join\nend", "  sentence = sentence.split(\" \").sort\n  result = []\n\
    \  for i in (0..(sentence.length-1))\n    if sentence[i].to_s.length == prime_number(sentence[i].to_s.length)\n\
    \      result << sentence[i]\n    end\n  end\n  result.join(\" \")\nend", "  sentence\
    \ = sentence.split(\" \").sort\n  sentence.length.prime?\n  sentence.join\nend",
  "  sentence = sentence.split(\" \").map(&:to_i)\n  sentence = sentence.reduce(:+)\n\
    \  sentence = Prime::prime_division(sentence).map(&:to_i).reduce(:+)\n  sentence\
    \ = sentence.to_s\n  sentence\nend", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  result = \"\"\n  primes = []\n  prime_counter = 0\n\
    \  prime_numbers = prime_numbers_from(words)\n  prime_numbers.each do |prime|\n\
    \    prime_counter += prime\n  end\n  prime_counter.times do |i|\n    prime_numbers_index\
    \ = prime_numbers.index(i)\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ > 0\n    prime_numbers_index = prime_numbers_index if prime_numbers_index <\
    \ prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ > 0\n    prime_numbers_index = prime_numbers_index if prime_numbers_index <\
    \ prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ > 0\n    prime_numbers_index = prime_numbers_index if prime_numbers_index <\
    \ prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime_counter\n    prime_numbers_index = prime_numbers_index if prime_numbers_index\
    \ < prime", "  sentence = sentence.downcase\n  words = sentence.split(' ')\n \
    \ new_words = []\n  primes = []\n  prime_words = []\n  prime_word = ''\n  prime_word_count\
    \ = 0\n  prime_word_index = 0\n  prime_word_index2 = 0\n  prime_word_index3 =\
    \ 0\n  prime_word_index4 = 0\n  prime_word_index5 = 0\n  prime_word_index6 = 0\n\
    \  prime_word_index7 = 0\n  prime_word_index8 = 0\n  prime_word_index9 = 0\n \
    \ prime_word_index10 = 0\n  prime_word_index11 = 0\n  prime_word_index12 = 0\n\
    \  prime_word_index13 = 0\n  prime_word_index14 = 0\n  prime_word_index15 = 0\n\
    \  prime_word_index16 = 0\n  prime_word_index17 = 0\n  prime_word_index18 = 0\n\
    \  prime_word_index19 = 0\n  prime_word_index20 = 0\n  prime_word_index21 = 0\n\
    \  prime_word_index22 = 0\n  prime_word_index23 = 0\n  prime_word_index24 = 0\n\
    \  prime_word_index25 = 0\n  prime_word_index26 = 0\n  prime_word_index27 = 0\n\
    \  prime_word_index28 = 0\n  prime_word_index29 = 0\n  prime_word_index30 = 0\n\
    \  prime_word_index31 = 0\n  prime_word_index32 = 0\n  prime_word_index33 = 0\n\
    \  prime_word_index34 = 0\n  prime_word_index35 = 0\n  prime_word_index36 = 0\n\
    \  prime_word_index37 = 0\n  prime_word_index38 = 0\n  prime_word_index39 = 0\n\
    \  prime_word_index40 = 0\n  prime_word_index41 = 0\n  prime_word_index42 = 0\n\
    \  prime_word_index43 = 0\n  prime_word_index44 = 0\n  prime_word_index45 = 0\n\
    \  prime_word_index46 = 0\n  prime_word_index47 = 0\n  prime_word_index48 = 0\n\
    \  prime_word_index49 = 0\n  prime_word_index50 = 0\n  prime_word_index51 = 0\n\
    \  prime_word_index52 = 0\n  prime_word_index53 = 0\n  prime_word_index54 = 0\n\
    \  prime_word_index55 = 0\n  prime_word_index56 = 0\n  prime_word_index57 = 0\n\
    \  prime_word_index58 = 0\n  prime_word_index59 = 0\n  ", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat(words)\n\
    \  new_words.each do |word|\n    word = word.downcase\n    prime_numbers = PrimeNumbers.new(word)\n\
    \    prime_numbers.each do |prime|\n      new_words.delete(word)\n    end\n  end\n\
    \  new_words.join(\" \")\nend", "  sentence = sentence.downcase\n  words = sentence.split('\
    \ ')\n  words.map!{|word| word.downcase}\n  prime_words = []\n  prime_words.push(words[0])\n\
    \  prime_words.map!{|word| prime_words.include?(word) ? nil : word}\n  prime_words.map!{|word|\
    \ prime_words.include?(word) ? nil : word}\n  prime_words.map!{|word| prime_words.include?(word)\
    \ ? nil : word}\n  prime_words.map!{|word| prime_words.include?(word) ? nil :\
    \ word}\n  prime_words.map!{|word| prime_words.include?(word) ? nil : word}\n\
    \  prime_words.map!{|word| prime_words.include?(word) ? nil : word}\n  prime_words.map!{|word|\
    \ prime_words.include?(word) ? nil : word}\n  prime_words.map!{|word| prime_words.include?(word)\
    \ ? nil : word}\n  prime_words.map!{|word| prime_words.include?(word) ? nil :\
    \ word}\n  prime_words.map!{|word| prime_words.include?(word) ? nil : word}\n\
    \  prime_words.map!{|word| prime_words.include?(word) ? nil : word}\n  prime_words.map!{|word|\
    \ prime_words.include?(word) ? nil : word}\n  prime_words.map!{|word| prime_words.include?(word)\
    \ ? nil : word}\n  prime_words.map!{|word| prime_words.include?(word) ? nil :\
    \ word}\n  prime_words.map!{|word| prime_words.include?(word) ? nil : word}\n\
    \  prime_words.map!{|word| prime_words.include?(word) ? nil : word}\n  prime_words.map!{|word|\
    \ prime_words.include?(word) ? nil : word}\n  prime_words.map!{|word| prime_words.include?(word)\
    \ ? nil : word}\n  prime_words.map!{|word| prime_words.include?(word) ? nil :\
    \ word}\n  prime_words.map!{|word| prime_words.include?(word) ? nil : word}\n\
    \  prime_words.map!{|word| prime_", "  sentence = sentence.downcase\n  words =\
    \ sentence.split(' ')\n  new_words = []\n  primes = []\n  prime_words = []\n \
    \ prime_word = ''\n  prime_word_count = 0\n  prime_word_index = 0\n  prime_word_index2\
    \ = 0\n  prime_word_index3 = 0\n  prime_word_index4 = 0\n  prime_word_index5 =\
    \ 0\n  prime_word_index6 = 0\n  prime_word_index7 = 0\n  prime_word_index8 = 0\n\
    \  prime_word_index9 = 0\n  prime_word_index10 = 0\n  prime_word_index11 = 0\n\
    \  prime_word_index12 = 0\n  prime_word_index13 = 0\n  prime_word_index14 = 0\n\
    \  prime_word_index15 = 0\n  prime_word_index16 = 0\n  prime_word_index17 = 0\n\
    \  prime_word_index18 = 0\n  prime_word_index19 = 0\n  prime_word_index20 = 0\n\
    \  prime_word_index21 = 0\n  prime_word_index22 = 0\n  prime_word_index23 = 0\n\
    \  prime_word_index24 = 0\n  prime_word_index25 = 0\n  prime_word_index26 = 0\n\
    \  prime_word_index27 = 0\n  prime_word_index28 = 0\n  prime_word_index29 = 0\n\
    \  prime_word_index30 = 0\n  prime_word_index31 = 0\n  prime_word_index32 = 0\n\
    \  prime_word_index33 = 0\n  prime_word_index34 = 0\n  prime_word_index35 = 0\n\
    \  prime_word_index36 = 0\n  prime_word_index37 = 0\n  prime_word_index38 = 0\n\
    \  prime_word_index39 = 0\n  prime_word_index40 = 0\n  prime_word_index41 = 0\n\
    \  prime_word_index42 = 0\n  prime_word_index43 = 0\n  prime_word_index44 = 0\n\
    \  prime_word_index45 = 0\n  prime_word_index46 = 0\n  prime_word_index47 = 0\n\
    \  prime_word_index48 = 0\n  prime_word_index49 = 0\n  prime_word_index50 = 0\n\
    \  prime_word_index51 = 0\n  prime_word_index52 = 0\n  prime_word_index53 = 0\n\
    \  prime_word_index54 = 0\n  prime_word_index55 = 0\n  prime_word_index56 = 0\n\
    \  prime_word_index57 = 0\n  prime_word_index58 = 0\n  prime_word_index59 = 0\n\
    \  ", "  sentence = sentence.split(\" \").sort\n  sentence.length.times { |i|\
    \ return sentence if i.prime? }\nend", "  sentence = sentence.split(\" \").sort\n\
    \  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n  prime_numbers =\
    \ []\n  prime_numbers_counter = 0\n  prime_numbers_length = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length = 0\n\
    \  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array_length\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  result = \"\"\
    \n  prime_numbers = []\n  prime_numbers_count = 0\n  prime_numbers_index = 0\n\
    \  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index =\
    \ 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  primes = []\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_word", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  words.map!{|word| word.strip}\n  words.map!{|word| word.downcase}\n \
    \ words.map!{|word| word.gsub(/[^a-z]/, \"\")}\n  words.map!{|word| word.split(\"\
    \ \").map{|w| w.to_i}}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:*)}", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_sentence = \"\"\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index = 0\n \
    \ prime_word_", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  new_words = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  ", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  new_words = []\n  new_words.concat(words)\n  new_words.each do |word|\n   \
    \ if word.length % 2 == 0\n      new_words.delete(word)\n    end\n  end\n  new_words.join(\"\
    \ \")\nend", "  sentence = sentence.split(\" \").sort\n  new_sentence = \"\"\n\
    \  prime_numbers = PrimeNumbers.new(sentence.length)\n  prime_numbers.each do\
    \ |prime|\n    new_sentence << sentence[prime]\n  end\n  return new_sentence\n\
    end", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words\
    \ = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_counter = 0\n \
    \ prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words =\
    \ []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  ", "  sentence = sentence.downcase\n  words = sentence.split(' ')\n \
    \ words.map!{|word| word.downcase}\n  words.map!{|word| word.length}\n  words.map!{|word|\
    \ word.chars.to_a}\n  words.map!{|word| word.inject(:+)}\n  words.map!{|word|\
    \ word.uniq}\n  words.map!{|word| word.sort.join}\n  words.map!{|word| word.join}\n\
    end", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words\
    \ = []\n  new_words.concat words.select { |word| is_prime?(word.length) }\n  new_words.concat\
    \ words.select { |word| !is_prime?(word.length) }\n  new_words.sort!\n  new_words.join(\"\
    \ \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  new_words = []\n  new_sentence = \"\"\n  primes = []\n  prime_words = []\n\
    \  prime_sentence = \"\"\n  prime_words_in_sentence = []\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_lengths = []\n  prime_words_in_sentence_lengths_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0\n  prime_words_in_sentence_lengths_sum = 0\n  prime_words_in_sentence_lengths_sum_count\
    \ = 0", "  sentence = sentence.split(\" \").sort\n  result = []\n  for i in sentence\n\
    \    if i.to_s.length == i.to_s.length.to_i\n      result << i\n    end\n  end\n\
    \  result.sort\n  result.join(\" \")\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_sentence = \"\"\n  primes = []\n  prime_numbers = []\n  prime_numbers_count\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index",
  "  sentence = sentence.split(\" \").map { |word| word.downcase }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n  sentence = sentence.select\
    \ { |word| word.include?(\"a\") || word.include?(\"e\") || word.include?(\"i\"\
    ) || word.include?(\"o\") || word.include?(\"u\") }\n", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.strip\n\
    \    word = word.downcase\n    word = word.gsub(/[^a-z]/, \"\")\n    word = word.gsub(/\\\
    s+/, \"\")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/,\
    \ \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \"\
    \ \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n\
    \    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n  \
    \  word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word\
    \ = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word =\
    \ word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\\
    s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/,\
    \ \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \"\
    \ \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n\
    \    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n  \
    \  word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word\
    \ = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word =\
    \ word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\\
    s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/,\
    \ \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \"\
    \ \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/", "  sentence\
    \ = sentence.split(\" \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n\
    \    word = sentence[i]\n    i += 1\n    found = false\n    while i < sentence.length\n\
    \      word = sentence[i]\n      i += 1\n      if word.length == word.length.to_i\n\
    \        found = true\n        break\n      end\n    end\n    if found\n     \
    \ result << word\n    end\n  end\n  result.sort\n  sentence.join(\" \")\nend",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  words.each do\
    \ |word|\n    word = word.downcase\n    next if word.empty?\n    prime_words =\
    \ []\n    prime_words.push(word) if prime_words.include?(word)\n    prime_words.each\
    \ do |prime_word|\n      prime_word = prime_word.downcase\n      next if prime_word.empty?\n\
    \      prime_words.each do |prime_word|\n        prime_word = prime_word.downcase\n\
    \        next if prime_word.empty?\n        prime_words.each do |prime_word|\n\
    \          prime_word = prime_word.downcase\n          next if prime_word.empty?\n\
    \          prime_words.each do |prime_word|\n            prime_word = prime_word.downcase\n\
    \            next if prime_word.empty?\n            prime_words.each do |prime_word|\n\
    \              prime_word = prime_word.downcase\n              next if prime_word.empty?\n\
    \              prime_words.each do |prime_word|\n                prime_word =\
    \ prime_word.downcase\n                next if prime_word.empty?\n           \
    \     prime_words.each do |prime_word|\n                  prime_word = prime_word.downcase\n\
    \                  next if prime_word.empty?\n                  prime_words.each\
    \ do |prime_word|\n                    prime_word = prime_word.downcase\n    \
    \                next if prime_word.empty?\n                    prime_words.each\
    \ do |prime_word|\n                      prime_word = prime_word.downcase\n  \
    \                    next if prime_word.empty?\n                      prime_words.each\
    \ do |prime_word|\n                        prime_word = prime_word.downcase\n\
    \                        next if prime_word.empty?\n                        prime_words.each\
    \ do |prime_word|\n                          prime_word = prime_word.downcase\n\
    \                          next if prime_word.empty?\n                       \
    \   prime_words.each do |prime_word|\n                            prime_word =\
    \ prime_word.downcase\n                            next if prime_word.empty?\n\
    \                            prime_words.each do |prime_word|\n              \
    \                prime_word = prime_word.downcase\n                          \
    \    next if prime_word.empty?\n                              prime_words.each\
    \ do |prime_word|\n                                prime_word = prime_word.downcase\n\
    \                                next if prime_word.empty?\n                 \
    \               prime_words.each do |prime_word|\n                           \
    \       prime_word = prime_word.downcase\n                                  next\
    \ if prime_word.empty?\n                                  prime_words.each do\
    \ |prime_word", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  new_words = []\n  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n\
    \  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime",
  "  sentence = sentence.split(\" \").sort\n  new_sentence = \"\"\n  i = 0\n  while\
    \ i < sentence.length\n    if sentence[i] % 2 == 0\n      new_sentence += sentence[i]\n\
    \      i += 1\n    end\n  end\n  new_sentence\nend", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  primes = []\n  prime_numbers = 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers += 2\n  prime_numbers\
    \ += 2\n  ", "  sentence = sentence.split(\" \").sort\n  new_sentence = \"\"\n\
    \  prime_numbers = 2\n  while prime_numbers < sentence.length\n    new_sentence\
    \ << sentence[prime_numbers]\n    prime_numbers += 2\n  end\n  new_sentence <<\
    \ sentence[prime_numbers]\n  return new_sentence\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_index2 = 0\n  prime_word_index3 = 0\n  prime_word_index4 = 0\n \
    \ prime_word_index5 = 0\n  prime_word_index6 = 0\n  prime_word_index7 = 0\n  prime_word_index8\
    \ = 0\n  prime_word_index9 = 0\n  prime_word_index10 = 0\n  prime_word_index11\
    \ = 0\n  prime_word_index12 = 0\n  prime_word_index13 = 0\n  prime_word_index14\
    \ = 0\n  prime_word_index15 = 0\n  prime_word_index16 = 0\n  prime_word_index17\
    \ = 0\n  prime_word_index18 = 0\n  prime_word_index19 = 0\n  prime_word_index20\
    \ = 0\n  prime_word_index21 = 0\n  prime_word_index22 = 0\n  prime_word_index23\
    \ = 0\n  prime_word_index24 = 0\n  prime_word_index25 = 0\n  prime_word_index26\
    \ = 0\n  prime_word_index27 = 0\n  prime_word_index28 = 0\n  prime_word_index29\
    \ = 0\n  prime_word_index30 = 0\n  prime_word_index31 = 0\n  prime_word_index32\
    \ = 0\n  prime_word_index33 = 0\n  prime_word_index34 = 0\n  prime_word_index35\
    \ = 0\n  prime_word_index36 = 0\n  prime_word_index37 = 0\n  prime_word_index38\
    \ = 0\n  prime_word_index39 = 0\n  prime_word_index40 = 0\n  prime_word_index41\
    \ = 0\n  prime_word_index42 = 0\n  prime_word_index43 = 0\n  prime_word_index44\
    \ = 0\n  prime_word_index45 = 0\n  prime_word_index46 = 0\n  prime_word_index47\
    \ = 0\n  prime_word_index48 = 0\n  prime_word_index49 = 0\n  prime_word_index50\
    \ = 0\n  prime_word_index51 = 0\n  prime_word_index52 = 0\n  prime_word_index53\
    \ = 0\n  prime_word_index54 = 0\n  prime_word_index55 = 0\n  prime_word_index56\
    \ = 0\n  prime_word_index57 = 0\n  prime_word_index58 = 0\n  prime_word_index59\
    \ = 0\n  prime", "  sentence = sentence.split(\" \").sort\n  result = []\n  for\
    \ i in sentence\n    result.push(i)\n  result.reverse\n  result.join(\" \")\n\
    end", "  sentence = sentence.downcase\n  words = sentence.split(' ')\n  words.map!{|word|\
    \ word.downcase}\n  words.map!{|word| word.length}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.chars.sort.join}\n  words.map!{|word| word.chars.sort.join}\n\
    \  words.map!{|word| word.char", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_numbers =\
    \ 2\n  prime_numbers_counter = 0\n  prime_numbers_counter2 = 0\n  prime_numbers_counter3\
    \ = 0\n  prime_numbers_counter4 = 0\n  prime_numbers_counter5 = 0\n  prime_numbers_counter6\
    \ = 0\n  prime_numbers_counter7 = 0\n  prime_numbers_counter8 = 0\n  prime_numbers_counter9\
    \ = 0\n  prime_numbers_counter10 = 0\n  prime_numbers_counter11 = 0\n  prime_numbers_counter12\
    \ = 0\n  prime_numbers_counter13 = 0\n  prime_numbers_counter14 = 0\n  prime_numbers_counter15\
    \ = 0\n  prime_numbers_counter16 = 0\n  prime_numbers_counter17 = 0\n  prime_numbers_counter18\
    \ = 0\n  prime_numbers_counter19 = 0\n  prime_numbers_counter20 = 0\n  prime_numbers_counter21\
    \ = 0\n  prime_numbers_counter22 = 0\n  prime_numbers_counter23 = 0\n  prime_numbers_counter24\
    \ = 0\n  prime_numbers_counter25 = 0\n  prime_numbers_counter26 = 0\n  prime_numbers_counter27\
    \ = 0\n  prime_numbers_counter28 = 0\n  prime_numbers_counter29 = 0\n  prime_numbers_counter30\
    \ = 0\n  prime_numbers_counter31 = 0\n  prime_numbers_counter32 = 0\n  prime_numbers_counter33\
    \ = 0\n  prime_numbers_counter34 = 0\n  prime_numbers_counter35 = 0\n  prime_numbers_counter36\
    \ = 0\n  prime_numbers_counter37 = 0\n  prime_numbers_counter38 = 0\n  prime_numbers_counter39\
    \ = 0\n  prime_numbers_counter40 = 0\n  prime_numbers_counter41 = 0\n  prime_numbers_counter42\
    \ = 0\n  prime_numbers_counter43 = 0\n  prime_numbers_counter44 = 0\n  prime_numbers_counter45\
    \ = 0\n  prime_numbers_counter46 = 0\n  prime_numbers_counter47 = 0\n  prime_numbers_counter48\
    \ = 0\n  prime_numbers_counter49 = 0\n  prime_numbers_counter50 = 0\n  prime_numbers_counter51\
    \ = 0\n  prime_numbers_counter52 = 0\n  prime_numbers_counter53 = 0\n  prime_numbers_",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  ", "  sentence\
    \ = sentence.split(\" \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n\
    \    if i % 2 == 0\n      result.push(sentence[i])\n    i += 1\n  end\n  result\n\
    end", "  sentence = sentence.downcase\n  words = sentence.split(' ')\n  prime_words\
    \ = []\n  prime_words.push(words[0])\n  prime_words.push(words[1])\n  prime_words.push(words[2])\n\
    \  prime_words.push(words[3])\n  prime_words.push(words[4])\n  prime_words.push(words[5])\n\
    \  prime_words.push(words[6])\n  prime_words.push(words[7])\n  prime_words.push(words[8])\n\
    \  prime_words.push(words[9])\n  prime_words.push(words[10])\n  prime_words.push(words[11])\n\
    \  prime_words.push(words[12])\n  prime_words.push(words[13])\n  prime_words.push(words[14])\n\
    \  prime_words.push(words[15])\n  prime_words.push(words[16])\n  prime_words.push(words[17])\n\
    \  prime_words.push(words[18])\n  prime_words.push(words[19])\n  prime_words.push(words[20])\n\
    \  prime_words.push(words[21])\n  prime_words.push(words[22])\n  prime_words.push(words[23])\n\
    \  prime_words.push(words[24])\n  prime_words.push(words[25])\n  prime_words.push(words[26])\n\
    \  prime_words.push(words[27])\n  prime_words.push(words[28])\n  prime_words.push(words[29])\n\
    \  prime_words.push(words[30])\n  prime_words.push(words[31])\n  prime_words.push(words[32])\n\
    \  prime_words.push(words[33])\n  prime_words.push(words[34])\n  prime_words.push(words[35])\n\
    \  prime_words.push(words[36])\n  prime_words.push(words[37])\n  prime_words.push(words[38])\n\
    \  prime_words.push(words[39])\n  prime_words.push(words[40])\n  prime_words.push(words[41])\n\
    \  prime_words.push(words[42])\n  prime_words.push(words[43])\n  prime_words.push(words[44])\n\
    \  prime_words.push(words[45])\n  prime_words.push(words[46])\n  prime_words.push(words[47])\n\
    \  prime_words.push(words[48])\n  prime_words.push(words[49])\n  prime_words.push(word",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_word = \"\"\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers\
    \ = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  words.each do |word|\n\
    \    word = word.strip\n    word = word.downcase\n    word = word.gsub(/[^a-z]/,\
    \ \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.split(\"\")\n   \
    \ word = word.select { |c| c.prime? }\n    word = word.map { |c| c.join }\n  \
    \  word = word.flatten.join\n  end\nend", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  words.map!{|word| word.strip}\n  words.map!{|word|\
    \ word.downcase}\n  words.map!{|word| word.gsub(/[^a-z]/, \"\")}\n  words.map!{|word|\
    \ word.split(\" \").map{|w| w.to_i}}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.map!{|word| word.inject(:&).to_a}\n\
    \  words.map!{|word| word.inject(:&).to_a}\n  words.", "  sentence = sentence.downcase\n\
    \  prime_words = []\n  prime_words_in_sentence = []\n  words = sentence.split(\"\
    \ \")\n  words.each do |word|\n    prime_words_in_sentence << word\n    prime_words\
    \ << word.length\n  end\n  prime_words_in_sentence.uniq.each do |prime_word|\n\
    \    prime_words.each do |word|\n      prime_words_in_sentence.delete(word)\n\
    \    end\n  end\n  prime_words_in_sentence.join(' ')\nend", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  primes = Primes.primes\n  primes.each do\
    \ |prime|\n    prime_words = []\n    sentence.each do |word|\n      if prime_words.include?(word.length)\n\
    \        prime_words << word\n      else\n        prime_words.push(word)\n   \
    \   end\n    end\n    sentence = prime_words\n  end\n  sentence.join(' ')\nend",
  "  sentence = sentence.downcase\n  primes = Primes.primes\n  primes.each do |prime|\n\
    \    prime_sentence = sentence.split(\" \").map { |word| word.split(\"\").map(&:to_i).reduce(:*)\
    \ }\n    prime_sentence = prime_sentence.select { |word| word % prime == 0 }\n\
    \    prime_sentence = prime_sentence.map { |word| words[word] }.join(\" \")\n\
    \    prime_sentence = prime_sentence.split(\" \").map { |word| word.split(\"\"\
    ).reduce(:*) }\n    prime_sentence = prime_sentence.select { |word| word % prime\
    \ == 0 }\n    prime_sentence = prime_sentence.map { |word| words[word] }.join(\"\
    \ \")\n    prime_sentence = prime_sentence.split(\" \").map { |word| word.split(\"\
    \").reduce(:*) }\n    prime_sentence = prime_sentence.select { |word| word % prime\
    \ == 0 }\n    prime_sentence = prime_sentence.map { |word| words[word] }.join(\"\
    \ \")\n    prime_sentence = prime_sentence.split(\" \").map { |word| word.split(\"\
    \").reduce(:*) }\n    prime_sentence = prime_sentence.select { |word| word % prime\
    \ == 0 }\n    prime_sentence = prime_sentence.map { |word| words[word] }.join(\"\
    \ \")\n    prime_sentence = prime_sentence.split(\" \").map { |word| word.split(\"\
    \").reduce(:*) }\n    prime_sentence = prime_sentence.select { |word| word % prime\
    \ == 0 }\n    prime_sentence = prime_sentence.map { |word| words[word] }.join(\"\
    \ \")\n    prime_sentence = prime_sentence.split(\" \").map { |word| word.split(\"\
    \").reduce(:*) }\n    prime_sentence = prime_sentence.select { |word| word % prime\
    \ == 0 }\n    prime_sentence = prime_sentence.map { |word| words[word] }.join(\"\
    \ \")\n    prime_sentence = prime_sentence.split(\" \").map { |word| word.split(\"\
    \").reduce(:*) }\n    prime_sentence = prime_sentence.select { |word| word % prime\
    \ == 0 }\n    prime_sentence = prime_sentence.map { |word| words[word] }.join(\"\
    \ \")\n    prime_sentence = prime_sentence.split(\" \").map { |word| word.split(\"\
    \").reduce(:", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  words.each do |word|\n    word = word.downcase\n    word = word.gsub(/[^a-z]/,\
    \ \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.split(\"\")\n   \
    \ word.each do |char|\n      if char.length != 1\n        char.each_cons(2) do\
    \ |pair|\n          char.each_cons(2) do |pair|\n            if pair.length !=\
    \ 1\n              return char\n            end\n          end\n        end\n\
    \      end\n    end\n  end\nend", "  sentence = sentence.split(\" \").sort\n \
    \ new_sentence = \"\"\n  i = 0\n  while i < sentence.length\n    if sentence[i].to_s.length\
    \ == sentence[i+1].to_s.length\n      new_sentence += sentence[i].to_s + \" \"\
    \n      i += 1\n      while i < sentence.length\n        if sentence[i].to_s.length\
    \ != sentence[i+1].to_s.length\n          new_sentence += sentence[i].to_s + \"\
    \ \"\n          i += 1\n        end\n      end\n    end\n    i += 1\n  end\n \
    \ new_sentence = new_sentence.strip\nend", "  sentence = sentence.downcase\n \
    \ words = sentence.split(\" \")\n  result = \"\"\n  primes = []\n  prime_words\
    \ = []\n  prime_words.push(words[0])\n  primes.push(prime_words[0])\n  prime_words.push(words[1])\n\
    \  primes.push(prime_words[1])\n  prime_words.push(words[2])\n  primes.push(prime_words[2])\n\
    \  prime_words.push(words[3])\n  primes.push(prime_words[3])\n  prime_words.push(words[4])\n\
    \  primes.push(prime_words[4])\n  prime_words.push(words[5])\n  primes.push(prime_words[5])\n\
    \  prime_words.push(words[6])\n  primes.push(prime_words[6])\n  prime_words.push(words[7])\n\
    \  primes.push(prime_words[7])\n  prime_words.push(words[8])\n  primes.push(prime_words[8])\n\
    \  prime_words.push(words[9])\n  primes.push(prime_words[9])\n  prime_words.push(words[10])\n\
    \  primes.push(prime_words[10])\n  prime_words.push(words[11])\n  primes.push(prime_words[11])\n\
    \  prime_words.push(words[12])\n  primes.push(prime_words[12])\n  prime_words.push(words[13])\n\
    \  primes.push(prime_words[13])\n  prime_words.push(words[14])\n  primes.push(prime_words[14])\n\
    \  prime_words.push(words[15])\n  primes.push(prime_words[15])\n  prime_words.push(words[16])\n\
    \  primes.push(prime_words[16])\n  prime_words.push(words[17])\n  primes.push(prime_words[17])\n\
    \  prime_words.push(words[18])\n  primes.push(prime_words[18])\n  prime_words.push(words[19])\n\
    \  primes.push(prime_words[19])\n  prime_words.push(words[20])\n  primes.push(prime_words[20])\n\
    \  prime_words.push(words[21])\n  primes.push(prime_words[21])\n  prime_words.push(words[22])\n\
    \  primes.push(prime_words[22])\n  prime_words.push(words[23])\n  primes.push(prime_words[23])\n\
    \  prime_words.push(words[24])\n  primes.push(prime_words[24])\n  prime_words.push(words[25",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  words.each do\
    \ |word|\n    word = word.downcase\n    word = word.gsub(/[^a-z]/, \"\")\n   \
    \ word = word.gsub(/\\s+/, \"\")\n    word = word.split(\"\")\n    word = word.select\
    \ {|x| x != \"\"}\n    word = word.map {|x| x.to_i}\n    word = word.select {|x|\
    \ x % 2 == 0}\n    word = word.map {|x| x.to_s}\n    word = word.join \" \"\n\
    \  end\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  new_words = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_", "  sentence = sentence.split(\" \").sort\n  result = []\n\
    \  for i in (0..sentence.length-1)\n    if sentence[i].to_s.length == sentence[i+1].to_s.length\n\
    \      result << sentence[i].to_s\n    end\n  end\n  result.join(\" \")\nend",
  "  sentence = sentence.downcase\n  words = sentence.split(' ')\n  new_words = []\n\
    \  new_words.concat words.select { |word| is_prime?(word.length) }\n  new_words.concat\
    \ words.select { |word| !is_prime?(word.length) }\n  new_words.join(' ')\nend",
  "  sentence = sentence.split(\" \").map { |word| word.downcase }\n  primes = Primes.new(sentence.length)\n\
    \  primes.primes.each do |prime|\n    prime_words = []\n    sentence.length.times\
    \ do |i|\n      prime_words << sentence[i] if primes.is_prime?(i)\n    end\n \
    \   prime_words.join(\" \")\n  end\nend", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  primes = []\n  prime_words = []\n  prime_word = \"\"\n  prime_word_count\
    \ = 0\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime_word_index =\
    \ 0\n  prime_word_length = nil\n  prime_word_index = 0\n  prime_word_length =\
    \ nil\n  prime_word_index = 0\n  prime_word_length = nil\n  prime", "  sentence\
    \ = sentence.split(\" \").map { |word| word.downcase }\n  prime_numbers = sentence.map\
    \ { |word| word.chars.map(&:to_i).reduce(:&) }\n  prime_numbers.select { |prime|\
    \ prime.is_a?(Fixnum) }.map { |prime| sentence[prime] }.join(\" \")\nend", " \
    \ sentence = sentence.downcase\n  words = sentence.split(\" \").map(&:downcase)\n\
    \  prime_numbers = words.map { |word| word.chars.map(&:to_i).reduce(:&) }\n  prime_numbers.sort.map\
    \ { |prime| words[prime] }.join\nend", "  sentence = sentence.split(\" \").sort\n\
    \  result = []\n  i = 0\n  while i < sentence.length\n    if sentence[i] != sentence[i+1]\n\
    \      result.push(sentence[i])\n      i += 1\n    else\n      i += 1\n    end\n\
    \  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\" \").map {\
    \ |word| word.downcase }\n  primes = Primes.new(sentence.length)\n  primes.primes\n\
    \  primes.primes.map { |i| sentence[i].length }.uniq.sort.map { |i| sentence[i]\
    \ }.join(\" \")\nend", "  sentence = sentence.downcase\n  words = sentence.split('\
    \ ')\n  new_words = []\n  new_sentence = ''\n  primes = []\n  prime_words = []\n\
    \  prime_sentence = ''\n  prime_word = ''\n  prime_word_count = 0\n  prime_word_index\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  new_words = []\n  new_words.concat words[0..(words.length-1)].select { |word|\
    \ is_prime?(word.length) }\n  new_words.concat words[words.length..-1].select\
    \ { |word| is_prime?(word.length) }\n  new_words.join(\" \")\nend", "  sentence\
    \ = sentence.split(\" \").sort\n  sentence.join(\" \")\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  primes = []\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n  prime_word_length\
    \ = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  words.each do\
    \ |word|\n    if word.length % 2 == 0\n      puts word\n    end\n  end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThe question says \"the order of the words\
    \ in the new string should be the same as the original one\"\n<|/ c |>\n<| c |>\n\
    Yes, I missed that part. Thanks for pointing it out.\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  words.each do |word|\n    word = word.downcase\n    prime_word(word)\n  end\n\
    \  words.join(\" \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_sentence = \"\"\n  primes = []\n  prime_words =\
    \ []\n  prime_sentence = \"\"\n  prime_primes = []\n  prime_prime_words = []\n\
    \  prime_prime_sentence = \"\"\n  prime_prime_primes = []\n  prime_prime_prime_words\
    \ = []\n  prime_prime_prime_sentence = \"\"\n  prime_prime_prime_primes = []\n\
    \  prime_prime_prime_prime_words = []\n  prime_prime_prime_prime_sentence = \"\
    \"\n  prime_prime_prime_prime_primes = []\n  prime_prime_prime_prime_prime_words\
    \ = []\n  prime_prime_prime_prime_prime_sentence = \"\"\n  prime_prime_prime_prime_prime_primes\
    \ = []\n  prime_prime_prime_prime_prime_prime_words = []\n  prime_prime_prime_prime_prime_prime_sentence\
    \ = \"\"\n  prime_prime_prime_prime_prime_prime_primes = []\n  prime_prime_prime_prime_prime_prime_prime_words\
    \ = []\n  prime_prime_prime_prime_prime_prime_prime_sentence = \"\"\n  prime_prime_prime_prime_prime_prime_prime_primes\
    \ = []\n  prime_prime_prime_prime_prime_prime_prime_prime_words = []\n  prime_prime_prime_prime_prime_prime_prime_prime_sentence\
    \ = \"\"\n  prime_prime_prime_prime_prime_prime_prime_prime_primes = []\n  prime_prime_prime_prime_prime_prime_prime_prime_prime_words\
    \ = []\n  prime_prime_prime_prime_prime_prime_prime_prime_prime_sentence = \"\"\
    \n  prime_prime_prime_prime_prime_prime_prime_prime_prime_primes = []\n  prime_prime_prime_prime_prime_prime_prime_prime_prime_words\
    \ = []\n  prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sentence\
    \ = \"\"\n  prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_primes\
    \ = []\n  prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_words =\
    \ []\n  prime_prime_prime_prime_prime_prime_prime", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.map!{|word| word.downcase}\n  words.map!{|word|\
    \ word.length}\n  words.map!{|word| word.split(\"\").map{|char| char.downcase}}\n\
    \  words.map!{|word| word.inject(:&).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inject(:*).to_s}\n  words.map!{|word| word.inject(:+).to_s}\n\
    \  words.map!{|word| word.inje", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_words.concat words.select { |word| word.length\
    \ == 1 }\n  new_words.concat words.select { |word| word.length == 2 }\n  new_words.concat\
    \ words.select { |word| word.length == 3 }\n  new_words.concat words.select {\
    \ |word| word.length == 4 }\n  new_words.concat words.select { |word| word.length\
    \ == 5 }\n  new_words.concat words.select { |word| word.length == 6 }\n  new_words.concat\
    \ words.select { |word| word.length == 7 }\n  new_words.concat words.select {\
    \ |word| word.length == 8 }\n  new_words.concat words.select { |word| word.length\
    \ == 9 }\n  new_words.concat words.select { |word| word.length == 10 }\n  new_words.concat\
    \ words.select { |word| word.length == 11 }\n  new_words.concat words.select {\
    \ |word| word.length == 12 }\n  new_words.concat words.select { |word| word.length\
    \ == 13 }\n  new_words.concat words.select { |word| word.length == 14 }\n  new_words.concat\
    \ words.select { |word| word.length == 15 }\n  new_words.concat words.select {\
    \ |word| word.length == 16 }\n  new_words.concat words.select { |word| word.length\
    \ == 17 }\n  new_words.concat words.select { |word| word.length == 18 }\n  new_words.concat\
    \ words.select { |word| word.length == 19 }\n  new_words.concat words.select {\
    \ |word| word.length == 20 }\n  new_words.concat words.select { |word| word.length\
    \ == 21 }\n  new_words.concat words.select { |word| word.length == 22 }\n  new_words.concat\
    \ words.select { |word| word.length == 23 }\n  new_words.concat words.select {\
    \ |word| word.length == 24 }\n  new_words.concat words.select { |word| word.length\
    \ == 25 }\n  new_words.concat words.select { |word| word.length == 26 }\n  new_words.concat\
    \ words.select { |word| word.length == 27 }\n  new_words.concat words.select {\
    \ |word| word.length == 28 }\n  new_words.concat words.select { |word| word.length\
    \ == 29 }\n  new_words.concat words.select { |word| word", "  sentence = sentence.split(\"\
    \ \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n    if sentence[i].to_s.length\
    \ % 2 == 0\n      result.push(sentence[i])\n    end\n    i += 1\n  end\n  result.join(\"\
    \ \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  words.each do |word|\n    word = word.downcase\n    word = word.gsub(/[^a-z]/,\
    \ \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.split(\"\")\n   \
    \ word.each do |letter|\n      prime = true\n      word.each do |w|\n        if\
    \ w.to_i.to_s == letter.to_i.to_s\n          prime = false\n          break\n\
    \        end\n      end\n      if prime\n        puts word\n      end\n    end\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,primes |>\n<| c |>\nThis doesn't work. Try\
    \ it with `sentence = \"lets go for swimming\"`\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it with `sentence = \"lets go for swimming\"`. What is the problem?\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `sentence = \"lets go for swimming\"`\n\
    <|/ c |>\n<| c |>\nI tested it with `sentence = \"lets go for swimming\"`. What\
    \ is the problem?\n<|/ c |>\n<| c |>\nIt doesn't work for `sentence = \"lets go\
    \ for swimming\"`\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat(words)\n\
    \  new_words.each do |word|\n    if word.length % 2 == 0\n      new_words.delete(word)\n\
    \    end\n  end\n  new_words.join(\" \")\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  primes\
    \ = []\n  prime = 0\n  prime_found = false\n  prime_found2 = false\n  prime_found3\
    \ = false\n  prime_found4 = false\n  prime_found5 = false\n  prime_found6 = false\n\
    \  prime_found7 = false\n  prime_found8 = false\n  prime_found9 = false\n  prime_found10\
    \ = false\n  prime_found11 = false\n  prime_found12 = false\n  prime_found13 =\
    \ false\n  prime_found14 = false\n  prime_found15 = false\n  prime_found16 = false\n\
    \  prime_found17 = false\n  prime_found18 = false\n  prime_found19 = false\n \
    \ prime_found20 = false\n  prime_found21 = false\n  prime_found22 = false\n  prime_found23\
    \ = false\n  prime_found24 = false\n  prime_found25 = false\n  prime_found26 =\
    \ false\n  prime_found27 = false\n  prime_found28 = false\n  prime_found29 = false\n\
    \  prime_found30 = false\n  prime_found31 = false\n  prime_found32 = false\n \
    \ prime_found33 = false\n  prime_found34 = false\n  prime_found35 = false\n  prime_found36\
    \ = false\n  prime_found37 = false\n  prime_found38 = false\n  prime_found39 =\
    \ false\n  prime_found40 = false\n  prime_found41 = false\n  prime_found42 = false\n\
    \  prime_found43 = false\n  prime_found44 = false\n  prime_found45 = false\n \
    \ prime_found46 = false\n  prime_found47 = false\n  prime_found48 = false\n  prime_found49\
    \ = false\n  prime_found50 = false\n  prime_found51 = false\n  prime_found52 =\
    \ false\n  prime_found53 = false\n  prime_found54 = false\n  prime_found55 = false\n\
    \  prime_found56 = false\n  prime_found57 = false\n  prime_found58 = false\n \
    \ prime_found59 = false\n  prime_found60 = false\n  prime_found61 = false\n  prime_found62\
    \ = false\n  prime_found63 = false\n  prime_found64 = false\n  prime_found65 =\
    \ false\n  prime_found66 = false\n  prime_found67 = false\n  ", "  sentence =\
    \ sentence.downcase\n  primes = Primes.primes\n  primes.each do |prime|\n    prime_sentence\
    \ = sentence.split(\" \").map { |word| word.downcase }\n    prime_sentence = prime_sentence.select\
    \ { |word| word.include?(prime) }\n    prime_sentence = prime_sentence.map { |word|\
    \ word.gsub(prime, \"\") }\n    prime_sentence = prime_sentence.join(' ')\n  \
    \  prime_sentence = prime_sentence.split(\" \").map { |word| word.downcase }\n\
    \    prime_sentence = prime_sentence.select { |word| word.include?(prime) }\n\
    \    prime_sentence = prime_sentence.map { |word| word.gsub(prime, \"\") }\n \
    \   prime_sentence = prime_sentence.join(' ')\n    prime_sentence = prime_sentence.split(\"\
    \ \").map { |word| word.downcase }\n    prime_sentence = prime_sentence.select\
    \ { |word| word.include?(prime) }\n    prime_sentence = prime_sentence.map { |word|\
    \ word.gsub(prime, \"\") }\n    prime_sentence = prime_sentence.join(' ')\n  \
    \  prime_sentence = prime_sentence.split(\" \").map { |word| word.downcase }\n\
    \    prime_sentence = prime_sentence.select { |word| word.include?(prime) }\n\
    \    prime_sentence = prime_sentence.map { |word| word.gsub(prime, \"\") }\n \
    \   prime_sentence = prime_sentence.join(' ')\n    prime_sentence = prime_sentence.split(\"\
    \ \").map { |word| word.downcase }\n    prime_sentence = prime_sentence.select\
    \ { |word| word.include?(prime) }\n    prime_sentence = prime_sentence.map { |word|\
    \ word.gsub(prime, \"\") }\n    prime_sentence = prime_sentence.join(' ')\n  \
    \  prime_sentence = prime_sentence.split(\" \").map { |word| word.downcase }\n\
    \    prime_sentence = prime_sentence.select { |word| word.include?(prime) }\n\
    \    prime_sentence = prime_sentence.map { |word| word.gsub(prime, \"\") }\n \
    \   prime_sentence = prime_sentence.join(' ')\n    prime_sentence = prime_sentence.split(\"\
    \ \").map { |word| word.downcase }\n    prime_sentence = prime_sentence.select\
    \ { |word| ", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  new_words = []\n  new_words.concat words[0...-1].map { |word| word.length\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1].map { |word| word.chars.to_a.uniq.sort.join.to_sym\
    \ }\n  new_words.concat words[0...-1]", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n\
    \    prime_words = []\n    prime_words += prime_words_from(word)\n    prime_words\
    \ += prime_words_from(word.reverse)\n    prime_words.uniq.each do |prime_word|\n\
    \      if prime_words.index(word) == prime_words.index(prime_word)\n        puts\
    \ prime_word\n      end\n    end\n  end\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  result = \"\"\n  primes = []\n  prime_words\
    \ = []\n  prime_words.push(words[0])\n  primes.push(prime_words[0])\n  prime_words.push(words[1])\n\
    \  primes.push(prime_words[1])\n  prime_words.push(words[2])\n  primes.push(prime_words[2])\n\
    \  prime_words.push(words[3])\n  primes.push(prime_words[3])\n  prime_words.push(words[4])\n\
    \  primes.push(prime_words[4])\n  prime_words.push(words[5])\n  primes.push(prime_words[5])\n\
    \  prime_words.push(words[6])\n  primes.push(prime_words[6])\n  prime_words.push(words[7])\n\
    \  primes.push(prime_words[7])\n  prime_words.push(words[8])\n  primes.push(prime_words[8])\n\
    \  prime_words.push(words[9])\n  primes.push(prime_words[9])\n  prime_words.push(words[10])\n\
    \  primes.push(prime_words[10])\n  prime_words.push(words[11])\n  primes.push(prime_words[11])\n\
    \  prime_words.push(words[12])\n  primes.push(prime_words[12])\n  prime_words.push(words[13])\n\
    \  primes.push(prime_words[13])\n  prime_words.push(words[14])\n  primes.push(prime_words[14])\n\
    \  prime_words.push(words[15])\n  primes.push(prime_words[15])\n  prime_words.push(words[16])\n\
    \  primes.push(prime_words[16])\n  prime_words.push(words[17])\n  primes.push(prime_words[17])\n\
    \  prime_words.push(words[18])\n  primes.push(prime_words[18])\n  prime_words.push(words[19])\n\
    \  primes.push(prime_words[19])\n  prime_words.push(words[20])\n  primes.push(prime_words[20])\n\
    \  prime_words.push(words[21])\n  primes.push(prime_words[21])\n  prime_words.push(words[22])\n\
    \  primes.push(prime_words[22])\n  prime_words.push(words[23])\n  primes.push(prime_words[23])\n\
    \  prime_words.push(words[24])\n  primes.push(prime_words[24])\n  prime_words.push(words[25",
  "  sentence = sentence.split(\" \").sort\n  new_sentence = sentence.join(\" \")\n\
    \  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.strip\n\
    \    next if word.empty?\n    next if word.chars.any? { |c| !c.ascii_only? }\n\
    \    next if word.chars.any? { |c| c.ascii_only? }\n    next if word.chars.any?\
    \ { |c| c.ascii_only? && c.ascii_only? }\n    next if word.chars.any? { |c| c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? }\n    next if word.chars.any? { |c| c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? && c.ascii_only? }\n    next if word.chars.any?\
    \ { |c| c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only?\
    \ }\n    next if word.chars.any? { |c| c.ascii_only? && c.ascii_only? && c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? && c.ascii_only? }\n    next if word.chars.any?\
    \ { |c| c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? }\n    next if word.chars.any? { |c| c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? }\n    next if word.chars.any? { |c| c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? && c.ascii_only? }\n    next if word.chars.any?\
    \ { |c| c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only?\
    \ }\n    next if word.chars.any? { |c| c.ascii_only? && c.ascii_only? && c.ascii_only?\
    \ && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only? && c.ascii_only?\
    \ && c.ascii_only? && ", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_sentence = \"\"\n  new_sentence = sentence\n  words.each\
    \ do |word|\n    word = word.downcase\n    prime_word = (2..word.length).to_a.select\
    \ { |i| word.length % i == 0 }\n    if prime_word.length > 0\n      new_words.push(word)\n\
    \    end\n  end\n  new_words.each do |word|\n    new_sentence << \" #{word}\"\n\
    \  end\n  new_sentence\nend", "  sentence = sentence.split(\" \").sort\n  result\
    \ = []\n  i = 0\n  while i < sentence.length\n    if sentence[i].to_s.length %\
    \ 2 == 0\n      result.push(sentence[i])\n      i += 1\n    else\n      i += 1\n\
    \    end\n  end\n  result.join(\" \")\nend\n</code>\n<|/ a tags=ruby |>\n<| c\
    \ |>\n`sentence = sentence.split(\" \").sort` will sort the array in place, meaning\
    \ it will change the original array. `sentence = sentence.split(\" \").sort!`\
    \ will sort the array in place and return the sorted array. `sentence = sentence.split(\"\
    \ \").sort` will sort the array in place and return the sorted array. `sentence\
    \ = sentence.split(\" \").sort!` will sort the array in place and return the sorted\
    \ array. `sentence = sentence.split(\" \").sort` will sort the array in place\
    \ and return the sorted array. `sentence = sentence.split(\" \").sort!` will sort\
    \ the array in place and return the sorted array. `sentence = sentence.split(\"\
    \ \").sort` will sort the array in place and return the sorted array. `sentence\
    \ = sentence.split(\" \").sort!` will sort the array in place and return the sorted\
    \ array. `sentence = sentence.split(\" \").sort` will sort the array in place\
    \ and return the sorted array. `sentence = sentence.split(\" \").sort!` will sort\
    \ the array in place and return the sorted array. `sentence = sentence.split(\"\
    \ \").sort` will sort the array in place and return the sorted array. `sentence\
    \ = sentence.split(\" \").sort!` will sort the array in place and return the sorted\
    \ array. `sentence = sentence.split(\" \").sort` will sort the array in place\
    \ and return the sorted array. `sentence = sentence.split(\" \").sort!` will sort\
    \ the array in place and return the sorted array. `sentence = sentence.split(\"\
    \ \").sort` will sort the array in place and return the sorted array. `sentence\
    \ = sentence.split(\" \").sort!` will sort the array in place and return the sorted\
    \ array. `sentence = sentence.split(\" \").sort` will sort the array in place\
    \ and return the sorted array. `sentence = sentence.split(\" \").sort!` will sort\
    \ the array in place and return the sorted array. `sentence = sentence.split(\"\
    \ \").sort` will sort the array in place and return the sorted array. `sentence\
    \ = sentence.split(\" \").sort!` will sort the array in place and return the sorted\
    \ array. `sentence = sentence.split(\" \").sort` will sort the array in place\
    \ and return the sorted array. `sentence = sentence.split(\" \").sort!", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_sentence\
    \ = \"\"\n  primes = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \").map { |word| word.downcase }\n  primes = words.map {\
    \ |word| word.prime? }\n  primes.uniq.map { |prime| words.select { |word| prime\
    \ == word.prime? } }.join(\" \")\nend", "  sentence = sentence.split(\" \").sort\n\
    \  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n",
  "  sentence = sentence.split(\" \").sort\n  sentence.length.prime?\n  sentence.join\n\
    end", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  words.map!{|word|\
    \ word.strip}\n  words.map!{|word| word.length}\n  primes = Primes.new(words)\n\
    \  primes.primes\n  primes.to_sentence\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(' ')\n  words.map!{|word| word.strip}\n  words.map!{|word|\
    \ word.downcase}\n  words.map!{|word| word.gsub(/[^a-z]/, '')}\n  words.map!{|word|\
    \ word.gsub(/\\s+/, ' ').split.map(&:capitalize).join(' ')}\n  words.map!{|word|\
    \ word.split.map(&:capitalize).join(' ')}\n  words.map!{|word| word.split.map(&:capitalize).join('\
    \ ')}\n  words.map!{|word| word.split.map(&:capitalize).join(' ')}\n  words.map!{|word|\
    \ word.split.map(&:capitalize).join(' ')}\n  words.map!{|word| word.split.map(&:capitalize).join('\
    \ ')}\n  words.map!{|word| word.split.map(&:capitalize).join(' ')}\n  words.map!{|word|\
    \ word.split.map(&:capitalize).join(' ')}\n  words.map!{|word| word.split.map(&:capitalize).join('\
    \ ')}\n  words.map!{|word| word.split.map(&:capitalize).join(' ')}\n  words.map!{|word|\
    \ word.split.map(&:capitalize).join(' ')}\n  words.map!{|word| word.split.map(&:capitalize).join('\
    \ ')}\n  words.map!{|word| word.split.map(&:capitalize).join(' ')}\n  words.map!{|word|\
    \ word.split.map(&:capitalize).join(' ')}\n  words.map!{|word| word.split.map(&:capitalize).join('\
    \ ')}\n  words.map!{|word| word.split.map(&:capitalize).join(' ')}\n  words.map!{|word|\
    \ word.split.map(&:capitalize).join(' ')}\n  words.map!{|word| word.split.map(&:capitalize).join('\
    \ ')}\n  words.map!{|word| word.split.map(&:capitalize).join(' ')}\n  words.map!{|word|\
    \ word.split.map(&:capitalize).join(' ')}\n  words.map!{|word| word.split.map(&:capitalize).join('\
    \ ')}\n  words.map!{|word| word.split.map(&:capitalize).join(' ')}\n  words.map!{|word|\
    \ word.split.map(&:capitalize).join(' ')}\n  words.map!{|word| word.split.map(",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  result = \"\"\
    \n  primes = []\n  prime_counter = 0\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  prime_words = []\n  prime_words.push(sentence[0])\n\
    \  prime_words.each do |word|\n    prime_words.each do |other_word|\n      prime_words.push(other_word)\n\
    \      prime_words.each do |third_word|\n        prime_words.each do |fourth_word|\n\
    \          prime_words.each do |fifth_word|\n            prime_words.each do |sixth_word|\n\
    \              prime_words.each do |seventh_word|\n                prime_words.each\
    \ do |eighth_word|\n                  prime_words.each do |ninth_word|\n     \
    \               prime_words.each do |tenth_word|\n                      prime_words.each\
    \ do |eleventh_word|\n                        prime_words.each do |twelfth_word|\n\
    \                          prime_words.each do |thirteenth_word|\n           \
    \                 prime_words.each do |fourteenth_word|\n                    \
    \          prime_words.each do |fifteenth_word|\n                            \
    \    prime_words.each do |sixteenth_word|\n                                  prime_words.each\
    \ do |seventeenth_word|\n                                    prime_words.each\
    \ do |eighteenth_word|\n                                      prime_words.each\
    \ do |nineteenth_word|\n                                        prime_words.each\
    \ do |twentyth_word|\n                                          prime_words.each\
    \ do |twentyoneth_word|\n                                            prime_words.each\
    \ do |twentytwoth_word|\n                                              prime_words.each\
    \ do |twentythreeth_word|\n                                                prime_words.each\
    \ do |twentyfourth_word|\n                                                  prime_words.each\
    \ do |twentyfiveth_word|\n                                                   \
    \ prime_words.each do |twentysix_word|\n                                     \
    \                 prime_words.each do |twentyseventh_word|\n                 \
    \                                       prime_words.each do |twentyeighth_word|\n\
    \                                                          prime_words.each do\
    \ |twentyninth_word|\n                                                       \
    \     prime_words.each do |twentytenth_word|\n                               \
    \                               prime_words.each do |twentyeleventh_word|\n  \
    \                                                              prime_words.each\
    \ do |twentytwelfth_word|\n                                                  \
    \                prime_words.each do |twentythirteenth_word|\n               \
    \                                                     prime_words.each do |twentyfourteenth_word|\n\
    \                                                                      prime_words.each\
    \ do |twentyfifteenth_word|\n                                                \
    \                        prime_words.each do |twentysixteenth_word|\n        \
    \                                                                  prime_", " \
    \ sentence = sentence.downcase\n  words = sentence.split(\" \")\n  result = \"\
    \"\n  primes = []\n  primes.each do |prime|\n    prime = prime.to_i\n    primes.each\
    \ do |prime2|\n      prime2 = prime2.to_i\n      if prime * prime2 == prime2\n\
    \        primes.delete(prime2)\n        break\n      end\n    end\n  end\n  words.each\
    \ do |word|\n    word = word.downcase\n    primes.each do |prime|\n      prime\
    \ = prime.to_i\n      primes.each do |prime2|\n        prime2 = prime2.to_i\n\
    \        if prime * prime2 == prime2\n          primes.delete(prime2)\n      \
    \    break\n        end\n      end\n    end\n    result << word\n  end\n  result\n\
    end", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_sentence\
    \ = \"\"\n  prime_numbers = PrimeNumbers.new(words)\n  prime_numbers.each do |prime_number|\n\
    \    new_sentence << words[prime_number]\n  end\n  new_sentence\nend", "  sentence\
    \ = sentence.split(\" \").map(&:capitalize).join(\" \")\n  primes = Primes.primes(sentence.length)\n\
    \  primes.each do |prime|\n    sentence.gsub!(/\\b#{prime}\\b/, \"\")\n  end\n\
    \  sentence\nend\n</code>\n<|/ a tags=ruby,primes |>\n<| c |>\nThe OP wants the\
    \ words to be in the same order as the original sentence. Your solution does not\
    \ do that.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the\
    \ answer.\n<|/ c |>\n<| a tags=ruby,primes |>\n<code>", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  primes = []\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n  prime_word_index2\
    \ = 0\n  prime_word_index3 = 0\n  prime_word_index4 = 0\n  prime_word_index5 =\
    \ 0\n  prime_word_index6 = 0\n  prime_word_index7 = 0\n  prime_word_index8 = 0\n\
    \  prime_word_index9 = 0\n  prime_word_index10 = 0\n  prime_word_index11 = 0\n\
    \  prime_word_index12 = 0\n  prime_word_index13 = 0\n  prime_word_index14 = 0\n\
    \  prime_word_index15 = 0\n  prime_word_index16 = 0\n  prime_word_index17 = 0\n\
    \  prime_word_index18 = 0\n  prime_word_index19 = 0\n  prime_word_index20 = 0\n\
    \  prime_word_index21 = 0\n  prime_word_index22 = 0\n  prime_word_index23 = 0\n\
    \  prime_word_index24 = 0\n  prime_word_index25 = 0\n  prime_word_index26 = 0\n\
    \  prime_word_index27 = 0\n  prime_word_index28 = 0\n  prime_word_index29 = 0\n\
    \  prime_word_index30 = 0\n  prime_word_index31 = 0\n  prime_word_index32 = 0\n\
    \  prime_word_index33 = 0\n  prime_word_index34 = 0\n  prime_word_index35 = 0\n\
    \  prime_word_index36 = 0\n  prime_word_index37 = 0\n  prime_word_index38 = 0\n\
    \  prime_word_index39 = 0\n  prime_word_index40 = 0\n  prime_word_index41 = 0\n\
    \  prime_word_index42 = 0\n  prime_word_index43 = 0\n  prime_word_index44 = 0\n\
    \  prime_word_index45 = 0\n  prime_word_index46 = 0\n  prime_word_index47 = 0\n\
    \  prime_word_index48 = 0\n  prime_word_index49 = 0\n  prime_word_index50 = 0\n\
    \  prime_word_index51 = 0\n  prime_word_index52 = 0\n  prime_word_index53 = 0\n\
    \  prime_word_index54 = 0\n  prime_word_index55 = 0\n  prime_word_index56 = 0\n\
    \  prime_word_index57 = 0\n  prime_word_index58 = 0\n  prime_word_index59 = 0\n\
    \  prime_word_index60 = 0", "  sentence = sentence.split(\" \").sort\n  result\
    \ = []\n  i = 0\n  while i < sentence.length\n    word = sentence[i]\n    i +=\
    \ 1\n    if word.length % 2 == 0\n      result.push(word)\n    end\n  end\n  result.join(\"\
    \ \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  new_words = []\n  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length != prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word.length == prime_number(word.length)}\n\
    \  new_words.concat words.select {|word| word", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_index2 = 0\n  prime_word_index3 = 0\n  prime_word_index4 = 0\n \
    \ prime_word_index5 = 0\n  prime_word_index6 = 0\n  prime_word_index7 = 0\n  prime_word_index8\
    \ = 0\n  prime_word_index9 = 0\n  prime_word_index10 = 0\n  prime_word_index11\
    \ = 0\n  prime_word_index12 = 0\n  prime_word_index13 = 0\n  prime_word_index14\
    \ = 0\n  prime_word_index15 = 0\n  prime_word_index16 = 0\n  prime_word_index17\
    \ = 0\n  prime_word_index18 = 0\n  prime_word_index19 = 0\n  prime_word_index20\
    \ = 0\n  prime_word_index21 = 0\n  prime_word_index22 = 0\n  prime_word_index23\
    \ = 0\n  prime_word_index24 = 0\n  prime_word_index25 = 0\n  prime_word_index26\
    \ = 0\n  prime_word_index27 = 0\n  prime_word_index28 = 0\n  prime_word_index29\
    \ = 0\n  prime_word_index30 = 0\n  prime_word_index31 = 0\n  prime_word_index32\
    \ = 0\n  prime_word_index33 = 0\n  prime_word_index34 = 0\n  prime_word_index35\
    \ = 0\n  prime_word_index36 = 0\n  prime_word_index37 = 0\n  prime_word_index38\
    \ = 0\n  prime_word_index39 = 0\n  prime_word_index40 = 0\n  prime_word_index41\
    \ = 0\n  prime_word_index42 = 0\n  prime_word_index43 = 0\n  prime_word_index44\
    \ = 0\n  prime_word_index45 = 0\n  prime_word_index46 = 0\n  prime_word_index47\
    \ = 0\n  prime_word_index48 = 0\n  prime_word_index49 = 0\n  prime_word_index50\
    \ = 0\n  prime_word_index51 = 0\n  prime_word_index52 = 0\n  prime_word_index53\
    \ = 0\n  prime_word_index54 = 0\n  prime_word_index55 = 0\n  prime_word_index56\
    \ = 0\n  prime_word_index57 = 0\n  prime_word_index58 = 0\n  prime_word_index59\
    \ = 0\n  prime", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  words.each do |word|\n    word = word.strip\n    if word.length % 2 ==\
    \ 0\n      word = word.split(\"\")\n      word.each do |letter|\n        if !is_prime(letter.length)\n\
    \          word.delete(letter)\n        end\n      end\n      sentence = sentence.split(\"\
    \ \").join(\" \").strip\n    end\n  end\n  sentence\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  primes = []\n  prime_words = []\n  prime_word = \"\"\
    \n  prime_word_count = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_", "  sentence = sentence.split(\" \"\
    ).sort\n  result = []\n  i = 0\n  while i < sentence.length\n    if sentence[i].to_s.length\
    \ == 0 \n      i += 1\n      next\n    end\n    result.push(sentence[i])\n   \
    \ i += 1\n  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\" \"\
    ).map { |word| word.downcase }\n  primes = []\n  prime_numbers = 2\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n  prime_numbers\
    \ += prime_numbers + 1\n  prime_numbers += prime_numbers + 1\n", "  sentence =\
    \ sentence.downcase\n  words = sentence.split(\" \")\n  result = \"\"\n  primes\
    \ = []\n  prime_counter = 0\n  prime_numbers = prime_numbers_upto(words.length)\n\
    \  prime_numbers.each do |prime|\n    prime_counter += prime\n  end\n  prime_numbers.each\
    \ do |prime|\n    prime_counter -= prime\n    if prime_counter == 0\n      primes\
    \ << prime\n    end\n  end\n  primes.each do |prime|\n    words.each do |word|\n\
    \      if word.length == prime\n        result << word\n      end\n    end\n \
    \ end\n  result\nend", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  primes = []\n  prime_words = []\n  prime_word = \"\"\n  prime_word_count\
    \ = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  words.map!{|word| word.downcase}\n  words.map!{|word|\
    \ word.gsub(/[^a-z]/, \"\")}\n  words.map!{|word| word.split(\" \").map{|word|\
    \ word.length}.max}\n  words.map!{|word| word.length}\n  words.map!{|word| word.length.prime?}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.join}\nend", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat\
    \ words.select { |word| is_prime?(word.length) }\n  new_words.sort!\n  new_words.join(\"\
    \ \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  result = \"\"\n  primes = []\n  primes.push 2\n  primes.push 3\n  primes.push\
    \ 5\n  primes.push 7\n  primes.push 11\n  primes.push 13\n  primes.push 17\n \
    \ primes.push 19\n  primes.push 23\n  primes.push 29\n  primes.push 31\n  primes.push\
    \ 37\n  primes.push 41\n  primes.push 43\n  primes.push 47\n  primes.push 53\n\
    \  primes.push 59\n  primes.push 61\n  primes.push 67\n  primes.push 71\n  primes.push\
    \ 73\n  primes.push 79\n  primes.push 83\n  primes.push 89\n  primes.push 97\n\
    \  primes.push 101\n  primes.push 103\n  primes.push 107\n  primes.push 109\n\
    \  primes.push 113\n  primes.push 127\n  primes.push 131\n  primes.push 137\n\
    \  primes.push 139\n  primes.push 149\n  primes.push 151\n  primes.push 157\n\
    \  primes.push 163\n  primes.push 167\n  primes.push 173\n  primes.push 179\n\
    \  primes.push 181\n  primes.push 191\n  primes.push 193\n  primes.push 197\n\
    \  primes.push 199\n  primes.push 211\n  primes.push 223\n  primes.push 227\n\
    \  primes.push 229\n  primes.push 233\n  primes.push 239\n  primes.push 241\n\
    \  primes.push 243\n  primes.push 247\n  primes.push 251\n  primes.push 257\n\
    \  primes.push 263\n  primes.push 269\n  primes.push 271\n  primes.push 277\n\
    \  primes.push 281\n  primes.push 283\n  primes.push 293\n  primes.push 307\n\
    \  primes.push 311\n  primes.push 313\n  primes.push 317\n  primes.push 331\n\
    \  primes.push 337\n  primes.push 347\n  primes.push 349\n  primes.push 353\n\
    \  primes.push 359\n  primes.push 367\n  primes.push 373\n  primes.push 379\n\
    \  primes.push 383\n  primes.push ", "  sentence = sentence.split(\" \").sort\n\
    \  new_sentence = \"\"\n  prime_numbers = []\n  prime_numbers_index = 0\n  prime_numbers_size\
    \ = 2\n  while prime_numbers_index < prime_numbers_size\n    prime_numbers_size\
    \ *= 2\n    prime_numbers_index = 0\n    while prime_numbers_index < prime_numbers_size\n\
    \      prime_numbers_index += prime_numbers_size\n      prime_numbers_size *=\
    \ 2\n    end\n    prime_numbers_index -= 1\n    prime_numbers.push(sentence[prime_numbers_index])\n\
    \  end\n  prime_numbers.each do |prime_number|\n    new_sentence += sentence[prime_number]\n\
    \  end\n  return new_sentence\nend", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  primes = []\n  prime_words = []\n  prime_word = \"\
    \"\n  prime_word_count = 0\n  prime_word_index = 0\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime_word_index = nil\n  prime_word_length = nil\n  prime_word_index = nil\n\
    \  prime_word_length = nil\n  prime_word_index = nil\n  prime_word_length = nil\n\
    \  prime", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  words.map!{|word| word.strip}\n  words.map!{|word| word.downcase}\n  words.map!{|word|\
    \ word.length}\n  words.map!{|word| word.split(//).map{|w| w.to_i}}\n  words.map!{|word|\
    \ word.sort.map{|w| w}}\n  words.map!{|word| word.uniq}\n  words.map!{|word| word.map{|w|\
    \ w.to_i}}\n  words.map!{|word| word.sort.map{|w| w}}\n  words.map!{|word| word.uniq}\n\
    \  words.map!{|word| word.map{|w| w.to_i}}\n  words.map!{|word| word.sort.map{|w|\
    \ w}}\n  words.map!{|word| word.uniq}\n  words.map!{|word| word.map{|w| w.to_i}}\n\
    \  words.map!{|word| word.sort.map{|w| w}}\n  words.map!{|word| word.uniq}\n \
    \ words.map!{|word| word.map{|w| w.to_i}}\n  words.map!{|word| word.sort.map{|w|\
    \ w}}\n  words.map!{|word| word.uniq}\n  words.map!{|word| word.map{|w| w.to_i}}\n\
    \  words.map!{|word| word.sort.map{|w| w}}\n  words.map!{|word| word.uniq}\n \
    \ words.map!{|word| word.map{|w| w.to_i}}\n  words.map!{|word| word.sort.map{|w|\
    \ w}}\n  words.map!{|word| word.uniq}\n  words.map!{|word| word.map{|w| w.to_i}}\n\
    \  words.map!{|word| word.sort.map{|w| w}}\n  words.map!{|word| word.uniq}\n \
    \ words.map!{|word| word.map{|w| w.to_i}}\n  words.map!{|word| word.sort.map{|w|\
    \ w}}\n  words.map!{|word| word.uniq}\n  words.map!{|word| word.map", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  primes\
    \ = []\n  prime_words = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index\
    \ = 0\n  prime_word_index2 = 0\n  prime_word_index3 = 0\n  prime_word_index4 =\
    \ 0\n  prime_word_index5 = 0\n  prime_word_index6 = 0\n  prime_word_index7 = 0\n\
    \  prime_word_index8 = 0\n  prime_word_index9 = 0\n  prime_word_index10 = 0\n\
    \  prime_word_index11 = 0\n  prime_word_index12 = 0\n  prime_word_index13 = 0\n\
    \  prime_word_index14 = 0\n  prime_word_index15 = 0\n  prime_word_index16 = 0\n\
    \  prime_word_index17 = 0\n  prime_word_index18 = 0\n  prime_word_index19 = 0\n\
    \  prime_word_index20 = 0\n  prime_word_index21 = 0\n  prime_word_index22 = 0\n\
    \  prime_word_index23 = 0\n  prime_word_index24 = 0\n  prime_word_index25 = 0\n\
    \  prime_word_index26 = 0\n  prime_word_index27 = 0\n  prime_word_index28 = 0\n\
    \  prime_word_index29 = 0\n  prime_word_index30 = 0\n  prime_word_index31 = 0\n\
    \  prime_word_index32 = 0\n  prime_word_index33 = 0\n  prime_word_index34 = 0\n\
    \  prime_word_index35 = 0\n  prime_word_index36 = 0\n  prime_word_index37 = 0\n\
    \  prime_word_index38 = 0\n  prime_word_index39 = 0\n  prime_word_index40 = 0\n\
    \  prime_word_index41 = 0\n  prime_word_index42 = 0\n  prime_word_index43 = 0\n\
    \  prime_word_index44 = 0\n  prime_word_index45 = 0\n  prime_word_index46 = 0\n\
    \  prime_word_index47 = 0\n  prime_word_index48 = 0\n  prime_word_index49 = 0\n\
    \  prime_word_index50 = 0\n  prime_word_index51 = 0\n  prime_word_index52 = 0\n\
    \  prime_word_index53 = 0\n  prime_word_index54 = 0\n  prime_word_index55 = 0\n\
    \  prime_word_index56 = 0\n  prime_word_index57 = 0\n  prime_word_index58 = 0\n\
    \  prime_word_index59 = 0\n  prime", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \").map(&:downcase)\n  prime_numbers = words.map { |word|\
    \ word.prime? }\n  prime_numbers.sort.join(\" \")\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  primes\
    \ = []\n  prime = 0\n  prime_found = false\n  prime_found2 = false\n  prime_found3\
    \ = false\n  prime_found4 = false\n  prime_found5 = false\n  prime_found6 = false\n\
    \  prime_found7 = false\n  prime_found8 = false\n  prime_found9 = false\n  prime_found10\
    \ = false\n  prime_found11 = false\n  prime_found12 = false\n  prime_found13 =\
    \ false\n  prime_found14 = false\n  prime_found15 = false\n  prime_found16 = false\n\
    \  prime_found17 = false\n  prime_found18 = false\n  prime_found19 = false\n \
    \ prime_found20 = false\n  prime_found21 = false\n  prime_found22 = false\n  prime_found23\
    \ = false\n  prime_found24 = false\n  prime_found25 = false\n  prime_found26 =\
    \ false\n  prime_found27 = false\n  prime_found28 = false\n  prime_found29 = false\n\
    \  prime_found30 = false\n  prime_found31 = false\n  prime_found32 = false\n \
    \ prime_found33 = false\n  prime_found34 = false\n  prime_found35 = false\n  prime_found36\
    \ = false\n  prime_found37 = false\n  prime_found38 = false\n  prime_found39 =\
    \ false\n  prime_found40 = false\n  prime_found41 = false\n  prime_found42 = false\n\
    \  prime_found43 = false\n  prime_found44 = false\n  prime_found45 = false\n \
    \ prime_found46 = false\n  prime_found47 = false\n  prime_found48 = false\n  prime_found49\
    \ = false\n  prime_found50 = false\n  prime_found51 = false\n  prime_found52 =\
    \ false\n  prime_found53 = false\n  prime_found54 = false\n  prime_found55 = false\n\
    \  prime_found56 = false\n  prime_found57 = false\n  prime_found58 = false\n \
    \ prime_found59 = false\n  prime_found60 = false\n  prime_found61 = false\n  prime_found62\
    \ = false\n  prime_found63 = false\n  prime_found64 = false\n  prime_found65 =\
    \ false\n  prime_found66 = false\n  prime_found67 = false\n  ", "  sentence =\
    \ sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat\
    \ words[0..(words.length-1)]\n  new_words.concat words[1..words.length]\n  new_words.concat\
    \ words[2..words.length]\n  new_words.concat words[3..words.length]\n  new_words.concat\
    \ words[4..words.length]\n  new_words.concat words[5..words.length]\n  new_words.concat\
    \ words[6..words.length]\n  new_words.concat words[7..words.length]\n  new_words.concat\
    \ words[8..words.length]\n  new_words.concat words[9..words.length]\n  new_words.concat\
    \ words[10..words.length]\n  new_words.concat words[11..words.length]\n  new_words.concat\
    \ words[12..words.length]\n  new_words.concat words[13..words.length]\n  new_words.concat\
    \ words[14..words.length]\n  new_words.concat words[15..words.length]\n  new_words.concat\
    \ words[16..words.length]\n  new_words.concat words[17..words.length]\n  new_words.concat\
    \ words[18..words.length]\n  new_words.concat words[19..words.length]\n  new_words.concat\
    \ words[20..words.length]\n  new_words.concat words[21..words.length]\n  new_words.concat\
    \ words[22..words.length]\n  new_words.concat words[23..words.length]\n  new_words.concat\
    \ words[24..words.length]\n  new_words.concat words[25..words.length]\n  new_words.concat\
    \ words[26..words.length]\n  new_words.concat words[27..words.length]\n  new_words.concat\
    \ words[28..words.length]\n  new_words.concat words[29..words.length]\n  new_words.concat\
    \ words[30..words.length]\n  new_words.concat words[30..words.length]\n  new_words.concat\
    \ words[30..words.length]\n  new_words.concat words[30..words.length]\n  new_words.concat\
    \ words[30..words.length]\n  new_words.concat words[30..words.length]\n  new_words.concat\
    \ words[30..words.length]\n  new_words.concat words[30..words.length]", "  sentence\
    \ = sentence.split(\" \").map { |word| word.downcase }\n  prime_words = []\n \
    \ prime_words += sentence.select { |word| prime_words.include?(word) ? false :\
    \ prime_words.include?(word) ? true : prime_words.include?(word.length) ? false\
    \ : prime_words.include?(word.length) ? true : prime_words.include?(word.length.to_i)\
    \ ? false : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word.length.to_i) ? true : prime_words.include?(word.length.to_i)\
    \ ? true : prime_words.include?(word", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  primes = []\n\
    \  prime = 0\n  prime_found = false\n  prime_found2 = false\n  prime_found3 =\
    \ false\n  prime_found4 = false\n  prime_found5 = false\n  prime_found6 = false\n\
    \  prime_found7 = false\n  prime_found8 = false\n  prime_found9 = false\n  prime_found10\
    \ = false\n  prime_found11 = false\n  prime_found12 = false\n  prime_found13 =\
    \ false\n  prime_found14 = false\n  prime_found15 = false\n  prime_found16 = false\n\
    \  prime_found17 = false\n  prime_found18 = false\n  prime_found19 = false\n \
    \ prime_found20 = false\n  prime_found21 = false\n  prime_found22 = false\n  prime_found23\
    \ = false\n  prime_found24 = false\n  prime_found25 = false\n  prime_found26 =\
    \ false\n  prime_found27 = false\n  prime_found28 = false\n  prime_found29 = false\n\
    \  prime_found30 = false\n  prime_found31 = false\n  prime_found32 = false\n \
    \ prime_found33 = false\n  prime_found34 = false\n  prime_found35 = false\n  prime_found36\
    \ = false\n  prime_found37 = false\n  prime_found38 = false\n  prime_found39 =\
    \ false\n  prime_found40 = false\n  prime_found41 = false\n  prime_found42 = false\n\
    \  prime_found43 = false\n  prime_found44 = false\n  prime_found45 = false\n \
    \ prime_found46 = false\n  prime_found47 = false\n  prime_found48 = false\n  prime_found49\
    \ = false\n  prime_found50 = false\n  prime_found51 = false\n  prime_found52 =\
    \ false\n  prime_found53 = false\n  prime_found54 = false\n  prime_found55 = false\n\
    \  prime_found56 = false\n  prime_found57 = false\n  prime_found58 = false\n \
    \ prime_found59 = false\n  prime_found60 = false\n  prime_found61 = false\n  prime_found62\
    \ = false\n  prime_found63 = false\n  prime_found64 = false\n  prime_found65 =\
    \ false\n  prime_found66 = false\n  prime_found67 = false\n  ", "  sentence =\
    \ sentence.split(\" \").sort\n  sentence.length.prime?\n  sentence.join\nend",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  words.map!{|word|\
    \ word.downcase}\n  words.map!{|word| word.length}\n  words.map!{|word| word.split(\"\
    \").map{|char| char.downcase}}\n  words.map!{|word| word.inject(:+)}\n  words.map!{|word|\
    \ word.inject(:*)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:+)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.map!{|word| word.inject(:==)}\n  words.map!{|word|\
    \ word.inject(:==)}\n  words.", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n  prime_numbers\
    \ = []\n  prime_numbers_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  ", "  sentence = sentence.split(\" \").sort\n  result = []\n  for i\
    \ in 0...sentence.length\n    if sentence[i] % 2 == 0\n      result.push(sentence[i])\n\
    \    end\n  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\" \"\
    ).sort\n  result = []\n  i = 0\n  while i < sentence.length\n    if sentence[i].to_s.length\
    \ == 1 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s\n      i += 1\n    elsif sentence[i].to_s.length\
    \ == 2 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s.chars.first\n      i += 1\n    elsif sentence[i].to_s.length\
    \ == 3 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s.chars.first\n      i += 1\n    elsif sentence[i].to_s.length\
    \ == 4 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s.chars.first\n      i += 1\n    elsif sentence[i].to_s.length\
    \ == 5 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s.chars.first\n      i += 1\n    elsif sentence[i].to_s.length\
    \ == 6 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s.chars.first\n      i += 1\n    elsif sentence[i].to_s.length\
    \ == 7 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s.chars.first\n      i += 1\n    elsif sentence[i].to_s.length\
    \ == 8 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s.chars.first\n      i += 1\n    elsif sentence[i].to_s.length\
    \ == 9 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s.chars.first\n      i += 1\n    elsif sentence[i].to_s.length\
    \ == 10 && sentence[i].to_s.chars.all? { |c| c.to_i >= 'a' && c.to_i <= 'z' }\n\
    \      result << sentence[i].to_s.chars.first\n      i += 1\n    elsif sentence[i].",
  "  sentence = sentence.split(\" \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n\
    \    word = sentence[i]\n    i += 1\n    if word.length % 2 == 0\n      result.push(word)\n\
    \    end\n  end\n  result.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    words_in_sentence(\"This is a test\")\n</cell>\n<code language=julia-1.0>\nwords_in_sentence(\"\
    lets go for swimming\")\n</cell>\n<code language=julia-1.0>\nwords_in_sentence(\"\
    lets go for swimming today\")\n</cell>\n<code language=julia-1.0>\nwords_in_sentence(\"\
    lets go for swimming today and tomorrow\")\n</cell>\n<code language=julia-1.0>\n\
    words_in_sentence(\"lets go for swimming today and tomorrow and yesterday\")\n\
    </cell>\n<code language=julia-1.0>\nwords_in_sentence(\"lets go for swimming today\
    \ and tomorrow and yesterday and one and two\")\n</cell>\n<code language=julia-1.0>\n\
    words_in_sentence(\"lets go for swimming today and tomorrow and yesterday and\
    \ one and two and three and four\")\n</cell>\n<code language=julia-1.0>\nwords_in_sentence(\"\
    lets go for swimming today and tomorrow and yesterday and one and two and three\
    \ and four and five and six and seven and eight and nine and ten\")\n</cell>\n\
    <code language=julia-1.0>\nwords_in_sentence(\"lets go for swimming today and\
    \ tomorrow and yesterday and one and two and three and four and five and six and\
    \ seven and eight and nine and ten and eleven and twelve\")\n</cell>\n<code language=julia-1.0>\n\
    words_in_sentence(\"lets go for swimming today and tomorrow and yesterday and\
    \ one and two and three and four and five and six and seven and eight and nine\
    \ and ten and eleven and twelve and thirteen and fourteen and fifteen and sixteen\
    \ and seventeen and eighteen and nineteen and twenty one\")\n</cell>\n<code language=julia-1.0>\n\
    words_in_sentence(\"lets go for swimming today and tomorrow and yesterday and\
    \ one and two and three and four and five and six and seven and eight and nine\
    \ and ten and eleven and twelve and thirteen and fourteen and fifteen ", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat\
    \ words.select {|word| word.prime? }\n  new_words.sort!\n  new_words.join(\" \"\
    )\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_sentence\
    \ = \"\"\n  prime_numbers = PrimeNumbers.prime_numbers(words.length)\n  prime_numbers.each\
    \ do |prime_number|\n    new_sentence << words[prime_number]\n  end\n  new_sentence\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution\
    \ is very similar to mine, but I wanted to know why my code didn't work. Your\
    \ solution works perfectly fine, but I wanted to know why my code didn't work.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nI added some explanation to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| a |>\n<code>", "  sentence = sentence.split(\" \").sort\n\
    \  new_sentence = \"\"\n  i = 0\n  while i < sentence.length\n    if sentence[i].to_s.length\
    \ % 2 == 0\n      new_sentence << sentence[i]\n      i += 1\n    else\n      new_sentence\
    \ << sentence[i]\n      i += 1\n      new_sentence << sentence[i]\n      i +=\
    \ 1\n    end\n  end\n  new_sentence\nend", "  sentence = sentence.downcase\n \
    \ words = sentence.split(\" \")\n  words.map!{|word| word.downcase}\n  words.map!{|word|\
    \ word.length}\n  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word|\
    \ word.join}\n  words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n  words.map!{|word|\
    \ word.chars.uniq.sort}\n  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n\
    \  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word| word.join}\n \
    \ words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n  words.map!{|word|\
    \ word.chars.uniq.sort}\n  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n\
    \  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word| word.join}\n \
    \ words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n  words.map!{|word|\
    \ word.chars.uniq.sort}\n  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n\
    \  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word| word.join}\n \
    \ words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n  words.map!{|word|\
    \ word.chars.uniq.sort}\n  words.map!{|word| word.join}\n  words.map!{|word",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_sentence\
    \ = \"\"\n  primes = []\n  primes.push 2\n  primes.push 3\n  primes.push 5\n \
    \ primes.push 7\n  primes.push 11\n  primes.push 13\n  primes.push 17\n  primes.push\
    \ 19\n  primes.push 23\n  primes.push 29\n  primes.push 31\n  primes.push 37\n\
    \  primes.push 41\n  primes.push 43\n  primes.push 47\n  primes.push 53\n  primes.push\
    \ 59\n  primes.push 61\n  primes.push 67\n  primes.push 71\n  primes.push 73\n\
    \  primes.push 79\n  primes.push 83\n  primes.push 89\n  primes.push 97\n  primes.push\
    \ 101\n  primes.push 103\n  primes.push 107\n  primes.push 109\n  primes.push\
    \ 113\n  primes.push 127\n  primes.push 131\n  primes.push 137\n  primes.push\
    \ 139\n  primes.push 149\n  primes.push 151\n  primes.push 157\n  primes.push\
    \ 163\n  primes.push 167\n  primes.push 173\n  primes.push 179\n  primes.push\
    \ 181\n  primes.push 191\n  primes.push 193\n  primes.push 197\n  primes.push\
    \ 199\n  primes.push 211\n  primes.push 223\n  primes.push 227\n  primes.push\
    \ 229\n  primes.push 233\n  primes.push 239\n  primes.push 241\n  primes.push\
    \ 251\n  primes.push 257\n  primes.push 263\n  primes.push 269\n  primes.push\
    \ 271\n  primes.push 277\n  primes.push 281\n  primes.push 283\n  primes.push\
    \ 293\n  primes.push 307\n  primes.push 311\n  primes.push 313\n  primes.push\
    \ 317\n  primes.push 323\n  primes.push 329\n  primes.push 331\n  primes.push\
    \ 337\n  primes.push 347\n  primes.push 349\n  primes.push 353\n  primes.push\
    \ 359\n  primes.push 367\n  primes.push 373\n  primes.push 379\n  primes.push\
    \ 383\n  primes.", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  prime_words = []\n  prime_words.push(words[0])\n  prime_words.push(words[1])\n\
    \  prime_words.push(words[2])\n  prime_words.push(words[3])\n  prime_words.push(words[4])\n\
    \  prime_words.push(words[5])\n  prime_words.push(words[6])\n  prime_words.push(words[7])\n\
    \  prime_words.push(words[8])\n  prime_words.push(words[9])\n  prime_words.push(words[10])\n\
    \  prime_words.push(words[11])\n  prime_words.push(words[12])\n  prime_words.push(words[13])\n\
    \  prime_words.push(words[14])\n  prime_words.push(words[15])\n  prime_words.push(words[16])\n\
    \  prime_words.push(words[17])\n  prime_words.push(words[18])\n  prime_words.push(words[19])\n\
    \  prime_words.push(words[20])\n  prime_words.push(words[21])\n  prime_words.push(words[22])\n\
    \  prime_words.push(words[23])\n  prime_words.push(words[24])\n  prime_words.push(words[25])\n\
    \  prime_words.push(words[26])\n  prime_words.push(words[27])\n  prime_words.push(words[28])\n\
    \  prime_words.push(words[29])\n  prime_words.push(words[30])\n  prime_words.push(words[31])\n\
    \  prime_words.push(words[32])\n  prime_words.push(words[33])\n  prime_words.push(words[34])\n\
    \  prime_words.push(words[35])\n  prime_words.push(words[36])\n  prime_words.push(words[37])\n\
    \  prime_words.push(words[38])\n  prime_words.push(words[39])\n  prime_words.push(words[40])\n\
    \  prime_words.push(words[41])\n  prime_words.push(words[42])\n  prime_words.push(words[43])\n\
    \  prime_words.push(words[44])\n  prime_words.push(words[45])\n  prime_words.push(words[46])\n\
    \  prime_words.push(words[47])\n  prime_words.push(words[48])\n  prime_words.push(words[49])\n\
    \  prime_words.push(words[", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \").map(&:strip)\n  prime_words = []\n  prime_words.concat words.select { |word|\
    \ prime_word?(word) }\n  prime_words.join(\" \")\nend", "  sentence = sentence.split(\"\
    \ \").sort\n  result = \"\"\n  for i in 0..(sentence.length-1)\n    if sentence[i].to_s.length\
    \ == prime(i)\n      result += sentence[i]\n    end\n  end\n  result\nend", " \
    \ sentence = sentence.split(\" \").sort\n  new_sentence = sentence.join(\" \"\
    )\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  primes\
    \ = []\n  prime = 0\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_sentence = \"\"\n  primes = []\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n  prime_word_length\
    \ = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_", "  sentence\
    \ = sentence.split(\" \").sort\n  sentence.length.prime?\n  sentence.join\nend",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n  prime_counter2\
    \ = 0\n  prime_counter3 = 0\n  prime_counter4 = 0\n  prime_counter5 = 0\n  prime_counter6\
    \ = 0\n  prime_counter7 = 0\n  prime_counter8 = 0\n  prime_counter9 = 0\n  prime_counter10\
    \ = 0\n  prime_counter11 = 0\n  prime_counter12 = 0\n  prime_counter13 = 0\n \
    \ prime_counter14 = 0\n  prime_counter15 = 0\n  prime_counter16 = 0\n  prime_counter17\
    \ = 0\n  prime_counter18 = 0\n  prime_counter19 = 0\n  prime_counter20 = 0\n \
    \ prime_counter21 = 0\n  prime_counter22 = 0\n  prime_counter23 = 0\n  prime_counter24\
    \ = 0\n  prime_counter25 = 0\n  prime_counter26 = 0\n  prime_counter27 = 0\n \
    \ prime_counter28 = 0\n  prime_counter29 = 0\n  prime_counter30 = 0\n  prime_counter31\
    \ = 0\n  prime_counter32 = 0\n  prime_counter33 = 0\n  prime_counter34 = 0\n \
    \ prime_counter35 = 0\n  prime_counter36 = 0\n  prime_counter37 = 0\n  prime_counter38\
    \ = 0\n  prime_counter39 = 0\n  prime_counter40 = 0\n  prime_counter41 = 0\n \
    \ prime_counter42 = 0\n  prime_counter43 = 0\n  prime_counter44 = 0\n  prime_counter45\
    \ = 0\n  prime_counter46 = 0\n  prime_counter47 = 0\n  prime_counter48 = 0\n \
    \ prime_counter49 = 0\n  prime_counter50 = 0\n  prime_counter51 = 0\n  prime_counter52\
    \ = 0\n  prime_counter53 = 0\n  prime_counter54 = 0\n  prime_counter55 = 0\n \
    \ prime_counter56 = 0\n  prime_counter57 = 0\n  prime_counter58 = 0\n  prime_counter59\
    \ = 0\n  prime_counter60 = 0\n  prime_counter61 = 0\n  prime_counter62 = 0\n \
    \ prime_counter63 = 0\n  prime_counter64 = 0\n  prime_counter65 = 0\n  prime_counter66\
    \ = 0\n  prime_counter67 = 0\n  prime_counter68 = 0\n  prime_counter69 = 0\n \
    \ prime_counter70", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  prime_words = []\n  prime_words.length.times do |i|\n    prime_words\
    \ << words[i] unless prime_words.include?(words[i])\n  end\n  prime_words.join(\"\
    \ \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  new_words = []\n  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n\
    \  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  primes = []\n  prime_words = []\n  prime_word = \"\"\n  prime_word_count\
    \ = 0\n  prime_word_index = 0\n  prime_word_index2 = 0\n  prime_word_index3 =\
    \ 0\n  prime_word_index4 = 0\n  prime_word_index5 = 0\n  prime_word_index6 = 0\n\
    \  prime_word_index7 = 0\n  prime_word_index8 = 0\n  prime_word_index9 = 0\n \
    \ prime_word_index10 = 0\n  prime_word_index11 = 0\n  prime_word_index12 = 0\n\
    \  prime_word_index13 = 0\n  prime_word_index14 = 0\n  prime_word_index15 = 0\n\
    \  prime_word_index16 = 0\n  prime_word_index17 = 0\n  prime_word_index18 = 0\n\
    \  prime_word_index19 = 0\n  prime_word_index20 = 0\n  prime_word_index21 = 0\n\
    \  prime_word_index22 = 0\n  prime_word_index23 = 0\n  prime_word_index24 = 0\n\
    \  prime_word_index25 = 0\n  prime_word_index26 = 0\n  prime_word_index27 = 0\n\
    \  prime_word_index28 = 0\n  prime_word_index29 = 0\n  prime_word_index30 = 0\n\
    \  prime_word_index31 = 0\n  prime_word_index32 = 0\n  prime_word_index33 = 0\n\
    \  prime_word_index34 = 0\n  prime_word_index35 = 0\n  prime_word_index36 = 0\n\
    \  prime_word_index37 = 0\n  prime_word_index38 = 0\n  prime_word_index39 = 0\n\
    \  prime_word_index40 = 0\n  prime_word_index41 = 0\n  prime_word_index42 = 0\n\
    \  prime_word_index43 = 0\n  prime_word_index44 = 0\n  prime_word_index45 = 0\n\
    \  prime_word_index46 = 0\n  prime_word_index47 = 0\n  prime_word_index48 = 0\n\
    \  prime_word_index49 = 0\n  prime_word_index50 = 0\n  prime_word_index51 = 0\n\
    \  prime_word_index52 = 0\n  prime_word_index53 = 0\n  prime_word_index54 = 0\n\
    \  prime_word_index55 = 0\n  prime_word_index56 = 0\n  prime_word_index57 = 0\n\
    \  prime_word_index58 = 0\n  prime_word_index59 = 0\n  prime", "  sentence = sentence.split(\"\
    \ \").sort\n  result = []\n  for i in 0...sentence.length\n    if sentence[i].to_s.length\
    \ == prime(i)\n      result << sentence[i]\n    end\n  end\n  result.join(\" \"\
    )\nend", "  sentence = sentence.downcase\n  words = sentence.split(' ')\n  new_words\
    \ = []\n  primes = []\n  prime_words = []\n  prime_word = ''\n  prime_word_count\
    \ = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime",
  "  sentence = sentence.downcase\n  words = sentence.split(' ')\n  words.map! do\
    \ |word|\n    word = word.downcase\n    word = word.gsub(/[^a-z]/, '')\n    word\n\
    \  end\n  words.map! do |word|\n    word = word.gsub(/[\\s]+/, ' ').split(' ').map{|w|\
    \ w.split('').map{|c| c.to_i}}.flatten.uniq.sort\n    word\n  end\n  words.map!\
    \ do |word|\n    word = word.map{|w| w.to_i}\n    word = word.map{|w| w % 2 ==\
    \ 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  words.map! do |word|\n    word = word.map{|w|\
    \ w % 2 == 0 ? w : w*2}\n    word\n  end\n  ", "  sentence = sentence.split(\"\
    \ \").map(&:downcase)\n  sentence = sentence.select { |word| word.chars.all? {\
    \ |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  prime_words = []\n  prime_words.length = words.length\n\
    \  prime_words.each do |word|\n    word = word.downcase\n    prime_words.include?(word)\
    \ ? prime_words.delete(word) : prime_words.push(word)\n  end\n  prime_words.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby,primes |>\n<| c |>\nThis code doesn't work.\
    \ `prime_words.include?(word) ? prime_words.delete(word) : prime_words.push(word)`\
    \ will always return `prime_words` because `prime_words.include?(word)` will always\
    \ be `true`.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing out my\
    \ mistake.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(' ')\n  new_words = []\n  new_word\
    \ = ''\n  primes = []\n  prime = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n\
    \  prime_counter = 0\n  prime_", "  sentence = sentence.split(\" \").sort\n  new_sentence\
    \ = \"\"\n  primes = []\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n \
    \ prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  \n", "  sentence = sentence.downcase\n  words =\
    \ sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n  \
    \  word = word.gsub(/[^a-z]/, \"\")\n    word = word.gsub(/\\s+/, \" \")\n   \
    \ word = word.split(\" \")\n    word.each do |word|\n      word = word.downcase\n\
    \      word = word.gsub(/[^a-z]/, \"\")\n      word = word.gsub(/\\s+/, \" \"\
    )\n      word = word.split(\" \")\n      word.each do |word|\n        word = word.downcase\n\
    \        word = word.gsub(/[^a-z]/, \"\")\n        word = word.gsub(/\\s+/, \"\
    \ \")\n        word = word.split(\" \")\n        word.each do |word|\n       \
    \   word = word.downcase\n          word = word.gsub(/[^a-z]/, \"\")\n       \
    \   word = word.gsub(/\\s+/, \" \")\n          word = word.split(\" \")\n    \
    \      word.each do |word|\n            word = word.downcase\n            word\
    \ = word.gsub(/[^a-z]/, \"\")\n            word = word.gsub(/\\s+/, \" \")\n \
    \           word = word.split(\" \")\n            word.each do |word|\n      \
    \        word = word.downcase\n              word = word.gsub(/[^a-z]/, \"\")\n\
    \              word = word.gsub(/\\s+/, \" \")\n              word = word.split(\"\
    \ \")\n              word.each do |word|\n                word = word.downcase\n\
    \                word = word.gsub(/[^a-z]/, \"\")\n                word = word.gsub(/\\\
    s+/, \" \")\n                word = word.split(\" \")\n                word.each\
    \ do |word|\n                  word = word.downcase\n                  word =\
    \ word.gsub(/[^a-z]/, \"\")\n                  word = word.gsub(/\\s+/, \" \"\
    )\n                  word = word.split(\" \")\n                  word.each do\
    \ |word|\n                    word = word.downcase\n                    word =\
    \ word.gsub(/[^a-z]/, \"\")\n                    word = word.gsub(/\\s+/, \" \"\
    )\n                    word = word.split(\" \")\n                    word.each\
    \ do |word|\n                      word = word.downcase\n                    \
    \  word = word.gsub(/[^a-z]/, \"\")\n                      word = word.gsub(/\\\
    s+/, \" \")\n                      word = word.split(\" \")\n                \
    \      word.each do |word|\n                        word = word.downcase\n   \
    \                     word = word.gsub(/[^a-z]/, \"\")\n                     \
    \   word = word.gsub(/\\s+/, \" \")\n                        word = word.split(\"\
    \ \")\n                        word.each do |word|\n                         \
    \ word = word.downcase\n                          word = word.gsub(/[^a-z]/, \"\
    \")\n                          word = word.gsub(/\\s+/, \" \")\n             \
    \             word = word.split(\" \")\n                          word.each do\
    \ |word|\n                            ", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  new_words = []\n  new_words.concat words.select {|word|\
    \ word.length == prime_number(word.length)}\n  new_words.concat words.select {|word|\
    \ word.length != prime_number(word.length)}\n  new_words.concat words.select {|word|\
    \ word.length == prime_number(word.length)}\n  new_words.concat words.select {|word|\
    \ word.length != prime_number(word.length)}\n  new_words.join(\" \")\nend", " \
    \ sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_sentence\
    \ = \"\"\n  primes = []\n  prime_words = []\n  prime_word = \"\"\n  prime_word_count\
    \ = 0\n  prime_word_index = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_index_count = 0\n  prime_word_index_count\
    \ = 0\n  prime_word_index_count = 0\n  prime_word_", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.map!{|word| word.downcase}\n  words.map!{|word|\
    \ word.length}\n  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word|\
    \ word.chars.uniq.sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_sentence = \"\"\n  primes = []\n  prime_words =\
    \ []\n  prime_sentence = \"\"\n  prime_words_in_sentence = []\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count =\
    \ 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n\
    \  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count =\
    \ 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n\
    \  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count =\
    \ 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n\
    \  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count =\
    \ 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n\
    \  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count =\
    \ 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n\
    \  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count =\
    \ 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n\
    \  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count =\
    \ 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n\
    \  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count =\
    \ 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n\
    \  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count = 0\n  prime_words_in_sentence_count\
    \ = 0\n  prime_words_in_sentence_count = 0\n  prime", "  sentence = sentence.split(\"\
    \ \").map(&:downcase)\n  sentence = sentence.select { |word| word.chars.all? {\
    \ |c| c >= 'a' && c <= 'z' } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c >= 'a' && c <= 'z' || c >= '0' && c <= '9' } }\n  sentence = sentence.select\
    \ { |word| word.chars.all? { |c| c >= 'a' && c <= 'z' || c >= '0' && c <= '9'\
    \ || c >= 'a' && c <= 'z' || c >= '0' && c <= '9' } }\n  sentence = sentence.select\
    \ { |word| word.chars.all? { |c| c >= 'a' && c <= 'z' || c >= '0' && c <= '9'\
    \ || c >= 'a' && c <= 'z' || c >= '0' && c <= '9' || c >= 'a' && c <= 'z' || c\
    \ >= '0' && c <= '9' } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c >= 'a' && c <= 'z' || c >= '0' && c <= '9' || c >= 'a' && c <= 'z' ||\
    \ c >= '0' && c <= '9' || c >= 'a' && c <= 'z' || c >= '0' && c <= '9' || c >=\
    \ 'a' && c <= 'z' || c >= '0' && c <= '9' } }\n  sentence = sentence.select {\
    \ |word| word.chars.all? { |c| c >= 'a' && c <= 'z' || c >= '0' && c <= '9' ||\
    \ c >= 'a' && c <= 'z' || c >= '0' && c <= '9' || c >= 'a' && c <= 'z' || c >=\
    \ '0' && c <= '9' || c >= 'a' && c <= 'z' || c >= '0' && c <= '9' } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c >= 'a' && c <= 'z' || c >=\
    \ '0' && c <= '9' || c >= 'a' && c <= 'z' || c >= '0' && c <= '9' || c >= 'a'\
    \ && c <= 'z' || c >= '0' && c <= '9' || c >= 'a' && c <= 'z' || ", "  sentence\
    \ = sentence.split(\" \").sort\n  result = []\n  for i in (0...sentence.length)\n\
    \    if sentence[i].to_s.length == 1 && sentence[i].to_s.include?(sentence[i].to_s)\n\
    \      result << sentence[i].to_s\n    end\n  end\n  result.join(\" \")\nend",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_words.concat(words)\n  new_words.each do |word|\n    word = word.downcase\n\
    \    prime_numbers = PrimeNumbers.new(word)\n    prime_numbers.each do |prime|\n\
    \      new_words.delete(word)\n    end\n  end\n  new_words.join(\" \")\nend",
  "  sentence = sentence.split(\" \").sort\n  sentence.length.prime?\n  sentence.join\n\
    end", "  sentence = sentence.split(\" \").sort\n  new_sentence = \"\"\n  for i\
    \ in 0...sentence.length\n    if sentence[i] % 2 == 0\n      new_sentence << sentence[i]\n\
    \    end\n  end\n  return new_sentence\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  primes\
    \ = []\n  prime = 0\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word", "  sentence = sentence.downcase\n  words = sentence.split('\
    \ ')\n  words.each do |word|\n    word = word.downcase\n    next if word.empty?\n\
    \    word = word.gsub(/[^a-z]/, '')\n    next if word.empty?\n    word = word.gsub(/\\\
    s+/, ' ').split(' ').map { |w| w.to_i }.max\n    next if word.zero?\n    puts\
    \ word\n  end\nend", "  sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n  prime_numbers = sentence.map { |word| word.prime_number }\n  prime_numbers.uniq.sort.map\
    \ { |prime_number| sentence[prime_number] }.join(\" \")\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \").map { |word| word.downcase }\n  primes = prime_numbers(words.length)\n\
    \  primes.each do |prime|\n    prime_words = []\n    words.each do |word|\n  \
    \    prime_words << word if prime_words.include?(word.length)\n    end\n    prime_words.sort.join(\"\
    \ \")\n  end\nend", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_words.concat(words)\n  new_words.each do |word|\n\
    \    word = word.downcase\n    prime_words = []\n    prime_words.concat(prime_numbers(word))\n\
    \    prime_words.each do |prime_word|\n      prime_word = prime_word.downcase\n\
    \      prime_words.concat(prime_numbers(prime_word))\n    end\n  end\nend", " \
    \ sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index\
    \ = 0\n  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length =\
    \ 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index = 0\n\
    \  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index\
    \ = 0\n  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length =\
    \ 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index = 0\n\
    \  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index\
    \ = 0\n  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length =\
    \ 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index = 0\n\
    \  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index\
    \ = 0\n  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length =\
    \ 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index = 0\n\
    \  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index\
    \ = 0\n  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length =\
    \ 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index = 0\n\
    \  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index\
    \ = 0\n  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length =\
    \ 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index = 0\n\
    \  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_length = 1\n  prime_word_index\
    \ = 0\n  prime_word_length = 1\n  prime_word_index = 0\n  prime_word_", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_sentence\
    \ = \"\"\n  primes = []\n  prime_counter = 0\n  prime_numbers = []\n  prime_numbers_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_number", "  sentence = sentence.split(\"\
    \ \").sort\n  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n  prime_numbers\
    \ = []\n  prime_numbers_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_number", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  words.each do |word|\n    word = word.downcase\n    word = word.gsub(/[^a-z]/,\
    \ \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.split(\"\")\n   \
    \ word = word.select {|x| x.to_i.prime? }\n    word.each do |w|\n      puts w\n\
    \    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much!\
    \ I really appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome. Feel free to accept\
    \ the answer if it solved your problem.\n<|/ c |>\n<| c |>\nI did but it says\
    \ I have to wait 2 minutes before I can accept it\n<|/ c |>\n<| c |>\nOh okay,\
    \ I didn't know that. Thanks!\n<|/ c |>\n<| a tags=ruby,primes |>\n<code>", " \
    \ sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n  prime_numbers\
    \ = []\n  prime_numbers_counter = 0\n  prime_numbers_counters = []\n  prime_numbers_counters_counter\
    \ = 0\n  prime_numbers_counters_counters = []\n  prime_numbers_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters = []\n  prime_numbers_counters_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters_counters = []\n  prime_numbers_counters_counters_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters_counters_counters = []\n  prime_numbers_counters_counters_counters_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters_counters_counters_counters =\
    \ []\n  prime_numbers_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters\
    \ = []\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counters\
    \ = []\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counters_counters\
    \ = []\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters\
    \ = []\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters\
    \ = []\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  prime_numbers_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters_counters\
    \ = []\n  prime_numbers_counters_counters_counters_counters_", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.strip\n\
    \    if word.length == 2\n      puts word\n    end\n  end\nend\nwords_in_sentence(ARGV[0])",
  "  sentence = sentence.downcase\n  words = sentence.split(' ')\n  words.each do\
    \ |word|\n    word = word.downcase\n    next if word.empty?\n    next if word.include?('\
    \ ')\n    next if word.include?(',')\n    next if word.include?('.')\n    next\
    \ if word.include?(';')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('!')\n    next if word.include?('?')\n    next if word.include?(':')\n\
    \    next if word.include?(';')\n    next if word.include?('!')\n    next if word.include?('?')\n\
    \    next if word.include?('!')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('!')\n    next if word.include?('?')\n    next if word.include?(':')\n\
    \    next if word.include?(';')\n    next if word.include?('!')\n    next if word.include?('?')\n\
    \    next if word.include?(':')\n    next if word.include?(';')\n    next if word.include?('!')\n\
    \    next if word.include?('?')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('!')\n    next if word.include?('?')\n    next if word.include?(':')\n\
    \    next if word.include?(';')\n    next if word.include?('!')\n    next if word.include?('?')\n\
    \    next if word.include?(':')\n    next if word.include?(';')\n    next if word.include?('!')\n\
    \    next if word.include?('?')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('!')\n    next if word.include?('?')\n    next if word.include?(':')\n\
    \    next if word.include?(';')\n    next if word.include?('!')\n    next if word.include?('?')\n\
    \    next if word.include?(':')\n    next if word.include?(';')\n    next if word.include?('!')\n\
    \    next if word.include?('?')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_numbers =\
    \ 2\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n  prime_numbers_index = 0\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ = 0\n", "  sentence = sentence.split(\" \").map { |word| word.downcase }\n \
    \ prime_words = []\n  prime_words.push(sentence[0])\n  prime_words.push(sentence[1])\n\
    \  prime_words.push(sentence[2])\n  prime_words.push(sentence[3])\n  prime_words.push(sentence[4])\n\
    \  prime_words.push(sentence[5])\n  prime_words.push(sentence[6])\n  prime_words.push(sentence[7])\n\
    \  prime_words.push(sentence[8])\n  prime_words.push(sentence[9])\n  prime_words.push(sentence[10])\n\
    \  prime_words.push(sentence[11])\n  prime_words.push(sentence[12])\n  prime_words.push(sentence[13])\n\
    \  prime_words.push(sentence[14])\n  prime_words.push(sentence[15])\n  prime_words.push(sentence[16])\n\
    \  prime_words.push(sentence[17])\n  prime_words.push(sentence[18])\n  prime_words.push(sentence[19])\n\
    \  prime_words.push(sentence[20])\n  prime_words.push(sentence[21])\n  prime_words.push(sentence[22])\n\
    \  prime_words.push(sentence[23])\n  prime_words.push(sentence[24])\n  prime_words.push(sentence[25])\n\
    \  prime_words.push(sentence[26])\n  prime_words.push(sentence[27])\n  prime_words.push(sentence[28])\n\
    \  prime_words.push(sentence[29])\n  prime_words.push(sentence[30])\n  prime_words.push(sentence[31])\n\
    \  prime_words.push(sentence[32])\n  prime_words.push(sentence[33])\n  prime_words.push(sentence[34])\n\
    \  prime_words.push(sentence[35])\n  prime_words.push(sentence[36])\n  prime_words.push(sentence[37])\n\
    \  prime_words.push(sentence[38])\n  prime_words.push(sentence[39])\n  prime_words.push(sentence[40])\n\
    \  prime_words.push(sentence[41])\n  prime_words.push(sentence[42])\n  prime_words.push(sentence[43])\n\
    \  prime_words.push(sentence[44])\n  prime_words.push(sentence[45])\n  prime_words.push(sentence[46])\n\
    \  prime_words.push(sentence[47])\n  prime_words.push(sentence[48])\n  prime_words.push(sentence[49])\n\
    \  prime_words.push(sentence[50])\n  prime", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  primes = []\n  primes.concat prime_numbers(words.length)\n\
    \  primes.each do |prime|\n    prime_words = []\n    words.each do |word|\n  \
    \    prime_words << word if prime_words.include?(word.length)\n    end\n    prime_words.each\
    \ do |word|\n      primes.delete(word.length)\n    end\n  end\n  primes.each do\
    \ |prime|\n    prime_words = []\n    words.each do |word|\n      prime_words <<\
    \ word if prime_words.include?(word.length)\n    end\n    prime_words.each do\
    \ |word|\n      primes.delete(word.length)\n    end\n  end\n  primes.each do |prime|\n\
    \    prime_words = []\n    words.each do |word|\n      prime_words << word if\
    \ prime_words.include?(word.length)\n    end\n    prime_words.each do |word|\n\
    \      primes.delete(word.length)\n    end\n  end\n  primes.each do |prime|\n\
    \    prime_words = []\n    words.each do |word|\n      prime_words << word if\
    \ prime_words.include?(word.length)\n    end\n    prime_words.each do |word|\n\
    \      primes.delete(word.length)\n    end\n  end\n  primes.each do |prime|\n\
    \    prime_words = []\n    words.each do |word|\n      prime_words << word if\
    \ prime_words.include?(word.length)\n    end\n    prime_words.each do |word|\n\
    \      primes.delete(word.length)\n    end\n  end\n  primes.each do |prime|\n\
    \    prime_words = []\n    words.each do |word|\n      prime_words << word if\
    \ prime_words.include?(word.length)\n    end\n    prime_words.each do |word|\n\
    \      primes.delete(word.length)\n    end\n  end\n  primes.each do |prime|\n\
    \    prime_words = []\n    words.each do |word|\n      prime_words << word if\
    \ prime_words.include?(word.length)\n    end\n    prime_words.each do |word|\n\
    \      primes.delete(word.length)\n    end\n  end\n  primes.each do |prime|\n\
    \    prime_words = []\n    words.each do |word|\n      prime_words << word if\
    \ prime_words.include?(word.length)\n    end\n    prime_words.each do |word|\n\
    \      primes.delete(word.length)", "  sentence = sentence.downcase\n  words =\
    \ sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n  \
    \  word = word.gsub(/[^a-z]/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word\
    \ = word.split(\"\")\n    word.each do |letter|\n      if !Prime::prime?(letter.length)\n\
    \        letter = letter + \" \"\n      end\n    end\n  end\n  words.join(\" \"\
    )\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words\
    \ = []\n  new_words.concat(words)\n  new_words.each do |word|\n    word = word.downcase\n\
    \    word = word.gsub(/[^a-z]/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n  \
    \  word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word\
    \ = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\\
    s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\
    \")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n\
    \    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word\
    \ = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\\
    s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\
    \")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n\
    \    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word\
    \ = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\\
    s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\
    \")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n\
    \    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word\
    \ = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\\
    s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\
    \")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n\
    \    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word\
    \ = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\\
    s+/, \"\")\n    ", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_word = \"\"\n  prime_words = []\n  prime_word =\
    \ \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n  prime_word_index2 =\
    \ 0\n  prime_word_index3 = 0\n  prime_word_index4 = 0\n  prime_word_index5 = 0\n\
    \  prime_word_index6 = 0\n  prime_word_index7 = 0\n  prime_word_index8 = 0\n \
    \ prime_word_index9 = 0\n  prime_word_index10 = 0\n  prime_word_index11 = 0\n\
    \  prime_word_index12 = 0\n  prime_word_index13 = 0\n  prime_word_index14 = 0\n\
    \  prime_word_index15 = 0\n  prime_word_index16 = 0\n  prime_word_index17 = 0\n\
    \  prime_word_index18 = 0\n  prime_word_index19 = 0\n  prime_word_index20 = 0\n\
    \  prime_word_index21 = 0\n  prime_word_index22 = 0\n  prime_word_index23 = 0\n\
    \  prime_word_index24 = 0\n  prime_word_index25 = 0\n  prime_word_index26 = 0\n\
    \  prime_word_index27 = 0\n  prime_word_index28 = 0\n  prime_word_index29 = 0\n\
    \  prime_word_index30 = 0\n  prime_word_index31 = 0\n  prime_word_index32 = 0\n\
    \  prime_word_index33 = 0\n  prime_word_index34 = 0\n  prime_word_index35 = 0\n\
    \  prime_word_index36 = 0\n  prime_word_index37 = 0\n  prime_word_index38 = 0\n\
    \  prime_word_index39 = 0\n  prime_word_index40 = 0\n  prime_word_index41 = 0\n\
    \  prime_word_index42 = 0\n  prime_word_index43 = 0\n  prime_word_index44 = 0\n\
    \  prime_word_index45 = 0\n  prime_word_index46 = 0\n  prime_word_index47 = 0\n\
    \  prime_word_index48 = 0\n  prime_word_index49 = 0\n  prime_word_index50 = 0\n\
    \  prime_word_index51 = 0\n  prime_word_index52 = 0\n  prime_word_index53 = 0\n\
    \  prime_word_index54 = 0\n  prime_word_index55 = 0\n  prime_word_index56 = 0\n\
    \  prime_word_index57 = 0\n  prime_word_index58 = 0\n  prime_word_index59 = 0\n\
    \  ", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  result\
    \ = \"\"\n  primes = []\n  primes.push 2\n  primes.push 3\n  primes.push 5\n \
    \ primes.push 7\n  primes.push 11\n  primes.push 13\n  primes.push 17\n  primes.push\
    \ 19\n  primes.push 23\n  primes.push 29\n  primes.push 31\n  primes.push 37\n\
    \  primes.push 41\n  primes.push 43\n  primes.push 47\n  primes.push 53\n  primes.push\
    \ 59\n  primes.push 61\n  primes.push 67\n  primes.push 71\n  primes.push 73\n\
    \  primes.push 79\n  primes.push 83\n  primes.push 89\n  primes.push 97\n  primes.push\
    \ 101\n  primes.push 103\n  primes.push 107\n  primes.push 109\n  primes.push\
    \ 113\n  primes.push 127\n  primes.push 131\n  primes.push 137\n  primes.push\
    \ 139\n  primes.push 149\n  primes.push 151\n  primes.push 157\n  primes.push\
    \ 163\n  primes.push 167\n  primes.push 173\n  primes.push 179\n  primes.push\
    \ 181\n  primes.push 191\n  primes.push 193\n  primes.push 197\n  primes.push\
    \ 199\n  primes.push 211\n  primes.push 223\n  primes.push 227\n  primes.push\
    \ 229\n  primes.push 233\n  primes.push 239\n  primes.push 241\n  primes.push\
    \ 243\n  primes.push 247\n  primes.push 251\n  primes.push 257\n  primes.push\
    \ 263\n  primes.push 269\n  primes.push 271\n  primes.push 277\n  primes.push\
    \ 281\n  primes.push 283\n  primes.push 293\n  primes.push 307\n  primes.push\
    \ 311\n  primes.push 313\n  primes.push 317\n  primes.push 331\n  primes.push\
    \ 337\n  primes.push 347\n  primes.push 349\n  primes.push 353\n  primes.push\
    \ 359\n  primes.push 367\n  primes.push 373\n  primes.push 379\n  primes.push\
    \ 383\n  primes.push ", "  sentence = sentence.split(\" \").sort\n  new_sentence\
    \ = \"\"\n  i = 0\n  while i < sentence.length\n    if sentence[i].to_s.length\
    \ % 2 == 0\n      new_sentence += sentence[i]\n      i += 1\n    else\n      new_sentence\
    \ += sentence[i] + \" \"\n      i += 1\n    end\n  end\n  new_sentence = new_sentence.chomp\n\
    \  return new_sentence\nend", "  sentence = sentence.split(\" \").sort\n  new_sentence\
    \ = \"\"\n  prime_numbers = 2\n  prime_numbers_set = Set.new\n  prime_numbers_set.add(2)\n\
    \  prime_numbers_set.add(3)\n  prime_numbers_set.add(5)\n  prime_numbers_set.add(7)\n\
    \  prime_numbers_set.add(11)\n  prime_numbers_set.add(13)\n  prime_numbers_set.add(17)\n\
    \  prime_numbers_set.add(19)\n  prime_numbers_set.add(23)\n  prime_numbers_set.add(29)\n\
    \  prime_numbers_set.add(31)\n  prime_numbers_set.add(37)\n  prime_numbers_set.add(43)\n\
    \  prime_numbers_set.add(59)\n  prime_numbers_set.add(61)\n  prime_numbers_set.add(67)\n\
    \  prime_numbers_set.add(71)\n  prime_numbers_set.add(73)\n  prime_numbers_set.add(79)\n\
    \  prime_numbers_set.add(83)\n  prime_numbers_set.add(89)\n  prime_numbers_set.add(97)\n\
    \  prime_numbers_set.add(101)\n  prime_numbers_set.add(103)\n  prime_numbers_set.add(107)\n\
    \  prime_numbers_set.add(109)\n  prime_numbers_set.add(113)\n  prime_numbers_set.add(127)\n\
    \  prime_numbers_set.add(131)\n  prime_numbers_set.add(137)\n  prime_numbers_set.add(139)\n\
    \  prime_numbers_set.add(149)\n  prime_numbers_set.add(151)\n  prime_numbers_set.add(157)\n\
    \  prime_numbers_set.add(163)\n  prime_numbers_set.add(167)\n  prime_numbers_set.add(173)\n\
    \  prime_numbers_set.add(179)\n  prime_numbers_set.add(181)\n  prime_numbers_set.add(191)\n\
    \  prime_numbers_set.add(193)\n  prime_numbers_set.add(197)\n  prime_numbers_set.add(199)\n\
    \  prime_numbers_set.add(211)\n  prime_numbers_set.add(223)\n  prime_numbers_set.add(227)\n\
    \  prime_numbers_set.add(229)\n  prime_numbers_set.add(233)\n  prime_numbers_set.add(239)\n",
  "  sentence = sentence.downcase\n  words = sentence.split(' ')\n  words.map!{|word|\
    \ word.downcase}\n  words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.chars.uniq.sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| ", "  sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n  prime_words = []\n  prime_words.push(sentence[0])\n  prime_words.each do\
    \ |word|\n    prime_words.each do |other_word|\n      prime_words.each do |third_word|\n\
    \        prime_words.each do |fourth_word|\n          prime_words.each do |fifth_word|\n\
    \            prime_words.each do |sixth_word|\n              prime_words.each\
    \ do |seventh_word|\n                prime_words.each do |eighth_word|\n     \
    \             prime_words.each do |ninth_word|\n                    prime_words.each\
    \ do |tenth_word|\n                      prime_words.each do |eleventh_word|\n\
    \                        prime_words.each do |twelfth_word|\n                \
    \          prime_words.each do |thirteenth_word|\n                           \
    \ prime_words.each do |fourteenth_word|\n                              prime_words.each\
    \ do |fifteenth_word|\n                                prime_words.each do |sixteenth_word|\n\
    \                                  prime_words.each do |seventeenth_word|\n  \
    \                                  prime_words.each do |eighteenth_word|\n   \
    \                                   prime_words.each do |nineteenth_word|\n  \
    \                                      prime_words.each do |twentyth_word|\n \
    \                                         prime_words.each do |twentyoneth_word|\n\
    \                                            prime_words.each do |twentytwoth_word|\n\
    \                                              prime_words.each do |twentythreeth_word|\n\
    \                                                prime_words.each do |twentyfourth_word|\n\
    \                                                  prime_words.each do |twentyfiveth_word|\n\
    \                                                    prime_words.each do |twentysix_word|\n\
    \                                                      prime_words.each do |twentyseventh_word|\n\
    \                                                        prime_words.each do |twentyeighth_word|\n\
    \                                                          prime_words.each do\
    \ |twentyninth_word|\n                                                       \
    \     prime_words.each do |twentytenth_word|\n                               \
    \                               prime_words.each do |twentyeleventh_word|\n  \
    \                                                              prime_words.each\
    \ do |twentytwelfth_word|\n                                                  \
    \                prime_words.each do |twentythirteenth_word|\n               \
    \                                                     prime_words.each do |twentyfourteenth_word|\n\
    \                                                                      prime_words.each\
    \ do |twentyfifteenth_word|\n                                                \
    \                        prime_words.each do |twentysixteenth_word|\n        \
    \                                                                  prime_words.each\
    \ do |twentyseven", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_words.concat(words)\n  new_words.each do |word|\n\
    \    word = word.downcase\n    word = word.gsub(/[^a-z]/, \"\")\n    word = word.gsub(/\\\
    s+/, \"\")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/,\
    \ \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \"\
    \ \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n\
    \    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n  \
    \  word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word\
    \ = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word =\
    \ word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\\
    s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/,\
    \ \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \"\
    \ \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n\
    \    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n  \
    \  word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word\
    \ = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word =\
    \ word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\\
    s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/,\
    \ \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \"\
    \ \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.gsub(/\\s+/, \" \")\n    ", "  sentence = sentence.split(\"\
    \ \").sort\n  result = []\n  primes = []\n  prime_counter = 0\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n", "  sentence = sentence.downcase\n  words = sentence.split(' ')\n  words.map!{|word|\
    \ word.downcase}\n  words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.chars.uniq.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('", "  sentence = sentence.downcase\n  words =\
    \ sentence.split(\" \")\n  new_words = []\n  new_sentence = \"\"\n  primes = []\n\
    \  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words =\
    \ []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime", "  sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n  prime_words = []\n  prime_words += sentence.select { |word| prime_word?(word)\
    \ }\n  sentence.join(\" \")\nend", "  sentence = sentence.downcase\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  ", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat(words[0...1])\n\
    \  new_words.concat(words[2..-1])\n  new_words.uniq.sort\n  new_words.join(\"\
    \ \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(' ')\n\
    \  words.each do |word|\n    word = word.downcase\n    next if word.empty?\n \
    \   next if word.include?(' ')\n    next if word.include?(',')\n    next if word.include?('.')\n\
    \    next if word.include?(';')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next if word.include?('.')\n    next if word.include?(':')\n    next if word.include?(';')\n\
    \    next ", "  sentence = sentence.split(\" \").map { |word| word.downcase }\n\
    \  primes = Primes.primes\n  primes.each do |prime|\n    sentence = sentence.map\
    \ { |word| word if prime_word?(word, prime) }\n  end\n  sentence.join(' ')\nend",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_sentence\
    \ = \"\"\n  primes = []\n  prime_counter = 0\n  prime_numbers = []\n  prime_numbers_counter\
    \ = 0\n  prime_numbers_length = []\n  prime_numbers_length.length = 0\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n  prime_numbers_length.push(0)\n\
    \  prime_numbers_length.push(0)\n  prime_numbers_length.", "  sentence = sentence.split(\"\
    \ \").sort\n  result = []\n  for i in sentence\n    if i.to_s.length % 2 == 0\n\
    \      result.push(i)\n    end\n  end\n  result.join(\" \")\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n\
    \    next if word.empty?\n    word = word.gsub(/[^a-z]/, \"\")\n    next if word.empty?\n\
    \    word = word.split(\"\")\n    word.each do |letter|\n      next if letter.to_i.prime?\n\
    \      letter = letter.to_s\n      letter = letter.reverse\n      letter = letter.split(\"\
    \")\n      letter.each do |letter|\n        next if letter.to_i.prime?\n     \
    \ end\n    end\n  end\n  words.join(\" \")\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
