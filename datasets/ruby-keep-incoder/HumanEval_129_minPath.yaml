name: HumanEval_129_minPath
language: ruby
prompt: "# Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n# each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have\
  \ to find the minimum path of length k in the grid. You can start\n# from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n# in other words,\
  \ you can go to cells which share an edge with you current\n# cell.\n# Please note\
  \ that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n\
  # You CANNOT go off the grid.\n# A path A (of length k) is considered less than\
  \ a path B (of length k) if\n# after making the ordered lists of the values on the\
  \ cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\n# than lst_B, in other words, there exist an integer index i (1 <= i <=\
  \ k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j]\
  \ = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered\
  \ list of the values on the cells that the minimum path go through.\n# Examples:\n\
  # Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n# Output: [1, 2, 1]\n# Input:\
  \ grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n# Output: [1]\ndef minPath(grid, k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minPath\n\
  \    candidate = method(:minPath)\n    assert_equal([1, 2, 1], candidate.call([[1,\
  \ 2, 3], [4, 5, 6], [7, 8, 9]], 3))\n    assert_equal([1], candidate.call([[5, 9,\
  \ 3], [4, 1, 6], [7, 8, 2]], 1))\n    assert_equal([1, 2, 1, 2], candidate.call([[1,\
  \ 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4))\n    assert_equal([1,\
  \ 10, 1, 10, 1, 10, 1], candidate.call([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11,\
  \ 15], [8, 14, 9, 2]], 7))\n    assert_equal([1, 7, 1, 7, 1], candidate.call([[8,\
  \ 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5))\n    assert_equal([1,\
  \ 6, 1, 6, 1, 6, 1, 6, 1], candidate.call([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3,\
  \ 15, 6], [12, 13, 10, 1]], 9))\n    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1, 6,\
  \ 1, 6], candidate.call([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8,\
  \ 7, 2]], 12))\n    assert_equal([1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[2, 7,\
  \ 4], [3, 1, 5], [6, 8, 9]], 8))\n    assert_equal([1, 5, 1, 5, 1, 5, 1, 5], candidate.call([[6,\
  \ 1, 5], [3, 8, 9], [2, 7, 4]], 8))\n    assert_equal([1, 2, 1, 2, 1, 2, 1, 2, 1,\
  \ 2], candidate.call([[1, 2], [3, 4]], 10))\n    assert_equal([1, 3, 1, 3, 1, 3,\
  \ 1, 3, 1, 3], candidate.call([[1, 3], [3, 2]], 10))\n  end\nend\n"
completions: ["    \n    # Write your code here.\n    \n    visited = HashSet.new\n\
    \    \n    grid.each do |row|\n        row.each do |cell|\n            if visited.include?(cell)\n\
    \                next\n            end\n            visited.add(cell)\n      \
    \      \n            cell.neighbors.each do |neighbor|\n                if visited.include?(neighbor)\n\
    \                    next\n                end\n                visited.add(neighbor)\n\
    \                \n                if k == 0 \n                    path = [cell]\n\
    \                else\n                    path = cell.neighbors.map { |neighbor|\
    \ neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map\
    \ { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors\
    \ }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor|\
    \ neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map\
    \ { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors\
    \ }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor|\
    \ neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map\
    \ { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors\
    \ }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor|\
    \ neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map\
    \ { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors\
    \ }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor|\
    \ neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map\
    \ { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors\
    \ }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor|\
    \ neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors }.flatten.uniq.map\
    \ { |neighbor| neighbor.neighbors }.flatten.uniq.map { |neighbor| neighbor.neighbors\
    \ }.flatten.", "  \n  # Write your code here\n  \n  \nend", "  \n  result = []\n\
    \  \n  visited = HashSet.new\n  \n  grid.each do |row|\n    row.each do |cell|\n\
    \      visited.add(cell)\n    end\n  end\n  \n  visited.each do |cell|\n    result\
    \ << cell\n    \n    cell.neighbors.each do |neighbor|\n      visited.add(neighbor)\n\
    \    end\n  end\n  \n  result.sort!\n  \n  result\nend\n</cell>\n<code language=conda-root-py>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n", "  \n  # Write your code here.\n  \nend", "  \n  # Write your\
    \ code here.\n  \nend", "  \n  # Write your code here\n  \n  return []\nend",
  "  \n  \n  # Your code here\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "  \n  # Write your code here\n\
    \  \n  \nend\n</cell>\n<cell>", "  \n  # Write your code here.\n  \n  return []\n\
    end", "  \n  # Your code here\n  \nend", "  \n  result = []\n  \n  visited = HashSet.new\n\
    \  \n  grid.each do |row|\n    row.each do |cell|\n      visited.add(cell)\n \
    \   end\n  end\n  \n  visited.each do |cell|\n    result << cell\n    \n    cell.neighbors.each\
    \ do |neighbor|\n      visited.add(neighbor)\n    end\n  end\n  \n  result.sort!\n\
    \  \n  result\nend", "  \n  # write your code here\n  \nend", "  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n", "  \n  \n  # Write your code here.\n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
  "  \nend", "  \n  # Write your code here.\n  \n  return []\nend", "  result = []\n\
    \  grid.each do |row|\n    row.each do |cell|\n      result << cell if cell !=\
    \ 0 && result.size < k\n    end\n  end\n  result\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `grid = [ [1,2,3], [4,5,6], [7,8,9],\
    \ [10,11,12], [13,14,15], [16,17,18] ]` and `k = 3`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added an example to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added an example to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added an example to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added an example to the answer.\n<|/ c |>\n<| a tags=ruby,algorithm\
    \ |>\n<code>", "    \n    \n    # Write your code here\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "  \n  result = []\n  \n  visited = Hash.new\n  \n  grid.each do\
    \ |row|\n    row.each do |cell|\n      visited[cell] = false\n    end\n  end\n\
    \  \n  visited[1] = true\n  \n  while visited.length > 0\n    \n    visited.each\
    \ do |cell, visited_flag|\n      \n      if visited_flag\n        \n        result\
    \ << cell\n        \n        visited.delete(cell)\n        \n      else\n    \
    \    \n        neighbors = grid.select do |row|\n          row.include?(cell)\n\
    \        end\n        \n        neighbors.each do |neighbor|\n          \n   \
    \       visited[neighbor] = true\n          \n          neighbor.each do |neighbor|\n\
    \            \n            if visited[neighbor] == false\n              visited[neighbor]\
    \ = true\n              \n              result << neighbor\n              \n \
    \             visited.delete(neighbor)\n              \n              break\n\
    \            end\n          end\n        end\n      end\n    end\n    \n    break\
    \ if visited.length == 0\n  end\n  \n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n", "  \n  # Your code here\n  \nend", "    \n\
    \    \n    # Write your code here.\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \n  result\
    \ = []\n  \n  visited = HashSet.new\n  \n  grid.each do |row|\n    row.each do\
    \ |cell|\n      visited.add(cell)\n    end\n  end\n  \n  visited.each do |cell|\n\
    \    result << cell\n    \n    cell.neighbors.each do |neighbor|\n      next if\
    \ visited.include?(neighbor)\n      \n      visited.add(neighbor)\n      \n  \
    \    result << neighbor\n    end\n  end\n  \n  result.sort\nend\n</cell>\n<code\
    \ language=julia-1.0>", "  \nend", "    \n    # Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "  \n  # Write your code here.\n  \n  return []\n\
    end", "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "    \n    \n    # Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    \n    \n    # Your code here\n\
    \    \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n  \
    \  \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here", "    \n \
    \   # Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \nend",
  "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n", "  \n  result = []\n  \n  for i in 1..k\n\
    \    \n    current = grid[0]\n    \n    result.push(current)\n    \n    neighbors\
    \ = grid[1..-1]\n    \n    neighbors.each do |neighbor|\n      \n      next if\
    \ neighbor.include?(current)\n      \n      next if neighbor.include?(neighbors[0])\n\
    \      \n      next if neighbor.include?(neighbors[1])\n      \n      next if\
    \ neighbor.include?(neighbors[2])\n      \n      next if neighbor.include?(neighbors[3])\n\
    \      \n      next if neighbor.include?(neighbors[4])\n      \n      next if\
    \ neighbor.include?(neighbors[5])\n      \n      next if neighbor.include?(neighbors[6])\n\
    \      \n      next if neighbor.include?(neighbors[7])\n      \n      next if\
    \ neighbor.include?(neighbors[8])\n      \n      next if neighbor.include?(neighbors[9])\n\
    \      \n      next if neighbor.include?(neighbors[10])\n      \n      next if\
    \ neighbor.include?(neighbors[11])\n      \n      next if neighbor.include?(neighbors[12])\n\
    \      \n      next if neighbor.include?(neighbors[13])\n      \n      next if\
    \ neighbor.include?(neighbors[14])\n      \n      next if neighbor.include?(neighbors[15])\n\
    \      \n      next if neighbor.include?(neighbors[16])\n      \n      next if\
    \ neighbor.include?(neighbors[17])\n      \n      next if neighbor.include?(neighbors[18])\n\
    \      \n      next if neighbor.include?(neighbors[19])\n      \n      next if\
    \ neighbor.include?(neighbors[20])\n      \n      next if neighbor.include?(neighbors[21])\n\
    \      \n      next if neighbor.include?(neighbors[22])\n      \n      next if\
    \ neighbor.include?(neighbors[23])\n      \n      next if neighbor.include?(neighbors[24])\n\
    \      \n      next if neighbor.include?(neighbors[25])\n      \n      next if\
    \ neighbor.include?(neighbors[26])\n      \n      next if neighbor.include?(neighbors[27])\n\
    \      \n      next if neighbor.include?(neighbors[28])\n      \n      next if\
    \ neighbor.include?(neighbors[29])\n      \n      next if neighbor.include?(",
  "  \nend", "  \n  # Write your code here.\n  \n  return []\nend", "  \n  result\
    \ = []\n  \n  visited = Hash.new\n  \n  grid.each do |row|\n    row.each do |cell|\n\
    \      visited[cell] = false\n    end\n  end\n  \n  visited[1] = true\n  \n  while\
    \ k > 0\n    \n    cells = Hash.new\n    \n    grid.each do |row|\n      row.each\
    \ do |cell|\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell\n        cells[cell] = false\n\
    \      else\n        cells[cell] = true\n      end\n    end\n    \n    cells.each\
    \ do |cell, visited_cell|\n      if visited_cell", "  \n  \n  # Write your code\
    \ here.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  ", "  \n  # Write your code here.\n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  ", "  \nend\n</cell>\n<cell>", "  \n  \n  # Write your code here.\n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  ", "  \nend", "  \n  # Write your code here.\n  \n  grid = grid.to_a\n\
    \  grid.map!{|x| x.to_i}\n  grid.sort!\n  \n  path = []\n  path.push(grid[0])\n\
    \  \n  while path.length < k\n    \n    path.push(grid[path.last.last])\n    \n\
    \    path.last.last.upto(path.last.last.size - 1, &:next!)\n    \n  end\n  \n\
    \  path.last.last\nend", "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "    \n    grid\
    \ = grid.dup\n    grid.map!{|x| x.sort!}\n    \n    visited = Hash.new(0)\n  \
    \  \n    visited[grid[0][0].to_i] = true\n    \n    visited[grid[0][1].to_i] =\
    \ true\n    \n    visited[grid[0][2].to_i] = true\n    \n    visited[grid[1][0].to_i]\
    \ = true\n    \n    visited[grid[1][1].to_i] = true\n    \n    visited[grid[1][2].to_i]\
    \ = true\n    \n    visited[grid[2][0].to_i] = true\n    \n    visited[grid[2][1].to_i]\
    \ = true\n    \n    visited[grid[2][2].to_i] = true\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "  \n  # Write your code here.\n  \n  \n  \nend", "  \n  # Write your\
    \ code here.\n  \n  \n  \nend", "  result = []\n  \n  visited = {}\n  \n  for\
    \ i in 1..k\n    visited[i] = false\n  end\n  \n  for i in 1..k\n    visited[i]\
    \ = true\n  end\n  \n  for i in 1..k\n    result.push(grid[i][0])\n  end\n  \n\
    \  for i in 1..k\n    visited[i] = false\n  end\n  \n  for i in 1..k\n    if visited[i]\
    \ == true\n      continue\n    end\n    \n    visited[i] = true\n    \n    for\
    \ j in 1..k\n      if visited[j] == true\n        continue\n      end\n      \n\
    \      if grid[i][j] < result[-1]\n        result.push(grid[i][j])\n      end\n\
    \    end\n  end\n  \n  result\nend", "  \nend", "  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n", "    \n    grid = grid.to_a\n    \n    grid.each_with_index do |row,\
    \ i|\n        row.each_with_index do |col, j|\n            if i == 0 || j == 0\n\
    \                grid[i][j] = grid[i][j] + 1\n            else\n             \
    \   grid[i][j] = grid[i][j] + 1\n                grid[i][j - 1] = grid[i][j -\
    \ 1] + 1\n                grid[i - 1][j] = grid[i - 1][j] + 1\n              \
    \  grid[i - 1][j - 1] = grid[i - 1][j - 1] + 1\n            end\n        end\n\
    \    end\n    \n    grid.each_with_index do |row, i|\n        row.each_with_index\
    \ do |col, j|\n            if i == 0 || j == 0\n                grid[i][j] = grid[i][j]\
    \ - 1\n            else\n                grid[i][j] = grid[i][j] - 1\n       \
    \         grid[i][j - 1] = grid[i][j - 1] - 1\n                grid[i - 1][j]\
    \ = grid[i - 1][j] - 1\n                grid[i - 1][j - 1] = grid[i - 1][j - 1]\
    \ - 1\n            end\n        end\n    end\n    \n    grid.each_with_index do\
    \ |row, i|\n        row.each_with_index do |col, j|\n            if i == 0 ||\
    \ j == 0\n                grid[i][j] = grid[i][j] + 1\n            else\n    \
    \            grid[i][j] = grid[i][j] + 1\n                grid[i][j - 1] = grid[i][j\
    \ - 1] + 1\n                grid[i - 1][j] = grid[i - 1][j] + 1\n            \
    \    grid[i - 1][j - 1] = grid[i - 1][j - 1] + 1\n            end\n        end\n\
    \    end\n    \n    grid.each_with_index do |row, i|\n        row.each_with_index\
    \ do |col, j|\n            if i == 0 || j == 0\n                grid[i][j] = grid[i][j]\
    \ - 1\n            else\n                grid[i][j] = grid[i][j] - 1\n       \
    \         grid[i][j - 1] = grid[i][j - 1] - 1\n                grid[i - 1][j]\
    \ = grid[i - 1][j] - 1\n                grid[i - 1][j - 1] = grid[i - 1][j - 1]\
    \ - 1\n            end\n        end\n    end\n    \n    grid.each_with_index do\
    \ |row, i|\n        row.each_with_index do |col, j|\n            if i == 0 ||\
    \ j == 0\n                grid[i][j] = grid[i][j] + 1\n            else\n    \
    \            grid[i][j] = grid[i][j] + 1\n                grid[i][j - 1] = grid[i][j\
    \ - 1] + 1\n                grid[i - 1][j] = grid[i - 1][j] + 1\n            \
    \    grid[i - 1][j - 1] = grid[i - 1][j - 1] + 1\n            end\n        end\n\
    \    end\n    \n    grid.each_with_index do |row, i|\n        row.each_with_index\
    \ do |col, j|\n            if i == 0 || j == 0\n                grid[i][j] = ",
  "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n", "  \n  # Write your code here.\n  \n  return\
    \ []\nend", "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "  \n  # Your code here\n\
    \  \nend", "  \n  \n  # Your code here\n  \n  \n  \nend", "    \n    \n    # Your\
    \ code here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n\
    \    \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n  \
    \  \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here", " \
    \ \n  # Write your code here.\n  \n  return []\nend", "  \n  # Write your code\
    \ here\n  \n  return []\nend", "  \n  # Write your code here.\n  \n  return []\n\
    end", "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "  \n  N=grid.length\n  \n  lst_A=[]\n\
    \  lst_B=[]\n  \n  for i in 1..N\n    lst_A<<i\n  end\n  \n  for i in 0..N-1\n\
    \    lst_B<<i\n  end\n  \n  for i in 1..N-1\n    for j in 1..N-1\n      \n   \
    \   if grid[i][j]==grid[i-1][j-1]\n        lst_A<<grid[i][j]\n      elsif grid[i][j]==grid[i-1][j]\n\
    \        lst_B<<grid[i][j]\n      elsif grid[i][j]==grid[i-1][j+1]\n        lst_A<<grid[i][j]\n\
    \      elsif grid[i][j]==grid[i][j-1]\n        lst_B<<grid[i][j]\n      elsif\
    \ grid[i][j]==grid[i][j+1]\n        lst_A<<grid[i][j]\n      elsif grid[i][j]==grid[i+1][j-1]\n\
    \        lst_A<<grid[i][j]\n      elsif grid[i][j]==grid[i+1][j]\n        lst_B<<grid[i][j]\n\
    \      elsif grid[i][j]==grid[i+1][j+1]\n        lst_A<<grid[i][j]\n      elsif\
    \ grid[i][j]==grid[i][j-1]\n        lst_B<<grid[i][j]\n      elsif grid[i][j]==grid[i][j+1]\n\
    \        lst_A<<grid[i][j]\n      end\n    end\n  end\n  \n  lst_A.sort!\n  lst_B.sort!\n\
    \  \n  lst_A.each_with_index do |val,i|\n    if val==lst_B[i]\n      return lst_A\n\
    \    end\n  end\n  \n  return []\nend", "  \n  \n  # Your code here\n  \n  \n\
    end", "  \n  # Write your code here\n  \nend", "  \n  result = []\n  \n  grid.each\
    \ do |row|\n    row.each do |cell|\n      result << cell if cell != 0\n    end\n\
    \  end\n  \n  result.sort!\n  \n  result.each_with_index do |cell, index|\n  \
    \  \n    next if index == k\n    \n    result.delete_at(index)\n    \n    result.delete_at(index\
    \ + 1)\n    \n    result.delete_at(index - 1)\n    \n    result.delete_at(index\
    \ - 2)\n    \n    result.delete_at(index - 3)\n    \n    result.delete_at(index\
    \ - 4)\n    \n    result.delete_at(index - 5)\n    \n    result.delete_at(index\
    \ - 6)\n    \n    result.delete_at(index - 7)\n    \n    result.delete_at(index\
    \ - 8)\n    \n    result.delete_at(index - 9)\n    \n    result.delete_at(index\
    \ - 10)\n    \n    result.delete_at(index - 11)\n    \n    result.delete_at(index\
    \ - 12)\n    \n    result.delete_at(index - 13)\n    \n    result.delete_at(index\
    \ - 14)\n    \n    result.delete_at(index - 15)\n    \n    result.delete_at(index\
    \ - 16)\n    \n    result.delete_at(index - 17)\n    \n    result.delete_at(index\
    \ - 18)\n    \n    result.delete_at(index - 19)\n    \n    result.delete_at(index\
    \ - 20)\n    \n    result.delete_at(index - 21)\n    \n    result.delete_at(index\
    \ - 22)\n    \n    result.delete_at(index - 23)\n    \n    result.delete_at(index\
    \ - 24)\n    \n    result.delete_at(index - 25)\n    \n    result.delete_at(index\
    \ - 26)\n    \n    result.delete_at(index - 27)\n    \n    result.delete_at(index\
    \ - 28)\n    \n    result.delete_at(index - 29)\n    \n    result.delete_at(index\
    \ - 30)\n    \n    result.delete_at(index - 31)\n    \n    result.delete_at(index\
    \ - 32)\n    \n    result.delete_at(index - 33)\n    \n    result.delete_at(index\
    \ - 34)\n    \n    result.delete_at(index - 35)\n    \n    result.delete_at(index\
    \ - 36)\n    \n    result.delete_at(index - 37)\n    \n    result.delete_at(index\
    \ - 38)\n    \n    result.delete_at(index - 39)\n    \n    result.delete_at(index\
    \ - 40)\n    \n    result.delete_at(index - 41)\n    \n    result.delete_at(index",
  "  \n  result = []\n  \n  grid.each do |row|\n    row.each do |cell|\n      result\
    \ << cell if cell != 0\n    end\n  end\n  \n  result.uniq.sort\nend", "  \n  path\
    \ = []\n  \n  grid.each do |row|\n    row.each do |cell|\n      path << cell\n\
    \    end\n  end\n  \n  path.each do |cell|\n    cell.neighbors.each do |neighbor|\n\
    \      path.delete(neighbor)\n    end\n  end\n  \n  path.sort.reverse.take(k).each\
    \ do |cell|\n    puts cell.value\n  end\n  \nend", "    \n    # Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "  \n  # Your code here\n  \n\
    end", "  \n  lst_A = grid.map { |row| row.map { |cell| cell } }\n  lst_B = grid.map\
    \ { |row| row.map { |cell| cell } }\n  \n  lst_A.each_with_index do |row, i|\n\
    \    lst_B.each_with_index do |col,j|\n      lst_A[i] = lst_B[j] if lst_A[i] <\
    \ lst_B[j]\n    end\n  end\n  \n  lst_A.map { |row| row.min }\nend", "  \n  result\
    \ = []\n  \n  for i in 1..k\n    \n    current = grid[0]\n    \n    result.push(current)\n\
    \    \n    grid.each do |row|\n      \n      row.each do |cell|\n        \n  \
    \      if cell == current\n          \n          break\n          \n        elsif\
    \ cell < current\n          \n          break\n          \n        else\n    \
    \      \n          current = cell\n          \n        end\n        \n      end\n\
    \      \n    end\n    \n  end\n  \n  result\nend\n</cell>\n<code language=julia-0.6>",
  "  \n  # Write your code here\n  \nend", "  \n  result = []\n  \n  for i in 1..k\n\
    \    \n    current = grid[0]\n    \n    result.push(current)\n    \n    neighbors\
    \ = grid[1..-1]\n    \n    neighbors.each do |neighbor|\n      \n      next if\
    \ neighbor.include?(current)\n      \n      next if neighbor.include?(neighbors[0])\n\
    \      \n      next if neighbor.include?(neighbors[1])\n      \n      next if\
    \ neighbor.include?(neighbors[2])\n      \n      next if neighbor.include?(neighbors[3])\n\
    \      \n      next if neighbor.include?(neighbors[4])\n      \n      next if\
    \ neighbor.include?(neighbors[5])\n      \n      next if neighbor.include?(neighbors[6])\n\
    \      \n      next if neighbor.include?(neighbors[7])\n      \n      next if\
    \ neighbor.include?(neighbors[8])\n      \n      next if neighbor.include?(neighbors[9])\n\
    \      \n      next if neighbor.include?(neighbors[10])\n      \n      next if\
    \ neighbor.include?(neighbors[11])\n      \n      next if neighbor.include?(neighbors[12])\n\
    \      \n      next if neighbor.include?(neighbors[13])\n      \n      next if\
    \ neighbor.include?(neighbors[14])\n      \n      next if neighbor.include?(neighbors[15])\n\
    \      \n      next if neighbor.include?(neighbors[16])\n      \n      next if\
    \ neighbor.include?(neighbors[17])\n      \n      next if neighbor.include?(neighbors[18])\n\
    \      \n      next if neighbor.include?(neighbors[19])\n      \n      next if\
    \ neighbor.include?(neighbors[20])\n      \n      next if neighbor.include?(neighbors[21])\n\
    \      \n      next if neighbor.include?(neighbors[22])\n      \n      next if\
    \ neighbor.include?(neighbors[23])\n      \n      next if neighbor.include?(neighbors[24])\n\
    \      \n      next if neighbor.include?(neighbors[25])\n      \n      next if\
    \ neighbor.include?(neighbors[26])\n      \n      next if neighbor.include?(neighbors[27])\n\
    \      \n      next if neighbor.include?(neighbors[28])\n      \n      next if\
    \ neighbor.include?(neighbors[29])\n      \n      next if neighbor.include?(",
  "    \n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \n\
    \  lst_A = []\n  lst_B = []\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 2..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in ", "  \n  result = []\n  \n\
    \  visited = HashSet.new\n  \n  grid.each do |row|\n    row.each do |cell|\n \
    \     visited.add(cell)\n    end\n  end\n  \n  visited.each do |cell|\n    result\
    \ << cell\n    \n    cell.neighbors.each do |neighbor|\n      visited.add(neighbor)\n\
    \    end\n  end\n  \n  result.sort!\n  \n  result\nend", "  \n  # Write your code\
    \ here.\n  \nend", "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n", "  \n  N = grid.length\n  \n  lst_A = []\n  lst_B = []\n\
    \  \n  for i in 1..N\n    lst_A << grid[i-1]\n    lst_B << grid[i]\n  end\n  \n\
    \  lst_A.sort!\n  lst_B.sort!\n  \n  result = []\n  \n  for i in 1..k\n    result\
    \ << lst_A[i]\n    lst_A.delete_at(i)\n    lst_B.delete_at(i)\n  end\n  \n  result\n\
    end", "  \n  # Your code here\n  \nend", "  result = []\n  visited = {}\n  \n\
    \  for i in 1..k\n    visited[i] = false\n  end\n  \n  for i in 1..k\n    visited[i]\
    \ = true\n  end\n  \n  for i in 1..k\n    result.push(grid[i][0])\n  end\n  \n\
    \  for i in 1..k\n    if visited[i]\n      continue\n    end\n    \n    visited[i]\
    \ = true\n    \n    for j in 1..k\n      if visited[j]\n        continue\n   \
    \   end\n      \n      if grid[i][j] < result[-1]\n        visited[j] = true\n\
    \        result.push(grid[i][j])\n      end\n    end\n  end\n  \n  result\nend",
  "  \n  # Write your code here.\n  \nend", "  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n",
  "  \n  # Write your code here.\n  \n  return []\nend", "  \n  # Write your code\
    \ here.\n  \n  n = grid.length\n  \n  lst_A = []\n  lst_B = []\n  \n  for i in\
    \ 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][i]\n  end\n  \n  for\
    \ i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n  end\n\
    \  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end\n  \n  for i in 1..n\n    lst_A << grid[i-1][i-1]\n    lst_B << grid[i-1][n-1]\n\
    \  end", "  \n  result = []\n  \n  visited = HashSet.new\n  \n  grid.each do |row|\n\
    \    row.each do |cell|\n      visited.add(cell)\n    end\n  end\n  \n  visited.each\
    \ do |cell|\n    result << cell\n    \n    cell.neighbors.each do |neighbor|\n\
    \      visited.add(neighbor)\n    end\n  end\n  \n  result.sort!\n  \n  result\n\
    end", "    \n    # Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "  \n  # Write your code here.\n  \n  return []\nend", "  \nend", "  \n  result\
    \ = []\n  \n  visited = HashSet.new\n  \n  grid.each do |row|\n    row.each do\
    \ |cell|\n      visited.add(cell)\n    end\n  end\n  \n  visited.each do |cell|\n\
    \    result << cell\n    \n    cell.neighbors.each do |neighbor|\n      next if\
    \ visited.include?(neighbor)\n      \n      result << neighbor\n      \n     \
    \ neighbor.neighbors.each do |neighbor|\n        next if visited.include?(neighbor)\n\
    \        \n        result << neighbor\n      end\n    end\n  end\n  \n  result.sort\n\
    end", "    \n    \n    # Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "  \n  # Your code here\n  \nend", "    \n    \n    # Write your code here\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "  \n\
    \  # write your code here\n  \nend", "  \n  lst_A = []\n  lst_B = []\n  \n  for\
    \ i in 1..k\n    lst_A << grid[0][i-1]\n    lst_B << grid[0][i]\n  end\n  \n \
    \ for i in 1..k\n    lst_A << grid[1][i-1]\n    lst_B << grid[1][i]\n  end\n \
    \ \n  for i in 1..k\n    lst_A << grid[2][i-1]\n    lst_B << grid[2][i]\n  end\n\
    \  \n  lst_A.sort!\n  lst_B.sort!\n  \n  lst_A.each do |i|\n    lst_B.each do\
    \ |j|\n      if i == j\n        lst_A << i\n        lst_B << j\n      end\n  \
    \  end\n  end\n  \n  lst_A.sort!\n  lst_B.sort!\n  \n  lst_A\nend", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "  result = []\n  visited\
    \ = HashSet.new\n  \n  for i in 1..k\n    visited.add(i)\n  end\n  \n  grid.each\
    \ do |row|\n    row.each do |cell|\n      result << cell if visited.include?(cell)\n\
    \    end\n  end\n  \n  result\nend", "  \n  result = []\n  \n  visited = Hash.new\n\
    \  \n  grid.each do |row|\n    row.each do |cell|\n      visited[cell] = true\n\
    \    end\n  end\n  \n  visited.each do |cell|\n    result << cell\n  end\n  \n\
    \  while result.size < k\n    \n    result.each do |cell|\n      \n      neighbors\
    \ = Hash.new\n      \n      grid.each do |row|\n        row.each do |cell|\n \
    \         \n          neighbors[cell] = false\n          \n          neighbors[cell]\
    \ |= visited[cell]\n          \n          neighbors[cell] |= neighbors[cell].next\n\
    \          \n        end\n      end\n      \n      neighbors.each do |cell, visited|\n\
    \        \n        if visited\n          \n          visited[cell] = true\n  \
    \        \n          result << cell\n          \n        end\n        \n     \
    \ end\n      \n    end\n    \n  end\n  \n  result\nend", "  \n  result = []\n\
    \  \n  for i in 1..k\n    result.push(grid[0][i])\n  end\n  \n  for i in 1..k\n\
    \    result.push(grid[grid.length-1][i])\n  end\n  \n  for i in 1..grid.length\n\
    \    for j in 1..grid.length\n      \n      if grid[i][j] == grid[i-1][j-1]\n\
    \        result.push(grid[i][j])\n      end\n    end\n  end\n  \n  result\nend",
  "  \n  # Your code here\n  \nend", "  \n  # Write your code here.\n  \n  grid =\
    \ grid.to_a\n  \n  lst_A = grid.map { |row| row.to_a }\n  lst_B = grid.map { |row|\
    \ row.to_a }\n  \n  lst_A.each_with_index do |row, i|\n    lst_B.each_with_index\
    \ do |col, j|\n      lst_A[i] = lst_B[j]\n    end\n  end\n  \n  lst_A.each_with_index\
    \ do |row, i|\n    lst_B.each_with_index do |col, j|\n      lst_A[i] = lst_B[j]\n\
    \    end\n  end\n  \n  lst_A.each_with_index do |row, i|\n    lst_B.each_with_index\
    \ do |col, j|\n      lst_A[i] = lst_B[j]\n    end\n  end\n  \n  lst_A.each_with_index\
    \ do |row, i|\n    lst_B.each_with_index do |col, j|\n      lst_A[i] = lst_B[j]\n\
    \    end\n  end\n  \n  lst_A.each_with_index do |row, i|\n    lst_B.each_with_index\
    \ do |col, j|\n      lst_A[i] = lst_B[j]\n    end\n  end\n  \n  lst_A.each_with_index\
    \ do |row, i|\n    lst_B.each_with_index do |col, j|\n      lst_A[i] = lst_B[j]\n\
    \    end\n  end\n  \n  lst_A.each_with_index do |row, i|\n    lst_B.each_with_index\
    \ do |col, j|\n      lst_A[i] = lst_B[j]\n    end\n  end\n  \n  lst_A.each_with_index\
    \ do |row, i|\n    lst_B.each_with_index do |col, j|\n      lst_A[i] = lst_B[j]\n\
    \    end\n  end\n  \n  lst_A.each_with_index do |row, i|\n    lst_B.each_with_index\
    \ do |col, j|\n      lst_A[i] = lst_B[j]\n    end\n  end\n  \n  lst_A.each_with_index\
    \ do |row, i|\n    lst_B.each_with_index do |col, j|\n      lst_A[i] = lst_B[j]\n\
    \    end\n  end\n  \n  lst_A.each_with_index do |row, i|\n    lst_B.each_with_index\
    \ do |col, j|\n      lst_A[i] = lst_B[j]\n    end\n  end\n  \n  lst_A.each_with_index\
    \ do |row, i|", "  \n  \n  # Write your code here.\n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "  \n\
    \  # Write your code here.\n  \nend", "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", " \
    \ \nend", "  \n  # Write your code here\n  \nend", "  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n", "  \n  result = []\n  \n  visited = Hash.new\n  \n  grid.each do\
    \ |row|\n    row.each do |cell|\n      visited[cell] = true\n    end\n  end\n\
    \  \n  visited.each do |cell|\n    result << cell\n    \n    cell.neighbors.each\
    \ do |neighbor|\n      next if visited[neighbor]\n      \n      visited[neighbor]\
    \ = true\n      \n      result << neighbor\n    end\n  end\n  \n  result.sort\n\
    end", "  \n  result = []\n  \n  visited = HashSet.new\n  \n  grid.each do |row|\n\
    \    row.each do |cell|\n      visited.add(cell)\n    end\n  end\n  \n  while\
    \ visited.size != grid.size\n    \n    cells = HashSet.new\n    \n    grid.each\
    \ do |row|\n      row.each do |cell|\n        cells.add(cell)\n      end\n   \
    \ end\n    \n    cells.each do |cell|\n      \n      neighbors = cell.neighbors\n\
    \      \n      neighbors.each do |neighbor|\n        \n        if visited.include?(neighbor)\n\
    \          next\n        end\n        \n        visited.add(neighbor)\n      \
    \  \n        result << neighbor\n        \n      end\n    end\n    \n    visited.clear\n\
    \    \n  end\n  \n  result\nend", "    \n    # Write your code here.\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "  \n  N = grid.length\n  \n  lst_A = []\n  lst_B\
    \ = []\n  \n  for i in 1..N\n    lst_A << grid[i-1]\n    lst_B << grid[i]\n  end\n\
    \  \n  lst_A.sort!\n  lst_B.sort!\n  \n  lst_A.each_with_index do |val, i|\n \
    \   lst_A[i] = lst_A[i].to_i\n    lst_B[i] = lst_B[i].to_i\n  end\n  \n  lst_A.each_with_index\
    \ do |val, i|\n    lst_A[i] = lst_A[i].to_i\n    lst_B[i] = lst_B[i].to_i\n  end\n\
    \  \n  lst_A.each_with_index do |val, i|\n    lst_A[i] = lst_A[i].to_i\n    lst_B[i]\
    \ = lst_B[i].to_i\n  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_A[i]\
    \ = lst_A[i].to_i\n    lst_B[i] = lst_B[i].to_i\n  end\n  \n  lst_A.each_with_index\
    \ do |val, i|\n    lst_A[i] = lst_A[i].to_i\n    lst_B[i] = lst_B[i].to_i\n  end\n\
    \  \n  lst_A.each_with_index do |val, i|\n    lst_A[i] = lst_A[i].to_i\n    lst_B[i]\
    \ = lst_B[i].to_i\n  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_A[i]\
    \ = lst_A[i].to_i\n    lst_B[i] = lst_B[i].to_i\n  end\n  \n  lst_A.each_with_index\
    \ do |val, i|\n    lst_A[i] = lst_A[i].to_i\n    lst_B[i] = lst_B[i].to_i\n  end\n\
    \  \n  lst_A.each_with_index do |val, i|\n    lst_A[i] = lst_A[i].to_i\n    lst_B[i]\
    \ = lst_B[i].to_i\n  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_A[i]\
    \ = lst_A[i].to_i\n    lst_B[i] = lst_B[i].to_i\n  end\n  \n  lst_A.each_with_index\
    \ do |val, i|\n    lst_A[i] = lst_A[i].to_i\n    lst_B[i] = lst_B[i].to_i\n  end\n\
    \  \n  lst_A.each_with_index do |val, i|\n    lst_A[i] = lst_A", "  \n  # Your\
    \ code here\n  \nend", "  \n  # Write your code here.\n  \n  \nend\n</cell>\n\
    <text>\nSolution 3", "  \n  path = []\n  \n  grid.each do |row|\n    row.each\
    \ do |cell|\n      path << cell\n    end\n  end\n  \n  path.sort!\n  \n  path.each_with_index\
    \ do |cell, index|\n    \n    cell.each do |neighbor|\n      \n      if index\
    \ == k\n        path.delete(neighbor)\n      end\n    end\n  end\n  \n  path\n\
    end", "  \nend", "  \n  # Write your code here.\n  \n  result = []\n  \n  for\
    \ i in (0..(grid.length-1))\n    \n    current = grid[i]\n    \n    neighbors\
    \ = grid[i..-1]\n    \n    neighbors.each do |neighbor|\n      \n      next if\
    \ neighbor.include?(current)\n      \n      result << current\n      \n      break\
    \ if result.length >= k\n      \n      result << neighbor\n    end\n  end\n  \n\
    \  result\nend\n</cell>\n<code language=julia-1.0>", "  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n", "  \n  N=grid.length\n  \n  lst_A=[]\n  lst_B=[]\n  \n  for i\
    \ in 0..N-1\n    lst_A<<grid[i].to_a\n    lst_B<<grid[i].to_a\n  end\n  \n  lst_A.sort!\n\
    \  lst_B.sort!\n  \n  for i in 0..k-1\n    lst_A.pop\n    lst_B.pop\n  end\n \
    \ \n  lst_A.sort!\n  lst_B.sort!\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=lst_A[i].to_i\n\
    \    lst_B[i]=lst_B[i].to_i\n  }\n  \n  lst_A.each_index{|i|\n    lst_A[i]=",
  "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n", "  \n  N = len(grid)\n  \n  lst_A = []\n \
    \ lst_B = []\n  \n  for i in 1..N\n    lst_A << grid[i-1]\n    lst_B << grid[i]\n\
    \  end\n  \n  lst_A.sort!\n  lst_B.sort!\n  \n  lst_A.each_with_index do |val,\
    \ i|\n    lst_B[i] = val\n  end\n  \n  lst_A.each_with_index do |val, i|\n   \
    \ lst_A[i] = val\n  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_B[i]\
    \ = val\n  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_A[i] = val\n\
    \  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_B[i] = val\n  end\n \
    \ \n  lst_A.each_with_index do |val, i|\n    lst_A[i] = val\n  end\n  \n  lst_A.each_with_index\
    \ do |val, i|\n    lst_B[i] = val\n  end\n  \n  lst_A.each_with_index do |val,\
    \ i|\n    lst_A[i] = val\n  end\n  \n  lst_A.each_with_index do |val, i|\n   \
    \ lst_B[i] = val\n  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_A[i]\
    \ = val\n  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_B[i] = val\n\
    \  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_A[i] = val\n  end\n \
    \ \n  lst_A.each_with_index do |val, i|\n    lst_B[i] = val\n  end\n  \n  lst_A.each_with_index\
    \ do |val, i|\n    lst_A[i] = val\n  end\n  \n  lst_A.each_with_index do |val,\
    \ i|\n    lst_B[i] = val\n  end\n  \n  lst_A.each_with_index do |val, i|\n   \
    \ lst_A[i] = val\n  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_B[i]\
    \ = val\n  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_A[i] = val\n\
    \  end\n  \n  lst_A.each_with_index do |val, i|\n    lst_B[i] = val\n  end\n \
    \ \n  lst_A.each_with_index do |val, i", "    \n    # Write your code here.\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "  \nend", "  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n", "    \n    # Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "  \n  # Write your code here.\n  \n  \n  return []\nend", "  \n  result\
    \ = []\n  \n  visited = HashSet.new\n  \n  grid.each do |row|\n    row.each do\
    \ |cell|\n      visited.add(cell)\n    end\n  end\n  \n  visited.each do |cell|\n\
    \    result << cell\n    \n    cell.neighbors.each do |neighbor|\n      if visited.include?(neighbor)\n\
    \        next\n      end\n      \n      visited.add(neighbor)\n      \n      result\
    \ << neighbor\n    end\n  end\n  \n  result.sort\nend", "    \n    # Write your\
    \ code here.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "  \n  # Your code here\n  \n  return\
    \ []\nend", "  result = []\n  visited = HashSet.new\n  \n  grid.each do |row|\n\
    \    row.each do |cell|\n      if visited.include?(cell)\n        next\n     \
    \ end\n      \n      visited.add(cell)\n      \n      result << cell\n      \n\
    \      cell.neighbors.each do |neighbor|\n        next if visited.include?(neighbor)\n\
    \        \n        visited.add(neighbor)\n        \n        result << neighbor\n\
    \      end\n    end\n  end\n  \n  result.sort\nend", "    \n    # Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n", "    \n    # Write your code here\n    \n    return []\n</cell>\n\
    <cell>", "  \n  # Write your code here.\n  \n  \n  \nend", "  \n  result = []\n\
    \  \n  grid.each do |row|\n    row.each do |cell|\n      result << cell if cell\
    \ == 1\n    end\n  end\n  \n  result.sort!\n  \n  result[k-1]\nend", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    # Write your\
    \ code here.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "  \n  # Write your code here.\n\
    \  \n  return []\nend", "    \n    # Write your code here.\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "  \n  \n  # Write your code here.\n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", " \
    \ \n  \n  # write your code here\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "    \n    grid = grid.to_a\n\
    \    \n    grid.each do |row|\n        row.each do |cell|\n            cell.to_a.sort!\n\
    \        end\n    end\n    \n    grid.each do |row|\n        row.each do |cell|\n\
    \            cell.to_a.sort!\n        end\n    end\n    \n    grid.each do |row|\n\
    \        row.each do |cell|\n            cell.to_a.sort!\n        end\n    end\n\
    \    \n    grid.each do |row|\n        row.each do |cell|\n            cell.to_a.sort!\n\
    \        end\n    end\n    \n    grid.each do |row|\n        row.each do |cell|\n\
    \            cell.to_a.sort!\n        end\n    end\n    \n    grid.each do |row|\n\
    \        row.each do |cell|\n            cell.to_a.sort!\n        end\n    end\n\
    \    \n    grid.each do |row|\n        row.each do |cell|\n            cell.to_a.sort!\n\
    \        end\n    end\n    \n    grid.each do |row|\n        row.each do |cell|\n\
    \            cell.to_a.sort!\n        end\n    end\n    \n    grid.each do |row|\n\
    \        row.each do |cell|\n            cell.to_a.sort!\n        end\n    end\n\
    \    \n    grid.each do |row|\n        row.each do |cell|\n            cell.to_a.sort!\n\
    \        end\n    end\n    \n    grid.each do |row|\n        row.each do |cell|\n\
    \            cell.to_a.sort!\n        end\n    end\n    \n    grid.each do |row|\n\
    \        row.each do |cell|\n            cell.to_a.sort!\n        end\n    end\n\
    \    \n    grid.each do |row|\n        row.each do |cell|\n            cell.to_a.sort!\n\
    \        end\n    end\n    \n    grid.each do |row|\n        row.each do |cell|\n\
    \            cell.to_a.sort!\n        end\n    end\n    \n    grid.each do |row|\n\
    \        row.each do |cell|\n            cell.to_a.sort!\n        end\n    end\n\
    \    \n    grid.each do |row|\n        row.each do |cell|\n            cell.to_a.sort!\n\
    \        end\n    end\n    \n    grid.each do |row|\n        row.each do |cell|\n\
    \            cell.to_a.sort!\n        end\n    end\n    \n    grid.each do |row|\n\
    \        row.each do |cell|\n            cell.to_a.sort!\n        end\n    end\n\
    \    \n    grid.each do |row|\n        row.each do |cell|\n            cell.",
  "    \n    N = grid.length\n    \n    grid = grid.map{|row| row.to_a}\n    \n  \
    \  grid.map!{|row| row.sort!}\n    \n    grid.map!{|row| row.reduce(:+)}\n   \
    \ \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|row| row.reduce(:<=>)}\n\
    \    \n    grid.map!{|row| row.reduce(:<=>)}\n    \n    grid.map!{|", "  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n", "  \n  path = []\n  \n  path.push(grid[0][0])\n\
    \  \n  for i in 1..k\n    \n    path.push(grid[path[-1]][i])\n    \n  end\n  \n\
    \  path.pop\n  \nend", "  \n  # Write your code here.\n  \n  return []\nend",
  "  \n  result = []\n  \n  visited = Hash.new\n  \n  grid.each do |row|\n    row.each\
    \ do |cell|\n      visited[cell] = true\n    end\n  end\n  \n  visited.each do\
    \ |cell|\n    result << cell\n    \n    neighbors = Hash.new\n    \n    cell.neighbors.each\
    \ do |neighbor|\n      neighbors[neighbor] = true\n    end\n    \n    neighbors.each\
    \ do |neighbor|\n      result << neighbor\n    end\n  end\n  \n  result.sort!\n\
    \  \n  result\nend", "  \n  result = []\n  \n  for i in 1..k\n    \n    current\
    \ = grid[0]\n    \n    result.push(current)\n    \n    grid.each do |row|\n  \
    \    \n      row.each do |cell|\n        \n        if cell == current\n      \
    \    \n          break\n          \n        elsif cell < current\n          \n\
    \          break\n          \n        elsif cell > current\n          \n     \
    \     break\n          \n        else\n          \n          current = cell\n\
    \          \n        end\n        \n      end\n      \n    end\n    \n  end\n\
    \  \n  result\nend\n</code>\n<|/ a tags=ruby,algorithm |>\n<| c |>\nI like your\
    \ solution. Can you explain why you used `each` instead of `map`? I thought `each`\
    \ was for side-effects. I guess `map` would be more appropriate here.\n<|/ c |>\n\
    <| c |>\n`each` returns `nil` after it iterates over the collection. `map` returns\
    \ a new collection that contains the results of calling the given block on each\
    \ element of the collection. `each` also returns `nil` after it iterates over\
    \ the collection. `map` returns a new collection that contains the results of\
    \ calling the given block on each element of the collection. `each` also returns\
    \ `nil` after it iterates over the collection. `map` returns a new collection\
    \ that contains the results of calling the given block on each element of the\
    \ collection. `each` also returns `nil` after it iterates over the collection.\
    \ `map` returns a new collection that contains the results of calling the given\
    \ block on each element of the collection. `each` also returns `nil` after it\
    \ iterates over the collection. `map` returns a new collection that contains the\
    \ results of calling the given block on each element of the collection. `each`\
    \ also returns `nil` after it iterates over the collection. `map` returns a new\
    \ collection that contains the results of calling the given block on each element\
    \ of the collection. `each` also returns `nil` after it iterates over the collection.\
    \ `map` returns a new collection that contains the results of calling the given\
    \ block on each element of the collection. `each` also returns `nil` after it\
    \ iterates over the collection. `map` returns a new collection that contains the\
    \ results of calling the given block on each element of the collection. `each`\
    \ also returns `nil` after it iterates over the collection. `map` returns a new\
    \ collection that contains the results of calling the given block on each element\
    \ of the collection. `each` also returns `nil` after it iterates over the collection.\
    \ `map` ", "  \n  # Write your code here.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "  \n  lst_A\
    \ = grid.map { |row| row.map { |cell| cell } }\n  lst_B = grid.map { |row| row.map\
    \ { |cell| cell } }\n  \n  lst_A.each_with_index { |row, i| lst_A.delete_at(i)\
    \ if lst_A[i] < lst_B[i] }\n  lst_B.each_with_index { |row, i| lst_B.delete_at(i)\
    \ if lst_B[i] < lst_A[i] }\n  \n  lst_A.each_with_index { |row, i| lst_A.insert(i,\
    \ lst_B[i]) if lst_A[i] < lst_B[i] }\n  lst_B.each_with_index { |row, i| lst_B.insert(i,\
    \ lst_A[i]) if lst_B[i] < lst_A[i] }\n  \n  lst_A.map { |row| row.min }\nend",
  "  \nend", "    \n    # Write your code here\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "  \nend", "  \n  # Write your code here\n  \nend", "  \nend", "  \n \
    \ # Write your code here.\n  \n  \nend", "    \n    # Write your code here\n \
    \   \n    return []\n</cell>\n<cell>", "  \n  result = []\n  \n  visited = Hash.new\n\
    \  \n  grid.each do |row|\n    row.each do |cell|\n      visited[cell] = true\n\
    \    end\n  end\n  \n  while visited.size != grid.size\n    \n    cells = grid.map\
    \ do |row|\n      row.map do |cell|\n        cell\n      end\n    end\n    \n\
    \    cells.each do |cells|\n      \n      cells.each do |cell|\n        \n   \
    \     if visited[cell] == false\n          \n          cells.each do |cell|\n\
    \            \n            if visited[cell] == false\n              \n       \
    \       if cells.index(cell) == cells.index(cell) + k\n                result.push(cell)\n\
    \              end\n            end\n          end\n        end\n      end\n \
    \   end\n    \n    visited.clear\n    \n  end\n  \n  result\nend", "    \n   \
    \ \n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n", "  \n  # Write your code here\n  \nend", "  \n\
    \  # Your code here\n  \nend", "  \n  # Write your code here.\n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  ", "  \n  # Write your code here.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "  \n  # Write\
    \ your code here\n  \n  \nend", "  \n  \n  # Write your code here\n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  ", "  \n  lst_A = []\n  lst_B = []\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in 1..k\n    lst_A << grid[i-1][i-1]\n\
    \    lst_B << grid[i-1][i-1]\n  end\n  \n  for i in ", "  \nend", "  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n", "  \n  result = []\n  \n  grid.each do |row|\n   \
    \ row.each do |cell|\n      result << cell if cell != 0\n    end\n  end\n  \n\
    \  result.sort!\n  \n  result.reduce([]) do |memo, cell|\n    memo << cell\n \
    \   memo << memo.last\n    memo\n  end\n  \n  result.first(k).to_a\nend\n</cell>\n\
    <cell>", "  \n  # Write your code here.\n  \n  \n  \nend", "  \n  lst_A = grid.map\
    \ { |row| row.map { |cell| cell } }\n  lst_B = grid.map { |row| row.map { |cell|\
    \ cell } }\n  \n  lst_A.sort!\n  lst_B.sort!\n  \n  lst_A.each_with_index do |row,\
    \ i|\n    lst_B.each_with_index do |col, j|\n      \n      if i == 0 || j == 0\
    \ || i == lst_A.length - 1 || j == lst_B.length - 1\n        lst_A[i] = lst_B[j]\n\
    \      else\n        lst_A[i] = lst_A[i] + lst_B[j]\n      end\n    end\n  end\n\
    \  \n  lst_A.map { |cell| cell }\nend", "  \n  \n  # Your code here\n  \n  \n\
    end", "    \n    N = grid.length\n    \n    # Initialize result array\n    result\
    \ = Array.new(N)\n    \n    # Initialize visited array\n    visited = Array.new(N)\n\
    \    \n    # Initialize current cell\n    current = Array.new(N)\n    \n    #\
    \ Initialize current cell index\n    i = 0\n    \n    # Initialize current cell\
    \ value\n    current[i] = grid[0][i]\n    \n    # Initialize current cell index\n\
    \    j = 0\n    \n    # Initialize current cell value\n    current[j] = grid[0][j]\n\
    \    \n    # Initialize current cell index\n    k = 0\n    \n    # Initialize\
    \ current cell value\n    current[k] = grid[0][k]\n    \n    # Initialize current\
    \ cell index\n    l = 0\n    \n    # Initialize current cell value\n    current[l]\
    \ = grid[0][l]\n    \n    # Initialize current cell index\n    m = 0\n    \n \
    \   # Initialize current cell value\n    current[m] = grid[0][m]\n    \n    #\
    \ Initialize current cell index\n    n = 0\n    \n    # Initialize current cell\
    \ value\n    current[n] = grid[0][n]\n    \n    # Initialize current cell index\n\
    \    o = 0\n    \n    # Initialize current cell value\n    current[o] = grid[0][o]\n\
    \    \n    # Initialize current cell index\n    p = 0\n    \n    # Initialize\
    \ current cell value\n    current[p] = grid[0][p]\n    \n    # Initialize current\
    \ cell index\n    q = 0\n    \n    # Initialize current cell value\n    current[q]\
    \ = grid[0][q]\n    \n    # Initialize current cell index\n    r = 0\n    \n \
    \   # Initialize current cell value\n    current[r] = grid[0][r]\n    \n    #\
    \ Initialize current cell index\n    s = 0\n    \n    # Initialize current cell\
    \ value\n    current[s] = grid[0][s]\n    \n    # Initialize current cell index\n\
    \    t = 0\n    \n    # Initialize current cell value\n    current[t] = grid[0][t]\n\
    \    \n    # Initialize current cell index\n    u = 0\n    \n    # Initialize\
    \ current cell value\n    current[u] = grid[0][u]\n    \n    # Initialize current\
    \ cell index\n    v = 0\n    \n    # Initialize current cell value\n    current[v]\
    \ = grid[0][v]\n    \n    # Initialize current cell index\n    w = 0\n    \n \
    \   # Initialize current cell value\n    current[w] = grid[0][w]\n    \n    #\
    \ Initialize current cell index\n    x = 0\n    \n    # Initialize current cell\
    \ value\n    current[x] = grid[0][x]\n    \n    # Initialize current cell index\n\
    \    y = 0\n    \n    # Initialize current cell value\n    ", "  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n", "  \n  # Write your code here.\n  \n  return []\nend",
  "  \n  result = []\n  \n  for i in 1..k\n    \n    current = grid[0]\n    \n   \
    \ result.push(current)\n    \n    grid.each do |row|\n      \n      row.each do\
    \ |cell|\n        \n        next if cell == current\n        \n        next if\
    \ cell == result[-1]\n        \n        next if cell == result[-2]\n        \n\
    \        next if cell == result[-3]\n        \n        next if cell == result[-4]\n\
    \        \n        next if cell == result[-5]\n        \n        next if cell\
    \ == result[-6]\n        \n        next if cell == result[-7]\n        \n    \
    \    next if cell == result[-8]\n        \n        next if cell == result[-9]\n\
    \        \n        next if cell == result[-10]\n        \n        next if cell\
    \ == result[-11]\n        \n        next if cell == result[-12]\n        \n  \
    \      next if cell == result[-13]\n        \n        next if cell == result[-14]\n\
    \        \n        next if cell == result[-15]\n        \n        next if cell\
    \ == result[-16]\n        \n        next if cell == result[-17]\n        \n  \
    \      next if cell == result[-18]\n        \n        next if cell == result[-19]\n\
    \        \n        next if cell == result[-20]\n        \n        next if cell\
    \ == result[-21]\n        \n        next if cell == result[-22]\n        \n  \
    \      next if cell == result[-23]\n        \n        next if cell == result[-24]\n\
    \        \n        next if cell == result[-25]\n        \n        next if cell\
    \ == result[-26]\n        \n        next if cell == result[-27]\n        \n  \
    \      next if cell == result[-28]\n        \n        next if cell == result[-29]\n\
    \        \n        next if cell == result[-30]\n        \n        next if cell\
    \ == result[-31]\n        \n        next if cell == result[-32]\n        \n  \
    \      next if cell == result[-33]\n        \n        next if cell == result[-34]\n\
    \        \n        next if cell == result[-35]\n        \n        next if cell\
    \ == result[-36]\n        \n        next if cell == result[-37]\n        \n  \
    \      next if cell == result[-38]\n        \n        next if cell == result[-39]",
  "    \n    # Write your code here\n    \n    grid = [[int(x) for x in line.strip().split(',')]\
    \ for line in grid.split('\\n')]\n    \n    visited = [[False for x in range(len(grid[0]))]\
    \ for y in range(len(grid))]\n    \n    visited[0][0] = True\n    \n    queue\
    \ = [[grid[0][0],0]]\n    \n    ans = []\n    \n    while len(queue) > 0:\n  \
    \      \n        current = queue.pop(0)\n        \n        if current[1] < k:\n\
    \            \n            visited[current[0]][current[1]] = True\n          \
    \  \n            queue.append([grid[current[0]][current[1]+1],current[1]+1])\n\
    \            \n            queue.append([grid[current[0]][current[1]-1],current[1]-1])\n\
    \            \n            queue.append([grid[current[0]+1][current[1]],current[1]+1])\n\
    \            \n            queue.append([grid[current[0]-1][current[1]],current[1]-1])\n\
    \            \n            ans.append(current[0])\n            \n    return ans\n\
    </cell>\n<cell>", "  \n  # write your code here\n  \n  return []\nend", "  \n\
    \  # Write your code here.\n  \nend", "  \n  # Write your code here.\n  \n  return\
    \ []\nend", "  \nend", "  \n  # Your code here\n  \nend", "  \nend", "  \n  #\
    \ Write your code here\n  \n  \nend\n</cell>\n<code language=julia-1.5>", "  \n\
    \  # Write your code here\n  \n  return []\nend", "    \n    # Write your code\
    \ here.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "  \n  # Write your code here\n\
    \  \n  \nend", "  \n  path = []\n  \n  path.push(grid[0][0])\n  \n  for i in 1..k\n\
    \    path.push(grid[i][path[i-1]])\n  end\n  \n  path.pop\nend", "  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n", "    \n    # Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "  \nend", " \
    \ \n  path = []\n  \n  grid.each do |row|\n    row.each do |cell|\n      path\
    \ << cell\n    end\n  end\n  \n  path.each do |cell|\n    cell.neighbors.each\
    \ do |neighbor|\n      path.delete(neighbor)\n    end\n  end\n  \n  path.sort!\n\
    \  \n  path.take(k).to_a\nend", "  \n  result = []\n  \n  for i in 1..k\n    \n\
    \    visited = HashSet.new\n    \n    result.push(i)\n    \n    neighbors = grid.each_with_index\
    \ do |row, index|\n      row.each_with_index do |col, j|\n        \n        if\
    \ j == index\n          \n          next if visited.include?(col)\n          \n\
    \          visited.add(col)\n          \n          result.push(col)\n        \
    \  \n        end\n      end\n    end\n    \n  end\n  \n  result\nend\n</cell>\n\
    <code language=julia-1.5>", "  \n  lst_A = []\n  lst_B = []\n  \n  grid.each do\
    \ |row|\n    row.each do |cell|\n      lst_A << cell\n    end\n  end\n  \n  grid.each\
    \ do |row|\n    row.each do |cell|\n      lst_B << cell\n    end\n  end\n  \n\
    \  lst_A.sort!\n  lst_B.sort!\n  \n  i = 0\n  \n  while i < k\n    \n    if lst_A[i]\
    \ < lst_B[i]\n      i += 1\n      \n      lst_A.delete_at(i)\n      lst_B.delete_at(i)\n\
    \      \n      lst_A.sort!\n      lst_B.sort!\n      \n      break\n    end\n\
    \    \n    i += 1\n  end\n  \n  lst_A\nend\n</cell>\n<code language=julia-1.5>",
  "  \n  # Your code here\n  \nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
