name: HumanEval_160_do_algebra
language: ruby
prompt: "# Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n# the second list is a list of integers. Use the two given lists\
  \ to build the algebric \n# expression and return the evaluation of this expression.\n\
  # The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication\
  \ ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+',\
  \ '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n\
  # Note:\n# The length of operator list is equal to the length of operand list minus\
  \ one.\n# Operand is a list of of non-negative integers.\n# Operator list has at\
  \ least one operator, and operand list has at least two operands.\ndef do_algebra(operator,\
  \ operand)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
  \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
  \ 3, 4]))\n  end\nend\n"
completions: ["  result = 0\n  for i in 0..(operand.length-1)\n    result += (operand[i]\
    \ * operator[i])\n  end\n  result\nend", "  result = 0\n  for i in 0...operand.length\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  return\
    \ result\nend", "  result = 0\n  operator.each_with_index do |op, i|\n    result\
    \ += (operand[i] - operand[i - 1]) * op\n  end\n  return result\nend", "  result\
    \ = 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n \
    \   result += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", " \
    \ result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    case operator\n    when '+' then result\
    \ += operand\n    when '-' then result -= operand\n    when '*' then result *=\
    \ operand\n    when '//' then result /= operand\n    when '**' then result **=\
    \ operand\n    end\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i]).to_i\n  end\n \
    \ result\nend", "  result = 0\n  operator.each do |op|\n    result += (operand.index(op)\
    \ + 1) * (operand.index(op) + 1)\n  end\n  result\nend", "  result = 0\n  operand.each\
    \ do |num|\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 2\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 3\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 4\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 5\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 6\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 7\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 8\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 9\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 10\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 11\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 12\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 13\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 14\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 15\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 16\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 17\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 18\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 19\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 20\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 21\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 22\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 23\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 24\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 25\n    result += (num.send(operator[0]) * num.send(operator[1])) if operator.size\
    \ == 26\n", "  result = 0\n  operand.each do |operand|\n    result += (operand.to_f\
    \ * operator[0]).to_i\n    result -= (operand.to_f * operator[1]).to_i\n    result\
    \ *= (operand.to_f * operator[2]).to_i\n    result /= (operand.to_f * operator[3]).to_i\n\
    \    result **= (operand.to_f * operator[4]).to_i\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i] - operand[i\
    \ - 1]) * op\n  end\n  result\nend", "  result = 0\n  operand.each do |i|\n  \
    \  result += (operators.index(operator[0]) * operand.index(i))\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    if operator == '+'\n      result +=\
    \ operand\n    elsif operator == '-'\n      result -= operand\n    elsif operator\
    \ == '*'\n      result *= operand\n    elsif operator == '//'\n      result /=\
    \ operand\n    elsif operator == '**'\n      result **= operand\n    end\n  end\n\
    \  result\nend", "  result = 0\n  for i in 0...operand.length-1\n    result +=\
    \ (operand[i] * operator[i])\n  end\n  result\nend", "  result = 0\n  i = 0\n\
    \  while i < operand.length\n    operator = operator[i]\n    operand = operand[i]\n\
    \    case operator\n    when '+' then result += operand\n    when '-' then result\
    \ -= operand\n    when '*' then result *= operand\n    when '//' then result /=\
    \ operand\n    when '**' then result **= operand\n    end\n    i += 1\n  end\n\
    \  result\nend", "  result = 0\n  for i in 0..operand.length-1\n    result +=\
    \ (operand[i] * operator[operand.length-i-1]) \n  end\n  result\nend", "  result\
    \ = 0\n  for i in 0...operand.length-1\n    result += operand[i] * operator[i]\n\
    \  end\n  return result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    if operator\
    \ == '+'\n      result += operand\n    elsif operator == '-'\n      result -=\
    \ operand\n    elsif operator == '*'\n      result *= operand\n    elsif operator\
    \ == '//'\n      result /= operand\n    elsif operator == '**'\n      result **=\
    \ operand\n    end\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[i])\n  end\n  result\nend", "  result =\
    \ 0\n  for i in 0...operand.length-1\n    result += (operand[i] * operator[i])\n\
    \  end\n  result\nend", "  result = 0\n  for i in 0...operand.length-1\n    result\
    \ += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\nend", " \
    \ result = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i]).to_i\n  end\n \
    \ result\nend", "  result = 0\n  operator.each_with_index do |op, i|\n    result\
    \ += operand[i]\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[i])\n  end\n  return result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result += operand\n    when '-' then result -= operand\n  \
    \  when '*' then result *= operand\n    when '//' then result /= operand\n   \
    \ when '**' then result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length-i-1]) \n  end\n  result\n\
    end", "  result = 0\n  operand.each do |i|\n    result += (operators.index(operator)\
    \ + 1) * i\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i\
    \ < operand.length\n    operator = operator[i]\n    operand = operand[i]\n   \
    \ i += 1\n    if operator == '+'\n      result += operand\n    elsif operator\
    \ == '-'\n      result -= operand\n    elsif operator == '*'\n      result *=\
    \ operand\n    elsif operator == '//'\n      result /= operand\n    elsif operator\
    \ == '**'\n      result **= operand\n    end\n  end\n  return result\nend", " \
    \ result = 0\n  for i in 0...operand.length-1\n    result += (operand[i] * operator[i])\n\
    \  end\n  return result\nend", "  \n  # TODO: Write your code here\n  \nend",
  "  result = 0\n  operand.each do |i|\n    result += (operators.index(operator) +\
    \ 1) * i\n  end\n  result\nend", "  result = 0\n  for i in 0...operand.length-1\n\
    \    result += (operand[i] * operator[i])\n  end\n  return result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.pop * operand.pop).send(op)\n\
    \  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n \
    \   operator = operator[i]\n    operand = operand[i]\n    case operator\n    when\
    \ '+' then result += operand\n    when '-' then result -= operand\n    when '*'\
    \ then result *= operand\n    when '//' then result /= operand\n    when '**'\
    \ then result **= operand\n    end\n    i += 1\n  end\n  result\nend", "  result\
    \ = 0\n  \n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  \n  result\nend", "  \n  # Initialize result to 0.\n  result =\
    \ 0\n  \n  # Iterate through operator list.\n  operator.each do |op|\n    \n \
    \   # Iterate through operand list.\n    operand.each do |operand|\n      \n \
    \     # Evaluate expression.\n      result = result + operand * op\n    end\n\
    \  end\n  \n  # Return result.\n  result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += operand.shift if op == '+'\n    result -= operand.shift\
    \ if op == '-'\n    result *= operand.shift if op == '*'\n    result /= operand.shift\
    \ if op == '/'\n    result **= operand.shift if op == '**'\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    case operator\n    when '+' \n    \
    \  result = result + operand\n    when '-'\n      result = result - operand\n\
    \    when '*'\n      result = result * operand\n    when '/'\n      result = result\
    \ // operand\n    when '**'\n      result = result ** operand\n    end\n  end\n\
    \  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n    operator\
    \ = operator[i]\n    operand = operand[i]\n    i += 1\n    if operator == '+'\n\
    \      result += operand\n    elsif operator == '-'\n      result -= operand\n\
    \    elsif operator == '*'\n      result *= operand\n    elsif operator == '//'\n\
    \      result /= operand\n    elsif operator == '**'\n      result **= operand\n\
    \    end\n  end\n  result\nend", "  result = 0\n  for i in 0..(operand.length-1)\n\
    \    result += (operand[i] * operator[operand.length-i-1])\n  end\n  return result\n\
    end", "  result = 0\n  operator.each_with_index do |op, i|\n    result += operand[i]\
    \ if op == '+'\n    result -= operand[i] if op == '-'\n    result *= operand[i]\
    \ if op == '*'\n    result /= operand[i] if op == '/'\n    result **= operand[i]\
    \ if op == '**'\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[i])\n  end\n  return result\nend", "  result\
    \ = 0\n  for i in 0..(operand.length-1)\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  return result\nend", "  result = 0\n  for i in 0...operand.length\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  return\
    \ result\nend", "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i]\
    \ * operator[operator.length-i-1]) \n  end\n  result\nend", "  result = 0\n  i\
    \ = 0\n  while i < operand.length\n    operator = operator[i]\n    operand = operand[i]\n\
    \    i += 1\n    case operator\n    when '+' then result += operand\n    when\
    \ '-' then result -= operand\n    when '*' then result *= operand\n    when '//'\
    \ then result /= operand\n    when '**' then result **= operand\n    end\n  end\n\
    \  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n    operator\
    \ = operator[i]\n    operand = operand[i]\n    case operator\n    when '+' then\
    \ result += operand\n    when '-' then result -= operand\n    when '*' then result\
    \ *= operand\n    when '//' then result /= operand\n    when '**' then result\
    \ **= operand\n    end\n    i += 1\n  end\n  result\nend", "  result = 0\n  \n\
    \  for i in 0...operand.length\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  \n  return result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  \n  # Evaluate each operator in operator list with each\
    \ operand in operand list.\n  operator.each do |op|\n    result += operand.map\
    \ { |x| eval(\"#{op}(x)\") }\n  end\n  \n  return result\nend", "  \n  # TODO:\
    \ Write your code here\n  \nend", "  result = 0\n  operator.each do |op|\n   \
    \ result += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", " \
    \ result = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  operator.each_with_index do |op,\
    \ i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\nend",
  "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    if operator == '+'\n      result +=\
    \ operand\n    elsif operator == '-'\n      result -= operand\n    elsif operator\
    \ == '*'\n      result *= operand\n    elsif operator == '/'\n      result /=\
    \ operand\n    elsif operator == '//'\n      result /= operand\n    elsif operator\
    \ == '**'\n      result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.index(op) + 1) * (operand.index(op)\
    \ + 1)\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    case operator\n   \
    \ when '+' then result += operand\n    when '-' then result -= operand\n    when\
    \ '*' then result *= operand\n    when '//' then result /= operand\n    when '**'\
    \ then result **= operand\n    end\n    i += 1\n  end\n  result\nend", "  result\
    \ = 0\n  for i in 0...operand.length-1\n    result += (operand[i] * operator[i])\n\
    \  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n \
    \   operator = operator[i]\n    operand = operand[i]\n    case operator\n    when\
    \ '+' then result += operand\n    when '-' then result -= operand\n    when '*'\
    \ then result *= operand\n    when '//' then result /= operand\n    when '**'\
    \ then result **= operand\n    end\n    i += 1\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[i])\n  end\n  result\nend", "  result =\
    \ 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  result\nend", "  result = 0\n  for i in 0...operand.length-1\n  \
    \  result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\n\
    end\n</code>\n<|/ a tags=ruby,algorithm |>\n<| c |>\nI like this solution, but\
    \ I wonder if there is a way to do it without using eval.\n<|/ c |>\n<| c |>\n\
    : I added a solution that doesn't use `eval`.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I wonder if there is a way to do it without using eval.\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that doesn't use `eval`.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to do it without using eval.\n\
    <|/ c |>\n<| a dscore=2 |>\nI like your solution, but I wonder if there is a way\
    \ to do it without using eval.", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\n\
    end", "  result = 0\n  operand.each do |i|\n    result += (operators.index(operator[0])\
    \ * operand.index(i))\n  end\n  result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    if operator == '+'\n      result = result + operand\n\
    \    elsif operator == '-'\n      result = result - operand\n    elsif operator\
    \ == '*'\n      result = result * operand\n    elsif operator == '//'\n      result\
    \ = result // operand\n    elsif operator == '**'\n      result = result ** operand\n\
    \    i += 1\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n \
    \   result += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", " \
    \ result = 0\n  operand.each do |i|\n    result += (operators.index(operator)\
    \ + 1) * i\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n  \
    \  result += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", " \
    \ result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    case operator\n    when '+' then result += operand\n\
    \    when '-' then result -= operand\n    when '*' then result *= operand\n  \
    \  when '//' then result /= operand\n    when '**' then result **= operand\n \
    \   end\n    i += 1\n  end\n  result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  operand.each do |number|\n    result += (number == 0) ?\
    \ 0 : operator[operator.length - 1]\n  end\n  result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  for i in 0..(operand.length - 1)\n    result += (operand[i]\
    \ * operator[operand.length - 1 - i]).to_i\n  end\n  result\nend", "  result =\
    \ 0\n  for i in 0..(operand.length - 1)\n    result += (operand[i] * operator[i])\
    \ \n  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    case operator\n   \
    \ when '+' then result += operand\n    when '-' then result -= operand\n    when\
    \ '*' then result *= operand\n    when '//' then result /= operand\n    when '**'\
    \ then result **= operand\n    end\n    i += 1\n  end\n  result\nend", "  result\
    \ = 0\n  operand.each do |i|\n    result += (operators.index(operator[0]) * operand.index(i))\n\
    \  end\n  result\nend", "  result = 0\n  \n  for i in 0...operand.length-1\n \
    \   result += (operand[i] * operator[i])\n  end\n  \n  return result\nend", " \
    \ result = 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  result\nend", "  result = 0\n  for i in 0..(operand.length-1)\n\
    \    result += (operand[i] * operator[i])\n  end\n  return result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    case operator\n    when '+' then result += operand\n    when\
    \ '-' then result -= operand\n    when '*' then result *= operand\n    when '//'\
    \ then result /= operand\n    when '**' then result **= operand\n    end\n   \
    \ i += 1\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  return\
    \ result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n    operator\
    \ = operator[i]\n    operand = operand[i]\n    i += 1\n    if operator == '+'\n\
    \      result += operand\n    elsif operator == '-'\n      result -= operand\n\
    \    elsif operator == '*'\n      result *= operand\n    elsif operator == '//'\n\
    \      result /= operand\n    elsif operator == '**'\n      result **= operand\n\
    \    end\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    case operator\n    when '+' then result += operand\n\
    \    when '-' then result -= operand\n    when '*' then result *= operand\n  \
    \  when '//' then result /= operand\n    when '**' then result **= operand\n \
    \   end\n    i += 1\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i\
    \ < operand.length\n    operator = operator[i]\n    operand = operand[i]\n   \
    \ if operator == '+'\n      result += operand\n    elsif operator == '-'\n   \
    \   result -= operand\n    elsif operator == '*'\n      result *= operand\n  \
    \  elsif operator == '//'\n      result /= operand\n    elsif operator == '**'\n\
    \      result **= operand\n    i += 1\n  end\n  result\nend", "  result = 0\n\
    \  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    i += 1\n    case operator\n    when '+' then result += operand\n\
    \    when '-' then result -= operand\n    when '*' then result *= operand\n  \
    \  when '//' then result /= operand\n    when '**' then result **= operand\n \
    \   end\n  end\n  result\nend", "  result = 0\n  operator.each_with_index do |op,\
    \ i|\n    result += (operand[i - 1] if i > 0)\n    result *= operand[i - 1] if\
    \ i > 1\n    result /= operand[i - 1] if i > 2\n    result %= operand[i - 1] if\
    \ i > 3\n    result %= operand[i - 1] if i > 4\n    result %= operand[i - 1] if\
    \ i > 5\n    result %= operand[i - 1] if i > 6\n    result %= operand[i - 1] if\
    \ i > 7\n    result %= operand[i - 1] if i > 8\n    result %= operand[i - 1] if\
    \ i > 9\n    result %= operand[i - 1] if i > 10\n    result %= operand[i - 1]\
    \ if i > 11\n    result %= operand[i - 1] if i > 12\n    result %= operand[i -\
    \ 1] if i > 13\n    result %= operand[i - 1] if i > 14\n    result %= operand[i\
    \ - 1] if i > 15\n    result %= operand[i - 1] if i > 16\n    result %= operand[i\
    \ - 1] if i > 17\n    result %= operand[i - 1] if i > 18\n    result %= operand[i\
    \ - 1] if i > 19\n    result %= operand[i - 1] if i > 20\n    result %= operand[i\
    \ - 1] if i > 21\n    result %= operand[i - 1] if i > 22\n    result %= operand[i\
    \ - 1] if i > 23\n    result %= operand[i - 1] if i > 24\n    result %= operand[i\
    \ - 1] if i > 25\n    result %= operand[i - 1] if i > 26\n    result %= operand[i\
    \ - 1] if i > 27\n    result %= operand[i - 1] if i > 28\n    result %= operand[i\
    \ - 1] if i > 29\n    result %= operand[i - 1] if i > 30\n    result %= operand[i\
    \ - 1] if i > 31\n    result %= operand[i - 1] if i > 32\n    result %= operand[i\
    \ - 1] if i > 33\n    result %= operand[i - 1] if i > 34\n    result %= operand[i\
    \ - 1] if i > 35\n    result %= operand[i - 1] if i > 36\n    result %= operand[i\
    \ - 1] if i > 37\n    result %= operand[i - 1] if i > 38\n    result %= operand[i\
    \ - 1] if i > 39\n    result %= operand[i - 1] if i > 40\n    result %= operand[i\
    \ - 1] if i > 41\n    result %= operand[i - 1] if i > 42\n    result %= operand[i\
    \ - 1] if i > 43\n    result %= operand[i - 1] if i > 44\n    result %= operand[i\
    \ - 1] if i > 45\n    result %= operand[i - 1] if i > 46\n    result %= operand[i\
    \ - 1] if i > 47\n    result %= operand[i - 1] if i > 48\n    result %= operand[i\
    \ - 1] if ", "  result = 0\n  for i in 0...operand.length-1\n    result += (operand[i]\
    \ * operator[operand.length-i-1]) \n  end\n  result\nend", "  result = 0\n  operand.each\
    \ do |i|\n    result += (operators.index(operator) + 1) * i\n  end\n  result\n\
    end", "  result = 0\n  for i in 0..(operand.length - 1)\n    result += (operand[i]\
    \ * operator[i])\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[i])\n  end\n  result\nend", "  result =\
    \ 0\n  for i in 0...operand.length\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n \
    \   result += (operand.pop if operand.empty?) ? 0 : eval(op)\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    if operator == '+'\n      result = result + operand\n\
    \    elsif operator == '-'\n      result = result - operand\n    elsif operator\
    \ == '*'\n      result = result * operand\n    elsif operator == '//'\n      result\
    \ = result // operand\n    elsif operator == '**'\n      result = result ** operand\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  \n  # Iterate through each operator in operator list\n\
    \  operator.each do |op|\n    # Iterate through each operand in operand list\n\
    \    operand.each do |operand|\n      # Perform the operation on the operand\n\
    \      result = result + operand.send(op)\n    end\n  end\n  \n  return result\n\
    end", "  \n  # Your code here\n  \nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result += operand\n    when '-' then result -= operand\n  \
    \  when '*' then result *= operand\n    when '//' then result /= operand\n   \
    \ when '**' then result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  \n  # Your code here\n  \nend", "  result = 0\n\
    \  operator.each do |op|\n    result += (operand.last == op) ? operand.pop : 0\n\
    \  end\n  result\nend", "  result = 0\n  operand.each_with_index do |element,\
    \ index|\n    result += (element == operator[0]) ? operand[index + 1] : 0\n  end\n\
    \  result\nend", "  result = 0\n  operator.each_with_index do |op, i|\n    result\
    \ += (operand[i] - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n\
    \  operator.each do |op|\n    result += operand.map { |x| eval(\"#{op}(x)\") }\n\
    \  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result +=\
    \ (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n  result\nend", " \
    \ result = 0\n  \n  # Loop through each operator in operator list\n  operator.each\
    \ do |op|\n    # Loop through each operand in operand list\n    operand.each do\
    \ |num|\n      # Evaluate expression\n      result = result + eval(op) * num\n\
    \    end\n  end\n  \n  return result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n\
    \  result\nend", "  result = 0\n  operator.each do |op|\n    result += (operand.last\
    \ == op) ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i]).to_i\n  end\n \
    \ result\nend", "  result = 0\n  operator.each do |op|\n    result += (operand.last\
    \ == op) ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  i = 0\n  while\
    \ i < operand.length\n    operator = operator[i]\n    operand = operand[i]\n \
    \   case operator\n    when '+' then result += operand\n    when '-' then result\
    \ -= operand\n    when '*' then result *= operand\n    when '//' then result /=\
    \ operand\n    when '**' then result **= operand\n    end\n    i += 1\n  end\n\
    \  result\nend", "  result = 0\n  for i in 0...operand.length\n    result += (operand[i]\
    \ * operator[operand.length - 1 - i])\n  end\n  result\nend", "  result = 0\n\
    \  for i in 0...operand.length-1\n    result += (operand[i] * operator[i])\n \
    \ end\n  return result\nend", "  \n  # Your code here\n  \nend", "  result = 0\n\
    \  operator.each do |op|\n    result += (operand.last == op) ? operand.pop : 0\n\
    \  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n \
    \   operator = operator[i]\n    operand = operand[i]\n    i += 1\n    if operator\
    \ == '+'\n      result += operand\n    elsif operator == '-'\n      result -=\
    \ operand\n    elsif operator == '*'\n      result *= operand\n    elsif operator\
    \ == '//'\n      result /= operand\n    elsif operator == '**'\n      result **=\
    \ operand\n    end\n  end\n  return result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.index(op) + 1) * (operand.index(op) + 1)\n \
    \ end\n  result\nend", "  result = 0\n  for i in 0..(operand.length-1)\n    result\
    \ += (operand[i] * operator[operand.length-i-1]) \n  end\n  return result\nend",
  "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    if operator == '+'\n      result =\
    \ result + operand\n    elsif operator == '-'\n      result = result - operand\n\
    \    elsif operator == '*'\n      result = result * operand\n    elsif operator\
    \ == '//'\n      result = result // operand\n    elsif operator == '**'\n    \
    \  result = result ** operand\n    end\n  end\n  result\nend", "  result = 0\n\
    \  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    case operator\n    when '+' then result += operand\n    when\
    \ '-' then result -= operand\n    when '*' then result *= operand\n    when '//'\
    \ then result /= operand\n    when '**' then result **= operand\n    end\n   \
    \ i += 1\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result\
    \ += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", "  result\
    \ = 0\n  for i in 0...operand.length\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  return result\nend", "  \n  # Your code here\n  \nend",
  "  result = 0\n  \n  for i in 0..operand.length-1\n    result += (operand[i] * operator[i])\n\
    \  end\n  \n  return result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result += operand\n    when '-' then result -= operand\n  \
    \  when '*' then result *= operand\n    when '//' then result /= operand\n   \
    \ when '**' then result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  operand.each do |i|\n    result += (operators.index(operator) + 1) *\
    \ i\n  end\n  result\nend", "  result = 0\n  for i in 0..(operand.length-1)\n\
    \    result += (operand[i] * operator[i])\n  end\n  return result\nend", "  result\
    \ = 0\n  operator.each_with_index do |op, i|\n    result += operand[i]\n  end\n\
    \  result\nend", "  result = 0\n  \n  # Iterate through operator list\n  for i\
    \ in 0..(operator.length - 1)\n    # Iterate through operand list\n    for j in\
    \ 0..(operand.length - 1)\n      # Perform the operation on the operands\n   \
    \   result += (operand[j] * operator[i])\n    end\n  end\n  \n  return result\n\
    end", "  result = 0\n  operator.each_with_index do |op, i|\n    result += operand[i]\
    \ if op == '+'\n    result -= operand[i] if op == '-'\n    result *= operand[i]\
    \ if op == '*'\n    result /= operand[i] if op == '/'\n    result **= operand[i]\
    \ if op == '**'\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n\
    \    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend",
  "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  return result\nend", "  result = 0\n  operator.each do |op|\n\
    \    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend",
  "  result = 0\n  \n  operand.each do |i|\n    result += (operators.index(operator)\
    \ + 1) * i\n  end\n  \n  return result\nend", "  result = 0\n  i = 0\n  while\
    \ i < operand.length\n    operator = operator[i]\n    operand = operand[i]\n \
    \   case operator\n    when '+' \n      result = result + operand\n    when '-'\n\
    \      result = result - operand\n    when '*'\n      result = result * operand\n\
    \    when '/'\n      result = result / operand\n    when '**'\n      result =\
    \ result ** operand\n    end\n    i += 1\n  end\n  return result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result\
    \ += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    case operator\n    when '+' then result += operand\n    when\
    \ '-' then result -= operand\n    when '*' then result *= operand\n    when '//'\
    \ then result /= operand\n    when '**' then result **= operand\n    end\n   \
    \ i += 1\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result\
    \ += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  operand.each do |operand|\n   \
    \ result += (operand.to_f * operator[0]).to_i\n    result -= (operand.to_f * operator[1]).to_i\n\
    \    result *= (operand.to_f * operator[2]).to_i\n    result /= (operand.to_f\
    \ * operator[3]).to_i\n    result **= (operand.to_f * operator[4]).to_i\n  end\n\
    \  result\nend", "  result = 0\n  for i in 0..(operand.length-1)\n    result +=\
    \ (operand[i] * operator[i])\n  end\n  result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += operand.map { |i| eval(\"#{op}#{i}\") }.reduce(:+)\n\
    \  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n \
    \   operator = operator[i]\n    operand = operand[i]\n    case operator\n    when\
    \ '+' then result += operand\n    when '-' then result -= operand\n    when '*'\
    \ then result *= operand\n    when '//' then result /= operand\n    when '**'\
    \ then result **= operand\n    end\n    i += 1\n  end\n  result\nend", "  result\
    \ = 0\n  \n  for i in 0..(operand.length-1)\n    result += (operand[i] * operator[i])\n\
    \  end\n  \n  return result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    if operator\
    \ == '+'\n      result += operand\n    elsif operator == '-'\n      result -=\
    \ operand\n    elsif operator == '*'\n      result *= operand\n    elsif operator\
    \ == '//'\n      result /= operand\n    elsif operator == '**'\n      result **=\
    \ operand\n    end\n  end\n  return result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length-i-1])\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    if operator == '+'\n      result +=\
    \ operand\n    elsif operator == '-'\n      result -= operand\n    elsif operator\
    \ == '*'\n      result *= operand\n    elsif operator == '//'\n      result /=\
    \ operand\n    elsif operator == '**'\n      result **= operand\n    end\n  end\n\
    \  result\nend", "  result = 0\n  for i in 0..operand.length-1\n    result +=\
    \ (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\nend", "  result\
    \ = 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  result\nend", "  result = 0\n  \n  for i in 0..(operand.length -\
    \ 1)\n    result += (operand[i] * operator[i])\n  end\n  \n  return result\nend",
  "  result = 0\n  operand.each do |i|\n    result += (operators.index(operator) +\
    \ 1) * i\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    if operator == '+'\n\
    \      result += operand\n    elsif operator == '-'\n      result -= operand\n\
    \    elsif operator == '*'\n      result *= operand\n    elsif operator == '//'\n\
    \      result /= operand\n    elsif operator == '**'\n      result **= operand\n\
    \    i += 1\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n \
    \   result += (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i]\
    \ * operator[operand.length - 1 - i]).to_i\n  end\n  result\nend", "  result =\
    \ 0\n  operator.each_with_index do |op, i|\n    result += (operand[i] - operand[i\
    \ - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n\
    \    result += (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += operand.shift if op\
    \ == '+'\n    result -= operand.shift if op == '-'\n    result *= operand.shift\
    \ if op == '*'\n    result /= operand.shift if op == '/'\n    result **= operand.shift\
    \ if op == '**'\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[i])\n  end\n  result\nend", "  result =\
    \ 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  result\nend", "  result = 0\n  operator.each_with_index do |op, i|\n\
    \    result += (operand[i - 1] if i > 0) * (op == operator[0] ? operand[i] : operand[i\
    \ - 1] * operand[i])\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i\
    \ < operand.length\n    operator = operator[i]\n    operand = operand[i]\n   \
    \ i += 1\n    case operator\n    when '+' then result += operand\n    when '-'\
    \ then result -= operand\n    when '*' then result *= operand\n    when '//' then\
    \ result /= operand\n    when '**' then result **= operand\n    end\n  end\n \
    \ result\nend", "  result = 0\n  operator.each do |op|\n    result += (operand.last\
    \ == op) ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  i = 0\n  while\
    \ i < operand.length\n    operator = operator[i]\n    operand = operand[i]\n \
    \   i += 1\n    case operator\n    when '+' then result += operand\n    when '-'\
    \ then result -= operand\n    when '*' then result *= operand\n    when '//' then\
    \ result /= operand\n    when '**' then result **= operand\n    end\n  end\n \
    \ result\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate your efforts,\
    \ but I really want to understand why my code doesn't work. My code works, I just\
    \ don't understand why it doesn't.\n<|/ c |>\n<| c |>\nI added some comments to\
    \ my answer, hope it helps.\n<|/ c |>\n<| c |>\nThank you so much for your efforts.\
    \ I understand now. Your code works perfectly. I really appreciate your efforts.\
    \ I really want to understand why my code doesn't work. My code works, I just\
    \ don't understand why it doesn't.\n<|/ c |>\n<| c |>\nI added some comments to\
    \ my answer, hope it helps.\n<|/ c |>\n<| c |>\nThank you so much for your efforts.\
    \ I understand now. Your code works perfectly. I really appreciate your efforts.\
    \ I really want to understand why my code doesn't work. My code works, I just\
    \ don't understand why it doesn't.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\nYour code works fine for me. \n<code>", "  result = 0\n  operand.each do\
    \ |i|\n    result += (operators.index(operator) + 1) * i\n  end\n  result\nend",
  "  \n  # Initialize result to 0.\n  result = 0\n  \n  # Iterate through operator\
    \ list.\n  operator.each do |op|\n    \n    # Iterate through operand list.\n\
    \    operand.each do |num|\n      \n      # Evaluate expression.\n      result\
    \ = result + num.send(op)\n    end\n  end\n  \n  # Return result.\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    case operator\n    when '+' then result\
    \ += operand\n    when '-' then result -= operand\n    when '*' then result *=\
    \ operand\n    when '//' then result /= operand\n    when '**' then result **=\
    \ operand\n    end\n  end\n  result\nend", "  result = 0\n  for i in 0...operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    if operator == '+'\n      result +=\
    \ operand\n    elsif operator == '-'\n      result -= operand\n    elsif operator\
    \ == '*'\n      result *= operand\n    elsif operator == '//'\n      result /=\
    \ operand\n    elsif operator == '**'\n      result **= operand\n    end\n  end\n\
    \  result\nend", "  result = 0\n  for i in 0..operand.length-1\n    result +=\
    \ (operand[i] * operator[i])\n  end\n  return result\nend", "  result = 0\n  i\
    \ = 0\n  while i < operand.length - 1\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    i += 1\n    if operator == '+'\n      result = result + operand\n\
    \    elsif operator == '-'\n      result = result - operand\n    elsif operator\
    \ == '*'\n      result = result * operand\n    elsif operator == '/'\n      result\
    \ = result / operand\n    elsif operator == '//'\n      result = result // operand\n\
    \    elsif operator == '**'\n      result = result ** operand\n    end\n  end\n\
    \  return result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n \
    \   operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result += operand\n    when '-' then result -= operand\n  \
    \  when '*' then result *= operand\n    when '//' then result /= operand\n   \
    \ when '**' then result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    i += 1\n    if operator == '+'\n      result += operand\n\
    \    elsif operator == '-'\n      result -= operand\n    elsif operator == '*'\n\
    \      result *= operand\n    elsif operator == '//'\n      result /= operand\n\
    \    elsif operator == '**'\n      result **= operand\n    end\n  end\n  result\n\
    end", "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i]\
    \ * operator[operand.length - 1 - i])\n  end\n  return result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.pop if operand.empty?)\
    \ ? 0 : eval(op, operand)\n  end\n  result\nend", "  result = 0\n  i = 0\n  while\
    \ i < operand.length\n    operator = operator[i]\n    operand = operand[i]\n \
    \   i += 1\n    case operator\n    when '+' then result += operand\n    when '-'\
    \ then result -= operand\n    when '*' then result *= operand\n    when '//' then\
    \ result /= operand\n    when '**' then result **= operand\n    end\n  end\n \
    \ result\nend", "  result = 0\n  operator.each do |op|\n    result += (operand.last\
    \ == op) ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  operand.each do |operand|\n    result += (operand.to_f\
    \ * operator[0]).to_i\n    operator.shift\n  end\n  result\nend", "  result =\
    \ 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\n\
    end", "  result = 0\n  for i in 0..(operand.length-1)\n    result += (operand[i]\
    \ * operator[operand.length - 1 - i])\n  end\n  result\nend", "  result = 0\n\
    \  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i]).to_i\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n\
    \    result += operand.shift\n    result *= operand.shift\n    result /= operand.shift\n\
    \    result **= operand.shift\n  end\n  result\nend", "  result = 0\n  \n  # Iterate\
    \ through each operator in operator list\n  operator.each do |op|\n    # Iterate\
    \ through each operand in operand list\n    operand.each do |num|\n      # If\
    \ the operator is addition, add operand to result\n      if op == '+'\n      \
    \  result += num\n      elsif op == '-'\n        result -= num\n      elsif op\
    \ == '*'\n        result *= num\n      elsif op == '/'\n        result /= num\n\
    \      elsif op == '**'\n        result **= num\n      end\n    end\n  end\n \
    \ \n  return result\nend\n</cell>\n<cell>", "  result = 0\n  for i in 0...operand.length-1\n\
    \    result += (operand[i] * operator[operand.length-i-1]) \n  end\n  result\n\
    end", "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i]\
    \ * operator[operand.length - 1 - i]).to_i\n  end\n  result\nend", "  result =\
    \ 0\n  \n  # Iterate through each operator in operator list\n  operator.each do\
    \ |op|\n    # Iterate through each operand in operand list\n    operand.each do\
    \ |op|\n      # If the operator is addition, add operands\n      if op == '+'\n\
    \        result += op\n      # If the operator is subtraction, subtract operands\n\
    \      elsif op == '-'\n        result -= op\n      # If the operator is multiplication,\
    \ multiply operands\n      elsif op == '*'\n        result *= op\n      # If the\
    \ operator is floor division, divide operands by 2\n      elsif op == '//'\n \
    \       result /= op\n      # If the operator is exponentiation, raise operands\
    \ to power of 2\n      elsif op == '**'\n        result **= op\n      end\n  \
    \  end\n  end\n  \n  return result\nend", "  result = 0\n  for i in 0..(operand.length\
    \ - 1)\n    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n\
    \  result\nend", "  result = 0\n  for i in 0...operand.length\n    result += (operand[i]\
    \ * operator[operand.length - 1 - i])\n  end\n  result\nend", "  result = 0\n\
    \  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  return result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
