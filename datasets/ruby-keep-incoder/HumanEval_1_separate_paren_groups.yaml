name: HumanEval_1_separate_paren_groups
language: ruby
prompt: "# Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n# separate those group into separate strings and\
  \ return the list of those.\n# Separate groups are balanced (each open brace is\
  \ properly closed) and not nested within each other\n# Ignore any spaces in the\
  \ input string.\n# >>> separate_paren_groups('( ) (( )) (( )( ))')\n# ['()', '(())',\
  \ '(()())']\ndef separate_paren_groups(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_separate_paren_groups\n\
  \    candidate = method(:separate_paren_groups)\n    assert_equal([\"(()())\", \"\
  ((()))\", \"()\", \"((())()())\"], candidate.call(\"(()()) ((())) () ((())()())\"\
  ))\n    assert_equal([\"()\", \"(())\", \"((()))\", \"(((())))\"], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([\"(()(())((())))\"], candidate.call(\"\
  (()(())((())))\"))\n    assert_equal([\"()\", \"(())\", \"(()())\"], candidate.call(\"\
  ( ) (( )) (( )( ))\"))\n  end\nend\n"
completions: ["  paren_string.scan(/[^()]+/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map { |x| x.gsub(/\\s+/, '') }\n\
    end", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)',
  "  paren_string.scan(/[^()]+/)\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x|\
    \ x.gsub(/[\\(\\)]+/, '') }\nend", "  paren_string.scan(/[^()]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |group|\n    group.scan(/\\s*\\(([^()]*)\\)\\s*/).map\
    \ do |g|\n      g.gsub(/\\s+/, \"\")\n    end\n  end\nend", "  paren_string.scan(/[^\\\
    (\\)]+/)\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |match|\
    \ match[1].split(\" \") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\\
    s*/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*/).flatten.compact\nend", "  paren_string.scan(/\\s*\\(\\s*\\)\\s*|\\s*\\\
    (\\s*\\)\\s*/)\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/,\
    \ '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/)\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]*)/)\nend", "  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[",
  "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\((?!\\))\\s*\\)\\s*/)\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).map\
    \ { |m| m.last.empty? ? m.first : m.last }\nend", "  paren_string.scan(/\\s*\\\
    (([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map { |group| group.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^()]+/)\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten.compact\nend",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\\
    s*\\(\\s*\\)\\s*|\\s*\\(\\s*\\)\\s*\\)/)\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, '') }\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*/).map { |match| match[1].split(\" \") }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^\\\
    (\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*|([^()]+)/).flatten.compact\nend", "  paren_string.scan(/[\\(\\)]+/)\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend", " \
    \ paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/[^\\(\\)]+/)\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, '')\
    \ }\nend", "  paren_string.scan(/\\s*\\(([^()]*|(?R))*\\)\\s*/)\nend", "  paren_string.scan(/[^\\\
    (\\)]+/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[\\(\\)]+/)\n\
    end", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\\
    s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map { |m| m[0] }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^\\\
    (\\)]+)\\)\\s*/).map do |group|\n    group.split(' ').map { |word| word.gsub(/\\\
    (/, '').gsub(/\\)/, '') }\n  end\nend", "  paren_string.scan(/\\s*\\(([^\\(\\\
    )]+)\\)\\s*/).map { |group| group.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*|([^\\(]+)/).flatten\nend", "  paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend", "  paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map { |group| group.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^\\(\\)]+/).map { |x|\
    \ x.gsub(/\\s+/, '') }\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*',
  "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub!(/\\s/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\
    \").gsub(/\\s+/, \"\").gsub(/\\s+/, \"\").gsub(/\\s+/, \"\")\n  end\nend", " \
    \ paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, '')\
    \ }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend",
  "  paren_string.scan(/\\s*\\((?!\\))/).map { |x| x.gsub(/\\s*\\)/, '') }\nend",
  "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, '')\
    \ }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend",
  "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/)\nend", "  paren_string.scan(/[\\\
    (\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, '') }\nend", "  paren_string.scan(/[^()]+/)\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |m| m[1] }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*|([^()]+)/).map do |group|\n    group.flatten.compact\n  end\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^(]+)/).flatten\nend", " \
    \ paren_string.scan(/\\s*\\((?!\\))/).map { |x| x.gsub(/\\s*\\((?!\\))\\s*/, '')\
    \ }\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, '') }\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/,\
    \ '') }\nend", "  paren_string.scan(/\\s*\\((?!\\))/).map { |x| x.gsub(/\\s*\\\
    )/, '') }\nend", "  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\\
    )]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan", "  paren_string.scan(/\\\
    s*\\(\\s*\\)\\s*|\\s*\\(\\s*\\)\\s*/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, '') }\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)',
  "  paren_string.scan(/\\s*\\(\\s*\\)\\s*|\\s*\\(\\s*\\)\\s*/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^\\(\\)]+/).map { |x|\
    \ x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend",
  "  paren_string.scan(/[\\(\\)]+/)\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*|(?R))*\\\
    )\\s*/)\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\n\
    end", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/[^\\(\\\
    )]+/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/)\n\
    end", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*|([^\\(]+)/).flatten\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map { |match| match.captures.flatten.map\
    \ { |e| e.gsub(/\\s+/, '') } }\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend",
  "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend",
  "  paren_string.scan(/\\s*\\(\\s*\\)\\s*|\\s*\\(\\s*\\)\\s*\\)/).map { |x| x.gsub(/\\\
    s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).flatten\nend",
  "  paren_string.scan(/\\s*\\((?!\\))/).map { |x| x.gsub(/\\s+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |group|\n    group.gsub(/\\\
    s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\")\n  end\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(',
  '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(',
  "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, '')\
    \ }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|(\\([^()]*\\))/).flatten.compact\n\
    end", "  paren_string.scan(/[^()]+/).map { |s| s.gsub(/\\s+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\((?!\\))/).map { |x| x.gsub(/\\s*\\((?!\\))/, '') }\n\
    end", "  paren_string.scan(/\\s*\\((?!\\))\\s*\\)\\s*/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^\\\
    (\\)]+/)\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/,\
    \ '') }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub!(/\\\
    s+/, '') }\nend", "  paren_string.scan(/[\\(\\)]/).map { |x| x.gsub(/[\\(\\)]/,\
    \ '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*|(?R))*\\)\\s*/)\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|(\\([^()]*\\))/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |s| s.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\\
    s*|([^()]+)/).flatten.compact\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*/).map do |group|\n    group.split('(').map { |x| x.strip }\n  end\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/)\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*|([^\\(]+)/)\nend", "  paren_string.scan(/[^\\(\\)]+/)\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |x| x.gsub('(', '').gsub(')',\
    \ '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\n\
    end", "  paren_string.scan(/\\s*\\((?!\\))/).map { |x| x.gsub(/\\s*\\((?!\\))/,\
    \ '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\\
    ))*\\)\\s*/)\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\\
    )]+/, '') }\nend", "  paren_string.scan(/\\s*\\((?!\\))\\s*\\)\\s*|\\s*\\((?!\\\
    ))\\s*/)\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map { |group| group.to_s.gsub(/\\\
    s+/, '') }\nend", "  paren_string.scan(/[^\\(\\)]+/).map { |x| x.gsub(/\\s+/,\
    \ '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\n\
    end", "  paren_string.scan(/[^()]+/).map { |s| s.gsub(/\\s+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).flatten.map { |x| x.gsub(/\\s+/,\
    \ '') }\nend", "  paren_string.scan(/\\s*\\((?!\\))\\s*\\)\\s*/)\nend", "  paren_string.scan(/[^\\\
    (\\)]+/)\nend", "  paren_string.scan(/[\\(\\)]/).map { |x| x.gsub(/\\s+/, '')\
    \ }\nend", "  paren_string.scan(/[^()]+/).map { |s| s.gsub(/\\s+/, '') }\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend", " \
    \ paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/)\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |s| s.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\((?!\\))\\s*\\\
    )\\s*\\((?!\\))\\s*\\)/).map { |m| m.to_s }\nend", "  paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*/).map { |m| m[1] }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '')\
    \ }\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|(\\([^()]+\\))/)\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).flatten.compact\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*/).map do |group|\n    group.split('(').map { |x| x.strip }\n  end\nend",
  "  paren_string.scan(/[^\\(\\)]+/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/)\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*',
  "  paren_string.scan(/[^()]+/)\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, '') }\nend", "  paren_string.scan(/[\\(\\)]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n    paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |paren_string|\n      paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n        paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do\
    \ |paren_string|\n          paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do\
    \ |paren_string|\n            paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n              paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n                paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n                  paren_string.scan(/\\s*\\(([^()]+)\\)\\\
    s*/).map do |paren_string|\n                    paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |paren_string|\n                      paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*/).map do |paren_string|\n                        paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                          paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                            paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                              paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                               \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n        \
    \                          paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do\
    \ |paren_string|\n                                    paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*/).map do |paren_string|\n                                   \
    \   paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n      \
    \                                  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n                                          paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                               \
    \             paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n\
    \                                              paren_string.scan(", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).flatten.map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/)\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan", "  paren_string.scan(/[^()]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]*)/).flatten.compact\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |group|\n    group.scan(/\\s*\\(([^()]*)\\)\\s*/).map\
    \ do |subgroup|\n      subgroup.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |subsubgroup|\n\
    \        subsubgroup.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |subsubsubgroup|\n\
    \          subsubsubgroup.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |subsubsubsubgroup|\n\
    \            subsubsubsubgroup.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |subsubsubsubsubgroup|\n\
    \              subsubsubsubsubgroup.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |subsubsubsubsubsubgroup|\n\
    \                subsubsubsubsubsubgroup.scan(/\\s*\\(([^()]*)\\)\\s*/).map do\
    \ |subsubsubsubsubsubsubgroup|\n                  subsubsubsubsubsubsubsubgroup.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |subsubsubsubsubsubsubsubgroup|\n              \
    \      subsubsubsubsubsubsubsubsubgroup.scan(/\\s*\\(([^()]*)\\)\\s*/).map do\
    \ |subsubsubsubsubsubsubsubsubgroup|\n                      subsubsubsubsubsubsubsubsubsubgroup.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |subsubsubsubsubsubsubsubsubsubsubgroup|\n     \
    \                   subsubsubsubsubsubsubsubsubsubsubsubgroup.scan(/\\s*\\(([^()]*)\\\
    )\\s*/).map do |subsubsubsubsubsubsubsubsubsubsubsubgroup|\n                 \
    \         subsubsubsubsubsubsubsubsubsubsubsubgroup.scan(/\\s*\\(([^()]*)\\)\\\
    s*/).map do |subsubsubsubsubsubsubsubsubsubsubsubsubgroup|\n                 \
    \           subsubsubsubsubsubsubsubsubsubsubsubsubsubgroup.scan(/\\s*\\(([^()]*)\\\
    )\\s*/).map do |subsubsubsubsubsubsubsubsubsubsubsubsubsubsubgroup|\n        \
    \                      subsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubgroup.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |subsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsub",
  "  paren_string.scan(/\\s*\\((?!\\))\\s*\\)\\s*|\\s*\\((?!\\))\\s*/)\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub('(', '').gsub(')', '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*|([^()]+)/)\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/[\\\
    (\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, '') }\nend", "  paren_string.scan(/[^()]+/)\n\
    end", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(',
  "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*/).flatten.compact\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*|([^\\(]+)/).map do |group|\n\
    \    if group.first =~ /\\(/\n      group.first\n    elsif group.last =~ /\\)/\n\
    \      group.last\n    else\n      group\n    end\n  end\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|(?R))*\\)\\s*/)\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*|([^()]+)/)\nend", "  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
