name: HumanEval_71_triangle_area
language: ruby
results:
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidmaw_s6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidmaw_s6.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.55 tests/s, 327.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr2gzxn9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr2gzxn9.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.25 tests/s, 330.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa096huci\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa096huci.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003069 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.84 tests/s, 325.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7eo4r4_k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7eo4r4_k.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.48 tests/s, 313.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpopvvv1om\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpopvvv1om.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.06 tests/s, 317.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8zlr6ixp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8zlr6ixp.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.73 tests/s, 328.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8xrvlfb3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8xrvlfb3.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.82 tests/s, 311.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpectgu5k7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpectgu5k7.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.30 tests/s, 328.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xoylizg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xoylizg.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.88 tests/s, 318.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tid1auu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tid1auu.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.20 tests/s, 325.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y2iglx3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y2iglx3.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.68 tests/s, 313.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnz9v60mm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnz9v60mm.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.40 tests/s, 269.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzdtd7re\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzdtd7re.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.10 tests/s, 240.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb11vswl7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb11vswl7.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.46 tests/s, 324.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v5w1nlm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v5w1nlm.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.39 tests/s, 277.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4jef1a5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4jef1a5.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.13 tests/s, 331.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi4ay2h31\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi4ay2h31.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.047257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.16 tests/s, 21.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw0v6yd95\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw0v6yd95.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.47 tests/s, 330.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp928zeyoa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp928zeyoa.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.10 tests/s, 325.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1te8uhmf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1te8uhmf.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.34 tests/s, 334.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzr6kh46\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzr6kh46.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.025938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.55 tests/s, 38.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rgzm05c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rgzm05c.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.024381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    41.02 tests/s, 41.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnn53_dj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnn53_dj.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.55 tests/s, 113.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zt43izu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zt43izu.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.06479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    15.43 tests/s, 15.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6i6u21m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6i6u21m.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.65 tests/s, 327.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztxua03g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztxua03g.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.034783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    28.75 tests/s, 28.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp333gfbhc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp333gfbhc.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.58 tests/s, 299.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppng6efj4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppng6efj4.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.56 tests/s, 317.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt5txw1vl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt5txw1vl.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.06 tests/s, 57.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k6ekhyn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k6ekhyn.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003528 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.45 tests/s, 283.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgp9x5dtb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgp9x5dtb.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.043252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.12 tests/s, 23.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4rucy93\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4rucy93.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.47 tests/s, 215.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl68f617h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl68f617h.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.048049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    20.81 tests/s, 20.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqrtazpn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqrtazpn.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.44 tests/s, 305.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxl8h3i_c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxl8h3i_c.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.58 tests/s, 313.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoah5gxz8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoah5gxz8.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.75 tests/s, 310.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph8grvbqu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph8grvbqu.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.12 tests/s, 309.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lb3qsiu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lb3qsiu.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.16 tests/s, 326.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxhru5mg1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxhru5mg1.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.48 tests/s, 313.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpth80sosw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpth80sosw.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.37 tests/s, 322.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp9yygr4t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp9yygr4t.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.95 tests/s, 89.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgues2123\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgues2123.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003462 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.85 tests/s, 288.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_tgk2ci\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_tgk2ci.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.93 tests/s, 84.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpas4oaiya\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpas4oaiya.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.023927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    41.79 tests/s, 41.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppy7v7vrh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppy7v7vrh.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002945 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    339.56 tests/s, 339.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgguo3_ep\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgguo3_ep.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.34 tests/s, 149.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgth3ja15\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgth3ja15.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.48 tests/s, 313.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe25qmw1_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe25qmw1_.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.69 tests/s, 326.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp992ocrbg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp992ocrbg.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.98 tests/s, 318.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps72sgm_t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps72sgm_t.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.49 tests/s, 319.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bgu_sem\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bgu_sem.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.29 tests/s, 208.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  if a + b > c && a + c > b && b + c > a\n    s = (a + b + c) / 2.0\n\
    \    area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area.round(2)\n\
    \  else\n    return -1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_w46jti9\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 43478.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5zrsum8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5zrsum8.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.58 tests/s, 326.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_z0qhop4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_z0qhop4.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.74 tests/s, 256.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprt4uf8wt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprt4uf8wt.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.60 tests/s, 312.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvdpqalur\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvdpqalur.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.06 tests/s, 317.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e65t2oi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e65t2oi.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.19 tests/s, 313.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zk7wrl4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zk7wrl4.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.12 tests/s, 327.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxl966i5f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxl966i5f.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002996 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.78 tests/s, 333.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1vbabkz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1vbabkz.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.92 tests/s, 329.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttt977rl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttt977rl.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.72 tests/s, 320.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjqe2h8jl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjqe2h8jl.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.02957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.82 tests/s, 33.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5ljbg8t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5ljbg8t.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.70 tests/s, 109.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06kctzqq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06kctzqq.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.74 tests/s, 262.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xfjj1o6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xfjj1o6.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003692 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.86 tests/s, 270.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57yz3cr3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57yz3cr3.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.03 tests/s, 307.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpka8ccxbt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpka8ccxbt.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.89 tests/s, 297.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpunurk7zy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpunurk7zy.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.98 tests/s, 141.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpivj5bh72\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpivj5bh72.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.98 tests/s, 318.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdcov_bb3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdcov_bb3.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.80 tests/s, 285.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_mbsrri\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_mbsrri.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.35 tests/s, 150.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpegad3mu3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpegad3mu3.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.86 tests/s, 293.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphxxfgthu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphxxfgthu.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.093279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    10.72 tests/s, 10.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw72ax7f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw72ax7f.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.16 tests/s, 305.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcxm1e3dj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcxm1e3dj.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.10 tests/s, 325.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydyr8o1u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydyr8o1u.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006656 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.24 tests/s, 150.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47raiu28\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47raiu28.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006864 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.69 tests/s, 145.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_4qxxkj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_4qxxkj.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.00 tests/s, 178.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2_wn77b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2_wn77b.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.51 tests/s, 320.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdskvmbe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdskvmbe.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.91 tests/s, 193.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpimol2w79\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpimol2w79.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.22 tests/s, 299.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpihkrwe_2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpihkrwe_2.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.62 tests/s, 305.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodufib2y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodufib2y.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.47 tests/s, 314.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp283v54h2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp283v54h2.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.86 tests/s, 316.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6i47fwy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6i47fwy.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.61 tests/s, 66.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvvanqy2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvvanqy2.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.37 tests/s, 306.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpryronf2y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpryronf2y.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.77 tests/s, 303.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgmk4debw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgmk4debw.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.06 tests/s, 317.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd0lqwx_r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd0lqwx_r.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.53 tests/s, 311.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbqe7w0t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbqe7w0t.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.71 tests/s, 285.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbf3hsu7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbf3hsu7.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.73 tests/s, 228.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qgewlam\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qgewlam.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.69 tests/s, 326.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcdgh674\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcdgh674.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.95 tests/s, 266.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4swyir4p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4swyir4p.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.57 tests/s, 274.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp364p276j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp364p276j.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 324.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5yj6peti\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5yj6peti.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.07 tests/s, 318.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3p1su35\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3p1su35.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.88 tests/s, 304.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeh1as93x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeh1as93x.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.22 tests/s, 333.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzxl9wrs2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzxl9wrs2.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.60 tests/s, 307.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtr6p85d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtr6p85d.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.60 tests/s, 185.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy72td7d2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy72td7d2.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 312.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp43xvtczc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp43xvtczc.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003158 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.66 tests/s, 316.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvlhke86_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvlhke86_.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.73 tests/s, 240.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwgg9v22\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwgg9v22.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.48 tests/s, 302.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmn7wzk4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmn7wzk4.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004789 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.81 tests/s, 208.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejw0y79z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejw0y79z.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.58 tests/s, 218.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazpc_809\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazpc_809.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.033015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    30.29 tests/s, 30.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppznpko6u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppznpko6u.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.52 tests/s, 323.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvmioe60\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvmioe60.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.11 tests/s, 118.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxki_p_aw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxki_p_aw.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.52 tests/s, 55.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnzynyet1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnzynyet1.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.76 tests/s, 316.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuov_s7ew\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuov_s7ew.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.04 tests/s, 70.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8igmm2j3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8igmm2j3.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.52 tests/s, 328.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5j8fcwv7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5j8fcwv7.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.00 tests/s, 250.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvm94c9a4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvm94c9a4.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 320.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzs0vfnf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzs0vfnf.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.96 tests/s, 316.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk88xwkz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk88xwkz.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.87 tests/s, 126.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp545057zo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp545057zo.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.41 tests/s, 307.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj1qnmnh9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj1qnmnh9.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.95 tests/s, 298.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  if a + b > c && a + c > b && b + c > a\n    area = (a * b) / 2\n  \
    \  return area.round(2)\n  else\n    return -1\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate\
    \ = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3, 4, 5))\n \
    \   assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n    assert_equal(-1,\
    \ candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10, 5, 7))\n\
    \    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43, candidate.call(1,\
    \ 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzhcp7f5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzhcp7f5.rb:23:in\
    \ `test_triangle_area'\n     20:     candidate = method(:triangle_area)\n    \
    \ 21:     assert_equal(6.0, candidate.call(3, 4, 5))\n     22:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n  => 23:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     24:     assert_equal(1.73, candidate.call(2, 2, 2))\n     25: \
    \    assert_equal(-1, candidate.call(1, 2, 3))\n     26:     assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n<8.18> expected but was\n<16>\n\ndiff:\n? 8.18\n\
    ?    6\n? -- ?\n===============================================================================\n\
    \nFinished in 0.0039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.41 tests/s, 769.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdvqy1g7l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdvqy1g7l.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 324.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4pgkj5a1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4pgkj5a1.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003298 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.21 tests/s, 303.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpquksgu94\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpquksgu94.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.61 tests/s, 123.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0zj2y6v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0zj2y6v.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.76 tests/s, 139.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51kfhnpj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51kfhnpj.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.09 tests/s, 214.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphp087nzt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphp087nzt.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.043321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.08 tests/s, 23.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn23d3n4j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn23d3n4j.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.84 tests/s, 300.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbq7t_ur\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbq7t_ur.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.50 tests/s, 312.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\n  sides = [a, b, c].sort\n  return -1 if sides[0]\
    \ + sides[1] <= sides[2]\n  area = (sides[0] + sides[1] + sides[2]) / 2.0\n  Math.sqrt(area\
    \ * (area - sides[0]) * (area - sides[1]) * (area - sides[2]))\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate\
    \ = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3, 4, 5))\n \
    \   assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n    assert_equal(-1,\
    \ candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10, 5, 7))\n\
    \    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43, candidate.call(1,\
    \ 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2op5_3v3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2op5_3v3.rb:22:in\
    \ `test_triangle_area'\n     19:     candidate = method(:triangle_area)\n    \
    \ 20:     assert_equal(6.0, candidate.call(3, 4, 5))\n     21:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n  => 22:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     23:     assert_equal(1.73, candidate.call(2, 2, 2))\n     24: \
    \    assert_equal(-1, candidate.call(1, 2, 3))\n     25:     assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n<8.18> expected but was\n<8.181534085976786>\n\n\
    diff:\n? 8.181534085976786\n===============================================================================\n\
    \nFinished in 0.003309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.21 tests/s, 906.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1er3663f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1er3663f.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.13 tests/s, 321.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbrjbm2o1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbrjbm2o1.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.68 tests/s, 108.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxm72ztg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxm72ztg.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.71 tests/s, 329.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr5vlffrb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr5vlffrb.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.16 tests/s, 317.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx3nchb9j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx3nchb9j.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.75 tests/s, 321.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppp5hd5a0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppp5hd5a0.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.49 tests/s, 329.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnzqcqs_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnzqcqs_.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.04 tests/s, 304.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahyh66p0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahyh66p0.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.86 tests/s, 298.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ze2yyoo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ze2yyoo.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.69 tests/s, 319.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprebt0qz1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprebt0qz1.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.08 tests/s, 199.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwicl0f4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwicl0f4.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.30 tests/s, 328.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ea8nlj1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ea8nlj1.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.49 tests/s, 73.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpib2g17p6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpib2g17p6.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00941 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.27 tests/s, 106.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2v760r5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2v760r5.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.89 tests/s, 324.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpog5d_efe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpog5d_efe.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.79 tests/s, 322.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaw3mm2l7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaw3mm2l7.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.97 tests/s, 162.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dkyculm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dkyculm.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008719 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.69 tests/s, 114.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3t5cx8k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3t5cx8k.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.44 tests/s, 178.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_c9swrf0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_c9swrf0.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.83 tests/s, 323.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcwyv3l39\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcwyv3l39.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.82 tests/s, 311.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx498nvro\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx498nvro.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.53 tests/s, 311.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n\
    \  area = (sides[0] + sides[1] + sides[2]) / 2.0\n  Math.sqrt(area * (area - sides[0])\
    \ * (area - sides[1]) * (area - sides[2]))\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6hp_uyx4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6hp_uyx4.rb:21:in\
    \ `test_triangle_area'\n     18:     candidate = method(:triangle_area)\n    \
    \ 19:     assert_equal(6.0, candidate.call(3, 4, 5))\n     20:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n  => 21:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     22:     assert_equal(1.73, candidate.call(2, 2, 2))\n     23: \
    \    assert_equal(-1, candidate.call(1, 2, 3))\n     24:     assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n<8.18> expected but was\n<8.181534085976786>\n\n\
    diff:\n? 8.181534085976786\n===============================================================================\n\
    \nFinished in 0.003365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.18 tests/s, 891.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb6bf1u1c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb6bf1u1c.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.74 tests/s, 308.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rtmu6p8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rtmu6p8.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.55 tests/s, 308.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6wv0wetd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6wv0wetd.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.062191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    16.08 tests/s, 16.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3h6taug\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3h6taug.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.94 tests/s, 129.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdldeu4tb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdldeu4tb.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.029991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.34 tests/s, 33.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp540n3cmm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp540n3cmm.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.038035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.29 tests/s, 26.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuzt7dzv6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuzt7dzv6.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.31 tests/s, 325.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyxonf1q5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyxonf1q5.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.82 tests/s, 311.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdus0s_5b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdus0s_5b.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.68 tests/s, 324.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0s_7wuu5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0s_7wuu5.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.45 tests/s, 281.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwie029d3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwie029d3.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.11 tests/s, 333.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1urjdk3s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1urjdk3s.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.07 tests/s, 314.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstwxijvl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstwxijvl.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.89 tests/s, 324.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3f34wk1e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3f34wk1e.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.62 tests/s, 320.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3et_z_cu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3et_z_cu.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.64 tests/s, 308.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpapn3ecd3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpapn3ecd3.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.20 tests/s, 325.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37yjfqd3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37yjfqd3.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.37 tests/s, 310.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbj6vo509\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbj6vo509.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.35 tests/s, 288.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3eymchyf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3eymchyf.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.50 tests/s, 232.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpohsgx6pe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpohsgx6pe.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.93 tests/s, 300.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9r7sbsor\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9r7sbsor.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.73 tests/s, 323.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc6qbc0vn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc6qbc0vn.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.49 tests/s, 303.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja5eyzy2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja5eyzy2.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.78 tests/s, 147.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphffpi6qd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphffpi6qd.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.37 tests/s, 222.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztlyufw4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztlyufw4.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.64 tests/s, 86.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsrj6_rip\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsrj6_rip.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.86 tests/s, 317.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpba8hrtd6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpba8hrtd6.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.13 tests/s, 243.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_68w9epf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_68w9epf.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.040443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.73 tests/s, 24.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuekx07u6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuekx07u6.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.042644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.45 tests/s, 23.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_iep35hu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_iep35hu.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.05 tests/s, 283.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl7vhx_cj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl7vhx_cj.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010992 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.98 tests/s, 90.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvk4zp6ma\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvk4zp6ma.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.30 tests/s, 312.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe88_hd5l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe88_hd5l.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.88 tests/s, 318.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbbd9c92g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbbd9c92g.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.56 tests/s, 316.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7x8iu57h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7x8iu57h.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.06 tests/s, 329.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_s6hq9it\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_s6hq9it.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.48 tests/s, 65.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj1wsx6e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj1wsx6e.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.052397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    19.09 tests/s, 19.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_hoa2te\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_hoa2te.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.24 tests/s, 276.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpje1co25y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpje1co25y.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.72 tests/s, 311.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh35z1zd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh35z1zd.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.16 tests/s, 322.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl10jdgrs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl10jdgrs.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.03 tests/s, 151.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp968ap4s4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp968ap4s4.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.66 tests/s, 310.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  if a + b > c && a + c > b && b + c > a\n    area = (a * b) / 2\n  \
    \  return area.round(2)\n  else\n    return -1\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate\
    \ = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3, 4, 5))\n \
    \   assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n    assert_equal(-1,\
    \ candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10, 5, 7))\n\
    \    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43, candidate.call(1,\
    \ 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1841rh5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1841rh5.rb:23:in\
    \ `test_triangle_area'\n     20:     candidate = method(:triangle_area)\n    \
    \ 21:     assert_equal(6.0, candidate.call(3, 4, 5))\n     22:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n  => 23:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     24:     assert_equal(1.73, candidate.call(2, 2, 2))\n     25: \
    \    assert_equal(-1, candidate.call(1, 2, 3))\n     26:     assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n<8.18> expected but was\n<16>\n\ndiff:\n? 8.18\n\
    ?    6\n? -- ?\n===============================================================================\n\
    \nFinished in 0.003127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.80 tests/s, 959.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5pjkg2n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5pjkg2n.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.41 tests/s, 328.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  if a + b > c && a + c > b && b + c > a\n    return ((a + b + c) / 2.0).round(2)\n\
    \  else\n    return -1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n\
    \    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1,\
    \ 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73,\
    \ candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n  \
    \  assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2,\
    \ 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1,\
    \ candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptuz_cike\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptuz_cike.rb:22:in\
    \ `test_triangle_area'\n     19:     candidate = method(:triangle_area)\n    \
    \ 20:     assert_equal(6.0, candidate.call(3, 4, 5))\n     21:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n  => 22:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     23:     assert_equal(1.73, candidate.call(2, 2, 2))\n     24: \
    \    assert_equal(-1, candidate.call(1, 2, 3))\n     25:     assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n<8.18> expected but was\n<8.5>\n\ndiff:\n? 8.18\n\
    ?   5 \n?   ?? \n===============================================================================\n\
    \nFinished in 0.002988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.67 tests/s, 1004.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpevxax91h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpevxax91h.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.31 tests/s, 320.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbajoor1w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbajoor1w.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002911 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    343.52 tests/s, 343.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qbzd9gn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qbzd9gn.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002804 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    356.63 tests/s, 356.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return the area\
    \ of\n# the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n# than the third side.\n# Example:\n#\
    \ triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a,\
    \ b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0,\
    \ candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n \
    \   assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2,\
    \ 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25,\
    \ candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n \
    \   assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdhc60w2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_triangle_area(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdhc60w2.rb:16:in\
    \ `test_triangle_area'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_triangle_area\n     15:     candidate = method(:triangle_area)\n\
    \  => 16:     assert_equal(6.0, candidate.call(3, 4, 5))\n     17:     assert_equal(-1,\
    \ candidate.call(1, 2, 10))\n     18:     assert_equal(8.18, candidate.call(4,\
    \ 8, 5))\n     19:     assert_equal(1.73, candidate.call(2, 2, 2))\n<6.0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    357.91 tests/s, 357.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
