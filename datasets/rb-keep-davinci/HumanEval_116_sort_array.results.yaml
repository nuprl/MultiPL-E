name: HumanEval_116_sort_array
language: ruby
results:
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8nshqprp\nStarted\n.\nFinished in 0.000422063 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2369.31 tests/s, 18954.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmlmhn0wv\nStarted\n.\nFinished in 0.000417475 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2395.35 tests/s, 19162.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaw9b6yl1\nStarted\n.\nFinished in 0.000384874 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2598.25 tests/s, 20786.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfgak0stc\nStarted\n.\nFinished in 0.00040399 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2475.31 tests/s, 19802.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7v9msvf8\nStarted\n.\nFinished in 0.000404451 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2472.49 tests/s, 19779.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphv8eao8k\nStarted\n.\nFinished in 0.000413507 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2418.34 tests/s, 19346.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj90qji7d\nStarted\n.\nFinished in 0.000401255 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2492.18 tests/s, 19937.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgufay97y\nStarted\n.\nFinished in 0.000451269 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2215.97 tests/s, 17727.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps7xgxgxz\nStarted\n.\nFinished in 0.000427023 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2341.79 tests/s, 18734.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp11kmy0xq\nStarted\n.\nFinished in 0.000397077 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2518.40 tests/s, 20147.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfb13eqv8\nStarted\n.\nFinished in 0.00040419 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2474.08 tests/s, 19792.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpao3m7v5e\nStarted\n.\nFinished in 0.000373071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2680.45 tests/s, 21443.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp913s03kt\nStarted\n.\nFinished in 0.000466327 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2144.42 tests/s, 17155.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf11yss2h\nStarted\n.\nFinished in 0.000367511 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2721.01 tests/s, 21768.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprcmd0ipv\nStarted\n.\nFinished in 0.000397477 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2515.87 tests/s, 20126.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv592keqn\nStarted\n.\nFinished in 0.000405502 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2466.08 tests/s, 19728.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoepus98r\nStarted\n.\nFinished in 0.00072837 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1372.93 tests/s, 10983.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg5sxqug4\nStarted\n.\nFinished in 0.00046816 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2136.02 tests/s, 17088.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmj6k5a6d\nStarted\n.\nFinished in 0.00041486 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2410.45 tests/s, 19283.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpojspcgic\nStarted\n.\nFinished in 0.000464073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2154.83 tests/s, 17238.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps70lv49w\nStarted\n.\nFinished in 0.000374354 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2671.27 tests/s, 21370.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv0x1qfnl\nStarted\n.\nFinished in 0.000437332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2286.59 tests/s, 18292.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp63sz2_ev\nStarted\n.\nFinished in 0.000555835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1799.10 tests/s, 14392.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpubw16v_i\nStarted\n.\nFinished in 0.000780698 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1280.91 tests/s, 10247.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsuoiu5rg\nStarted\n.\nFinished in 0.000427583 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2338.73 tests/s, 18709.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjzmy4zm8\nStarted\n.\nFinished in 0.000399601 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2502.50 tests/s, 20019.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9u__uy_e\nStarted\n.\nFinished in 0.000461879 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2165.07 tests/s, 17320.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbfasefpn\nStarted\n.\nFinished in 0.000390935 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2557.97 tests/s, 20463.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2at47t36\nStarted\n.\nFinished in 0.000395584 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2527.91 tests/s, 20223.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphc6iuh9p\nStarted\n.\nFinished in 0.000396024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2525.10 tests/s, 20200.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplpgxpaqw\nStarted\n.\nFinished in 0.00041494 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2409.99 tests/s, 19279.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnx6b0w9m\nStarted\n.\nFinished in 0.000424037 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2358.28 tests/s, 18866.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbpneu9uj\nStarted\n.\nFinished in 0.000384774 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2598.93 tests/s, 20791.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8jga65t6\nStarted\n.\nFinished in 0.000447391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2235.18 tests/s, 17881.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0hgyybsd\nStarted\n.\nFinished in 0.000630475 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1586.11 tests/s, 12688.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa9_72ect\nStarted\n.\nFinished in 0.000580611 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1722.32 tests/s, 13778.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1wciflif\nStarted\n.\nFinished in 0.000440328 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2271.03 tests/s, 18168.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp29kcht4d\nStarted\n.\nFinished in 0.000371157 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2694.28 tests/s, 21554.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0fw9to5g\nStarted\n.\nFinished in 0.000393901 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2538.71 tests/s, 20309.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppp74qexu\nStarted\n.\nFinished in 0.000447673 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2233.77 tests/s, 17870.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpox8p84xy\nStarted\n.\nFinished in 0.000448784 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2228.24 tests/s, 17825.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv_w9zra4\nStarted\n.\nFinished in 0.000487466 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2051.43 tests/s, 16411.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwhn2o2km\nStarted\n.\nFinished in 0.000428385 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2334.35 tests/s, 18674.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi6irm_pz\nStarted\n.\nFinished in 0.000471216 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2122.17 tests/s, 16977.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6ugi8mne\nStarted\n.\nFinished in 0.000527873 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1894.40 tests/s, 15155.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi9_zno_x\nStarted\n.\nFinished in 0.000585832 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1706.97 tests/s, 13655.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm9yd4mgn\nStarted\n.\nFinished in 0.000560465 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1784.23 tests/s, 14273.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiyl00903\nStarted\n.\nFinished in 0.000409951 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2439.32 tests/s, 19514.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7a_rwwse\nStarted\n.\nFinished in 0.000471706 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2119.96 tests/s, 16959.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqvfxkqaj\nStarted\n.\nFinished in 0.000417636 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2394.43 tests/s, 19155.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdno_j0ss\nStarted\n.\nFinished in 0.000360799 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2771.63 tests/s, 22173.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuk7j34o6\nStarted\n.\nFinished in 0.000385044 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2597.11 tests/s, 20776.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfgc7wb8h\nStarted\n.\nFinished in 0.000400954 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2494.05 tests/s, 19952.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnfpqa0d7\nStarted\n.\nFinished in 0.000445378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2245.28 tests/s, 17962.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzji35qno\nStarted\n.\nFinished in 0.000371389 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2692.59 tests/s, 21540.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpncs70ja4\nStarted\n.\nFinished in 0.000418778 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2387.90 tests/s, 19103.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp03_6k6dq\nStarted\n.\nFinished in 0.000461959 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2164.69 tests/s, 17317.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4fq9s9u6\nStarted\n.\nFinished in 0.000385635 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2593.13 tests/s, 20745.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj5p9qqq6\nStarted\n.\nFinished in 0.000413097 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2420.74 tests/s, 19365.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpncn0ala8\nStarted\n.\nFinished in 0.000399851 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2500.93 tests/s, 20007.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzz_b2fqp\nStarted\n.\nFinished in 0.000424879 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2353.61 tests/s, 18828.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjshqkl4o\nStarted\n.\nFinished in 0.00061698 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1620.80 tests/s, 12966.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxkn45m1y\nStarted\n.\nFinished in 0.00056372 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1773.93 tests/s, 14191.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp61omlwms\nStarted\n.\nFinished in 0.000432143 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2314.05 tests/s, 18512.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcrqbvcgl\nStarted\n.\nFinished in 0.000491644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2033.99 tests/s, 16271.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx7vvv4v7\nStarted\n.\nFinished in 0.000496514 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2014.04 tests/s, 16112.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf13gpebe\nStarted\n.\nFinished in 0.000455867 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2193.62 tests/s, 17548.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp42onirh_\nStarted\n.\nFinished in 0.000424278 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2356.95 tests/s, 18855.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwbs6tkze\nStarted\n.\nFinished in 0.000474342 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2108.18 tests/s, 16865.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphmnwtiy9\nStarted\n.\nFinished in 0.000489881 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2041.31 tests/s, 16330.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjv7gzhii\nStarted\n.\nFinished in 0.000496324 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2014.81 tests/s, 16118.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi0c5h8wa\nStarted\n.\nFinished in 0.000546087 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1831.21 tests/s, 14649.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsc8q64h1\nStarted\n.\nFinished in 0.000455237 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2196.66 tests/s, 17573.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb09n4seg\nStarted\n.\nFinished in 0.000457961 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2183.59 tests/s, 17468.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqsk5clyz\nStarted\n.\nFinished in 0.000439606 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2274.76 tests/s, 18198.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw7v9s_sy\nStarted\n.\nFinished in 0.00041467 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2411.56 tests/s, 19292.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxzqw7npu\nStarted\n.\nFinished in 0.000383983 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2604.28 tests/s, 20834.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqct6w7py\nStarted\n.\nFinished in 0.000381598 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2620.56 tests/s, 20964.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxo8plgby\nStarted\n.\nFinished in 0.00040392 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2475.74 tests/s, 19805.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiak8pr9b\nStarted\n.\nFinished in 0.000432533 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2311.96 tests/s, 18495.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7clyv37h\nStarted\n.\nFinished in 0.000375076 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2666.13 tests/s, 21329.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpax1ukmzc\nStarted\n.\nFinished in 0.000377759 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2647.19 tests/s, 21177.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy5wh9rb1\nStarted\n.\nFinished in 0.000415611 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2406.10 tests/s, 19248.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpic6fj1e3\nStarted\n.\nFinished in 0.00043097 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2320.35 tests/s, 18562.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplbd5_crp\nStarted\n.\nFinished in 0.000390183 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2562.90 tests/s, 20503.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwkdi67uy\nStarted\n.\nFinished in 0.000417885 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2393.00 tests/s, 19144.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj2hbqjzn\nStarted\n.\nFinished in 0.00039886 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2507.15 tests/s, 20057.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8dzd8cxb\nStarted\n.\nFinished in 0.000555996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1798.57 tests/s, 14388.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkomj7k2w\nStarted\n.\nFinished in 0.000382088 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2617.20 tests/s, 20937.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd94fthyl\nStarted\n.\nFinished in 0.000425229 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2351.67 tests/s, 18813.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1_ds0xn4\nStarted\n.\nFinished in 0.000387278 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2582.12 tests/s, 20657.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdv1f3qo4\nStarted\n.\nFinished in 0.000422374 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2367.57 tests/s, 18940.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr1tl5f6t\nStarted\n.\nFinished in 0.000417024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2397.94 tests/s, 19183.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpek8i1co7\nStarted\n.\nFinished in 0.000443834 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2253.09 tests/s, 18024.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppqg0mz8a\nStarted\n.\nFinished in 0.000530728 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1884.20 tests/s, 15073.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppjy_0s0r\nStarted\n.\nFinished in 0.000412576 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2423.80 tests/s, 19390.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd7kpmtke\nStarted\n.\nFinished in 0.000522382 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1914.31 tests/s, 15314.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuyt53k2f\nStarted\n.\nFinished in 0.000387338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2581.72 tests/s, 20653.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuyge28je\nStarted\n.\nFinished in 0.00055276 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1809.10 tests/s, 14472.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiz19hdyi\nStarted\n.\nFinished in 0.000407546 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2453.71 tests/s, 19629.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |e| [e.to_s(2).count('1'),\
    \ e] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2ew5r948\nStarted\n.\nFinished in 0.000412275 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2425.57 tests/s, 19404.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpry7a4_cx\nStarted\n.\nFinished in 0.000439286 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2276.42 tests/s, 18211.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7_tjlctn\nStarted\n.\nFinished in 0.000391416 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2554.83 tests/s, 20438.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgstwgp4i\nStarted\n.\nFinished in 0.000399862 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2500.86 tests/s, 20006.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0yl232sk\nStarted\n.\nFinished in 0.000402898 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2482.02 tests/s, 19856.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcp4v8jd_\nStarted\n.\nFinished in 0.000386086 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2590.10 tests/s, 20720.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppb7xk871\nStarted\n.\nFinished in 0.000440648 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2269.39 tests/s, 18155.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4z3q2rhe\nStarted\n.\nFinished in 0.000444976 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2247.31 tests/s, 17978.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc8r7ahwo\nStarted\n.\nFinished in 0.000394992 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2531.70 tests/s, 20253.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz2djb3rg\nStarted\n.\nFinished in 0.000514177 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1944.86 tests/s, 15558.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpts_tza_v\nStarted\n.\nFinished in 0.000405954 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2463.33 tests/s, 19706.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyqxz9b7u\nStarted\n.\nFinished in 0.000410852 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2433.97 tests/s, 19471.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5uj1cyzj\nStarted\n.\nFinished in 0.000368954 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2710.36 tests/s, 21682.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0zsk921x\nStarted\n.\nFinished in 0.000443804 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2253.25 tests/s, 18025.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa9ptrgzp\nStarted\n.\nFinished in 0.000399792 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2501.30 tests/s, 20010.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi7kmzlf0\nStarted\n.\nFinished in 0.000403128 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2480.60 tests/s, 19844.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjkxffjcm\nStarted\n.\nFinished in 0.000537461 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1860.60 tests/s, 14884.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiskpqjjv\nStarted\n.\nFinished in 0.000488449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2047.30 tests/s, 16378.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0y5x5wyw\nStarted\n.\nFinished in 0.000608153 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1644.32 tests/s, 13154.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4hhbl7vc\nStarted\n.\nFinished in 0.000415811 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2404.94 tests/s, 19239.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1nb2nyd9\nStarted\n.\nFinished in 0.000647208 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1545.10 tests/s, 12360.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2lpu5a0_\nStarted\n.\nFinished in 0.000437723 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2284.55 tests/s, 18276.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2eusxtv2\nStarted\n.\nFinished in 0.000389081 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2570.16 tests/s, 20561.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnc7jzev9\nStarted\n.\nFinished in 0.000385234 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2595.82 tests/s, 20766.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm1uaebt8\nStarted\n.\nFinished in 0.000413998 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2415.47 tests/s, 19323.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1qn_uxn8\nStarted\n.\nFinished in 0.000391086 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2556.98 tests/s, 20455.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa928_f9o\nStarted\n.\nFinished in 0.000444066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2251.92 tests/s, 18015.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2j6xl_e_\nStarted\n.\nFinished in 0.000408658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2447.03 tests/s, 19576.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnfxhdzky\nStarted\n.\nFinished in 0.000448193 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2231.18 tests/s, 17849.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpju8ycfz8\nStarted\n.\nFinished in 0.000441941 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2262.75 tests/s, 18101.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpalhovbuq\nStarted\n.\nFinished in 0.00038266 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2613.29 tests/s, 20906.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppbrk17on\nStarted\n.\nFinished in 0.000396365 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2522.93 tests/s, 20183.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjab28mg9\nStarted\n.\nFinished in 0.000408097 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2450.40 tests/s, 19603.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpknm8q8lb\nStarted\n.\nFinished in 0.000434267 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2302.73 tests/s, 18421.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5p0anbcz\nStarted\n.\nFinished in 0.000400233 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2498.54 tests/s, 19988.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpegsuj0wb\nStarted\n.\nFinished in 0.000436751 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2289.63 tests/s, 18317.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1fxy3v7h\nStarted\n.\nFinished in 0.000391567 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2553.84 tests/s, 20430.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdp4tv6bj\nStarted\n.\nFinished in 0.000471427 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2121.22 tests/s, 16969.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8bs39vx1\nStarted\n.\nFinished in 0.000537351 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1860.98 tests/s, 14887.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5fn2f1p0\nStarted\n.\nFinished in 0.00046269 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2161.27 tests/s, 17290.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq6ipnrlz\nStarted\n.\nFinished in 0.000452431 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2210.28 tests/s, 17682.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphha4tsur\nStarted\n.\nFinished in 0.000429347 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2329.12 tests/s, 18632.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5gdr7y33\nStarted\n.\nFinished in 0.000395193 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2530.41 tests/s, 20243.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqea9huo9\nStarted\n.\nFinished in 0.00042582 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2348.41 tests/s, 18787.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptudfrnze\nStarted\n.\nFinished in 0.000400583 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2496.36 tests/s, 19970.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1d7yok11\nStarted\n.\nFinished in 0.000413908 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2416.00 tests/s, 19327.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvowxmghj\nStarted\n.\nFinished in 0.00045678 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2189.24 tests/s, 17513.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9wumym4y\nStarted\n.\nFinished in 0.000369534 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2706.11 tests/s, 21648.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo207nehi\nStarted\n.\nFinished in 0.000420941 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2375.63 tests/s, 19005.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwjcf_vvs\nStarted\n.\nFinished in 0.000396907 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2519.48 tests/s, 20155.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprlshifrj\nStarted\n.\nFinished in 0.000400533 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2496.67 tests/s, 19973.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1qko71lp\nStarted\n.\nFinished in 0.000394011 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2538.00 tests/s, 20304.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqkmxxhmp\nStarted\n.\nFinished in 0.000421522 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2372.36 tests/s, 18978.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprbkbkk9c\nStarted\n.\nFinished in 0.000399901 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2500.62 tests/s, 20004.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe30aa0r3\nStarted\n.\nFinished in 0.000420971 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2375.46 tests/s, 19003.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp10ecoqwp\nStarted\n.\nFinished in 0.000389894 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2564.80 tests/s, 20518.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9vzhb9i0\nStarted\n.\nFinished in 0.000388881 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2571.48 tests/s, 20571.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3_rjh5vo\nStarted\n.\nFinished in 0.000412606 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2423.62 tests/s, 19388.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpok7mrgsf\nStarted\n.\nFinished in 0.000525277 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1903.76 tests/s, 15230.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgj5958v_\nStarted\n.\nFinished in 0.00047837 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2090.43 tests/s, 16723.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9my_l03t\nStarted\n.\nFinished in 0.000386848 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2584.99 tests/s, 20679.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ormh490\nStarted\n.\nFinished in 0.000402397 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2485.11 tests/s, 19880.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsu4gfm8i\nStarted\n.\nFinished in 0.000638099 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1567.15 tests/s, 12537.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphnm8hdzv\nStarted\n.\nFinished in 0.000411644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2429.28 tests/s, 19434.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpurko04ev\nStarted\n.\nFinished in 0.000426682 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2343.67 tests/s, 18749.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxkczo20t\nStarted\n.\nFinished in 0.000552108 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1811.24 tests/s, 14489.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplgcx_uw1\nStarted\n.\nFinished in 0.000454705 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2199.23 tests/s, 17593.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7793wiar\nStarted\n.\nFinished in 0.000407196 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2455.82 tests/s, 19646.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0658ibu2\nStarted\n.\nFinished in 0.000405272 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2467.48 tests/s, 19739.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp50f41q99\nStarted\n.\nFinished in 0.000491423 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2034.91 tests/s, 16279.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk9a1twv1\nStarted\n.\nFinished in 0.000411593 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2429.58 tests/s, 19436.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_mp5bhxm\nStarted\n.\nFinished in 0.000375487 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2663.21 tests/s, 21305.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5xsqhmon\nStarted\n.\nFinished in 0.000416002 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2403.83 tests/s, 19230.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnoi1a37k\nStarted\n.\nFinished in 0.000412585 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2423.74 tests/s, 19389.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7tfh05n6\nStarted\n.\nFinished in 0.000421002 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2375.29 tests/s, 19002.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplubynjbg\nStarted\n.\nFinished in 0.000376989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2652.60 tests/s, 21220.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph16wnzly\nStarted\n.\nFinished in 0.000367131 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2723.82 tests/s, 21790.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe6risv49\nStarted\n.\nFinished in 0.00036178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2764.11 tests/s, 22112.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbpciz2tn\nStarted\n.\nFinished in 0.000430689 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2321.86 tests/s, 18574.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6gqpl3px\nStarted\n.\nFinished in 0.00040959 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2441.47 tests/s, 19531.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5n2f0k0g\nStarted\n.\nFinished in 0.00039388 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2538.84 tests/s, 20310.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4hevtnnq\nStarted\n.\nFinished in 0.000408718 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2446.67 tests/s, 19573.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp48bfh8lh\nStarted\n.\nFinished in 0.000391877 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2551.82 tests/s, 20414.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyqt6n1p9\nStarted\n.\nFinished in 0.000410873 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2433.84 tests/s, 19470.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpttqghv83\nStarted\n.\nFinished in 0.000437332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2286.59 tests/s, 18292.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaikv7ijx\nStarted\n.\nFinished in 0.00041484 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2410.57 tests/s, 19284.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpays29vfa\nStarted\n.\nFinished in 0.000398048 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2512.26 tests/s, 20098.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpva7g__08\nStarted\n.\nFinished in 0.00039368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2540.13 tests/s, 20321.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphrp_y3f4\nStarted\n.\nFinished in 0.000445367 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2245.34 tests/s, 17962.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk6bwvp8s\nStarted\n.\nFinished in 0.000402807 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2482.58 tests/s, 19860.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptq4f2yen\nStarted\n.\nFinished in 0.000362492 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2758.68 tests/s, 22069.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4d_u1t9j\nStarted\n.\nFinished in 0.000453053 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2207.25 tests/s, 17657.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2da4tlub\nStarted\n.\nFinished in 0.000493377 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2026.85 tests/s, 16214.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdq0ddqhv\nStarted\n.\nFinished in 0.000340199 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2939.46 tests/s, 23515.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj5c7cp2u\nStarted\n.\nFinished in 0.000347283 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2879.50 tests/s, 23035.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppdqjxqzl\nStarted\n.\nFinished in 0.000345369 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2895.45 tests/s, 23163.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ylvq06e\nStarted\n.\nFinished in 0.000466076 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2145.57 tests/s, 17164.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd1soh8h6\nStarted\n.\nFinished in 0.000352893 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2833.72 tests/s, 22669.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp718_sz91\nStarted\n.\nFinished in 0.000343376 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2912.26 tests/s, 23298.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv9libe_u\nStarted\n.\nFinished in 0.000342304 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2921.38 tests/s, 23371.04 assertions/s\n"
  exit_code: 0
  status: OK
