name: HumanEval_17_parse_music
language: ruby
results:
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprp8eop0z\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split.map\
    \ { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdncdc6yo\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 23696.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70yavwz3\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 25125.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwlv16mr\n\
    Started\n.\nFinished in 0.000841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1189.06 tests/s, 5945.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    if note == 'o'\n     \
    \ beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note == '.|'\n\
    \      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqj1b46j7\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 24752.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbq_2y0vs\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwr222bmr\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 23255.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvx59m7h7\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 22727.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0x3oopv7\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 23474.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbwo5h6l\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 22123.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj3ilwpw\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjdmsqf9\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 21367.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0z3qlq28\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50y8qt33\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 24752.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiszp0pso\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6yy2y8x\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 21929.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_s74c1b\n\
    Started\n.\nFinished in 0.000542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1845.02 tests/s, 9225.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkpn5koqd\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 25510.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72rx8xwf\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o' then 4\n    when\
    \ 'o|' then 2\n    when '.|' then 1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0k87qqju\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 25773.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9pmkr63r\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    case note\n    when 'o'\n\
    \      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n      beats\
    \ << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt7hrkqq5\n\
    Started\n.\nFinished in 0.000282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3546.10 tests/s, 17730.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi8a9cq83\n\
    Started\n.\nFinished in 0.000568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1760.56 tests/s, 8802.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    if note == 'o'\n     \
    \ beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note == '.|'\n\
    \      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiogparbs\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvbsl0jw\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 22421.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map { |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxe0_a4ql\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 22026.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7tlem0xb\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 24271.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << case note\n\
    \             when 'o'\n               4\n             when 'o|'\n           \
    \    2\n             when '.|'\n               1\n             end\n  end\n  beats\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5m6rq0q\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 20080.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbnaqos9z\n\
    Started\n.\nFinished in 0.038101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    26.25 tests/s, 131.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lbota_6\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 23148.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmj26xeuw\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6j7hjra\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 25380.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0i_mufqx\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 24271.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    case note\n    when 'o'\n\
    \      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n      beats\
    \ << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0tgyb6xm\n\
    Started\n.\nFinished in 0.000271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3690.04 tests/s, 18450.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ey38wx6\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhdgvcxv\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 24752.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0q_oa8g\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 21551.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split.map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz53vau74\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 25510.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1mms3jde\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 25380.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split.map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk3j1e302\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split(' ').map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu50ca53g\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 21929.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytd7e19b\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 25380.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe6g79_xk\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 25252.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split.map\
    \ { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1k3su7z\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 25125.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4b72vt3v\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70u6bu6w\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 22222.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp99uthd5d\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split.map\
    \ { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7pesk3g\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 21551.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8qjw9331\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypdxm82f\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  result = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      result << 4\n    elsif note == 'o|'\n      result << 2\n    elsif note\
    \ == '.|'\n      result << 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xqd2g55\n\
    Started\n.\nFinished in 0.000327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3058.10 tests/s, 15290.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnfukouyx\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split(' ').map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpox9s7jih\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 22222.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfak1bk65\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 22123.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfigqa2sh\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 25252.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split.map\
    \ { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpax37s85s\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 25773.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk020pk8z\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 25125.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split(' ').map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg8h8o5v\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 25380.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9dzb57le\n\
    Started\n.\nFinished in 0.001362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    734.21 tests/s, 3671.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdy9_v0op\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 25125.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    if note == 'o'\n     \
    \ beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note == '.|'\n\
    \      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8qjgl9o4\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 21739.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_6wq9j5\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34_kxlxu\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n_6tz2n\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 24154.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wbqkg7s\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 24752.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi95fcude\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 24509.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdff71d45\n\
    Started\n.\nFinished in 0.000592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1689.19 tests/s, 8445.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9ofnv52\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacij1548\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 24154.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptp76w4_s\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 22831.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxuep8lna\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 21929.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxyr3oejx\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 25252.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split.map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpr_xs0k\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2e0_6xgz\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 24271.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptw398v2\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 21186.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk2nhq538\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 24630.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0yo3a5hv\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 22123.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprre85zwx\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 25773.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe4_dlw5\n\
    Started\n.\nFinished in 0.000552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1811.59 tests/s, 9057.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  # TODO: implement this function\n  beats = []\n  music_string.split(' ').each\
    \ do |note|\n    if note == 'o'\n      beats << 4\n    elsif note == 'o|'\n  \
    \    beats << 2\n    elsif note == '.|'\n      beats << 1\n    end\n  end\n  beats\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvhyq8yb\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 25510.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split.map\
    \ { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptyy7btk8\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 21459.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split.map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9dqmb9cl\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 24154.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    if note == 'o'\n     \
    \ beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note == '.|'\n\
    \      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa2h9nfcx\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 23584.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7meti4le\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 25252.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0e8ugutd\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 23364.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split(' ').map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7l0o1n0z\n\
    Started\n.\nFinished in 0.000678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1474.93 tests/s, 7374.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split(' ').map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpod46vpc7\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 23364.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2f9h6rms\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 24271.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    case note\n    when 'o'\n\
    \      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n      beats\
    \ << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgfnxd94q\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 25510.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1f1ny3s3\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 22222.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpba0wcere\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 25773.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpywz06k4d\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << case note\n\
    \             when 'o'\n               4\n             when 'o|'\n           \
    \    2\n             when '.|'\n               1\n             end\n  end\n  beats\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6223tp0\n\
    Started\n.\nFinished in 0.015928 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    62.78 tests/s, 313.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    if note == 'o'\n     \
    \ beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note == '.|'\n\
    \      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpms55cu7f\n\
    Started\n.\nFinished in 0.025602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    39.06 tests/s, 195.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy84pjyyz\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 23696.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq007djmh\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 18248.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnvwvrwio\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_music(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnvwvrwio.rb:17:in\
    \ `test_parse_music'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_parse_music\n     16:     candidate = method(:parse_music)\n\
    \  => 17:     assert_equal([], candidate.call(\"\"))\n     18:     assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n     19:     assert_equal([1, 1, 1,\
    \ 1], candidate.call(\".| .| .| .|\"))\n     20:     assert_equal([2, 2, 1, 1,\
    \ 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n<[]> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 324.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4te281p\n\
    Started\n.\nFinished in 0.00069 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1449.28 tests/s, 7246.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1yjj0du\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map { |note| note.length }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfhr7cbs7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_music(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfhr7cbs7.rb:18:in\
    \ `test_parse_music'\n     15:   def test_parse_music\n     16:     candidate\
    \ = method(:parse_music)\n     17:     assert_equal([], candidate.call(\"\"))\n\
    \  => 18:     assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n     19:\
    \     assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n     20:  \
    \   assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n     21:     assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n<[4, 4, 4, 4]> expected but was\n<[1, 1, 1, 1]>\n\n\
    diff:\n? [4, 4, 4, 4]\n?  1  1  1  1 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.39 tests/s, 442.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74f2l3kn\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 25510.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_kp8v2x\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 25510.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg28ey4yg\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 21929.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4acxzxi_\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 25252.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3uwkzwmt\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 25906.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    if note == 'o'\n      4\n    elsif note\
    \ == 'o|'\n      2\n    elsif note == '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb91y997s\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 21551.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpga4oo_wz\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 20161.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split.map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxonhywdw\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 23474.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ctgc727\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 24509.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    case note\n    when 'o'\n\
    \      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n      beats\
    \ << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg67_cgf6\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 23696.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpup_kmv\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgl8fpwim\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 24509.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uj3jq47\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 23584.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumnoumqz\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 21929.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk86z06k4\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bi69r7_\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 21008.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    case note\n    when 'o'\n\
    \      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n      beats\
    \ << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpavtqikqd\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 25510.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map { |note| note.length }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rfrwf7r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_music(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rfrwf7r.rb:18:in\
    \ `test_parse_music'\n     15:   def test_parse_music\n     16:     candidate\
    \ = method(:parse_music)\n     17:     assert_equal([], candidate.call(\"\"))\n\
    \  => 18:     assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n     19:\
    \     assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n     20:  \
    \   assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n     21:     assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n<[4, 4, 4, 4]> expected but was\n<[1, 1, 1, 1]>\n\n\
    diff:\n? [4, 4, 4, 4]\n?  1  1  1  1 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.09 tests/s, 410.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split.map\
    \ { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkegfap1w\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw8a09wvr\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68m9h6vw\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 22624.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxeo7zlw3\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp964k_1_t\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 23041.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0maxqbeh\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 22026.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1zzjcpk2\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 25000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1yzhhw6\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 23584.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsykdfn28\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 23364.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7qfvwb0u\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 21929.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1ymyeqa\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8iounrf\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 24752.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_zlplti\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj9ak0qf\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 23364.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split(' ').map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl96re0ca\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 25380.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqeuylzo\n\
    Started\n.\nFinished in 0.000611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1636.66 tests/s, 8183.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsm3j4to\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 22727.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdhef2x9\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 25380.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalt65m9x\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 23364.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkzv0um_\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 26041.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmimomqub\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 24509.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbs7ugj7\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 25510.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split.map\
    \ { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3tmszy5x\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 22321.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3a24xuoz\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qm7b3sa\n\
    Started\n.\nFinished in 0.000669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1494.77 tests/s, 7473.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvince09\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 24752.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp59pt2926\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 25510.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk1fy0fq9\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 24154.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_e_tscp\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpblsvof6j\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 22222.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp596l61qc\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaj50ld8e\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4y7lrrm\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 25252.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6en0aqw8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_music(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6en0aqw8.rb:17:in\
    \ `test_parse_music'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_parse_music\n     16:     candidate = method(:parse_music)\n\
    \  => 17:     assert_equal([], candidate.call(\"\"))\n     18:     assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n     19:     assert_equal([1, 1, 1,\
    \ 1], candidate.call(\".| .| .| .|\"))\n     20:     assert_equal([2, 2, 1, 1,\
    \ 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n<[]> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.27 tests/s, 314.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o' then 4\n    when\
    \ 'o|' then 2\n    when '.|' then 1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6dsu8gt\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 21739.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6zk8nux\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 25000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb9gzdjj8\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 21929.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzxjfd7an\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqwxzylhy\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 24509.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split.map\
    \ { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmejalbbp\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 21834.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpium08bu_\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 22026.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2b24dizw\n\
    Started\n.\nFinished in 0.000572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1748.25 tests/s, 8741.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5fcvedvu\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 25125.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7zphfe3\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 21097.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3p_u106f\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3vhvrhb\n\
    Started\n.\nFinished in 0.000265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3773.58 tests/s, 18867.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp90jon270\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 21929.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    if note == 'o'\n     \
    \ beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note == '.|'\n\
    \      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptc4913w9\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 22727.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwel8t54\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7q3hqcw\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 20080.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnb0eg6i\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepfzug0a\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 25252.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o' then 4\n\
    \    when 'o|' then 2\n    when '.|' then 1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa3khym6_\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 25252.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx3sc8dkt\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 23148.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3e482en\n\
    Started\n.\nFinished in 0.000277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3610.11 tests/s, 18050.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    if note == 'o'\n     \
    \ beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note == '.|'\n\
    \      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc6sein_\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 24271.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78f565b8\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 24752.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtoizpax\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 22522.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxb9fmhex\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 21834.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5h11hyia\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomm0mw87\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 23041.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcrx4f5f\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 25125.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3eorvea\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 23364.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp316vghsy\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 25000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n  }\n  music_string.split('\
    \ ').map { |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb7k9_s3s\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 23696.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    case note\n    when\
    \ 'o'\n      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n    \
    \  beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpggpdai3n\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 21645.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    case note\n    when 'o'\n\
    \      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n      beats\
    \ << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn99y8gw9\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 21739.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphme83ryy\n\
    Started\n.\nFinished in 0.000802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1246.88 tests/s, 6234.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    beats << 4 if note\
    \ == 'o'\n    beats << 2 if note == 'o|'\n    beats << 1 if note == '.|'\n  end\n\
    \  beats\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30e1hzkz\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 20920.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnokf8ado\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 23255.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpom7znn1a\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 25380.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = { 'o' => 4, 'o|' => 2, '.|' => 1 }\n  music_string.split(' ').map {\
    \ |note| beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeooprts0\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 24509.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map { |note| note.length }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuqhktjzf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_music(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuqhktjzf.rb:18:in\
    \ `test_parse_music'\n     15:   def test_parse_music\n     16:     candidate\
    \ = method(:parse_music)\n     17:     assert_equal([], candidate.call(\"\"))\n\
    \  => 18:     assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n     19:\
    \     assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n     20:  \
    \   assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n     21:     assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n<[4, 4, 4, 4]> expected but was\n<[1, 1, 1, 1]>\n\n\
    diff:\n? [4, 4, 4, 4]\n?  1  1  1  1 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.53 tests/s, 455.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split(' ').each do |note|\n    if note == 'o'\n\
    \      beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note ==\
    \ '.|'\n      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrg6jbwz\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 21459.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphkm4_eal\n\
    Started\n.\nFinished in 0.000852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1173.71 tests/s, 5868.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfi3ex155\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split(' ').map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8l4bdqq\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 24509.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = {'o' => 4, 'o|' => 2, '.|' => 1}\n  music_string.split(' ').map { |note|\
    \ beats[note] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o\
    \ o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n   \
    \ assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"\
    ))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o\
    \ o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3bfn0fug\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 24752.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split.map do |note|\n    case note\n    when 'o'\n      4\n  \
    \  when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate\
    \ = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\"\
    .| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"\
    o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"\
    o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9kvqijg6\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 24630.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    if note == 'o'\n     \
    \ beats << 4\n    elsif note == 'o|'\n      beats << 2\n    elsif note == '.|'\n\
    \      beats << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwq9oja7\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 23364.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  music_string.split(' ').map do |note|\n    case note\n    when 'o'\n      4\n\
    \    when 'o|'\n      2\n    when '.|'\n      1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
    \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
    ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
    \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4,\
    \ 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1,\
    \ 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ncqk58\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 24875.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n# Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
    # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
    \ - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .|\
    \ o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n\
    \  beats = []\n  music_string.split.each do |note|\n    case note\n    when 'o'\n\
    \      beats << 4\n    when 'o|'\n      beats << 2\n    when '.|'\n      beats\
    \ << 1\n    end\n  end\n  beats\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n\
    \    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"\
    o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n\
    \    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o\
    \ o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o|\
    \ .| o o| o o|\"))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tlobejm\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 26178.01 assertions/s\n"
  exit_code: 0
  status: OK
