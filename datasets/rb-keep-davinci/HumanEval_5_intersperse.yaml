name: HumanEval_5_intersperse
language: ruby
prompt: "# Insert a number 'delimeter' between every two consecutive elements of input\
  \ list `numbers'\n# >>> intersperse([], 4)\n# []\n# >>> intersperse([1, 2, 3], 4)\n\
  # [1, 4, 2, 4, 3]\ndef intersperse(numbers, delimeter)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersperse\n\
  \    candidate = method(:intersperse)\n    assert_equal([], candidate.call([], 7))\n\
  \    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))\n    assert_equal([2,\
  \ 2, 2, 2, 2], candidate.call([2, 2, 2], 2))\n  end\nend\n"
completions: ["  numbers.inject([]) do |acc, number|\n    acc << number\n    acc <<\
    \ delimeter\n  end.pop\nend", "  numbers.inject([]) do |acc, n|\n    acc << n\n\
    \    acc << delimeter\n  end.pop\nend", "  numbers.inject([]) { |result, number|\n\
    \    result + [number, delimeter]\n  }[0..-2]\nend", "  numbers.inject([]) do\
    \ |acc, n|\n    acc << n\n    acc << delimeter unless n == numbers.last\n    acc\n\
    \  end\nend", "  result = []\n  numbers.each_with_index do |number, index|\n \
    \   result << number\n    result << delimeter unless index == numbers.length -\
    \ 1\n  end\n  result\nend", "  result = []\n  numbers.each_with_index do |number,\
    \ index|\n    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) { |result, number| result\
    \ << number << delimeter }[0..-2]\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  result = []\n  numbers.each_with_index do |number,\
    \ index|\n    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |acc, n|\n    acc << n\n\
    \    acc << delimeter\n  end[0..-2]\nend", "  # TODO: Implement this method\n\
    \  result = []\n  numbers.each_with_index do |number, index|\n    if index ==\
    \ numbers.length - 1\n      result << number\n    else\n      result << number\n\
    \      result << delimeter\n    end\n  end\n  result\nend", "  result = []\n \
    \ numbers.each_with_index do |number, index|\n    result << number\n    result\
    \ << delimeter unless index == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0..-2]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0..-2]\nend", "  numbers.inject([])\
    \ { |result, number| result + [number, delimeter] }[0..-2]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }[0..-2]\n\
    end", "  numbers.inject([]) { |result, number|\n    result << number\n    result\
    \ << delimeter\n  }.pop\nend", "  # Your code here\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0..-2]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }.pop\n\
    end", "  result = []\n  numbers.each_with_index do |n, i|\n    result << n\n \
    \   result << delimeter unless i == numbers.length - 1\n  end\n  result\nend",
  "  numbers.inject([]) { |result, n| result << n << delimeter }[0..-2]\nend", " \
    \ numbers.inject([]) { |result, number| result + [number, delimeter] }[0...-1]\n\
    end", "  numbers.inject([]) do |result, number|\n    if result.empty?\n      result\
    \ << number\n    else\n      result << delimeter << number\n    end\n  end\nend",
  "  # TODO: Implement this method\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, element|\n    result\
    \ << element\n    result << delimeter unless element == numbers.last\n    result\n\
    \  end\nend", "  result = []\n  numbers.each_with_index do |number, index|\n \
    \   result << number\n    result << delimeter unless index == numbers.length -\
    \ 1\n  end\n  result\nend", "  numbers.inject([]) do |acc, n|\n    acc << n\n\
    \    acc << delimeter unless n == numbers.last\n    acc\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }[0..-2]\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  result = []\n  numbers.each_with_index do |number, index|\n\
    \    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end[0...-1]\nend", "  numbers.inject([])\
    \ do |acc, number|\n    acc << number\n    acc << delimeter\n  end.pop\nend",
  "  numbers.inject([]) do |acc, n|\n    acc << n\n    acc << delimeter\n  end.pop\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end[0...-1]\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end.pop\nend", " \
    \ result = []\n  numbers.each_with_index do |number, index|\n    result << number\n\
    \    result << delimeter unless index == numbers.length - 1\n  end\n  result\n\
    end", "  numbers.inject([]) { |result, n| result << n << delimeter }[0..-2]\n\
    end", "  numbers.inject([]) { |acc, n| acc << n << delimeter }[0...-1]\nend",
  "  numbers.inject([]) { |result, n| result << n << delimeter }[0..-2]\nend", " \
    \ result = []\n  numbers.each_with_index do |number, index|\n    result << number\n\
    \    result << delimeter unless index == numbers.length - 1\n  end\n  result\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\n\
    \  end.pop\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end[0...-1]\nend", "  result = []\n  numbers.each_with_index\
    \ do |n, i|\n    result << n\n    result << delimeter unless i == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([]) {\
    \ |result, n| result << n << delimeter }[0...-1]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end[0..-2]\n\
    end", "  numbers.inject([]) { |result, n| result << n << delimeter }[0..-2]\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  result = []\n  numbers.each_with_index do |number, index|\n\
    \    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.pop\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([]) { |result,\
    \ number| result << number << delimeter }[0..-2]\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : delimeter }.compact\nend", "  numbers.inject([]) { |result,\
    \ n| result << n << delimeter }[0...-1]\nend", "  numbers.inject([]) { |result,\
    \ number| result << number << delimeter }[0..-2]\nend", "  numbers.inject([])\
    \ do |acc, n|\n    acc << n\n    acc << delimeter\n  end.pop\nend", "  result\
    \ = []\n  numbers.each_with_index do |n, i|\n    result << n\n    result << delimeter\
    \ unless i == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([])\
    \ { |result, n| result << n << delimeter }[0..-2]\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : delimeter }.reject(&:nil?)\nend", "  numbers.inject([])\
    \ { |result, n| result << n << delimeter }[0..-2]\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0..-2]\nend", "  result =\
    \ []\n  numbers.each_with_index do |number, index|\n    result << number\n   \
    \ result << delimeter unless index == numbers.length - 1\n  end\n  result\nend",
  "  if numbers.length == 0\n    return []\n  elsif numbers.length == 1\n    return\
    \ numbers\n  else\n    return numbers[0..-2].zip(Array.new(numbers.length - 1,\
    \ delimeter)).flatten.push(numbers[-1])\n  end\nend", "  numbers.inject([]) do\
    \ |acc, n|\n    acc << n\n    acc << delimeter unless n == numbers.last\n    acc\n\
    \  end\nend", "  result = []\n  numbers.each_with_index do |number, index|\n \
    \   result << number\n    result << delimeter unless index == numbers.length -\
    \ 1\n  end\n  result\nend", "  numbers.inject([]) { |acc, n| acc << n << delimeter\
    \ }[0..-2]\nend", "  numbers.inject([]) { |result, n| result << n << delimeter\
    \ }.pop\nend", "  result = []\n  numbers.each_with_index do |number, index|\n\
    \    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) { |result, n| result << n\
    \ << delimeter }[0..-2]\nend", "  numbers.inject([]) do |result, number|\n   \
    \ result << number\n    result << delimeter\n  end.pop\nend", "  result = []\n\
    \  numbers.each_with_index do |num, index|\n    result << num\n    result << delimeter\
    \ unless index == numbers.length - 1\n  end\n  result\nend", "  result = []\n\
    \  numbers.each_with_index do |number, index|\n    result << number\n    result\
    \ << delimeter unless index == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([])\
    \ do |acc, number|\n    acc << number\n    acc << delimeter unless number == numbers.last\n\
    \    acc\n  end\nend", "  result = []\n  numbers.each_with_index do |number, index|\n\
    \    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) { |result, number| result << number << delimeter\
    \ }[0...-1]\nend", "  numbers.inject([]) { |acc, n|\n    acc.push(n)\n    acc.push(delimeter)\n\
    \  }.pop\nend", "  numbers.inject([]) { |result, n| result << n << delimeter }[0..-2]\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  numbers.inject([]) { |result, number|\
    \ result + [number, delimeter] }[0..-2]\nend", "  numbers.inject([]) do |result,\
    \ n|\n    result << n\n    result << delimeter unless n == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  # TODO: Implement me\n  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0...-1]\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }.pop\nend", "  numbers.inject([])\
    \ { |result, n| result << n << delimeter }[0..-2]\nend", "  result = []\n  numbers.each_with_index\
    \ do |n, i|\n    result << n\n    result << delimeter unless i == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |acc, n|\n    acc << n\n\
    \    acc << delimeter unless n == numbers.last\n    acc\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless result.size\
    \ == numbers.size * 2 - 1\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do\
    \ |result, number|\n    result << number\n    result << delimeter\n  end[0...-1]\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  result = []\n  numbers.each_with_index do |number, index|\n\
    \    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |acc, n|\n    acc << n\n\
    \    acc << delimeter\n  end.pop\nend", "  numbers.inject([]) { |result, number|\
    \ result << number << delimeter }[0...-1]\nend", "  numbers.inject([]) { |result,\
    \ number| result << number << delimeter }[0...-1]\nend", "  numbers.flat_map {\
    \ |n| [n, delimeter] }[0...-1]\nend", "  numbers.inject([]) { |result, n| result\
    \ << n << delimeter }[0...-1]\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter\n  end.pop\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.zero? ? n : [delimeter, n] }.flatten(1)\nend", "  result = []\n \
    \ numbers.each_with_index do |number, index|\n    if index == numbers.length -\
    \ 1\n      result << number\n    else\n      result << number << delimeter\n \
    \   end\n  end\n  result\nend", "  numbers.inject([]) do |result, number|\n  \
    \  result << number\n    result << delimeter\n  end[0...-1]\nend", "  numbers.each_with_index.map\
    \ { |n, i| i == 0 ? n : [delimeter, n] }.flatten\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0...-1]\nend", "  numbers.inject([])\
    \ { |result, number| result + [number, delimeter] }[0..-2]\nend", "  numbers.inject([])\
    \ { |acc, n| acc << n << delimeter }[0...-1]\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.zero? ? n : [delimeter, n] }.flatten(1)\nend", "  result = []\n \
    \ numbers.each_with_index do |number, index|\n    result << number\n    result\
    \ << delimeter unless index == numbers.length - 1\n  end\n  result\nend", "  result\
    \ = []\n  numbers.each_with_index do |number, index|\n    result << number\n \
    \   result << delimeter unless index == numbers.length - 1\n  end\n  result\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }[0...-1]\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  result = []\n  numbers.each_with_index do |number, index|\n\
    \    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do\
    \ |result, number|\n    if result.empty?\n      result << number\n    else\n \
    \     result << delimeter << number\n    end\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.each_with_index.map { |n, i| i == 0 ? n : [delimeter, n] }.flatten(1)\n\
    end", "  numbers.inject([]) { |result, n| result << n << delimeter }[0...-1]\n\
    end", "  numbers.inject([]) { |result, n| result << n << delimeter }[0...-1]\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([])\
    \ { |acc, num| acc << num << delimeter }[0..-2]\nend", "  numbers.inject([]) {\
    \ |result, number| result << number << delimeter }[0...-1]\nend", "  # TODO: Implement\
    \ this method\n  result = []\n  numbers.each_with_index do |number, index|\n \
    \   result << number\n    result << delimeter unless index == numbers.length -\
    \ 1\n  end\n  result\nend", "  numbers.inject([]) do |acc, n|\n    acc << n\n\
    \    acc << delimeter\n  end.pop\nend", "  numbers.inject([]) do |acc, n|\n  \
    \  acc << n\n    acc << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end[0...-1]\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\n\
    \  end.pop\nend", "  result = []\n  numbers.each_with_index do |num, index|\n\
    \    result << num\n    result << delimeter unless index == numbers.length - 1\n\
    \  end\n  result\nend", "  numbers.inject([]) { |acc, n| acc << n << delimeter\
    \ }[0...-1]\nend", "  # Your code here\nend", "  numbers.inject([]) { |acc, x|\
    \ acc + [x, delimeter] }[0..-2]\nend", "  # your code here\nend", "  numbers.each_with_index.map\
    \ { |n, i| i == 0 ? n : [delimeter, n] }.flatten\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }[0..-2]\n\
    end", "  # TODO: implement this method\n  numbers.map.with_index { |number, index|\
    \ index == numbers.length - 1 ? number : [number, delimeter] }.flatten\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\n\
    \  end.pop\nend", "  numbers.inject([]) { |result, number| result << number <<\
    \ delimeter }[0..-2]\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do\
    \ |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  # Your code here\nend", "  result = []\n  numbers.each_with_index do\
    \ |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([]) { |result,\
    \ number| result << number << delimeter }[0..-2]\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([]) { |result,\
    \ n| result << n << delimeter }[0...-1]\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) { |acc, n| acc + [n, delimeter]\
    \ }[0...-1]\nend", "  numbers.inject([]) { |result, number| result << number <<\
    \ delimeter }[0..-2]\nend", "  result = []\n  numbers.each_with_index do |number,\
    \ index|\n    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([]) {\
    \ |result, number| result << number << delimeter }[0...-1]\nend", "  result =\
    \ []\n  numbers.each_with_index do |number, index|\n    result << number\n   \
    \ result << delimeter unless index == numbers.length - 1\n  end\n  result\nend",
  "  numbers.inject([]) do |result, element|\n    result << element\n    result <<\
    \ delimeter unless element == numbers.last\n    result\n  end\nend", "  numbers.each_with_object([])\
    \ do |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.each_with_object([]) do |number, result|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \  end\nend", "  result = []\n  numbers.each_with_index do |number, index|\n \
    \   result << number\n    result << delimeter unless index == numbers.length -\
    \ 1\n  end\n  result\nend", "  result = []\n  numbers.each_with_index do |number,\
    \ index|\n    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) { |result, number| result\
    \ << number << delimeter }[0..-2]\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter\n  end.pop\nend", "  result = []\n\
    \  numbers.each_with_index do |number, index|\n    result << number\n    result\
    \ << delimeter unless index == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0...-1]\nend", "  numbers.inject([])\
    \ { |result, n| result << n << delimeter }[0..-2]\nend", "  numbers.inject([])\
    \ do |acc, n|\n    acc << n\n    acc << delimeter\n  end.pop\nend", "  result\
    \ = []\n  numbers.each_with_index do |number, index|\n    result << number\n \
    \   result << delimeter unless index == numbers.length - 1\n  end\n  result\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  numbers.inject([]) { |result, number| result << number <<\
    \ delimeter }[0...-1]\nend", "  numbers.inject([]) do |list, number|\n    list\
    \ << number\n    list << delimeter unless number == numbers.last\n    list\n \
    \ end\nend", "  # TODO\nend", "  result = []\n  numbers.each_with_index do |number,\
    \ index|\n    result << number\n    result << delimeter unless index == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) { |result, n| result << n\
    \ << delimeter }[0...-1]\nend", "  numbers.inject([]) { |result, number| result\
    \ << number << delimeter }[0..-2]\nend", "  numbers.inject([]) { |result, number|\
    \ result + [number, delimeter] }[0..-2]\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end.pop\nend", " \
    \ result = []\n  numbers.each_with_index do |number, index|\n    result << number\n\
    \    result << delimeter unless index == numbers.length - 1\n  end\n  result\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  numbers.inject([]) { |result, number| result << number <<\
    \ delimeter }[0..-2]\nend", "  result = []\n  numbers.each_with_index do |n, i|\n\
    \    result << n\n    result << delimeter unless i == numbers.length - 1\n  end\n\
    \  result\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end[0..-2]\nend", "  if numbers.empty?\n    []\n \
    \ else\n    [numbers[0]] + [delimeter] + intersperse(numbers[1..-1], delimeter)\n\
    \  end\nend", "  numbers.inject([]) { |result, number| result << number << delimeter\
    \ }[0...-1]\nend", "  numbers.inject([]) { |acc, n| acc << n << delimeter }[0..-2]\n\
    end", "  result = []\n  numbers.each_with_index do |n, i|\n    result << n\n \
    \   result << delimeter unless i == numbers.length - 1\n  end\n  result\nend",
  "  numbers.inject([]) { |result, number| result << number << delimeter }[0...-1]\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
