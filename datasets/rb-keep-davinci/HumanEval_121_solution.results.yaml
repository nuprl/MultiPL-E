name: HumanEval_121_solution
language: ruby
results:
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqn2b_82x\n\
    Started\n.\nFinished in 0.000918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1089.32 tests/s, 7625.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbib_dwv1\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 28688.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzxm6izmr\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 34825.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7jy036sn\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 35000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpebqjfbbh\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  sum = 0\n  lst.each_with_index do |num, index|\n    if index.even?\
    \ && num.odd?\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate\
    \ = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n  \
    \  assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30,\
    \ 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23,\
    \ 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmksswt93\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxke0d54y\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw1_mo3hw\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qpfahiq\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  sum = 0\n  lst.each_with_index do |num, index|\n    sum +=\
    \ num if index.even? && num.odd?\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate = method(:solution)\n\
    \    assert_equal(12, candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9n9olobl\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 35353.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |num, i| num.odd? && i.even? }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvt0qicmj\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx56u4po7\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 30042.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9n3fs11c\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinesby2r\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi_cu28n8\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 31111.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2u10iz9\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw57kux3o\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8hqf5_\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  sum = 0\n  lst.each_with_index do |num, index|\n    if index.even?\
    \ && num.odd?\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate\
    \ = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n  \
    \  assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30,\
    \ 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23,\
    \ 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfjx6v2o5\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplj9x6ez\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 31390.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcej4qop\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|x,i| x.odd? && i.even?}.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_c65602\n\
    Started\n.\nFinished in 0.000696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1436.78 tests/s, 10057.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tzp060v\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 29787.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2ozi0us\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 29914.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr3q4ucq7\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 29914.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxxe1q8fo\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wvmiomd\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 28000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__bxsece\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ingvtto\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 29787.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpum5hkk_e\n\
    Started\n.\nFinished in 0.033274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    30.05 tests/s, 210.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.values_at(* lst.each_index.select {|i| i.even?}).select{|x|\
    \ x.odd?}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqurzax7w\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 30973.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprozskxpl\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 29535.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiwh86nk0\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 29045.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00cfs4uf\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_fanr3d\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 31111.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf7hykz31\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|x,i| x.odd? && i.even?}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1obrdwb8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1obrdwb8.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.36 tests/s, 973.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3cmer4cz\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 29787.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_p09rjnx\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprktwvw5c\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe822k4k7\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuptl8os\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 35175.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0l10iul4\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 34313.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm02jemnv\n\
    Started\n.\nFinished in 0.000308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3246.75 tests/s, 22727.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6swj5gp0\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|_,i| i.even?}.select{|i| i.odd?}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ihvmnba\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfuehxn22\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzmr2c2e_\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyk7mbwo1\n\
    Started\n.\nFinished in 0.000805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1242.24 tests/s, 8695.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvdcmv9z\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 29787.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgc0nn4of\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 30172.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6hfgpa5v\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 30434.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdwlfw048\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.values_at(* lst.each_index.select {|i| i.even?}).select\
    \ {|x| x.odd?}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7ipemwg\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  sum = 0\n  lst.each_with_index do |num, index|\n    sum +=\
    \ num if index.even? && num.odd?\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate = method(:solution)\n\
    \    assert_equal(12, candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoqif_klj\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 35532.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpue0zhnrx\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3gqwkfl\n\
    Started\n.\nFinished in 0.002754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    363.11 tests/s, 2541.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvv1qfei8\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 33980.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_ozbcql\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  sum = 0\n  lst.each_with_index do |num, index|\n    if index.even?\
    \ && num.odd?\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate\
    \ = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n  \
    \  assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30,\
    \ 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23,\
    \ 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_z_d39if\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 33980.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpek8te7be\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 30172.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnawm1n3c\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6bwfxm2\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwj5zju1\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |x, i| x.odd? && i.even? }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jrdhgp3\n\
    Started\n.\nFinished in 0.012435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    80.42 tests/s, 562.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyhxmkygo\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 29411.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqd1v47x\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |n, i| n.odd? && i.even? }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rcyt91g\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4o1bw91\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp484frlbd\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9os3ikjg\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 28225.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |x, i| x.odd? && i.even? }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hxtvi3i\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 33492.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmou_cf7u\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 31111.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp190bj4wy\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 31390.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuyy2l4_6\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63kvvkbz\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 34313.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zs_l4ay\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 31531.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv43vgp1m\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 33980.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr8q_rt46\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 34653.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsd1qkf4_\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 35000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb7umnesp\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 30973.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe72qp908\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|_,i| i.even?}.select{|i| i.odd?}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2w2ircj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2w2ircj.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.11 tests/s, 903.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnnkz3fyt\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkh79g8rz\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_sebp7g\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 33492.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp41qid379\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8obism42\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9vx24hu\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96age14q\n\
    Started\n.\nFinished in 0.000863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1158.75 tests/s, 8111.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|_,i| i.even?}.select{|x| x.odd?}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx09xnumb\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 30567.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2vn0s40s\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 34313.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|x,i| x.odd? && i.even?}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwm84f9zy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwm84f9zy.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.31 tests/s, 960.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmduhtdj\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 29045.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gw_vegk\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpssah5z_z\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_5jvfgk\n\
    Started\n.\nFinished in 0.000611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1636.66 tests/s, 11456.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_x2jarw\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 31818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4oil3m8\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 34313.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptjh89inu\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 31531.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_rqn62zd\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 33492.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmovr68ml\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 30042.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6auwvr39\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|x, i| x.odd? && i.even?}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphn8pnofn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphn8pnofn.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005996 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.78 tests/s, 500.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|_,i| i.even?}.select{|x| x.odd?}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeb89hdfy\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3k3h7igh\n\
    Started\n.\nFinished in 0.000965 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1036.27 tests/s, 7253.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.values_at(* lst.each_index.select {|i| i.even?}).select\
    \ {|x| x.odd?}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzlzge5ft\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzlzge5ft.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.09 tests/s, 834.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1h56n6b\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzol41sqj\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn7rq9y_4\n\
    Started\n.\nFinished in 0.000251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3984.06 tests/s, 27888.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  sum = 0\n  lst.each_with_index do |x, i|\n    if i.even?\
    \ && x.odd?\n      sum += x\n    end\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate\
    \ = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n  \
    \  assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30,\
    \ 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23,\
    \ 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rqtw0zv\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprkhj5je0\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.values_at(* lst.each_index.select {|i| i.even?}).select{|x|\
    \ x.odd?}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnl_75he3\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 29914.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv2sr_o2j\n\
    Started\n.\nFinished in 0.000422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2369.67 tests/s, 16587.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.values_at(* lst.each_index.select {|i| i.even?}).select{|x|\
    \ x.odd?}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprtyleas4\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq7dafm5j\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|x,i| i.even? && x.odd?}.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_76uad4m\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0wghsh4\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_l6ylwk\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|x,i| x.odd? && i.even?}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3tig5llr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3tig5llr.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 962.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3_g2tgq\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppsnnrggz\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|x, i| x.odd? && i.even?}.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejhmz8po\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 30973.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fh9gclt\n\
    Started\n.\nFinished in 0.000363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2754.82 tests/s, 19283.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.values_at(* lst.each_index.select {|i| i.even?}).select{|x|\
    \ x.odd?}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpebjo7wse\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpebjo7wse.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.67 tests/s, 821.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|_,i| i.even?}.select{|x| x.odd?}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprm9lv4n1\n\
    Started\n.\nFinished in 0.000927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1078.75 tests/s, 7551.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmde181we\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 33980.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.each_with_index.map { |x, i| x if i.even? && x.odd? }.compact.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd86ih1g1\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuopx2_q9\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi_rud_m\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ydnylof\n\
    Started\n.\nFinished in 0.023176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    43.15 tests/s, 302.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4s004ke\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.values_at(* lst.each_index.select {|i| i.even?}).select\
    \ {|x| x.odd?}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwdxolcdl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwdxolcdl.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.11 tests/s, 903.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.values_at(* lst.each_index.select {|i| i.even?}).select\
    \ {|x| x.odd?}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqw0gpynf\n\
    Started\n.\nFinished in 0.000637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1569.86 tests/s, 10989.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjcsyms9k\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h99flrg\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 33980.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2a6utbz\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |x, i| x.odd? && i.even? }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt26h5w20\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 29045.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfxmexpts\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoenpv30u\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 29914.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|_,i| i.even?}.select{|x| x.odd?}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuhj5zf8m\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw6ybjzkf\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 34313.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa39ym9nr\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.values_at(* lst.each_index.select {|i| i.even?}).select\
    \ {|x| x.odd?}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpijfw83r3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpijfw83r3.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.60 tests/s, 895.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgpnz5zy2\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxafbnr1g\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb_c42f3k\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2pc943y\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiodtljie\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 30567.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf7fj_f3a\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf936cib_\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj8kxkdkp\n\
    Started\n.\nFinished in 0.004435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    225.48 tests/s, 1578.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1r_m47r\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrlacp1g\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 28112.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63czdztz\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqn5gyoam\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 34653.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnv31rbd4\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyz62kj7\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|x,i| x.odd? && i.even?}.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5u3zu4ej\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3hk_lu3\n\
    Started\n.\nFinished in 0.000415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2409.64 tests/s, 16867.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpygltzask\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpagqb2j52\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp64uryda\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0e9w8gzr\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_czbzda\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcwoq5fe\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 34825.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnurbc4cg\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 34313.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphi2v7vrh\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 35175.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiqh7otv8\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  sum = 0\n  lst.each_with_index do |num, index|\n    sum +=\
    \ num if index.even? && num.odd?\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate = method(:solution)\n\
    \    assert_equal(12, candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2742d7ra\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 35353.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwy9ualhl\n\
    Started\n.\nFinished in 0.000654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1529.05 tests/s, 10703.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0e0jgb09\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvoxhff_g\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 29166.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwnj2ukgs\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47b6ot24\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 35000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  sum = 0\n  lst.each_with_index do |num, index|\n    if index.even?\
    \ && num.odd?\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate\
    \ = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n  \
    \  assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30,\
    \ 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23,\
    \ 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsj40vq9m\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxdv81ugf\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7mlo84_w\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 30567.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkl6tp4rf\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdizlu4iq\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 34313.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  sum = 0\n  lst.each_with_index do |num, index|\n    if index.even?\
    \ && num.odd?\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate\
    \ = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n  \
    \  assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30,\
    \ 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23,\
    \ 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_k_2nn_\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidht8mqn\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppxku1_01\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1aovi4j2\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0t3x4v_n\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|_,i| i.even?}.select{|x| x.odd?}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_jzzca3\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcel6z_o5\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 27559.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.each_with_index.inject(0) { |sum, (e, i)| i.even? &&\
    \ e.odd? ? sum + e : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solution\n    candidate = method(:solution)\n    assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3,\
    \ 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5,\
    \ candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n  \
    \  assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3,\
    \ 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibffqcy3\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 31818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnmotu4v\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zxahz20\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 31818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|_,i| i.even?}.select{|x| x.odd?}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwk62oz0s\n\
    Started\n.\nFinished in 0.000281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3558.72 tests/s, 24911.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpim575l8l\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7yh7vh1\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph374_may\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuj0hrl84\n\
    Started\n.\nFinished in 0.001563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    639.80 tests/s, 4478.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqv5_vak1\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |x, i| x.odd? && i.even? }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp60jdhbbl\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppb9w272k\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index{|x,i| x.odd? && i.even?}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5p5_lko\n\
    Started\nF\n===============================================================================\n\
    Failure: test_solution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5p5_lko.rb:15:in\
    \ `test_solution'\n     12:     candidate = method(:solution)\n     13:     assert_equal(12,\
    \ candidate.call([5, 8, 7, 1]))\n     14:     assert_equal(9, candidate.call([3,\
    \ 3, 3, 3, 3]))\n  => 15:     assert_equal(0, candidate.call([30, 13, 24, 321]))\n\
    \     16:     assert_equal(5, candidate.call([5, 9]))\n     17:     assert_equal(0,\
    \ candidate.call([2, 4, 8]))\n     18:     assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002937 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    340.48 tests/s, 1021.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==>\
    \ 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\
    def solution(lst)\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
    \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8,\
    \ 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
    \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
    \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
    \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo92g2nr\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 35353.54 assertions/s\n"
  exit_code: 0
  status: OK
