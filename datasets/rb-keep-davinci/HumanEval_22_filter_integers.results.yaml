name: HumanEval_22_filter_integers
language: ruby
results:
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqddegwdy\nStarted\n.\nFinished in 0.00034519 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2896.96 tests/s, 8690.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqo8f84uv\nStarted\n.\nFinished in 0.000333607 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2997.54 tests/s, 8992.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_w2rvzt_\nStarted\n.\nFinished in 0.000314933 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3175.28 tests/s, 9525.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw86gg0rn\nStarted\n.\nFinished in 0.00029752 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3361.12 tests/s, 10083.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpum0qour1\nStarted\n.\nFinished in 0.000301376 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3318.11 tests/s, 9954.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp64ou3xvg\nStarted\n.\nFinished in 0.000317918 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3145.47 tests/s, 9436.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn8zhq7py\nStarted\n.\nFinished in 0.000336082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2975.46 tests/s, 8926.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbniqqs87\nStarted\n.\nFinished in 0.000334058 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2993.49 tests/s, 8980.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjqa8tnuu\nStarted\n.\nFinished in 0.000323168 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3094.37 tests/s, 9283.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdvx1c4rn\nStarted\n.\nFinished in 0.000336282 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2973.69 tests/s, 8921.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx6a2cx2m\nStarted\n.\nFinished in 0.000348896 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2866.18 tests/s, 8598.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo70l_nl9\nStarted\n.\nFinished in 0.000407005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2456.97 tests/s, 7370.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ti34lbz\nStarted\n.\nFinished in 0.000326695 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3060.96 tests/s, 9182.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsfbx6wp6\nStarted\n.\nFinished in 0.000320513 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3120.00 tests/s, 9359.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgnmahlsb\nStarted\n.\nFinished in 0.000352413 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2837.58 tests/s, 8512.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvhhpzeoo\nStarted\n.\nFinished in 0.000351261 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2846.89 tests/s, 8540.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpec_h9iia\nStarted\n.\nFinished in 0.000338136 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2957.39 tests/s, 8872.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu62q4k0s\nStarted\n.\nFinished in 0.000298692 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3347.93 tests/s, 10043.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgpvqshaw\nStarted\n.\nFinished in 0.0004679 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2137.21 tests/s, 6411.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2_fv96xm\nStarted\n.\nFinished in 0.00047877 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2088.69 tests/s, 6266.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpps5zrb70\nStarted\n.\nFinished in 0.000462419 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2162.54 tests/s, 6487.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7fuwk631\nStarted\n.\nFinished in 0.000439386 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2275.90 tests/s, 6827.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppjadg405\nStarted\n.\nFinished in 0.000308831 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3238.02 tests/s, 9714.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7v51oyk0\nStarted\n.\nFinished in 0.00040987 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2439.80 tests/s, 7319.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmv9mvo3v\nStarted\n.\nFinished in 0.000341892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2924.90 tests/s, 8774.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj1eaq50l\nStarted\n.\nFinished in 0.000378662 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2640.88 tests/s, 7922.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpix9o7zrs\nStarted\n.\nFinished in 0.000332434 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3008.12 tests/s, 9024.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3vjbolcg\nStarted\n.\nFinished in 0.000300836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3324.07 tests/s, 9972.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmengrd28\nStarted\n.\nFinished in 0.000346803 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2883.48 tests/s, 8650.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppmg5znjq\nStarted\n.\nFinished in 0.000331073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3020.48 tests/s, 9061.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptmjtaxy3\nStarted\n.\nFinished in 0.00030294 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.98 tests/s, 9902.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo6t2bjpw\nStarted\n.\nFinished in 0.000361669 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2764.96 tests/s, 8294.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1pjt11lo\nStarted\n.\nFinished in 0.000325433 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3072.83 tests/s, 9218.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_jo2m03x\nStarted\n.\nFinished in 0.000310835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3217.14 tests/s, 9651.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo043diay\nStarted\n.\nFinished in 0.000335299 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2982.41 tests/s, 8947.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiq1tqvc8\nStarted\n.\nFinished in 0.000372581 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2683.98 tests/s, 8051.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpokfp6sqi\nStarted\n.\nFinished in 0.000315332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3171.26 tests/s, 9513.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpayfua_8n\nStarted\n.\nFinished in 0.00047288 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2114.70 tests/s, 6344.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdndnmb26\nStarted\n.\nFinished in 0.000398209 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2511.24 tests/s, 7533.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpraca55qk\nStarted\n.\nFinished in 0.000323307 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3093.04 tests/s, 9279.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9j3w7075\nStarted\n.\nFinished in 0.000362131 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2761.43 tests/s, 8284.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_ryfc3d7\nStarted\n.\nFinished in 0.00044117 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2266.70 tests/s, 6800.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv9y2qwm3\nStarted\n.\nFinished in 0.00041477 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2410.97 tests/s, 7232.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvqyvksmj\nStarted\n.\nFinished in 0.000359486 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2781.75 tests/s, 8345.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvrub5e2m\nStarted\n.\nFinished in 0.000476105 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2100.38 tests/s, 6301.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpew5iavhv\nStarted\n.\nFinished in 0.000307558 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3251.42 tests/s, 9754.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0tcjei8i\nStarted\n.\nFinished in 0.000354526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2820.67 tests/s, 8462.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr6kj35lz\nStarted\n.\nFinished in 0.000322556 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3100.24 tests/s, 9300.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi4_kbeuh\nStarted\n.\nFinished in 0.000374865 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2667.63 tests/s, 8002.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwbn65wxe\nStarted\n.\nFinished in 0.000302688 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3303.73 tests/s, 9911.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphxq7g3je\nStarted\n.\nFinished in 0.0007612 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1313.72 tests/s, 3941.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp35iubosz\nStarted\n.\nFinished in 0.000322637 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3099.46 tests/s, 9298.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr9giuu39\nStarted\n.\nFinished in 0.000357863 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2794.37 tests/s, 8383.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcuajdzep\nStarted\n.\nFinished in 0.0003458 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2891.84 tests/s, 8675.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxsl1du8n\nStarted\n.\nFinished in 0.000317728 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3147.35 tests/s, 9442.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp_gns43f\nStarted\n.\nFinished in 0.000320803 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3117.18 tests/s, 9351.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzps4cdfh\nStarted\n.\nFinished in 0.000314691 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3177.72 tests/s, 9533.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4ckuc6xy\nStarted\n.\nFinished in 0.000321974 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3105.84 tests/s, 9317.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0an3qrbf\nStarted\n.\nFinished in 0.000317027 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3154.31 tests/s, 9462.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxk4b0l95\nStarted\n.\nFinished in 0.000352913 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2833.56 tests/s, 8500.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc0c7dsbn\nStarted\n.\nFinished in 0.000334368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2990.72 tests/s, 8972.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeudhuw4i\nStarted\n.\nFinished in 0.000343326 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2912.68 tests/s, 8738.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpufjkgzp0\nStarted\n.\nFinished in 0.000375816 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2660.88 tests/s, 7982.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm_asa3u8\nStarted\n.\nFinished in 0.000325182 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3075.20 tests/s, 9225.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcqm8azyj\nStarted\n.\nFinished in 0.000321205 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3113.28 tests/s, 9339.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp71vswoi_\nStarted\n.\nFinished in 0.000365878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2733.15 tests/s, 8199.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzd0l6kbk\nStarted\n.\nFinished in 0.000375547 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2662.78 tests/s, 7988.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp44x8b1yu\nStarted\n.\nFinished in 0.000317928 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3145.37 tests/s, 9436.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx9oo1zfi\nStarted\n.\nFinished in 0.000306527 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3262.36 tests/s, 9787.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb3f_izyu\nStarted\n.\nFinished in 0.000311856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3206.61 tests/s, 9619.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyryk1u9w\nStarted\n.\nFinished in 0.00040948 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2442.12 tests/s, 7326.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc452cf38\nStarted\n.\nFinished in 0.000387449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2580.98 tests/s, 7742.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdu2il3fh\nStarted\n.\nFinished in 0.000316867 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3155.90 tests/s, 9467.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfbc78_cr\nStarted\n.\nFinished in 0.000310753 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3217.99 tests/s, 9653.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7kqwpzny\nStarted\n.\nFinished in 0.000338447 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2954.67 tests/s, 8864.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiovmac8p\nStarted\n.\nFinished in 0.000317336 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3151.23 tests/s, 9453.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps_8ppmt_\nStarted\n.\nFinished in 0.000315913 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3165.43 tests/s, 9496.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsqgaxcn_\nStarted\n.\nFinished in 0.000343776 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2908.87 tests/s, 8726.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8bk2zacu\nStarted\n.\nFinished in 0.000305585 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3272.41 tests/s, 9817.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo7lsuw31\nStarted\n.\nFinished in 0.000318799 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3136.77 tests/s, 9410.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqgu9ko8w\nStarted\n.\nFinished in 0.000317948 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3145.17 tests/s, 9435.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphxx0a2xo\nStarted\n.\nFinished in 0.000301478 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3316.99 tests/s, 9950.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8d_ikw38\nStarted\n.\nFinished in 0.000316325 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3161.31 tests/s, 9483.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwqdlww6y\nStarted\n.\nFinished in 0.000331212 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3019.21 tests/s, 9057.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplc7wjlm_\nStarted\n.\nFinished in 0.000342324 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2921.21 tests/s, 8763.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4cvm7o3f\nStarted\n.\nFinished in 0.000338136 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2957.39 tests/s, 8872.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnl7x5ked\nStarted\n.\nFinished in 0.000327677 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3051.79 tests/s, 9155.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp89q1zywj\nStarted\n.\nFinished in 0.000334508 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2989.47 tests/s, 8968.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfsjuhl0l\nStarted\n.\nFinished in 0.000312678 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3198.18 tests/s, 9594.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp982src_p\nStarted\n.\nFinished in 0.00031401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3184.61 tests/s, 9553.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcxlhqtbw\nStarted\n.\nFinished in 0.000327706 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3051.52 tests/s, 9154.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy3rlx1qh\nStarted\n.\nFinished in 0.000491975 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2032.62 tests/s, 6097.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxsnf1_rr\nStarted\n.\nFinished in 0.000324339 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3083.19 tests/s, 9249.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuo3zjdsb\nStarted\n.\nFinished in 0.000538073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1858.48 tests/s, 5575.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2z6m4gd8\nStarted\n.\nFinished in 0.000315613 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3168.44 tests/s, 9505.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9846yqeu\nStarted\n.\nFinished in 0.000349337 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2862.57 tests/s, 8587.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphb4jhh9n\nStarted\n.\nFinished in 0.000316596 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3158.60 tests/s, 9475.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptp4616rd\nStarted\n.\nFinished in 0.000324431 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3082.32 tests/s, 9246.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr0ui8gqs\nStarted\n.\nFinished in 0.000353936 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2825.37 tests/s, 8476.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8a3pxyt2\nStarted\n.\nFinished in 0.000331653 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3015.20 tests/s, 9045.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpddry54ft\nStarted\n.\nFinished in 0.000314743 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3177.20 tests/s, 9531.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphf1pyvu4\nStarted\n.\nFinished in 0.000326093 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3066.61 tests/s, 9199.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwv8muvgf\nStarted\n.\nFinished in 0.000314782 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3176.80 tests/s, 9530.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplcjl85o3\nStarted\n.\nFinished in 0.000332576 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3006.83 tests/s, 9020.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv307vup0\nStarted\n.\nFinished in 0.000304853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3280.27 tests/s, 9840.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprof5y38q\nStarted\n.\nFinished in 0.000310915 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3216.31 tests/s, 9648.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl0zc9tti\nStarted\n.\nFinished in 0.000337745 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2960.81 tests/s, 8882.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqw6xt7m6\nStarted\n.\nFinished in 0.00034038 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2937.89 tests/s, 8813.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpki6eb5_2\nStarted\n.\nFinished in 0.000309932 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3226.51 tests/s, 9679.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6oey60jn\nStarted\n.\nFinished in 0.000309532 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3230.68 tests/s, 9692.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd_pkf24p\nStarted\n.\nFinished in 0.000354947 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2817.32 tests/s, 8451.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp3f6_ccp\nStarted\n.\nFinished in 0.000331423 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3017.29 tests/s, 9051.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfcl0gokk\nStarted\n.\nFinished in 0.000340951 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2932.97 tests/s, 8798.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl45vr738\nStarted\n.\nFinished in 0.000345839 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2891.52 tests/s, 8674.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpixbeqyh8\nStarted\n.\nFinished in 0.000348365 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2870.55 tests/s, 8611.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5g9cnxr5\nStarted\n.\nFinished in 0.000327336 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3054.96 tests/s, 9164.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv5_5lh7j\nStarted\n.\nFinished in 0.000315744 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3167.12 tests/s, 9501.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsarfcf82\nStarted\n.\nFinished in 0.000326565 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3062.18 tests/s, 9186.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp65izbfvx\nStarted\n.\nFinished in 0.000365187 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2738.32 tests/s, 8214.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj4_2af55\nStarted\n.\nFinished in 0.000322766 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3098.22 tests/s, 9294.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2zbgnyhk\nStarted\n.\nFinished in 0.0003407 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2935.13 tests/s, 8805.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsa_mnld8\nStarted\n.\nFinished in 0.00035071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2851.36 tests/s, 8554.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp76j21auu\nStarted\n.\nFinished in 0.000345199 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2896.88 tests/s, 8690.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvlhhb4ap\nStarted\n.\nFinished in 0.000519447 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1925.12 tests/s, 5775.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj0d7zfv6\nStarted\n.\nFinished in 0.000345811 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2891.75 tests/s, 8675.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp707r_1yc\nStarted\n.\nFinished in 0.000331603 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3015.65 tests/s, 9046.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvtincb5x\nStarted\n.\nFinished in 0.000299974 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3333.62 tests/s, 10000.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzujqbk3w\nStarted\n.\nFinished in 0.000336353 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2973.07 tests/s, 8919.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8t7uteno\nStarted\n.\nFinished in 0.000315794 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3166.62 tests/s, 9499.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpff8lvb97\nStarted\n.\nFinished in 0.000332705 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3005.67 tests/s, 9017.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpov96gc_9\nStarted\n.\nFinished in 0.00033469 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2987.84 tests/s, 8963.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvpnvzt70\nStarted\n.\nFinished in 0.000325342 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3073.69 tests/s, 9221.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphx9ehoi4\nStarted\n.\nFinished in 0.000359366 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2782.68 tests/s, 8348.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkfkd7sdi\nStarted\n.\nFinished in 0.000345389 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2895.29 tests/s, 8685.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp25db4fbj\nStarted\n.\nFinished in 0.000317557 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3149.04 tests/s, 9447.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptsd_2hc0\nStarted\n.\nFinished in 0.000363895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2748.05 tests/s, 8244.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphxf2rrla\nStarted\n.\nFinished in 0.000397297 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2517.01 tests/s, 7551.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm7a8gmty\nStarted\n.\nFinished in 0.000310745 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3218.07 tests/s, 9654.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8oo197ps\nStarted\n.\nFinished in 0.000312848 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3196.44 tests/s, 9589.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcpsr4udb\nStarted\n.\nFinished in 0.000488419 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2047.42 tests/s, 6142.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7a_ocyn0\nStarted\n.\nFinished in 0.0005216 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1917.18 tests/s, 5751.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8r9gfwlq\nStarted\n.\nFinished in 0.000315454 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3170.03 tests/s, 9510.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0eg_e589\nStarted\n.\nFinished in 0.000328127 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3047.60 tests/s, 9142.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiwltu19j\nStarted\n.\nFinished in 0.000573108 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1744.87 tests/s, 5234.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvazssg00\nStarted\n.\nFinished in 0.000453703 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2204.09 tests/s, 6612.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl3r8pzkr\nStarted\n.\nFinished in 0.000358805 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2787.03 tests/s, 8361.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmcchnvmw\nStarted\n.\nFinished in 0.000346411 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2886.74 tests/s, 8660.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1tpxkgnr\nStarted\n.\nFinished in 0.000409129 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2444.22 tests/s, 7332.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_wheg93x\nStarted\n.\nFinished in 0.000323549 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3090.72 tests/s, 9272.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpejeyxrkl\nStarted\n.\nFinished in 0.000325693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3070.38 tests/s, 9211.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_r9f6awl\nStarted\n.\nFinished in 0.000306065 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3267.28 tests/s, 9801.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp36btlj19\nStarted\n.\nFinished in 0.000302128 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3309.86 tests/s, 9929.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp3h9b9zp\nStarted\n.\nFinished in 0.000342073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2923.35 tests/s, 8770.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvz_9n1hw\nStarted\n.\nFinished in 0.000328406 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3045.01 tests/s, 9135.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp70fve__t\nStarted\n.\nFinished in 0.000318408 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3140.62 tests/s, 9421.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpckuvj4nb\nStarted\n.\nFinished in 0.000306236 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3265.46 tests/s, 9796.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj8u_27hg\nStarted\n.\nFinished in 0.000298401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3351.20 tests/s, 10053.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvd8rmdtn\nStarted\n.\nFinished in 0.00031878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3136.96 tests/s, 9410.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjbd6k2b7\nStarted\n.\nFinished in 0.000310794 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3217.57 tests/s, 9652.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvjl4xv6c\nStarted\n.\nFinished in 0.000337976 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2958.79 tests/s, 8876.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphpucjycy\nStarted\n.\nFinished in 0.000334618 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2988.48 tests/s, 8965.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzh141ljo\nStarted\n.\nFinished in 0.000304052 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3288.91 tests/s, 9866.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwb18__gj\nStarted\n.\nFinished in 0.000339969 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2941.44 tests/s, 8824.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppcoohhka\nStarted\n.\nFinished in 0.000415601 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2406.15 tests/s, 7218.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw4j_f3f6\nStarted\n.\nFinished in 0.000571425 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1750.01 tests/s, 5250.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp00jklc31\nStarted\n.\nFinished in 0.000389391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2568.11 tests/s, 7704.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_31c9myu\nStarted\n.\nFinished in 0.000356812 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2802.60 tests/s, 8407.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjnhn5lng\nStarted\n.\nFinished in 0.000325662 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3070.67 tests/s, 9212.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu_32_uds\nStarted\n.\nFinished in 0.00039361 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2540.59 tests/s, 7621.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2gzz7a5o\nStarted\n.\nFinished in 0.000412085 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2426.68 tests/s, 7280.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplehqze1c\nStarted\n.\nFinished in 0.000320984 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3115.42 tests/s, 9346.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn9wzm43a\nStarted\n.\nFinished in 0.000370547 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2698.71 tests/s, 8096.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpks70avgr\nStarted\n.\nFinished in 0.000401666 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2489.63 tests/s, 7468.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfhkw4npi\nStarted\n.\nFinished in 0.000359166 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2784.23 tests/s, 8352.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb_811swl\nStarted\n.\nFinished in 0.00034019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2939.53 tests/s, 8818.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw40b4vn8\nStarted\n.\nFinished in 0.000386347 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2588.35 tests/s, 7765.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd82c88c1\nStarted\n.\nFinished in 0.000316414 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3160.42 tests/s, 9481.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmf5pscl2\nStarted\n.\nFinished in 0.00037717 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2651.32 tests/s, 7953.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: implement me\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnc9wbvc3\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpnc9wbvc3.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00458412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.14 tests/s, 218.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz19ksoew\nStarted\n.\nFinished in 0.000405181 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2468.03 tests/s, 7404.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi5717k69\nStarted\n.\nFinished in 0.000321946 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3106.11 tests/s, 9318.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpawujdmrs\nStarted\n.\nFinished in 0.000355999 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2809.00 tests/s, 8426.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdmbzblom\nStarted\n.\nFinished in 0.000309451 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3231.53 tests/s, 9694.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1yuope3s\nStarted\n.\nFinished in 0.00036203 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2762.20 tests/s, 8286.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo78d1r7a\nStarted\n.\nFinished in 0.00031884 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3136.37 tests/s, 9409.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7bdqy7al\nStarted\n.\nFinished in 0.000364646 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2742.39 tests/s, 8227.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4bx10924\nStarted\n.\nFinished in 0.000324399 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3082.62 tests/s, 9247.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcr9p7bot\nStarted\n.\nFinished in 0.000338307 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2955.90 tests/s, 8867.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaxv1cayc\nStarted\n.\nFinished in 0.00031978 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3127.15 tests/s, 9381.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_76qk7w7\nStarted\n.\nFinished in 0.000295595 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3383.01 tests/s, 10149.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt7m8oans\nStarted\n.\nFinished in 0.000316364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3160.92 tests/s, 9482.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkclti5te\nStarted\n.\nFinished in 0.000284504 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3514.89 tests/s, 10544.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdzw3lhk0\nStarted\n.\nFinished in 0.00029761 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3360.10 tests/s, 10080.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvhkcb6yy\nStarted\n.\nFinished in 0.00029765 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3359.65 tests/s, 10078.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp15935bt2\nStarted\n.\nFinished in 0.000291487 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3430.68 tests/s, 10292.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3d_0pjex\nStarted\n.\nFinished in 0.000330501 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3025.71 tests/s, 9077.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2ireti7c\nStarted\n.\nFinished in 0.000381368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2622.14 tests/s, 7866.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8anpca2f\nStarted\n.\nFinished in 0.000360898 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2770.87 tests/s, 8312.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpffuze4jk\nStarted\n.\nFinished in 0.000339118 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2948.83 tests/s, 8846.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp60wnmqka\nStarted\n.\nFinished in 0.000338006 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2958.53 tests/s, 8875.58 assertions/s\n"
  exit_code: 0
  status: OK
