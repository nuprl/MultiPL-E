name: HumanEval_22_filter_integers
language: ruby
results:
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8av9_rra\n\
    Started\n.\nFinished in 0.000183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5464.48 tests/s, 16393.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr8ithf56\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqk4psd17\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 14285.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpce97mx4q\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 15151.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcs1v08k\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy5lm_hu0\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 14778.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95fewmg3\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 15000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2i98kml\n\
    Started\n.\nFinished in 0.000588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1700.68 tests/s, 5102.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgstjb633\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 14563.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3y_jarcb\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 15306.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8za3u18k\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 15463.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7z41vnv\n\
    Started\n.\nFinished in 0.000185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5405.41 tests/s, 16216.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_s5w6vk\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 14218.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmg80blxo\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 15228.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplnanneiu\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 14563.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo20zeyw4\n\
    Started\n.\nFinished in 0.000186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5376.34 tests/s, 16129.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_awxl85\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 15306.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jrrzedy\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 16042.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk49jns3n\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnue3wpbn\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 15384.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdycpz19f\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 15463.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnb9i7nr\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5effifr\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 13333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgfhslzym\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 15384.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2a87yzvv\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqz_z9io4\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 15384.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7xred88\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 14285.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu076em16\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 13636.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5bvtan7\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 15151.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1qv0p7e\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4wp59tk6\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 14705.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpale2dvy3\n\
    Started\n.\nFinished in 0.000544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1838.24 tests/s, 5514.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpget8x8uy\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6c4a1er\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 14492.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppliv4bni\n\
    Started\n.\nFinished in 0.000258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3875.97 tests/s, 11627.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsgcppg9r\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 13513.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgyk4hcok\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 14778.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdzo8ozf\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 14705.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo__gump9\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg83938p3\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 15151.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0prqgulz\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 15544.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplud9m5j2\n\
    Started\n.\nFinished in 0.000318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3144.65 tests/s, 9433.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkq87qrvr\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpphnjkobs\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp62dyyj1_\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 15384.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmt636y0e\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnrl5bbnh\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 14354.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsr857478\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm13ie8sh\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 14084.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3e_swap\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 14423.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8lx6lw1\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 15228.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50ldwz_x\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 15544.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2y6biv2a\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 15151.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4inktlt0\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 13888.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zqr22t5\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 15463.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6s5m2jv\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 15463.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbg007j0x\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj8eyy120\n\
    Started\n.\nFinished in 0.000284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3521.13 tests/s, 10563.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7cnrp2l\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 14354.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvifh8k0s\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpak1h4dl0\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 15463.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpublyzaxk\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyclcpraf\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqasn8ivw\n\
    Started\n.\nFinished in 0.000703 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1422.48 tests/s, 4267.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8bgo2yv_\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 15544.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnc5r0r37\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 13761.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5bwcn9w\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 15228.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqx9775a\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff9dyqmv\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 14705.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpie5j86c_\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 13761.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp36rzrcor\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 15075.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uvrxoi1\n\
    Started\n.\nFinished in 0.001353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    739.10 tests/s, 2217.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5hof3vl\n\
    Started\n.\nFinished in 0.000551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1814.88 tests/s, 5444.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7avypb3e\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 13333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppri5nv7k\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 16042.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7qieldj\n\
    Started\n.\nFinished in 0.000184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5434.78 tests/s, 16304.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpee11pisg\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 15957.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha5f8fsn\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphf5nxt3g\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 15228.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5atlsyil\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 15306.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp36w40bbh\n\
    Started\n.\nFinished in 0.000186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5376.34 tests/s, 16129.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5nfebs1u\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 15463.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfvwiccdr\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwr6ldjze\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 13636.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb58ls801\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 15544.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgatz4ph1\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 14018.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0qu79el\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 12931.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxud11bm\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg87oq44d\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 14018.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9kcqxycn\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 14218.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmperxctrxt\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphkv8nx0z\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 15957.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgfg0hho\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 12765.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszuzv07b\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 13215.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0j44uma9\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 15463.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacb0jzue\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 14778.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29ux8edj\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 12711.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpheih1cyu\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 12875.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dvf_1wc\n\
    Started\n.\nFinished in 0.000994 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1006.04 tests/s, 3018.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9kr9lp23\n\
    Started\n.\nFinished in 0.000184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5434.78 tests/s, 16304.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0f6ts4q5\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 13953.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpshs4lmro\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 15384.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv75upyh9\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 13392.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c9g552\n\
    Started\n.\nFinished in 0.000675 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1481.48 tests/s, 4444.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwv_bn35\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 13761.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6cr7aqdb\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 15000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nku8d8i\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 14705.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpywcnr8fb\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 14925.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjbh335j1\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 14634.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6pjgw0i\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 13215.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwf0_xvtz\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 13761.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp8mbr9jr\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 15306.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2z9zwa2a\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 14778.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjudmb5t5\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 14851.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qmt13_2\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_j_mk2yq\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 14634.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp10globjw\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 15075.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp0cnp57t\n\
    Started\n.\nFinished in 0.000598 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1672.24 tests/s, 5016.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi8clonvg\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 15306.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp56mtxl_1\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 14925.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6i5509j6\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 14634.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpco4vt718\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 15228.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzu7xc5f1\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 12195.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3x__ksga\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 15306.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3sij_wp8\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiomlya8k\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 14925.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5go6uent\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 14634.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ngpts4w\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 14354.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp85rms051\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 15151.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lrzmmbt\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 14018.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeiybuaki\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 12552.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp233ehq0o\n\
    Started\n.\nFinished in 0.006393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    156.42 tests/s, 469.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu792xdxd\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 15544.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdkc95yb9\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 15463.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpczjo8s3g\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 13888.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyzmo4jw5\n\
    Started\n.\nFinished in 0.000325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3076.92 tests/s, 9230.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_y7he6x\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn69p1f99\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 14218.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpglvzjzcb\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 15306.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe0b8ue_\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 15544.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiuxhsnjg\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 13761.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi65rsdo2\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 14851.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplozgwkrq\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 15957.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4z2yfytx\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 15075.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_y1iei14\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 15463.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5vaasfz1\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 14218.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt7xgdbqj\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 16042.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodpwy_8b\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 14705.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfgswgu_w\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 13274.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpct4zwkv0\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 15544.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfii4ewa\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 15544.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpavii4z4m\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 13953.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4eb5vz_\n\
    Started\n.\nFinished in 0.000186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5376.34 tests/s, 16129.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnfsjqwc2\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqeljuf9i\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 15000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4q2qyxa3\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 16042.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7p32wy3w\n\
    Started\n.\nFinished in 0.000539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1855.29 tests/s, 5565.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzbkbkj8a\n\
    Started\n.\nFinished in 0.000183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5464.48 tests/s, 16393.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprbefw0ag\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 14018.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfubgi6g5\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqjtkuxpw\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 15151.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbq4nfexb\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 14150.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1umqguhb\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnba1wvrz\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 14705.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmth4tnx\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 15384.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgldedeep\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 13824.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuemhsrw8\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 15957.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc02yxdqd\n\
    Started\n.\nFinished in 0.002592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    385.80 tests/s, 1157.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1o37fbi\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 13100.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt25i1sb\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 14925.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqinmqgan\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6oydr5a6\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpospjdphu\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 15228.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8riwgyp4\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 13888.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06vlskl_\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 15544.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi8upanqp\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcavamp4\n\
    Started\n.\nFinished in 0.011013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    90.80 tests/s, 272.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppzpz6g3l\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 13824.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: implement me\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphijsybjn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphijsybjn.rb:13:in\
    \ `test_filter_integers'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_filter_integers\n     12:     candidate = method(:filter_integers)\n\
    \  => 13:     assert_equal([], candidate.call([]))\n     14:     assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3,\
    \ 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.025985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.48 tests/s, 38.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8e6qn_l0\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 13824.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0xvdrh1d\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 12500.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2iqpcw4\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9pya6eyr\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 15151.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6o10emoa\n\
    Started\n.\nFinished in 0.000502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1992.03 tests/s, 5976.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsi3xc8ng\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 14563.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ug4xw76\n\
    Started\n.\nFinished in 0.001737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    575.71 tests/s, 1727.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmal1cr9\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 15957.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7u8qsqv\n\
    Started\n.\nFinished in 0.000345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2898.55 tests/s, 8695.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk8iydmj2\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnmq6v53d\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 13043.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5imn1gy_\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 14218.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zksyowm\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpljto48if\n\
    Started\n.\nFinished in 0.000185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5405.41 tests/s, 16216.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqojxp5em\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 16042.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpagckzqw2\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplit_6mg0\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 15789.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tdrpeca\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 14285.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9pgs0o96\n\
    Started\n.\nFinished in 0.000173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5780.35 tests/s, 17341.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzou1rr17\n\
    Started\n.\nFinished in 0.000175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5714.29 tests/s, 17142.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxiejy64\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 15957.45 assertions/s\n"
  exit_code: 0
  status: OK
