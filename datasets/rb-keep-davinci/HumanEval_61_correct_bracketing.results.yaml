name: HumanEval_61_correct_bracketing
language: ruby
results:
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpike72uai\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpike72uai.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004581625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.26 tests/s, 218.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwkats8az\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwkats8az.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005144855 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.37 tests/s, 194.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw_ikr_3s\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpw_ikr_3s.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005155264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.98 tests/s, 193.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1dnaetls\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1dnaetls.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004495473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.45 tests/s, 222.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq6x84u7w\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpq6x84u7w.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004296348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.76 tests/s, 232.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"(\"\n \
    \           count += 1\n        elsif char == \")\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5k9q0r4v\nStarted\n.\nFinished in 0.000401495 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2490.69 tests/s, 29888.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2jv6qppw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2jv6qppw.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004736626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.12 tests/s, 211.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp68xl9v2t\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp68xl9v2t.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004385747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.01 tests/s, 228.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp722r813p\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp722r813p.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005373865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.09 tests/s, 186.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfe7axknz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfe7axknz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00480242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.23 tests/s, 208.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzh67dz3c\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpzh67dz3c.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005749049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.94 tests/s, 173.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ak2gxzv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8ak2gxzv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004485484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.94 tests/s, 222.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9706w3hk\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9706w3hk.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0047175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.98 tests/s, 211.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwg09fwk9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwg09fwk9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004853777 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.03 tests/s, 206.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpanqfn899\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpanqfn899.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005240384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.83 tests/s, 190.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprr84j23z\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmprr84j23z.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005433838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.03 tests/s, 184.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1svv_xct\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1svv_xct.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005405743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.99 tests/s, 184.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9o495d4f\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9o495d4f.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006170002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.07 tests/s, 162.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgtth18_8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgtth18_8.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006956981 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.74 tests/s, 143.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp643xai1g\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp643xai1g.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004974773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.01 tests/s, 201.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa3hb6m_f\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpa3hb6m_f.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005310104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.32 tests/s, 188.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn4cc3bvq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpn4cc3bvq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005808731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.15 tests/s, 172.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphr2sinab\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphr2sinab.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005673388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.26 tests/s, 176.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpho6v34fu\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpho6v34fu.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00575979 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.62 tests/s, 173.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3c91qm1e\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp3c91qm1e.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004412677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.62 tests/s, 226.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnnmxyeyy\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpnnmxyeyy.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004685108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.44 tests/s, 213.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpojd39taa\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpojd39taa.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004516973 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.39 tests/s, 221.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf6bcr9ex\nStarted\n.\nFinished in 0.000350529 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2852.83 tests/s, 34233.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptcfly75c\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptcfly75c.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00425963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.76 tests/s, 234.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp24v82pf_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp24v82pf_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004542891 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.12 tests/s, 220.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp06a3ukja\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp06a3ukja.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004772743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.52 tests/s, 209.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprq401oaq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmprq401oaq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004963412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.47 tests/s, 201.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9udmuzuj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9udmuzuj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004876659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.06 tests/s, 205.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\n  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"(\"\n      stack.push(char)\n    elsif char == \")\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyf8u0tlm\nStarted\n.\nFinished in 0.000404019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2475.13 tests/s, 29701.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk5b69x5d\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpk5b69x5d.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005765511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.45 tests/s, 173.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl5an7yzs\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpl5an7yzs.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004881929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.84 tests/s, 204.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr008dqr1\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpr008dqr1.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005681904 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.00 tests/s, 176.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpom_8umkx\nStarted\n.\nFinished in 0.000428566 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2333.36 tests/s, 28000.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp27o9ejj0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp27o9ejj0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005502626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.73 tests/s, 181.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: Implement this function\n  # Hint: Use a stack\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuuvyzc7i\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpuuvyzc7i.rb:19:in `test_correct_bracketing'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_correct_bracketing\n\
    \     18:     candidate = method(:correct_bracketing)\n  => 19:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     20:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     21:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     22:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004553903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.59 tests/s, 219.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |c|\n    if c == '('\n      stack.push(c)\n\
    \    elsif c == ')'\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprsp2_kjj\nStarted\n.\nFinished in 0.000424137 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2357.73 tests/s, 28292.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkoxpllfa\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkoxpllfa.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004634834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.76 tests/s, 215.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg44mv9ju\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpg44mv9ju.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004640155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.51 tests/s, 215.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp68as26vb\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp68as26vb.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005361641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.51 tests/s, 186.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0u6c5uhp\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0u6c5uhp.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009963514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.37 tests/s, 100.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppuwi0syd\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppuwi0syd.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0050899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.47 tests/s, 196.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"(\"\n\
    \    count -= 1 if char == \")\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3h2jnwzb\nStarted\n.\nFinished in 0.000508326 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1967.24 tests/s, 23606.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwwbivwq_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwwbivwq_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004183406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.04 tests/s, 239.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ku40unt\nStarted\n.\nFinished in 0.000640996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1560.07 tests/s, 18720.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n \
    \     open_brackets += 1\n    elsif char == \")\"\n      open_brackets -= 1\n\
    \    end\n    if open_brackets < 0\n      return false\n    end\n  end\n  return\
    \ open_brackets == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkw579y7h\nStarted\n.\nFinished in 0.000405562 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2465.71 tests/s, 29588.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp9_cq1ye\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpp9_cq1ye.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0045633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.14 tests/s, 219.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkd11kbbl\nStarted\n.\nFinished in 0.000378211 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2644.03 tests/s, 31728.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n      count\
    \ += 1\n    elsif char == \")\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjf0h_2ce\nStarted\n.\nFinished in 0.000407557 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2453.64 tests/s, 29443.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp635uxm5u\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp635uxm5u.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004981366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.75 tests/s, 200.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu5g6jd8m\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpu5g6jd8m.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004581273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.28 tests/s, 218.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxq7hwo42\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxq7hwo42.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004541258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.20 tests/s, 220.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkkpj5dx2\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkkpj5dx2.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004649432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.08 tests/s, 215.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkc26wk3w\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkc26wk3w.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004343438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.23 tests/s, 230.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1rz5hezu\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1rz5hezu.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004721047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.82 tests/s, 211.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9rl_dj3u\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9rl_dj3u.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005184929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.87 tests/s, 192.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # set a counter to 0\n  # iterate through the string\n  # if the character\
    \ is an opening bracket, add 1 to the counter\n  # if the character is a closing\
    \ bracket, subtract 1 from the counter\n  # if the counter is ever negative, return\
    \ False\n  # return True if the counter is 0 at the end\n  counter = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"(\"\n      counter += 1\n    elsif char == \")\"\
    \n      counter -= 1\n    end\n    return false if counter < 0\n  end\n  counter\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpog0se_22\nStarted\n.\nFinished in 0.000451379 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2215.43 tests/s, 26585.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkwutgbn7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkwutgbn7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004671303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.07 tests/s, 214.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk320yi_6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpk320yi_6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004263947 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.52 tests/s, 234.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n \
    \     open_brackets += 1\n    elsif char == \")\"\n      open_brackets -= 1\n\
    \    end\n    return false if open_brackets < 0\n  end\n  return open_brackets\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv3ipk5og\nStarted\n.\nFinished in 0.00043072 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2321.69 tests/s, 27860.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzsieeb1n\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpzsieeb1n.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005598255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.63 tests/s, 178.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplbcys4mz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplbcys4mz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004215687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.21 tests/s, 237.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyafcnw95\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpyafcnw95.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005113104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.58 tests/s, 195.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnmmxqx58\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpnmmxqx58.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006123794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.30 tests/s, 163.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfv6egy8p\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfv6egy8p.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0048717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.27 tests/s, 205.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqfe47jcc\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqfe47jcc.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00553653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.62 tests/s, 180.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi0def0vd\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpi0def0vd.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005051769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.95 tests/s, 197.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5kv6jttd\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5kv6jttd.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005155383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.97 tests/s, 193.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2xqevzmh\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2xqevzmh.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005465116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.98 tests/s, 182.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_v4i57e7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_v4i57e7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004691211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.16 tests/s, 213.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpba_cuha4\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpba_cuha4.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00466487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.37 tests/s, 214.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp91z48e4l\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp91z48e4l.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004481607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.13 tests/s, 223.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn0jp2ee0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpn0jp2ee0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005615548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.08 tests/s, 178.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm2i5rzxz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpm2i5rzxz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004857363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.87 tests/s, 205.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp70q3xjdq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp70q3xjdq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004691312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.16 tests/s, 213.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkkpuf64c\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkkpuf64c.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004551959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.69 tests/s, 219.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwcrc_xc6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwcrc_xc6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004753147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.39 tests/s, 210.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphm1wxtwb\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphm1wxtwb.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005088668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.52 tests/s, 196.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt7d9vg6z\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpt7d9vg6z.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004662466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.48 tests/s, 214.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpktrz8bmz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpktrz8bmz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004551969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.69 tests/s, 219.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\n    count = 0\n    brackets.each_char do |char|\n     \
    \   if char == \"(\"\n            count += 1\n        elsif char == \")\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3uhh_29o\nStarted\n.\nFinished in 0.000439406 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2275.80 tests/s, 27309.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpllvjmkra\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpllvjmkra.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004817759 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.57 tests/s, 207.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnlzr31oz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpnlzr31oz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004545707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.99 tests/s, 219.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsud7uptp\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsud7uptp.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004588197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.95 tests/s, 217.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe733tls9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpe733tls9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005057219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.74 tests/s, 197.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8zq52qwy\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8zq52qwy.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004976627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.94 tests/s, 200.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdiohhfa2\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdiohhfa2.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005213944 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.79 tests/s, 191.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgzyo2jc7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgzyo2jc7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004615839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.65 tests/s, 216.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj8bm_fbs\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj8bm_fbs.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006497047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.92 tests/s, 153.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg7xpq0xq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpg7xpq0xq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00482372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.31 tests/s, 207.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"(\"\n \
    \           count += 1\n        elsif char == \")\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2knpxtj2\nStarted\n.\nFinished in 0.000427153 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2341.08 tests/s, 28092.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # if brackets.length == 0\n    #     return True\n    # elsif brackets.length\
    \ == 1\n    #     return False\n    # end\n    # if brackets[0] == \"(\"\n   \
    \ #     if brackets[-1] == \")\"\n    #         return correct_bracketing(brackets[1..-2])\n\
    \    #     else\n    #         return False\n    #     end\n    # else\n    #\
    \     return False\n    # end\n    # if brackets.length == 0\n    #     return\
    \ True\n    # elsif brackets.length == 1\n    #     return False\n    # end\n\
    \    # if brackets[0] == \"(\"\n    #     if brackets[-1] == \")\"\n    #    \
    \     return correct_bracketing(brackets[1..-2])\n    #     else\n    #      \
    \   return False\n    #     end\n    # else\n    #     return False\n    # end\n\
    \    # if brackets.length == 0\n    #     return True\n    # elsif brackets.length\
    \ == 1\n    #     return False\n    # end\n    # if brackets[0] == \"(\"\n   \
    \ #     if brackets[-1] == \")\"\n    #         return correct_bracketing(brackets[1..-2])\n\
    \    #     else\n    #         return False\n    #     end\n    # else\n    #\
    \     return False\n    # end\n    # if brackets.length == 0\n    #     return\
    \ True\n    # elsif brackets.length == 1\n    #     return False\n    # end\n\
    \    # if brackets[0] == \"(\"\n    #     if brackets[-1] == \")\"\n    #    \
    \     return correct_bracketing(brackets[1..-2])\n    #     else\n    #      \
    \   return False\n    #     end\n    # else\n    #     return False\n    # end\n\
    \    # if brackets.length == 0\n    #     return True\n    # elsif brackets.length\
    \ == 1\n    #     return False\n    # end\n    # if brackets[0] == \"(\"\n   \
    \ #     if brackets[-1] == \")\"\n    #         return correct_bracketing(brackets[1..\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpdqf7ibtu.rb:77: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpdqf7ibtu.rb:93: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxq8lpece\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxq8lpece.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00559526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.72 tests/s, 178.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpron8fwja\nStarted\n.\nFinished in 0.000455006 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2197.77 tests/s, 26373.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph94d30ip\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmph94d30ip.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005359717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.58 tests/s, 186.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyk_10f83\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpyk_10f83.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00485059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.16 tests/s, 206.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgi4xmjn5\nStarted\n.\nFinished in 0.000433235 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2308.22 tests/s, 27698.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcvboo_gs\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpcvboo_gs.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00526557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.91 tests/s, 189.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv12oqze6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpv12oqze6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00453662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.43 tests/s, 220.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp62r_if9p\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp62r_if9p.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004675231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.89 tests/s, 213.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoww2o1w2\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpoww2o1w2.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004532933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.61 tests/s, 220.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplly3sd88\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplly3sd88.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004923026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.13 tests/s, 203.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppybleqhv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppybleqhv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005040437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.40 tests/s, 198.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnc_q7ski\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpnc_q7ski.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004667466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.25 tests/s, 214.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp03zvjdwr\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp03zvjdwr.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004658168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.68 tests/s, 214.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6foqvqno\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6foqvqno.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005067087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.35 tests/s, 197.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp12zi51_y\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp12zi51_y.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004640656 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.49 tests/s, 215.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk5tdz7w6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpk5tdz7w6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004669421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.16 tests/s, 214.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptsb3cya5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptsb3cya5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00482899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.08 tests/s, 207.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp08a5ahu9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp08a5ahu9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006220407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.76 tests/s, 160.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc8z1n1gs\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpc8z1n1gs.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005931052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.60 tests/s, 168.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpokvfyptk\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpokvfyptk.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004469935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.72 tests/s, 223.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm4gpinlf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpm4gpinlf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004736676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.12 tests/s, 211.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgiqxvas3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgiqxvas3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004904281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.90 tests/s, 203.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvcd1mvqq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvcd1mvqq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004565205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.05 tests/s, 219.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpce44ud62\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpce44ud62.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004841173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.56 tests/s, 206.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp50ew2e_l\nStarted\n.\nFinished in 0.000555254 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1800.98 tests/s, 21611.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi88wp7it\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpi88wp7it.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004652307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.95 tests/s, 214.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsn9qekua\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsn9qekua.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005556959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.95 tests/s, 179.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3viaayrp\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp3viaayrp.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004659871 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.60 tests/s, 214.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2zseh1d0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2zseh1d0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004938064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.51 tests/s, 202.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpubou4xxi\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpubou4xxi.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004998868 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.05 tests/s, 200.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe_v07co0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpe_v07co0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004691051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.17 tests/s, 213.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb7dviuhf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpb7dviuhf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004795756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.52 tests/s, 208.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqot__7w2\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqot__7w2.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005033634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.66 tests/s, 198.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxet9h0ya\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxet9h0ya.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004338908 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.47 tests/s, 230.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm1e0azxe\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpm1e0azxe.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005319332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.99 tests/s, 187.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4ztzwpue\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4ztzwpue.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005226318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.34 tests/s, 191.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpldm65kpk\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpldm65kpk.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004829812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.05 tests/s, 207.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets[0] == \")\"\n  return false if brackets[-1] == \"\
    (\"\n  return false if brackets.count(\"(\") != brackets.count(\")\")\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv4q42_4b\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpv4q42_4b.rb:31:in `test_correct_bracketing'\n\
    \     28:     assert_equal(false, candidate.call(\"((((\"))\n     29:     assert_equal(false,\
    \ candidate.call(\")\"))\n     30:     assert_equal(false, candidate.call(\"(()\"\
    ))\n  => 31:     assert_equal(false, candidate.call(\"()()(()())())(()\"))\n \
    \    32:     assert_equal(false, candidate.call(\"()()(()())()))()\"))\n     33:\
    \   end\n     34: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.004940559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.41 tests/s, 2226.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgfvh3cmj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgfvh3cmj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004646727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.21 tests/s, 215.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2szxis7v\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2szxis7v.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004925662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.02 tests/s, 203.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdl64qvtd\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdl64qvtd.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004666764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.28 tests/s, 214.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"(\"\n\
    \    count -= 1 if char == \")\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu1vo42qp\nStarted\n.\nFinished in 0.0004947 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2021.43 tests/s, 24257.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoe06capz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpoe06capz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004639493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.54 tests/s, 215.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp744wisw6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp744wisw6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004813291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.76 tests/s, 207.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb7kvxlgq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpb7kvxlgq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00561144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.21 tests/s, 178.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbggq9mvv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbggq9mvv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004772503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.53 tests/s, 209.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0ampp9b3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0ampp9b3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004627751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.09 tests/s, 216.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk43k023q\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpk43k023q.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005605269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.40 tests/s, 178.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvrtp8lyu\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvrtp8lyu.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004757004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.22 tests/s, 210.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n      open\
    \ += 1\n    elsif char == \")\"\n      open -= 1\n    end\n    return false if\
    \ open < 0\n  end\n  open == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3bj445g9\nStarted\n.\nFinished in 0.000397498 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2515.74 tests/s, 30188.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkfm7h1aw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkfm7h1aw.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004486365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.90 tests/s, 222.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpve7h4voz\nStarted\n.\nFinished in 0.000386607 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2586.61 tests/s, 31039.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsccz0_h6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsccz0_h6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004393571 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.61 tests/s, 227.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2onwmldx\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2onwmldx.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005130187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.92 tests/s, 194.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets[0] == \")\"\n  return false if brackets[-1] == \"\
    (\"\n  return false if brackets.count(\"(\") != brackets.count(\")\")\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu5ujhss5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpu5ujhss5.rb:31:in `test_correct_bracketing'\n\
    \     28:     assert_equal(false, candidate.call(\"((((\"))\n     29:     assert_equal(false,\
    \ candidate.call(\")\"))\n     30:     assert_equal(false, candidate.call(\"(()\"\
    ))\n  => 31:     assert_equal(false, candidate.call(\"()()(()())())(()\"))\n \
    \    32:     assert_equal(false, candidate.call(\"()()(()())()))()\"))\n     33:\
    \   end\n     34: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005484573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.33 tests/s, 2005.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9uhvr6cl\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9uhvr6cl.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005761644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.56 tests/s, 173.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl1a63lt5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpl1a63lt5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004610438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.90 tests/s, 216.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbgjyxtvx\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbgjyxtvx.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005662666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.60 tests/s, 176.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjjebb9r0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpjjebb9r0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004753899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.35 tests/s, 210.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdm9ajir8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdm9ajir8.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005375287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.04 tests/s, 186.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3z_688gm\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp3z_688gm.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004494781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.48 tests/s, 222.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjmj4n7la\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpjmj4n7la.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005071836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.17 tests/s, 197.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiqao65vt\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpiqao65vt.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004516203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.42 tests/s, 221.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfxgyxa2k\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfxgyxa2k.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004508828 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.79 tests/s, 221.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpofcdzo_h\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpofcdzo_h.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004586034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.05 tests/s, 218.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpokxqv1ve\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpokxqv1ve.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004606151 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.10 tests/s, 217.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0mu_d2gz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0mu_d2gz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004851091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.14 tests/s, 206.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpelhpc8pv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpelhpc8pv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004763247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.94 tests/s, 209.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7tcd6k1x\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7tcd6k1x.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004429078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.78 tests/s, 225.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo0shhhwz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo0shhhwz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005168028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.50 tests/s, 193.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbli_6yn0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbli_6yn0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004679499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.70 tests/s, 213.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj6180b_6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj6180b_6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004724845 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.65 tests/s, 211.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp88wigusl\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp88wigusl.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005196361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.44 tests/s, 192.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd_vqvbey\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpd_vqvbey.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004781019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.16 tests/s, 209.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwwk0_wlm\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwwk0_wlm.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004671183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.08 tests/s, 214.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptrmeh60i\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptrmeh60i.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004818972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.51 tests/s, 207.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyu8u3qsg\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpyu8u3qsg.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004439597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.25 tests/s, 225.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpplale28h\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpplale28h.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004742538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.86 tests/s, 210.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj5hqwmw3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj5hqwmw3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00646713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.63 tests/s, 154.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_qzohcl3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_qzohcl3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004912437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.56 tests/s, 203.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length == 1\n  return false if brackets[0] == \")\"\
    \n  return false if brackets[-1] == \"(\"\n  return false if brackets.count(\"\
    (\") != brackets.count(\")\")\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate\
    \ = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"()\"\
    ))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1814ecg2\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1814ecg2.rb:32:in `test_correct_bracketing'\n\
    \     29:     assert_equal(false, candidate.call(\"((((\"))\n     30:     assert_equal(false,\
    \ candidate.call(\")\"))\n     31:     assert_equal(false, candidate.call(\"(()\"\
    ))\n  => 32:     assert_equal(false, candidate.call(\"()()(()())())(()\"))\n \
    \    33:     assert_equal(false, candidate.call(\"()()(()())()))()\"))\n     34:\
    \   end\n     35: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005083668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.71 tests/s, 2163.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz3gb6cqf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpz3gb6cqf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00451548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.46 tests/s, 221.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbqek_uaa\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbqek_uaa.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005152538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.08 tests/s, 194.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuz7uohbh\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpuz7uohbh.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004408869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.82 tests/s, 226.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\n    count = 0\n    brackets.each_char do |char|\n     \
    \   if char == \"(\"\n            count += 1\n        elsif char == \")\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprhcqkj84\nStarted\n.\nFinished in 0.000409671 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2440.98 tests/s, 29291.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdt8tso11\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdt8tso11.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004825002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.25 tests/s, 207.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnr_h8hps\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpnr_h8hps.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004563932 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.11 tests/s, 219.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg3t0d33c\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpg3t0d33c.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004673787 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.96 tests/s, 213.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\n    stack = []\n    brackets.each_char do |char|\n    \
    \    if char == \"(\"\n            stack.push(char)\n        elsif char == \"\
    )\"\n            if stack.length == 0\n                return false\n        \
    \    else\n                stack.pop\n            end\n        end\n    end\n\
    \    return stack.length == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpronpdw9k\nStarted\n.\nFinished in 0.000407306 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2455.16 tests/s, 29461.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1phoy5e5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1phoy5e5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004594609 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.65 tests/s, 217.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl1qfovyk\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpl1qfovyk.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00466987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.14 tests/s, 214.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4vi3cle3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4vi3cle3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004688325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.30 tests/s, 213.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuxjvl5a7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpuxjvl5a7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005064934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.44 tests/s, 197.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfcowd9jw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfcowd9jw.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004172155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.68 tests/s, 239.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmvcpipky\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmvcpipky.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00423309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.23 tests/s, 236.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpom4io4sd\nStarted\n.\nFinished in 0.000345079 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2897.89 tests/s, 34774.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0w9xywif\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0w9xywif.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004388492 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.87 tests/s, 227.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp71w5e8yf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp71w5e8yf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004302029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.45 tests/s, 232.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0vxo6ac7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0vxo6ac7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004165403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.07 tests/s, 240.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length == 1\n  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"(\"\n      stack.push(char)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvfsu9ve8\nStarted\n.\nFinished in 0.000482918 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2070.74 tests/s, 24848.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv6d5arh_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpv6d5arh_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004321546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.40 tests/s, 231.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb1lxnsbz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpb1lxnsbz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004112773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.14 tests/s, 243.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6db32p5t\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6db32p5t.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006619155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.08 tests/s, 151.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0wq2_ata\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0wq2_ata.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0043669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.00 tests/s, 229.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
