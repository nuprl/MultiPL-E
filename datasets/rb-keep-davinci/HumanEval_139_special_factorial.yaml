name: HumanEval_139_special_factorial
language: ruby
prompt: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! *\
  \ (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
  # 288\n# The function will receive an integer as input and should return the special\n\
  # factorial of this integer.\ndef special_factorial(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_special_factorial\n\
  \    candidate = method(:special_factorial)\n    assert_equal(288, candidate.call(4))\n\
  \    assert_equal(34560, candidate.call(5))\n    assert_equal(125411328000, candidate.call(7))\n\
  \    assert_equal(1, candidate.call(1))\n  end\nend\n"
completions: ["  # Your code here\nend", "  return 1 if n == 0\n  (1..n).inject(:*)\
    \ * special_factorial(n-1)\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\n\
    end", "  return 1 if n == 0\n  n * special_factorial(n-1)\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  return 1 if n == 0\n  (1..n).inject(:*) * special_factorial(n-1)\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # your code here\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  return 1 if n ==\
    \ 0\n  n * special_factorial(n-1)\nend", "  if n == 0\n    return 1\n  end\n \
    \ return n * special_factorial(n-1)\nend", "  if n == 0\n    return 1\n  else\n\
    \    return n * special_factorial(n-1)\n  end\nend", "  if n == 0\n    return\
    \ 1\n  else\n    return n * special_factorial(n-1)\n  end\nend", "  factorial\
    \ = 1\n  (1..n).each do |i|\n    factorial *= i\n  end\n  factorial\nend", " \
    \ # Your code here\nend", "  return 1 if n == 0\n  return n * special_factorial(n-1)\n\
    end", "  return 1 if n == 0\n  (1..n).inject(:*) * special_factorial(n-1)\nend",
  "  # Your code here\nend", "  return 1 if n == 0\n  (1..n).inject(:*) * special_factorial(n-1)\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  return 1 if n == 0\n  return n * special_factorial(n-1)\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # Your code here\nend", "  return\
    \ 1 if n == 0\n  n * special_factorial(n-1)\nend", "  # your code here\nend",
  "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n  end\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  if n == 0\n    return 1\n  end\n  return n\
    \ * special_factorial(n-1)\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  if n == 0\n    return 1\n  end\n  return n\
    \ * special_factorial(n-1)\nend", "  if n == 0\n    return 1\n  else\n    return\
    \ n * special_factorial(n-1)\n  end\nend", "  # your code here\nend", "  return\
    \ 1 if n == 0\n  return n * special_factorial(n-1)\nend", "  return 1 if n ==\
    \ 0\n  n * special_factorial(n-1)\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\n\
    end", "  return 1 if n == 0\n  n * special_factorial(n-1)\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\n\
    end", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  # Your code here\nend", "  # your code here\nend", "  return\
    \ 1 if n == 0\n  n * special_factorial(n-1)\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  return 1 if n == 0\n  n\
    \ * special_factorial(n-1)\nend", "  # Your code here\nend", "  if n == 0\n  \
    \  return 1\n  end\n  return n * special_factorial(n-1)\nend", "  if n == 0\n\
    \    return 1\n  else\n    return n * special_factorial(n-1)\n  end\nend", " \
    \ return 1 if n == 0\n  n * special_factorial(n-1)\nend", "  # Your code here\n\
    end", "  # YOUR CODE HERE\nend", "  if n <= 0\n    return nil\n  end\n  result\
    \ = 1\n  for i in 1..n\n    result *= i\n  end\n  for i in 1..n-1\n    result\
    \ *= i\n  end\n  return result\nend", "  # your code here\nend", "  # TODO: implement\
    \ this method\nend", "  # Your code here\nend", "  # Your code here\nend", " \
    \ if n == 0\n    return 1\n  end\n  return n * special_factorial(n-1)\nend", " \
    \ if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n  end\n\
    end", "  (1..n).inject(:*) * (1..n-1).inject(:*)\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  return 1 if n ==\
    \ 0\n  n * special_factorial(n-1)\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  return nil if n < 1\n  (1..n).inject(:*) * (1..n-1).inject(:*)\n\
    end", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  return 1 if n == 0\n  return n * special_factorial(n-1)\nend",
  "  # YOUR CODE HERE\nend", "  # Your code here\nend", "  # YOUR CODE HERE\nend",
  "  (1..n).inject(:*) * (1..n-1).inject(:*)\nend", "  # Your code here\nend", " \
    \ # Your code here\nend", "  if n == 0\n    return 1\n  end\n  return n * special_factorial(n-1)\n\
    end", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  # Your code here\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\n\
    end", "  # Your code here\nend", "  return 1 if n == 0\n  (1..n).inject(:*) *\
    \ special_factorial(n-1)\nend", "  return 1 if n == 0\n  (1..n).inject(:*) * special_factorial(n-1)\n\
    end", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  # Your code here\nend", "  # TODO: Implement this function\n\
    end", "  # Your code here\nend", "  n.downto(1).inject(:*)\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\nend",
  "  # Your code here\nend", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\n\
    end", "  return 1 if n == 0\n  n * special_factorial(n-1)\nend", "  if n == 0\n\
    \    return 1\n  else\n    return n * special_factorial(n-1)\n  end\nend", " \
    \ return 1 if n == 0\n  (1..n).inject(:*) * special_factorial(n-1)\nend", "  #\
    \ Your code here\nend", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  # TODO: Implement the special factorial function\n  if n == 0\n\
    \    return 1\n  else\n    return n * special_factorial(n-1)\n  end\nend", " \
    \ # Your code here\nend", "  n.downto(1).reduce(:*)\nend", "  # Your code here\n\
    end", "  if n == 0\n    return 1\n  end\n  return n * special_factorial(n-1)\n\
    end", "  # Your code here\nend", "  if n == 0\n    return 1\n  else\n    return\
    \ n * special_factorial(n-1)\n  end\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  return 1 if n ==\
    \ 0\n  return n * special_factorial(n-1)\nend", "  # TODO: Implement the special\
    \ factorial function\n  return nil if n < 0\n  return 1 if n == 0\n  return n\
    \ * special_factorial(n-1)\nend", "  # Your code here\nend", "  return 1 if n\
    \ == 0\n  n * special_factorial(n-1)\nend", "  # YOUR CODE HERE\nend", "  if n\
    \ == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n  end\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  n.downto(1).inject(:*)\n\
    end", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\nend", "  #\
    \ Your code here\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  if n == 0\n   \
    \ return 1\n  else\n    return n * special_factorial(n-1)\n  end\nend", "  # Your\
    \ code here\nend", "  if n <= 0\n    return nil\n  else\n    factorial = 1\n \
    \   (1..n).each do |i|\n      factorial *= i\n    end\n    return factorial\n\
    \  end\nend", "  # Your code here\nend", "  # your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # Your code here\nend", "  #\
    \ Your code here\nend", "  # TODO: Implement this method\nend", "  # Your code\
    \ here\nend", "  # TODO: Implement the special factorial function\n  if n == 0\n\
    \    return 1\n  else\n    return n * special_factorial(n-1)\n  end\nend", " \
    \ # Your code here\nend", "  # YOUR CODE HERE\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  return nil if n < 1\n  (1..n).inject(:*) * (1..n-1).inject(:*)\n\
    end", "  if n == 0\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend", "  # YOUR CODE HERE\nend", "  return 1 if n == 0\n  return n * special_factorial(n-1)\n\
    end", "  return 1 if n == 0\n  n * special_factorial(n-1)\nend", "  # Your code\
    \ here\nend", "  if n == 0\n    1\n  else\n    n * special_factorial(n-1)\n  end\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  return 1 if n ==\
    \ 0\n  n * special_factorial(n-1)\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  return 1 if n == 0\n  n * special_factorial(n-1)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
