name: HumanEval_157_right_angle_triangle
language: ruby
results:
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkey01tm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkey01tm.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.31 tests/s, 309.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4kmfutmu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4kmfutmu.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.84 tests/s, 328.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdz135q61\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdz135q61.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.61 tests/s, 69.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhawnra7\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 51643.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpglkcoxh0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpglkcoxh0.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.79 tests/s, 118.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif b**2 + c**2 == a**2\n    return true\n  elsif c**2 +\
    \ a**2 == b**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphj2231z0\n\
    Started\n.\nFinished in 0.000259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3861.00 tests/s, 42471.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2d954qbz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2d954qbz.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.17 tests/s, 282.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw38mhnlt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw38mhnlt.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.23 tests/s, 327.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: implement this\
    \ method\n  if a**2 + b**2 == c**2\n    return true\n  elsif a**2 + c**2 == b**2\n\
    \    return true\n  elsif b**2 + c**2 == a**2\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ue9dg4w\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 51162.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_h0upy0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_h0upy0.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.59 tests/s, 112.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodi3p8dv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodi3p8dv.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.90 tests/s, 319.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ if a**2 == b**2 + c**2\n      return true\n    else\n      return false\n  \
    \  end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n\
    \    else\n      return false\n    end\n  elsif c > a && c > b\n    if c**2 ==\
    \ a**2 + b**2\n      return true\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp548x316z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp548x316z.rb:36:in\
    \ `test_right_angle_triangle'\n     33:     assert_equal(true, candidate.call(3,\
    \ 4, 5))\n     34:     assert_equal(false, candidate.call(1, 2, 3))\n     35:\
    \     assert_equal(true, candidate.call(10, 6, 8))\n  => 36:     assert_equal(false,\
    \ candidate.call(2, 2, 2))\n     37:     assert_equal(true, candidate.call(7,\
    \ 24, 25))\n     38:     assert_equal(false, candidate.call(10, 5, 7))\n     39:\
    \     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n\
    <nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.00497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.21 tests/s, 804.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dr70fr0\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 46218.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\
    \ || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    return true\n  else\n   \
    \ return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphdv_3tts\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 53140.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ if a**2 == b**2 + c**2\n      return true\n    else\n      return false\n  \
    \  end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n\
    \    else\n      return false\n    end\n  elsif c > a && c > b\n    if c**2 ==\
    \ a**2 + b**2\n      return true\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazglvtue\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazglvtue.rb:36:in\
    \ `test_right_angle_triangle'\n     33:     assert_equal(true, candidate.call(3,\
    \ 4, 5))\n     34:     assert_equal(false, candidate.call(1, 2, 3))\n     35:\
    \     assert_equal(true, candidate.call(10, 6, 8))\n  => 36:     assert_equal(false,\
    \ candidate.call(2, 2, 2))\n     37:     assert_equal(true, candidate.call(7,\
    \ 24, 25))\n     38:     assert_equal(false, candidate.call(10, 5, 7))\n     39:\
    \     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n\
    <nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.00913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.53 tests/s, 438.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a**2 + b**2 == c**2)\
    \ || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02ztz92r\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 51401.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50sd1zc1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50sd1zc1.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.46 tests/s, 324.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyy51s_u\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 51401.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztl05bcq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztl05bcq.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.15 tests/s, 219.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppsfz6j1_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppsfz6j1_.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005387 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.63 tests/s, 185.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3tpd0sz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3tpd0sz.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.12 tests/s, 291.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpep6bsyy9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpep6bsyy9.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.65 tests/s, 150.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ return a**2 == b**2 + c**2\n  elsif b > a && b > c\n    return b**2 == a**2\
    \ + c**2\n  elsif c > a && c > b\n    return c**2 == a**2 + b**2\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprr55s5hm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprr55s5hm.rb:24:in\
    \ `test_right_angle_triangle'\n     21:     assert_equal(true, candidate.call(3,\
    \ 4, 5))\n     22:     assert_equal(false, candidate.call(1, 2, 3))\n     23:\
    \     assert_equal(true, candidate.call(10, 6, 8))\n  => 24:     assert_equal(false,\
    \ candidate.call(2, 2, 2))\n     25:     assert_equal(true, candidate.call(7,\
    \ 24, 25))\n     26:     assert_equal(false, candidate.call(10, 5, 7))\n     27:\
    \     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n\
    <nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.004472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.61 tests/s, 894.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz9ocjbe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz9ocjbe.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.15 tests/s, 215.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp99azdfo4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp99azdfo4.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.024952 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.08 tests/s, 40.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoqrqbu72\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoqrqbu72.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.44 tests/s, 62.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4u1fjeal\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 44176.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rhc7m5y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rhc7m5y.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.97 tests/s, 103.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5816m5m0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5816m5m0.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.37 tests/s, 326.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7wbb6x4i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7wbb6x4i.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.30 tests/s, 312.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam16pr9u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam16pr9u.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 315.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcegwdiml\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcegwdiml.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.13 tests/s, 331.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ if a**2 == b**2 + c**2\n      return true\n    else\n      return false\n  \
    \  end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n\
    \    else\n      return false\n    end\n  elsif c > a && c > b\n    if c**2 ==\
    \ a**2 + b**2\n      return true\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi_e5pown\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi_e5pown.rb:36:in\
    \ `test_right_angle_triangle'\n     33:     assert_equal(true, candidate.call(3,\
    \ 4, 5))\n     34:     assert_equal(false, candidate.call(1, 2, 3))\n     35:\
    \     assert_equal(true, candidate.call(10, 6, 8))\n  => 36:     assert_equal(false,\
    \ candidate.call(2, 2, 2))\n     37:     assert_equal(true, candidate.call(7,\
    \ 24, 25))\n     38:     assert_equal(false, candidate.call(10, 5, 7))\n     39:\
    \     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n\
    <nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 1249.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp38m_z_4b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp38m_z_4b.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.95 tests/s, 182.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf9l9tox\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf9l9tox.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.72 tests/s, 311.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7urvbcsw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7urvbcsw.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.27 tests/s, 314.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplyla2hyf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplyla2hyf.rb:21:in\
    \ `test_right_angle_triangle'\n     18:     candidate = method(:right_angle_triangle)\n\
    \     19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n  => 21:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:\
    \     assert_equal(true, candidate.call(7, 24, 25))\n     24:     assert_equal(false,\
    \ candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.06 tests/s, 951.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel9br4z2\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 52631.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuh82r3bb\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 52380.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8a9fl5l3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8a9fl5l3.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.25 tests/s, 324.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8z8exa94\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8z8exa94.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003152 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.26 tests/s, 317.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tox0z0c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tox0z0c.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 324.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2twzapm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2twzapm.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.79 tests/s, 309.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkk62iid5\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 50228.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: implement\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvcyjec_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvcyjec_.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00298 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    335.57 tests/s, 335.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsybv32r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsybv32r.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.00 tests/s, 320.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqj7njq9\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 51643.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1oay9v0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1oay9v0.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.49 tests/s, 319.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_43lodj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_43lodj.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.34 tests/s, 154.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqq1x1nyc\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 50228.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodjvbky6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodjvbky6.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.25 tests/s, 324.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsiv7f1bf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsiv7f1bf.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.039534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.29 tests/s, 25.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphmkk5y2m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphmkk5y2m.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.98 tests/s, 92.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77p23sv5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77p23sv5.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.05305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    18.85 tests/s, 18.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9j7dgqoi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9j7dgqoi.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.38 tests/s, 267.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4rp76mr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4rp76mr.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.041822 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.91 tests/s, 23.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5wowbpz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5wowbpz.rb:21:in\
    \ `test_right_angle_triangle'\n     18:     candidate = method(:right_angle_triangle)\n\
    \     19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n  => 21:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:\
    \     assert_equal(true, candidate.call(7, 24, 25))\n     24:     assert_equal(false,\
    \ candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.94 tests/s, 899.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7tk4rzjx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7tk4rzjx.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.15 tests/s, 324.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp404sa28s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp404sa28s.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.74 tests/s, 308.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzacgxpzc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzacgxpzc.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.96 tests/s, 315.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe9lurmdf\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 52631.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return false if a <= 0\
    \ || b <= 0 || c <= 0\n  return true if a**2 + b**2 == c**2\n  return true if\
    \ a**2 + c**2 == b**2\n  return true if b**2 + c**2 == a**2\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfnmsxmkc\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 50458.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpseczp4ev\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpseczp4ev.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.17 tests/s, 314.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpouftb3v_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpouftb3v_.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.45 tests/s, 226.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpulucmb0u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpulucmb0u.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.57 tests/s, 300.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8j31uub\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 51401.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptts2scjv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptts2scjv.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.42 tests/s, 115.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpks4fj67h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpks4fj67h.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.91 tests/s, 209.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ijvifca\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ijvifca.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.12 tests/s, 300.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ a**2 == b**2 + c**2\n  elsif b > a && b > c\n    b**2 == a**2 + c**2\n  else\n\
    \    c**2 == a**2 + b**2\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8qct1l0t\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 52380.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vayjxrn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vayjxrn.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.75 tests/s, 321.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx92_1u_g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx92_1u_g.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.55 tests/s, 308.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwzxn30u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwzxn30u.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.23 tests/s, 332.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe6pwvbu_\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 50000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxlrwg22\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxlrwg22.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004976 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.96 tests/s, 200.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp973xisop\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 51162.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e5wtd8a\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 48034.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyp2n_tw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyp2n_tw.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.16 tests/s, 322.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnw7pm4fn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnw7pm4fn.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.06 tests/s, 315.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqgkmcp90\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqgkmcp90.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.36 tests/s, 330.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvpw2rx2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvpw2rx2.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 320.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplwcwqzxi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplwcwqzxi.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.80 tests/s, 330.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpafyfjne7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpafyfjne7.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.99 tests/s, 324.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdprh2pj0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdprh2pj0.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.48 tests/s, 326.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a**2 + b**2 == c**2)\
    \ || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprharibd7\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 46218.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpueo9dhtc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpueo9dhtc.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003081 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.57 tests/s, 324.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp976uu606\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 50228.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_mo_v56\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_mo_v56.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00356 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.90 tests/s, 280.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgl5c3pz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgl5c3pz.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.040248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.85 tests/s, 24.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7p5xyno2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7p5xyno2.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.37 tests/s, 326.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqt0z2lo4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqt0z2lo4.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002998 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.56 tests/s, 333.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5rh0b00\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5rh0b00.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.48 tests/s, 302.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpet2zksji\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpet2zksji.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.98 tests/s, 284.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuqq0dhf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuqq0dhf.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.76 tests/s, 327.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8o629h9z\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 52380.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt29s4gp7\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 47413.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2qw_6_t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2qw_6_t.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.68 tests/s, 322.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lyudc3u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3lyudc3u.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.85 tests/s, 287.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6akj0kdn\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 51162.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuyunubct\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuyunubct.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.01 tests/s, 276.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qxviopb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qxviopb.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.04 tests/s, 299.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxl46l3q3\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 52884.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwjeg5mn7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwjeg5mn7.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.67 tests/s, 318.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9wwf8py\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9wwf8py.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.46 tests/s, 324.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3ktv0mz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3ktv0mz.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006819 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.65 tests/s, 146.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80w0w75g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80w0w75g.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.96 tests/s, 203.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd25rrv55\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd25rrv55.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002944 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    339.67 tests/s, 339.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3y1jshix\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 50691.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_fldca6u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_fldca6u.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.76 tests/s, 315.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return true if a**2 + b**2\
    \ == c**2\n  return true if a**2 + c**2 == b**2\n  return true if b**2 + c**2\
    \ == a**2\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_skc4drc\n\
    Started\n.\nFinished in 0.000315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3174.60 tests/s, 34920.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe91a_8dm\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 48245.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\
    \ || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    return true\n  else\n   \
    \ return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_fhav5fq\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 50228.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == Math.sqrt(b**2\
    \ + c**2) || b == Math.sqrt(a**2 + c**2) || c == Math.sqrt(a**2 + b**2)\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy09ki344\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 50925.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtty859e\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 50691.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfte0j3jo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfte0j3jo.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.80 tests/s, 116.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfsciz8i1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfsciz8i1.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.031197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.05 tests/s, 32.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpig549tnm\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 50000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwr4dklym\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwr4dklym.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.06 tests/s, 315.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: implement me\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprxjg11md\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprxjg11md.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.60 tests/s, 309.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcq5vlkob\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 50458.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ if a**2 == b**2 + c**2\n      return true\n    else\n      return false\n  \
    \  end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n\
    \    else\n      return false\n    end\n  elsif c > a && c > b\n    if c**2 ==\
    \ a**2 + b**2\n      return true\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15rmk5_e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15rmk5_e.rb:36:in\
    \ `test_right_angle_triangle'\n     33:     assert_equal(true, candidate.call(3,\
    \ 4, 5))\n     34:     assert_equal(false, candidate.call(1, 2, 3))\n     35:\
    \     assert_equal(true, candidate.call(10, 6, 8))\n  => 36:     assert_equal(false,\
    \ candidate.call(2, 2, 2))\n     37:     assert_equal(true, candidate.call(7,\
    \ 24, 25))\n     38:     assert_equal(false, candidate.call(10, 5, 7))\n     39:\
    \     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n\
    <nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.003175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.96 tests/s, 1259.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\
    \ || b**2 + c**2 == a**2 || a**2 + c**2 == b**2\n    return true\n  else\n   \
    \ return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_moug8s\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 50228.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n6ta5zm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n6ta5zm.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.25 tests/s, 330.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjra2cxng\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 50228.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3c26_5xt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3c26_5xt.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.47 tests/s, 228.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_2tn03l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_2tn03l.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.82 tests/s, 329.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n\
    \  a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlibjg5t\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 50925.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpebhqutxi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpebhqutxi.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.58 tests/s, 303.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyahncpqf\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 44354.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h90xtf4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h90xtf4.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 320.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f5_woo6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f5_woo6.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.23 tests/s, 332.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2d9ct540\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 45454.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphks5vtay\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphks5vtay.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.37 tests/s, 322.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9z3apm0s\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 47008.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgs841_1m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgs841_1m.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003386 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.33 tests/s, 295.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return false if a <= 0\
    \ || b <= 0 || c <= 0\n  return true if a**2 + b**2 == c**2\n  return true if\
    \ a**2 + c**2 == b**2\n  return true if b**2 + c**2 == a**2\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqjgj4i9\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 47210.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpylv6r8ix\n\
    Started\n.\nFinished in 0.000582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1718.21 tests/s, 18900.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4wq85dt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4wq85dt.rb:21:in\
    \ `test_right_angle_triangle'\n     18:     candidate = method(:right_angle_triangle)\n\
    \     19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n  => 21:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:\
    \     assert_equal(true, candidate.call(7, 24, 25))\n     24:     assert_equal(false,\
    \ candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.48 tests/s, 901.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqtmscyb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqtmscyb.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00386 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.07 tests/s, 259.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp615vnnfy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp615vnnfy.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.06 tests/s, 316.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9uutrxbu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9uutrxbu.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.66 tests/s, 300.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdh51r2yn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdh51r2yn.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.31 tests/s, 323.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6a3wwa87\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6a3wwa87.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.59 tests/s, 319.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvyo39ey\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 46610.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptomau_dw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptomau_dw.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.16 tests/s, 315.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzd41_yg\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 48245.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: return True if\
    \ the three sides form a right-angled triangle, False otherwise\n  if a**2 + b**2\
    \ == c**2\n    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif\
    \ b**2 + c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qefu8g3\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 49773.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n\
    \  c**2 == a**2 + b**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp55kt3gr\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 50000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvi9jnm4u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvi9jnm4u.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.88 tests/s, 170.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqtizrd1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqtizrd1.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.30 tests/s, 81.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e73iro3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e73iro3.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.83 tests/s, 228.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysaoltqt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysaoltqt.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.03 tests/s, 330.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgc355_ms\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 45643.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a**2 + b**2 == c**2)\
    \ || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0g0v9i_0\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 49327.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphmrxte4d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphmrxte4d.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.43 tests/s, 221.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht6fdxna\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 50691.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0k0cefoi\n\
    Started\n.\nFinished in 0.000672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1488.10 tests/s, 16369.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxh9azpks\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 50691.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqsi4a21\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqsi4a21.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.59 tests/s, 319.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphw6ulqus\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphw6ulqus.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.90 tests/s, 305.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwf488174\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwf488174.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.17 tests/s, 216.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr3osbgu_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr3osbgu_.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.72 tests/s, 311.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8us1mg3r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8us1mg3r.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.06 tests/s, 317.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3s4jcduh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3s4jcduh.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.78 tests/s, 270.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfek6z8jm\n\
    Started\n.\nFinished in 0.000506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1976.28 tests/s, 21739.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ildsog5\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 45081.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxqg1kpy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxqg1kpy.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.03 tests/s, 61.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\
    \ || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    return true\n  else\n   \
    \ return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ujx06lh\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 45643.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe97a89vs\n\
    Started\n.\nFinished in 0.033371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    29.97 tests/s, 329.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8739hyvb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8739hyvb.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.023054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.38 tests/s, 43.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbrigvyj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbrigvyj.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.66 tests/s, 315.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq6puuf6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq6puuf6.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.55 tests/s, 327.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dvluy_5\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 54187.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhwe8a2h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhwe8a2h.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.75 tests/s, 182.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4vq3kbn7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4vq3kbn7.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.08 tests/s, 328.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31d8yeo5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31d8yeo5.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.58 tests/s, 326.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj45b61q1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj45b61q1.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.30 tests/s, 302.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgswaspdj\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 48888.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahmx__6m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahmx__6m.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.91 tests/s, 330.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_8u580s\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 48245.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_e4_mgz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_e4_mgz.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.34 tests/s, 305.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinvgog6r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinvgog6r.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.50 tests/s, 312.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkfb8zo5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkfb8zo5.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.18 tests/s, 319.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdtluaqw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdtluaqw.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.58 tests/s, 303.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz17aj206\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz17aj206.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.46 tests/s, 324.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfs8ic9o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfs8ic9o.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.58 tests/s, 100.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppfraof0b\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 51643.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaf8yfxwi\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 51401.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2c4c2m7b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2c4c2m7b.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.27 tests/s, 314.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a**2 + b**2 == c**2\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwyny3xqb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwyny3xqb.rb:17:in\
    \ `test_right_angle_triangle'\n     14:     candidate = method(:right_angle_triangle)\n\
    \     15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n  => 17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n     19:\
    \     assert_equal(true, candidate.call(7, 24, 25))\n     20:     assert_equal(false,\
    \ candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.0037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.27 tests/s, 810.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n\
    \  a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpax95af77\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 51401.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return false if a <= 0\
    \ || b <= 0 || c <= 0\n  return true if a**2 + b**2 == c**2\n  return true if\
    \ a**2 + c**2 == b**2\n  return true if b**2 + c**2 == a**2\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7sx_gkp\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 50458.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpby2mlt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpby2mlt.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.26 tests/s, 326.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmhgk3al\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmhgk3al.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 320.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1a3px6w6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1a3px6w6.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.88 tests/s, 318.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqv_ohjt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqv_ohjt.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.33 tests/s, 327.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfz2bhh_z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfz2bhh_z.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002995 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.89 tests/s, 333.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4n1kfslx\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 47413.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptspalfc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptspalfc.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    348.07 tests/s, 348.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplsd2d5id\n\
    Started\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplsd2d5id.rb:15:in\
    \ `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n\
    \  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    374.53 tests/s, 374.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
