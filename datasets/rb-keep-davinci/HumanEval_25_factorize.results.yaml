name: HumanEval_25_factorize
language: ruby
results:
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmply5q2x_3\nStarted\n.\nFinished in 0.00035045 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2853.47 tests/s, 22827.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv0y6jin2\nStarted\n.\nFinished in 0.000434527 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2301.35 tests/s, 18410.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqs_zf_rj\nStarted\n.\nFinished in 0.000353385 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2829.77 tests/s, 22638.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk07tk_u0\nStarted\n.\nFinished in 0.000357493 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2797.26 tests/s, 22378.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbfuj2qao\nStarted\n.\nFinished in 0.019432017 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    51.46 tests/s, 411.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsdwlkqui\nStarted\n.\nFinished in 0.000349036 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2865.03 tests/s, 22920.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmv5_a7tf\nStarted\n.\nFinished in 0.000349127 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2864.29 tests/s, 22914.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpamt92wz1\nStarted\n.\nFinished in 0.000401515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2490.57 tests/s, 19924.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5xdckrzg\nStarted\n.\nFinished in 0.00041457 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2412.14 tests/s, 19297.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph3ach6ih\nStarted\n.\nFinished in 0.000484601 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2063.55 tests/s, 16508.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq2f68ffw\nStarted\n.\nFinished in 0.000373031 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2680.74 tests/s, 21445.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz_5fv25u\nStarted\n.\nFinished in 0.000351612 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2844.04 tests/s, 22752.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps3uy1x2c\nStarted\n.\nFinished in 0.000347383 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2878.67 tests/s, 23029.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd6qectey\nStarted\n.\nFinished in 0.000394152 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2537.09 tests/s, 20296.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi2oue3ef\nStarted\n.\nFinished in 0.000415922 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2404.30 tests/s, 19234.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphb_rl77g\nStarted\n.\nFinished in 0.00044711 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2236.59 tests/s, 17892.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4aizhxdd\nStarted\n.\nFinished in 0.00045248 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2210.04 tests/s, 17680.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfnf06umy\nStarted\n.\nFinished in 0.000392889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2545.25 tests/s, 20361.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n % 2 == 0\n    factors << 2\n    n /= 2\n  end\n  factor = 3\n  while\
    \ n > 1\n    while n % factor == 0\n      factors << factor\n      n /= factor\n\
    \    end\n    factor += 2\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjs40tnnw\nStarted\n.\nFinished in 0.000403098 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2480.79 tests/s, 19846.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2p0zmu8c\nStarted\n.\nFinished in 0.000365006 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2739.68 tests/s, 21917.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr7opr40r\nStarted\n.\nFinished in 0.000366159 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2731.05 tests/s, 21848.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj64zdqct\nStarted\n.\nFinished in 0.000360639 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2772.86 tests/s, 22182.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc3_kjgkz\nStarted\n.\nFinished in 0.000387699 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2579.32 tests/s, 20634.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppmpij4xt\nStarted\n.\nFinished in 0.000428706 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2332.60 tests/s, 18660.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp21wctxvd\nStarted\n.\nFinished in 0.000365407 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2736.67 tests/s, 21893.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  factor = 2\n  while n > 1\n    while n % factor == 0\n      factors << factor\n\
    \      n /= factor\n    end\n    factor += 1\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk2hoy6u3\nStarted\n.\nFinished in 0.000386988 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2584.06 tests/s, 20672.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6b1qbs7b\nStarted\n.\nFinished in 0.000370207 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2701.19 tests/s, 21609.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzfhj_3_y\nStarted\n.\nFinished in 0.000366369 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2729.49 tests/s, 21835.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp81gciuez\nStarted\n.\nFinished in 0.000343144 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2914.23 tests/s, 23313.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  prime_factors = []\n  (2..n).each do |i|\n    if n % i == 0\n      factors\
    \ << i\n      n /= i\n      i -= 1\n    end\n  end\n  factors.each do |factor|\n\
    \    prime_factors << factor if prime?(factor)\n  end\n  prime_factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnk4xs9e4\nStarted\nE\n===============================================================================\n\
    Error: test_factorize(TestHumanEval): NoMethodError: undefined method `prime?'\
    \ for #<TestHumanEval:0x00005651f3bfb030>\n/tmp/tmpnk4xs9e4.rb:21:in `block in\
    \ factorize'\n/tmp/tmpnk4xs9e4.rb:20:in `each'\n/tmp/tmpnk4xs9e4.rb:20:in `factorize'\n\
    /tmp/tmpnk4xs9e4.rb:29:in `call'\n/tmp/tmpnk4xs9e4.rb:29:in `test_factorize'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_factorize\n\
    \     28:     candidate = method(:factorize)\n  => 29:     assert_equal([2], candidate.call(2))\n\
    \     30:     assert_equal([2, 2], candidate.call(4))\n     31:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     32:     assert_equal([3, 19], candidate.call(57))\n\
    ===============================================================================\n\
    \nFinished in 0.005606932 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.35 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppgvuyx11\nStarted\n.\nFinished in 0.000379975 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2631.75 tests/s, 21054.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpepg11occ\nStarted\n.\nFinished in 0.000372501 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2684.56 tests/s, 21476.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphsy0d3r5\nStarted\n.\nFinished in 0.00042001 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2380.90 tests/s, 19047.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfickt3kd\nStarted\n.\nFinished in 0.000345449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2894.78 tests/s, 23158.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ssbvbv_\nStarted\n.\nFinished in 0.00037755 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2648.66 tests/s, 21189.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # TODO: return\
    \ list of prime factors of given integer in the order from smallest to largest\n\
    \  factors = []\n  factor = 2\n  while n > 1\n    while n % factor == 0\n    \
    \  factors << factor\n      n /= factor\n    end\n    factor += 1\n  end\n  factors\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps8t1a7va\nStarted\n.\nFinished in 0.000375396 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2663.85 tests/s, 21310.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # TODO: implement\
    \ me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpinkkjwie\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmpinkkjwie.rb:17:in `test_factorize'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_factorize\n\
    \     16:     candidate = method(:factorize)\n  => 17:     assert_equal([2], candidate.call(2))\n\
    \     18:     assert_equal([2, 2], candidate.call(4))\n     19:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     20:     assert_equal([3, 19], candidate.call(57))\n\
    <[2]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004875548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.11 tests/s, 205.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpksa1xx0g\nStarted\n.\nFinished in 0.000374184 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2672.48 tests/s, 21379.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfjpemz0u\nStarted\n.\nFinished in 0.000482056 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2074.45 tests/s, 16595.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # TODO: implement\
    \ me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8sicj92n\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmp8sicj92n.rb:17:in `test_factorize'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_factorize\n\
    \     16:     candidate = method(:factorize)\n  => 17:     assert_equal([2], candidate.call(2))\n\
    \     18:     assert_equal([2, 2], candidate.call(4))\n     19:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     20:     assert_equal([3, 19], candidate.call(57))\n\
    <[2]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007323189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.55 tests/s, 136.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmf4zvhzy\nStarted\n.\nFinished in 0.000370026 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2702.51 tests/s, 21620.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsavr9jej\nStarted\n.\nFinished in 0.000367381 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2721.97 tests/s, 21775.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy6682lhx\nStarted\n.\nFinished in 0.000384974 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2597.58 tests/s, 20780.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeg7ata0f\nStarted\n.\nFinished in 0.000373142 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2679.94 tests/s, 21439.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3s59a5l_\nStarted\n.\nFinished in 0.000371268 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2693.47 tests/s, 21547.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb9m3q9qn\nStarted\n.\nFinished in 0.000385585 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2593.46 tests/s, 20747.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      result << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvi80y5lr\nStarted\n.\nFinished in 0.000364666 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2742.24 tests/s, 21937.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxse_ksj_\nStarted\n.\nFinished in 0.000490393 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2039.18 tests/s, 16313.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8xxgscvl\nStarted\n.\nFinished in 0.000580492 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1722.68 tests/s, 13781.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_ob92_j8\nStarted\n.\nFinished in 0.00037827 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2643.61 tests/s, 21148.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgalkeoqo\nStarted\n.\nFinished in 0.000410893 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2433.72 tests/s, 19469.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcrjqw9ab\nStarted\n.\nFinished in 0.000351521 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2844.78 tests/s, 22758.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplkiumwqt\nStarted\n.\nFinished in 0.000355128 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2815.89 tests/s, 22527.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp31jul7z5\nStarted\n.\nFinished in 0.019506327 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    51.27 tests/s, 410.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5d_zfyr5\nStarted\n.\nFinished in 0.000381868 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2618.71 tests/s, 20949.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  factor = 2\n  while n > 1\n    while n % factor == 0\n      factors << factor\n\
    \      n /= factor\n    end\n    factor += 1\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd5y4pv1i\nStarted\n.\nFinished in 0.000362241 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2760.59 tests/s, 22084.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjijo5oy_\nStarted\n.\nFinished in 0.019590775 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    51.04 tests/s, 408.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwuu8ruvw\nStarted\n.\nFinished in 0.000380606 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2627.39 tests/s, 21019.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      result << i\n      n /= i\n\
    \    end\n    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl0vynbpm\nStarted\n.\nFinished in 0.000363603 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2750.25 tests/s, 22002.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvz57fkxd\nStarted\n.\nFinished in 0.000373111 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2680.17 tests/s, 21441.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd_j1y1nr\nStarted\n.\nFinished in 0.019668132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    50.84 tests/s, 406.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpybtrua48\nStarted\n.\nFinished in 0.000536578 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1863.66 tests/s, 14909.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpen30p96_\nStarted\n.\nFinished in 0.000352783 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2834.60 tests/s, 22676.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6h23b5zh\nStarted\n.\nFinished in 0.000349016 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2865.20 tests/s, 22921.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_top3zej\nStarted\n.\nFinished in 0.000382931 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2611.44 tests/s, 20891.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  prime_numbers = []\n  (2..n).each do |i|\n    if n % i == 0\n      prime_numbers\
    \ << i\n      n /= i\n      i -= 1\n    end\n  end\n  prime_numbers.each do |i|\n\
    \    factors << i\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpr08lp4zz\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmpr08lp4zz.rb:30:in `test_factorize'\n\
    \     27:   def test_factorize\n     28:     candidate = method(:factorize)\n\
    \     29:     assert_equal([2], candidate.call(2))\n  => 30:     assert_equal([2,\
    \ 2], candidate.call(4))\n     31:     assert_equal([2, 2, 2], candidate.call(8))\n\
    \     32:     assert_equal([3, 19], candidate.call(57))\n     33:     assert_equal([3,\
    \ 3, 19, 19], candidate.call(3249))\n<[2, 2]> expected but was\n<[2]>\n\ndiff:\n\
    ? [2, 2]\n===============================================================================\n\
    \nFinished in 0.004889093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.54 tests/s, 409.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu9drid8f\nStarted\n.\nFinished in 0.000371209 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2693.90 tests/s, 21551.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_6i3evz0\nStarted\n.\nFinished in 0.024216594 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    41.29 tests/s, 330.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprx0j00ld\nStarted\n.\nFinished in 0.000355628 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2811.93 tests/s, 22495.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpblevqeh4\nStarted\n.\nFinished in 0.000384132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2603.27 tests/s, 20826.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6lbe_u9w\nStarted\n.\nFinished in 0.000373713 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2675.85 tests/s, 21406.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppped0mj_\nStarted\n.\nFinished in 0.000426251 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2346.04 tests/s, 18768.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt2x6v7r7\nStarted\n.\nFinished in 0.000426952 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2342.18 tests/s, 18737.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyjb0r8pw\nStarted\n.\nFinished in 0.000417475 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2395.35 tests/s, 19162.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp51jvbvpr\nStarted\n.\nFinished in 0.000385946 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2591.04 tests/s, 20728.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8991u7hh\nStarted\n.\nFinished in 0.000413537 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2418.16 tests/s, 19345.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcuk8jrc9\nStarted\n.\nFinished in 0.000412436 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2424.62 tests/s, 19396.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps3trbiyw\nStarted\n.\nFinished in 0.000381006 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2624.63 tests/s, 20997.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpta8yjzl4\nStarted\n.\nFinished in 0.000349358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2862.39 tests/s, 22899.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuxd9w6_x\nStarted\n.\nFinished in 0.00039332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2542.46 tests/s, 20339.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3ypa10pn\nStarted\n.\nFinished in 0.000360808 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2771.56 tests/s, 22172.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbm415504\nStarted\n.\nFinished in 0.000362732 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2756.86 tests/s, 22054.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp37n8mckg\nStarted\n.\nFinished in 0.000377068 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2652.04 tests/s, 21216.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ccjqkm6\nStarted\n.\nFinished in 0.000375876 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2660.45 tests/s, 21283.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n % 2 == 0\n    factors << 2\n    n /= 2\n  end\n  i = 3\n  while i <=\
    \ n\n    while n % i == 0\n      factors << i\n      n /= i\n    end\n    i +=\
    \ 2\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_prd8a31\nStarted\n.\nFinished in 0.000347513 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2877.59 tests/s, 23020.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbbuiicjq\nStarted\n.\nFinished in 0.000491684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2033.83 tests/s, 16270.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        result <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3ej2n8oo\nStarted\n.\nFinished in 0.000386928 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2584.46 tests/s, 20675.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv7xhudn4\nStarted\n.\nFinished in 0.000353895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2825.70 tests/s, 22605.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuaji0ey_\nStarted\n.\nFinished in 0.000360457 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2774.26 tests/s, 22194.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuu8lwkzb\nStarted\n.\nFinished in 0.000360949 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2770.47 tests/s, 22163.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg0ubaivd\nStarted\n.\nFinished in 0.000399241 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2504.75 tests/s, 20038.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps5qrhwyd\nStarted\n.\nFinished in 0.000337264 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2965.04 tests/s, 23720.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk2qme4pr\nStarted\n.\nFinished in 0.019307824 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    51.79 tests/s, 414.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5z0pgmoo\nStarted\n.\nFinished in 0.000399001 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2506.26 tests/s, 20050.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1itfs4_r\nStarted\n.\nFinished in 0.000371258 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2693.54 tests/s, 21548.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpthjf8u_s\nStarted\n.\nFinished in 0.000476345 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2099.32 tests/s, 16794.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n % 2 == 0\n    factors << 2\n    n /= 2\n  end\n  i = 3\n  while i <=\
    \ n\n    while n % i == 0\n      factors << i\n      n /= i\n    end\n    i +=\
    \ 2\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5fce27vo\nStarted\n.\nFinished in 0.000374313 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2671.56 tests/s, 21372.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkxopwy8n\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmpkxopwy8n.rb:17:in `test_factorize'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_factorize\n\
    \     16:     candidate = method(:factorize)\n  => 17:     assert_equal([2], candidate.call(2))\n\
    \     18:     assert_equal([2, 2], candidate.call(4))\n     19:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     20:     assert_equal([3, 19], candidate.call(57))\n\
    <[2]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004659351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.62 tests/s, 214.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpar7l62h2\nStarted\n.\nFinished in 0.000361249 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2768.17 tests/s, 22145.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzmqzfuj_\nStarted\n.\nFinished in 0.000402476 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2484.62 tests/s, 19876.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj988fokk\nStarted\n.\nFinished in 0.000387238 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2582.39 tests/s, 20659.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfi6kz29j\nStarted\n.\nFinished in 0.00036752 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2720.94 tests/s, 21767.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplxe53lan\nStarted\n.\nFinished in 0.000423897 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2359.06 tests/s, 18872.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp6d9own7\nStarted\n.\nFinished in 0.00037218 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2686.87 tests/s, 21494.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwawvzzo8\nStarted\n.\nFinished in 0.000362421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2759.22 tests/s, 22073.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwycdt5xu\nStarted\n.\nFinished in 0.000394582 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2534.33 tests/s, 20274.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1v4xrxnl\nStarted\n.\nFinished in 0.000407907 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2451.54 tests/s, 19612.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      result << i\n      n /= i\n\
    \    end\n    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo07cdc8f\nStarted\n.\nFinished in 0.000383071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2610.48 tests/s, 20883.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3w_rtrxm\nStarted\n.\nFinished in 0.000391616 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2553.52 tests/s, 20428.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprvj5w6kr\nStarted\n.\nFinished in 0.000364656 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2742.31 tests/s, 21938.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvrocwneg\nStarted\n.\nFinished in 0.000374684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2668.92 tests/s, 21351.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_zni2mlg\nStarted\n.\nFinished in 0.000356861 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2802.21 tests/s, 22417.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n % 2 == 0\n    factors << 2\n    n /= 2\n  end\n  i = 3\n  while i <=\
    \ n\n    while n % i == 0\n      factors << i\n      n /= i\n    end\n    i +=\
    \ 2\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5iymupjb\nStarted\n.\nFinished in 0.000345028 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2898.32 tests/s, 23186.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa7uecuwh\nStarted\n.\nFinished in 0.000390505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2560.79 tests/s, 20486.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkixp95rq\nStarted\n.\nFinished in 0.00035074 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2851.11 tests/s, 22808.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx7dsmgtb\nStarted\n.\nFinished in 0.000373082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2680.38 tests/s, 21443.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptj0jcn2t\nStarted\n.\nFinished in 0.000477247 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2095.35 tests/s, 16762.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2d8jmprh\nStarted\n.\nFinished in 0.000369445 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2706.76 tests/s, 21654.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz73nza39\nStarted\n.\nFinished in 0.000360358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2775.02 tests/s, 22200.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph5_szrak\nStarted\n.\nFinished in 0.000558771 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1789.64 tests/s, 14317.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmputwyr475\nStarted\n.\nFinished in 0.019632203 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    50.94 tests/s, 407.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsl6tpmi6\nStarted\n.\nFinished in 0.000450978 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2217.40 tests/s, 17739.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3_6i1rns\nStarted\n.\nFinished in 0.000350599 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2852.26 tests/s, 22818.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj45s8ie6\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmpj45s8ie6.rb:17:in `test_factorize'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_factorize\n\
    \     16:     candidate = method(:factorize)\n  => 17:     assert_equal([2], candidate.call(2))\n\
    \     18:     assert_equal([2, 2], candidate.call(4))\n     19:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     20:     assert_equal([3, 19], candidate.call(57))\n\
    <[2]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005049344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.05 tests/s, 198.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpejo7z_1b\nStarted\n.\nFinished in 0.000347023 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2881.65 tests/s, 23053.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      result << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8iu89yo3\nStarted\n.\nFinished in 0.000427324 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2340.14 tests/s, 18721.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkfm5cuzv\nStarted\n.\nFinished in 0.000370958 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2695.72 tests/s, 21565.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5l554czm\nStarted\n.\nFinished in 0.01985352 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    50.37 tests/s, 402.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxrdiq6jz\nStarted\n.\nFinished in 0.0004942 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2023.47 tests/s, 16187.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfldlw8z1\nStarted\n.\nFinished in 0.000416072 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2403.43 tests/s, 19227.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfnaw9vty\nStarted\n.\nFinished in 0.000391166 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2556.46 tests/s, 20451.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyzgblsxd\nStarted\n.\nFinished in 0.000367301 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2722.56 tests/s, 21780.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    if n % i == 0\n      factors << i\n      n /= i\n \
    \     redo\n    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz9vz_t8n\nStarted\n.\nFinished in 0.019409235 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    51.52 tests/s, 412.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf8sq_c1v\nStarted\n.\nFinished in 0.000429568 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2327.92 tests/s, 18623.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # TODO: return\
    \ list of prime factors of given integer in the order from smallest to largest\n\
    \  factors = []\n  i = 2\n  while i <= n\n    if n % i == 0\n      factors <<\
    \ i\n      n /= i\n    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbtporpao\nStarted\n.\nFinished in 0.000339589 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2944.74 tests/s, 23557.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0hdh97qm\nStarted\n.\nFinished in 0.000390465 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2561.05 tests/s, 20488.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo89sh8od\nStarted\n.\nFinished in 0.000438714 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2279.39 tests/s, 18235.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n % 2 == 0\n    factors << 2\n    n /= 2\n  end\n  i = 3\n  while i <=\
    \ n\n    while n % i == 0\n      factors << i\n      n /= i\n    end\n    i +=\
    \ 2\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfcwt3907\nStarted\n.\nFinished in 0.000382779 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2612.47 tests/s, 20899.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmjcn0v9u\nStarted\n.\nFinished in 0.000498728 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2005.10 tests/s, 16040.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpth5ykasr\nStarted\n.\nFinished in 0.000360969 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2770.32 tests/s, 22162.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnfrre71y\nStarted\n.\nFinished in 0.000412956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2421.57 tests/s, 19372.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt0eq0zjg\nStarted\n.\nFinished in 0.000357793 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2794.91 tests/s, 22359.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    if n % i == 0\n      factors << i\n      n /= i\n \
    \     redo\n    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeu541vhj\nStarted\n.\nFinished in 0.018596245 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    53.77 tests/s, 430.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwgdux6t3\nStarted\n.\nFinished in 0.000358094 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2792.56 tests/s, 22340.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt6uhpuo8\nStarted\n.\nFinished in 0.000351531 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2844.70 tests/s, 22757.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpet8rngki\nStarted\n.\nFinished in 0.000395955 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2525.54 tests/s, 20204.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # TODO: return\
    \ list of prime factors of given integer in the order from smallest to largest\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzsx7mkgq\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmpzsx7mkgq.rb:17:in `test_factorize'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_factorize\n\
    \     16:     candidate = method(:factorize)\n  => 17:     assert_equal([2], candidate.call(2))\n\
    \     18:     assert_equal([2, 2], candidate.call(4))\n     19:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     20:     assert_equal([3, 19], candidate.call(57))\n\
    <[2]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005374525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.06 tests/s, 186.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5ilou1y7\nStarted\n.\nFinished in 0.000502505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1990.03 tests/s, 15920.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp324n4l9p\nStarted\n.\nFinished in 0.000346091 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2889.41 tests/s, 23115.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpszvfe9tk\nStarted\n.\nFinished in 0.000374184 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2672.48 tests/s, 21379.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1a_7s5bx\nStarted\n.\nFinished in 0.000387478 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2580.79 tests/s, 20646.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc681tagv\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmpc681tagv.rb:17:in `test_factorize'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_factorize\n\
    \     16:     candidate = method(:factorize)\n  => 17:     assert_equal([2], candidate.call(2))\n\
    \     18:     assert_equal([2, 2], candidate.call(4))\n     19:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     20:     assert_equal([3, 19], candidate.call(57))\n\
    <[2]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004735254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.18 tests/s, 211.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp359rz8h_\nStarted\n.\nFinished in 0.000333166 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3001.51 tests/s, 24012.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd512nvz7\nStarted\n.\nFinished in 0.000379835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2632.72 tests/s, 21061.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkgeivddv\nStarted\n.\nFinished in 0.000401685 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2489.51 tests/s, 19916.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvr7z0lxd\nStarted\n.\nFinished in 0.000394271 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2536.33 tests/s, 20290.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaz46iwve\nStarted\n.\nFinished in 0.000384562 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2600.36 tests/s, 20802.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptfs6wtno\nStarted\n.\nFinished in 0.000390484 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2560.92 tests/s, 20487.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplggm4pu7\nStarted\n.\nFinished in 0.000375536 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2662.86 tests/s, 21302.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # TODO: return\
    \ list of prime factors of given integer in the order from smallest to largest\n\
    \  # TODO: each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization\n  # TODO: input number should\
    \ be equal to the product of all factors\n  # TODO: raise ArgumentError if n is\
    \ less or equal to 0\n  # HINT: use prime_factors_mult method from the previous\
    \ task\n  raise ArgumentError if n <= 0\n  prime_factors_mult(n).map { |factor,\
    \ count| [factor] * count }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpnn5a1bva\nStarted\nE\n===============================================================================\n\
    Error: test_factorize(TestHumanEval): NoMethodError: undefined method `prime_factors_mult'\
    \ for #<TestHumanEval:0x0000561d25fd2e90>\n/tmp/tmpnn5a1bva.rb:17:in `factorize'\n\
    /tmp/tmpnn5a1bva.rb:23:in `call'\n/tmp/tmpnn5a1bva.rb:23:in `test_factorize'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_factorize\n\
    \     22:     candidate = method(:factorize)\n  => 23:     assert_equal([2], candidate.call(2))\n\
    \     24:     assert_equal([2, 2], candidate.call(4))\n     25:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     26:     assert_equal([3, 19], candidate.call(57))\n\
    ===============================================================================\n\
    \nFinished in 0.012007397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.28 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt3ayjdqa\nStarted\n.\nFinished in 0.000393109 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2543.82 tests/s, 20350.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa96m4xra\nStarted\n.\nFinished in 0.000346782 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2883.66 tests/s, 23069.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpszymevek\nStarted\n.\nFinished in 0.000389752 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2565.73 tests/s, 20525.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdq_43uxx\nStarted\n.\nFinished in 0.000350109 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2856.25 tests/s, 22850.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp_rbnnz6\nStarted\n.\nFinished in 0.00036208 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2761.82 tests/s, 22094.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7gslgyfl\nStarted\n.\nFinished in 0.000343525 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2911.00 tests/s, 23287.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3ilaee5v\nStarted\n.\nFinished in 0.000377069 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2652.03 tests/s, 21216.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2bpm1rxq\nStarted\n.\nFinished in 0.000446921 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2237.53 tests/s, 17900.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5x9u_ijy\nStarted\n.\nFinished in 0.000352673 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2835.49 tests/s, 22683.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp3nmgb81\nStarted\n.\nFinished in 0.000397156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2517.90 tests/s, 20143.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc0t3w0y9\nStarted\n.\nFinished in 0.000342003 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2923.95 tests/s, 23391.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    while n % i == 0\n      result << i\n      n /= i\n\
    \    end\n    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n\
    \    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n\
    \    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n\
    \    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3,\
    \ 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19],\
    \ candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3l6z82ii\nStarted\n.\nFinished in 0.000382178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2616.58 tests/s, 20932.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmirzbrzf\nStarted\n.\nFinished in 0.000349878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2858.14 tests/s, 22865.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc2eitpij\nStarted\n.\nFinished in 0.020413813 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    48.99 tests/s, 391.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb41m3yy6\nStarted\n.\nFinished in 0.000396494 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2522.11 tests/s, 20176.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      result << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9d8o0sk3\nStarted\n.\nFinished in 0.000357964 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2793.58 tests/s, 22348.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqiio6v4m\nStarted\n.\nFinished in 0.000323358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3092.55 tests/s, 24740.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxv39zpf_\nStarted\n.\nFinished in 0.000370115 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2701.86 tests/s, 21614.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpawo2zljc\nStarted\n.\nFinished in 0.000357362 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2798.28 tests/s, 22386.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # TODO: implement\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz633qv7b\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmpz633qv7b.rb:17:in `test_factorize'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_factorize\n\
    \     16:     candidate = method(:factorize)\n  => 17:     assert_equal([2], candidate.call(2))\n\
    \     18:     assert_equal([2, 2], candidate.call(4))\n     19:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     20:     assert_equal([3, 19], candidate.call(57))\n\
    <[2]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004818932 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.51 tests/s, 207.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdr1o6qgo\nStarted\n.\nFinished in 0.000394632 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2534.01 tests/s, 20272.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvjpc236j\nStarted\n.\nFinished in 0.00036746 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2721.38 tests/s, 21771.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw1pbl5bd\nStarted\n.\nFinished in 0.000408338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2448.95 tests/s, 19591.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpogoarbit\nStarted\n.\nFinished in 0.000450607 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2219.23 tests/s, 17753.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n      n /= i\n\
    \    end\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6w_32fsc\nStarted\n.\nFinished in 0.019051041 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    52.49 tests/s, 419.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphk9l9lf6\nStarted\n.\nFinished in 0.000376878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2653.38 tests/s, 21227.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl1eio2cp\nStarted\n.\nFinished in 0.000430038 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2325.38 tests/s, 18603.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq26lt0dn\nStarted\n.\nFinished in 0.00037779 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2646.97 tests/s, 21175.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmb6ze7fu\nStarted\n.\nFinished in 0.000369996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2702.73 tests/s, 21621.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors <<\
    \ i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnrqc_v0p\nStarted\n.\nFinished in 0.000495982 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2016.20 tests/s, 16129.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz72np10k\nStarted\n.\nFinished in 0.000389733 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2565.86 tests/s, 20526.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  result = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      result << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmperj7uplb\nStarted\n.\nFinished in 0.000354656 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2819.63 tests/s, 22557.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc4_89s88\nStarted\n.\nFinished in 0.000380376 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2628.98 tests/s, 21031.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpedi71z5u\nStarted\n.\nFinished in 0.000395814 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2526.44 tests/s, 20211.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf6w_acwv\nStarted\n.\nFinished in 0.000333778 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2996.00 tests/s, 23968.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # TODO: implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp274_v157\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmp274_v157.rb:17:in `test_factorize'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_factorize\n\
    \     16:     candidate = method(:factorize)\n  => 17:     assert_equal([2], candidate.call(2))\n\
    \     18:     assert_equal([2, 2], candidate.call(4))\n     19:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     20:     assert_equal([3, 19], candidate.call(57))\n\
    <[2]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00454143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.19 tests/s, 220.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  while n % 2 == 0\n    factors << 2\n    n /= 2\n  end\n  i = 3\n  while i <=\
    \ n\n    while n % i == 0\n      factors << i\n      n /= i\n    end\n    i +=\
    \ 2\n  end\n  factors\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2],\
    \ candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2,\
    \ 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n \
    \   assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3,\
    \ 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n\
    \    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpepqo34s6\nStarted\n.\nFinished in 0.000354948 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2817.31 tests/s, 22538.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
    \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
    \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
    \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpulrnewu_\nStarted\nF\n===============================================================================\n\
    Failure: test_factorize(TestHumanEval)\n/tmp/tmpulrnewu_.rb:17:in `test_factorize'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_factorize\n\
    \     16:     candidate = method(:factorize)\n  => 17:     assert_equal([2], candidate.call(2))\n\
    \     18:     assert_equal([2, 2], candidate.call(4))\n     19:     assert_equal([2,\
    \ 2, 2], candidate.call(8))\n     20:     assert_equal([3, 19], candidate.call(57))\n\
    <[2]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004280478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.62 tests/s, 233.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp46klj2t5\nStarted\n.\nFinished in 0.000340489 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2936.95 tests/s, 23495.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n# Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n# Input number should be equal\
    \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
    # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n  factors = []\n\
    \  i = 2\n  while n > 1\n    if n % i == 0\n      factors << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate\
    \ = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2,\
    \ 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n   \
    \ assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
    \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
    \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
    \ 3, 3], candidate.call(18))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv7_4v84f\nStarted\n.\nFinished in 0.000329258 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3037.13 tests/s, 24297.06 assertions/s\n"
  exit_code: 0
  status: OK
